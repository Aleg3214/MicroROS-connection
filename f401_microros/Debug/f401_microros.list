
f401_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f4  08016758  08016758  00026758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801794c  0801794c  00030860  2**0
                  CONTENTS
  4 .ARM          00000008  0801794c  0801794c  0002794c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017954  08017954  00030860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017954  08017954  00027954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017960  08017960  00027960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000860  20000000  08017964  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010bac  20000860  080181c4  00030860  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001140c  080181c4  0003140c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030860  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00030890  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bc3b  00000000  00000000  00030906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042a3  00000000  00000000  0004c541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  000507e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000115c  00000000  00000000  00051e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d332  00000000  00000000  00052fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e59b  00000000  00000000  0007030e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a875a  00000000  00000000  0008e8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b3c  00000000  00000000  00137004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000860 	.word	0x20000860
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016740 	.word	0x08016740

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000864 	.word	0x20000864
 80001dc:	08016740 	.word	0x08016740

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ce:	f000 b9bb 	b.w	8000648 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b970 	b.w	8000648 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9e08      	ldr	r6, [sp, #32]
 8000386:	460d      	mov	r5, r1
 8000388:	4604      	mov	r4, r0
 800038a:	460f      	mov	r7, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4694      	mov	ip, r2
 8000394:	d965      	bls.n	8000462 <__udivmoddi4+0xe2>
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	b143      	cbz	r3, 80003ae <__udivmoddi4+0x2e>
 800039c:	fa02 fc03 	lsl.w	ip, r2, r3
 80003a0:	f1c3 0220 	rsb	r2, r3, #32
 80003a4:	409f      	lsls	r7, r3
 80003a6:	fa20 f202 	lsr.w	r2, r0, r2
 80003aa:	4317      	orrs	r7, r2
 80003ac:	409c      	lsls	r4, r3
 80003ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b2:	fa1f f58c 	uxth.w	r5, ip
 80003b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ba:	0c22      	lsrs	r2, r4, #16
 80003bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003c4:	fb01 f005 	mul.w	r0, r1, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003d4:	f080 811c 	bcs.w	8000610 <__udivmoddi4+0x290>
 80003d8:	4290      	cmp	r0, r2
 80003da:	f240 8119 	bls.w	8000610 <__udivmoddi4+0x290>
 80003de:	3902      	subs	r1, #2
 80003e0:	4462      	add	r2, ip
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f2:	fb00 f505 	mul.w	r5, r0, r5
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d90a      	bls.n	8000410 <__udivmoddi4+0x90>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000402:	f080 8107 	bcs.w	8000614 <__udivmoddi4+0x294>
 8000406:	42a5      	cmp	r5, r4
 8000408:	f240 8104 	bls.w	8000614 <__udivmoddi4+0x294>
 800040c:	4464      	add	r4, ip
 800040e:	3802      	subs	r0, #2
 8000410:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	2100      	movs	r1, #0
 8000418:	b11e      	cbz	r6, 8000422 <__udivmoddi4+0xa2>
 800041a:	40dc      	lsrs	r4, r3
 800041c:	2300      	movs	r3, #0
 800041e:	e9c6 4300 	strd	r4, r3, [r6]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0xbc>
 800042a:	2e00      	cmp	r6, #0
 800042c:	f000 80ed 	beq.w	800060a <__udivmoddi4+0x28a>
 8000430:	2100      	movs	r1, #0
 8000432:	e9c6 0500 	strd	r0, r5, [r6]
 8000436:	4608      	mov	r0, r1
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	fab3 f183 	clz	r1, r3
 8000440:	2900      	cmp	r1, #0
 8000442:	d149      	bne.n	80004d8 <__udivmoddi4+0x158>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d302      	bcc.n	800044e <__udivmoddi4+0xce>
 8000448:	4282      	cmp	r2, r0
 800044a:	f200 80f8 	bhi.w	800063e <__udivmoddi4+0x2be>
 800044e:	1a84      	subs	r4, r0, r2
 8000450:	eb65 0203 	sbc.w	r2, r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	4617      	mov	r7, r2
 8000458:	2e00      	cmp	r6, #0
 800045a:	d0e2      	beq.n	8000422 <__udivmoddi4+0xa2>
 800045c:	e9c6 4700 	strd	r4, r7, [r6]
 8000460:	e7df      	b.n	8000422 <__udivmoddi4+0xa2>
 8000462:	b902      	cbnz	r2, 8000466 <__udivmoddi4+0xe6>
 8000464:	deff      	udf	#255	; 0xff
 8000466:	fab2 f382 	clz	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 8090 	bne.w	8000590 <__udivmoddi4+0x210>
 8000470:	1a8a      	subs	r2, r1, r2
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	2101      	movs	r1, #1
 800047c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000480:	fb07 2015 	mls	r0, r7, r5, r2
 8000484:	0c22      	lsrs	r2, r4, #16
 8000486:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800048a:	fb0e f005 	mul.w	r0, lr, r5
 800048e:	4290      	cmp	r0, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x124>
 8000492:	eb1c 0202 	adds.w	r2, ip, r2
 8000496:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x122>
 800049c:	4290      	cmp	r0, r2
 800049e:	f200 80cb 	bhi.w	8000638 <__udivmoddi4+0x2b8>
 80004a2:	4645      	mov	r5, r8
 80004a4:	1a12      	subs	r2, r2, r0
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ac:	fb07 2210 	mls	r2, r7, r0, r2
 80004b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004b4:	fb0e fe00 	mul.w	lr, lr, r0
 80004b8:	45a6      	cmp	lr, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x14e>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x14c>
 80004c6:	45a6      	cmp	lr, r4
 80004c8:	f200 80bb 	bhi.w	8000642 <__udivmoddi4+0x2c2>
 80004cc:	4610      	mov	r0, r2
 80004ce:	eba4 040e 	sub.w	r4, r4, lr
 80004d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004d6:	e79f      	b.n	8000418 <__udivmoddi4+0x98>
 80004d8:	f1c1 0720 	rsb	r7, r1, #32
 80004dc:	408b      	lsls	r3, r1
 80004de:	fa22 fc07 	lsr.w	ip, r2, r7
 80004e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004e6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ea:	fa20 f307 	lsr.w	r3, r0, r7
 80004ee:	40fd      	lsrs	r5, r7
 80004f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004f4:	4323      	orrs	r3, r4
 80004f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004fa:	fa1f fe8c 	uxth.w	lr, ip
 80004fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000502:	0c1c      	lsrs	r4, r3, #16
 8000504:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000508:	fb08 f50e 	mul.w	r5, r8, lr
 800050c:	42a5      	cmp	r5, r4
 800050e:	fa02 f201 	lsl.w	r2, r2, r1
 8000512:	fa00 f001 	lsl.w	r0, r0, r1
 8000516:	d90b      	bls.n	8000530 <__udivmoddi4+0x1b0>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000520:	f080 8088 	bcs.w	8000634 <__udivmoddi4+0x2b4>
 8000524:	42a5      	cmp	r5, r4
 8000526:	f240 8085 	bls.w	8000634 <__udivmoddi4+0x2b4>
 800052a:	f1a8 0802 	sub.w	r8, r8, #2
 800052e:	4464      	add	r4, ip
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	b29d      	uxth	r5, r3
 8000534:	fbb4 f3f9 	udiv	r3, r4, r9
 8000538:	fb09 4413 	mls	r4, r9, r3, r4
 800053c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000540:	fb03 fe0e 	mul.w	lr, r3, lr
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x1da>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000550:	d26c      	bcs.n	800062c <__udivmoddi4+0x2ac>
 8000552:	45a6      	cmp	lr, r4
 8000554:	d96a      	bls.n	800062c <__udivmoddi4+0x2ac>
 8000556:	3b02      	subs	r3, #2
 8000558:	4464      	add	r4, ip
 800055a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800055e:	fba3 9502 	umull	r9, r5, r3, r2
 8000562:	eba4 040e 	sub.w	r4, r4, lr
 8000566:	42ac      	cmp	r4, r5
 8000568:	46c8      	mov	r8, r9
 800056a:	46ae      	mov	lr, r5
 800056c:	d356      	bcc.n	800061c <__udivmoddi4+0x29c>
 800056e:	d053      	beq.n	8000618 <__udivmoddi4+0x298>
 8000570:	b156      	cbz	r6, 8000588 <__udivmoddi4+0x208>
 8000572:	ebb0 0208 	subs.w	r2, r0, r8
 8000576:	eb64 040e 	sbc.w	r4, r4, lr
 800057a:	fa04 f707 	lsl.w	r7, r4, r7
 800057e:	40ca      	lsrs	r2, r1
 8000580:	40cc      	lsrs	r4, r1
 8000582:	4317      	orrs	r7, r2
 8000584:	e9c6 7400 	strd	r7, r4, [r6]
 8000588:	4618      	mov	r0, r3
 800058a:	2100      	movs	r1, #0
 800058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000590:	f1c3 0120 	rsb	r1, r3, #32
 8000594:	fa02 fc03 	lsl.w	ip, r2, r3
 8000598:	fa20 f201 	lsr.w	r2, r0, r1
 800059c:	fa25 f101 	lsr.w	r1, r5, r1
 80005a0:	409d      	lsls	r5, r3
 80005a2:	432a      	orrs	r2, r5
 80005a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a8:	fa1f fe8c 	uxth.w	lr, ip
 80005ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b0:	fb07 1510 	mls	r5, r7, r0, r1
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ba:	fb00 f50e 	mul.w	r5, r0, lr
 80005be:	428d      	cmp	r5, r1
 80005c0:	fa04 f403 	lsl.w	r4, r4, r3
 80005c4:	d908      	bls.n	80005d8 <__udivmoddi4+0x258>
 80005c6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005ce:	d22f      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 80005d0:	428d      	cmp	r5, r1
 80005d2:	d92d      	bls.n	8000630 <__udivmoddi4+0x2b0>
 80005d4:	3802      	subs	r0, #2
 80005d6:	4461      	add	r1, ip
 80005d8:	1b49      	subs	r1, r1, r5
 80005da:	b292      	uxth	r2, r2
 80005dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005e0:	fb07 1115 	mls	r1, r7, r5, r1
 80005e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005e8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0x282>
 80005f0:	eb1c 0202 	adds.w	r2, ip, r2
 80005f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005f8:	d216      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 80005fa:	4291      	cmp	r1, r2
 80005fc:	d914      	bls.n	8000628 <__udivmoddi4+0x2a8>
 80005fe:	3d02      	subs	r5, #2
 8000600:	4462      	add	r2, ip
 8000602:	1a52      	subs	r2, r2, r1
 8000604:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000608:	e738      	b.n	800047c <__udivmoddi4+0xfc>
 800060a:	4631      	mov	r1, r6
 800060c:	4630      	mov	r0, r6
 800060e:	e708      	b.n	8000422 <__udivmoddi4+0xa2>
 8000610:	4639      	mov	r1, r7
 8000612:	e6e6      	b.n	80003e2 <__udivmoddi4+0x62>
 8000614:	4610      	mov	r0, r2
 8000616:	e6fb      	b.n	8000410 <__udivmoddi4+0x90>
 8000618:	4548      	cmp	r0, r9
 800061a:	d2a9      	bcs.n	8000570 <__udivmoddi4+0x1f0>
 800061c:	ebb9 0802 	subs.w	r8, r9, r2
 8000620:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000624:	3b01      	subs	r3, #1
 8000626:	e7a3      	b.n	8000570 <__udivmoddi4+0x1f0>
 8000628:	4645      	mov	r5, r8
 800062a:	e7ea      	b.n	8000602 <__udivmoddi4+0x282>
 800062c:	462b      	mov	r3, r5
 800062e:	e794      	b.n	800055a <__udivmoddi4+0x1da>
 8000630:	4640      	mov	r0, r8
 8000632:	e7d1      	b.n	80005d8 <__udivmoddi4+0x258>
 8000634:	46d0      	mov	r8, sl
 8000636:	e77b      	b.n	8000530 <__udivmoddi4+0x1b0>
 8000638:	3d02      	subs	r5, #2
 800063a:	4462      	add	r2, ip
 800063c:	e732      	b.n	80004a4 <__udivmoddi4+0x124>
 800063e:	4608      	mov	r0, r1
 8000640:	e70a      	b.n	8000458 <__udivmoddi4+0xd8>
 8000642:	4464      	add	r4, ip
 8000644:	3802      	subs	r0, #2
 8000646:	e742      	b.n	80004ce <__udivmoddi4+0x14e>

08000648 <__aeabi_idiv0>:
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000658:	f005 fb40 	bl	8005cdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800065c:	4b58      	ldr	r3, [pc, #352]	; (80007c0 <pvPortMallocMicroROS+0x174>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d101      	bne.n	8000668 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000664:	f000 f980 	bl	8000968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000668:	4b56      	ldr	r3, [pc, #344]	; (80007c4 <pvPortMallocMicroROS+0x178>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4013      	ands	r3, r2
 8000670:	2b00      	cmp	r3, #0
 8000672:	f040 808e 	bne.w	8000792 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d01d      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800067c:	2208      	movs	r2, #8
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	2b00      	cmp	r3, #0
 800068c:	d014      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f023 0307 	bic.w	r3, r3, #7
 8000694:	3308      	adds	r3, #8
 8000696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00a      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a6:	f383 8811 	msr	BASEPRI, r3
 80006aa:	f3bf 8f6f 	isb	sy
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006b4:	bf00      	nop
 80006b6:	e7fe      	b.n	80006b6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d069      	beq.n	8000792 <pvPortMallocMicroROS+0x146>
 80006be:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d864      	bhi.n	8000792 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006c8:	4b40      	ldr	r3, [pc, #256]	; (80007cc <pvPortMallocMicroROS+0x180>)
 80006ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006cc:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <pvPortMallocMicroROS+0x180>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006d2:	e004      	b.n	80006de <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d903      	bls.n	80006f0 <pvPortMallocMicroROS+0xa4>
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f1      	bne.n	80006d4 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <pvPortMallocMicroROS+0x174>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d04b      	beq.n	8000792 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2208      	movs	r2, #8
 8000700:	4413      	add	r3, r2
 8000702:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1ad2      	subs	r2, r2, r3
 8000714:	2308      	movs	r3, #8
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	429a      	cmp	r2, r3
 800071a:	d91f      	bls.n	800075c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800071c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00a      	beq.n	8000744 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	613b      	str	r3, [r7, #16]
}
 8000740:	bf00      	nop
 8000742:	e7fe      	b.n	8000742 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1ad2      	subs	r2, r2, r3
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000756:	69b8      	ldr	r0, [r7, #24]
 8000758:	f000 f968 	bl	8000a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 8000768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <pvPortMallocMicroROS+0x184>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d203      	bcs.n	800077e <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <pvPortMallocMicroROS+0x184>)
 800077c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <pvPortMallocMicroROS+0x178>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	431a      	orrs	r2, r3
 8000788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000792:	f005 fab1 	bl	8005cf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00a      	beq.n	80007b6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80007a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a4:	f383 8811 	msr	BASEPRI, r3
 80007a8:	f3bf 8f6f 	isb	sy
 80007ac:	f3bf 8f4f 	dsb	sy
 80007b0:	60fb      	str	r3, [r7, #12]
}
 80007b2:	bf00      	nop
 80007b4:	e7fe      	b.n	80007b4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007b6:	69fb      	ldr	r3, [r7, #28]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20004484 	.word	0x20004484
 80007c4:	20004490 	.word	0x20004490
 80007c8:	20004488 	.word	0x20004488
 80007cc:	2000447c 	.word	0x2000447c
 80007d0:	2000448c 	.word	0x2000448c

080007d4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d048      	beq.n	8000878 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007e6:	2308      	movs	r3, #8
 80007e8:	425b      	negs	r3, r3
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	4413      	add	r3, r2
 80007ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	685a      	ldr	r2, [r3, #4]
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <vPortFreeMicroROS+0xac>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4013      	ands	r3, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10a      	bne.n	8000818 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	60fb      	str	r3, [r7, #12]
}
 8000814:	bf00      	nop
 8000816:	e7fe      	b.n	8000816 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00a      	beq.n	8000836 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	60bb      	str	r3, [r7, #8]
}
 8000832:	bf00      	nop
 8000834:	e7fe      	b.n	8000834 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <vPortFreeMicroROS+0xac>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4013      	ands	r3, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d019      	beq.n	8000878 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d115      	bne.n	8000878 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <vPortFreeMicroROS+0xac>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800085c:	f005 fa3e 	bl	8005cdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <vPortFreeMicroROS+0xb0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a06      	ldr	r2, [pc, #24]	; (8000884 <vPortFreeMicroROS+0xb0>)
 800086c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f000 f8dc 	bl	8000a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000874:	f005 fa40 	bl	8005cf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20004490 	.word	0x20004490
 8000884:	20004488 	.word	0x20004488

08000888 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000894:	2308      	movs	r3, #8
 8000896:	425b      	negs	r3, r3
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <getBlockSize+0x38>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

	return count;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20004490 	.word	0x20004490

080008c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008ce:	f005 fa05 	bl	8005cdc <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff feba 	bl	800064c <pvPortMallocMicroROS>
 80008d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d017      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffce 	bl	8000888 <getBlockSize>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2208      	movs	r2, #8
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d201      	bcs.n	8000900 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f015 f83c 	bl	8015982 <memcpy>

		vPortFreeMicroROS(pv);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff62 	bl	80007d4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000910:	f005 f9f2 	bl	8005cf8 <xTaskResumeAll>

	return newmem;
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000928:	f005 f9d8 	bl	8005cdc <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fe88 	bl	800064c <pvPortMallocMicroROS>
 800093c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000942:	e004      	b.n	800094e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	613a      	str	r2, [r7, #16]
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	617a      	str	r2, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000958:	f005 f9ce 	bl	8005cf8 <xTaskResumeAll>
  	return mem;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800096e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <prvHeapInit+0xac>)
 8000976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00c      	beq.n	800099c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3307      	adds	r3, #7
 8000986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 0307 	bic.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <prvHeapInit+0xac>)
 8000998:	4413      	add	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <prvHeapInit+0xb0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <prvHeapInit+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009b4:	2208      	movs	r2, #8
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <prvHeapInit+0xb4>)
 80009c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <prvHeapInit+0xb4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <prvHeapInit+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <prvHeapInit+0xb4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <prvHeapInit+0xb8>)
 80009f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <prvHeapInit+0xbc>)
 80009fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <prvHeapInit+0xc0>)
 8000a02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	2000087c 	.word	0x2000087c
 8000a18:	2000447c 	.word	0x2000447c
 8000a1c:	20004484 	.word	0x20004484
 8000a20:	2000448c 	.word	0x2000448c
 8000a24:	20004488 	.word	0x20004488
 8000a28:	20004490 	.word	0x20004490

08000a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <prvInsertBlockIntoFreeList+0xac>)
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e002      	b.n	8000a40 <prvInsertBlockIntoFreeList+0x14>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d8f7      	bhi.n	8000a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d108      	bne.n	8000a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	441a      	add	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d118      	bne.n	8000ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	2000447c 	.word	0x2000447c
 8000adc:	20004484 	.word	0x20004484

08000ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_DMA_Init+0x4c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <MX_DMA_Init+0x4c>)
 8000af0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MX_DMA_Init+0x4c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2105      	movs	r1, #5
 8000b06:	2010      	movs	r0, #16
 8000b08:	f001 f872 	bl	8001bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b0c:	2010      	movs	r0, #16
 8000b0e:	f001 f88b 	bl	8001c28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2105      	movs	r1, #5
 8000b16:	2011      	movs	r0, #17
 8000b18:	f001 f86a 	bl	8001bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b1c:	2011      	movs	r0, #17
 8000b1e:	f001 f883 	bl	8001c28 <HAL_NVIC_EnableIRQ>

}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b3e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b44:	4904      	ldr	r1, [pc, #16]	; (8000b58 <cubemx_transport_open+0x28>)
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f002 fdda 	bl	8003700 <HAL_UART_Receive_DMA>
    return true;
 8000b4c:	2301      	movs	r3, #1
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20004494 	.word	0x20004494

08000b5c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b6a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f002 fdec 	bl	800374a <HAL_UART_DMAStop>
    return true;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b90:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b20      	cmp	r3, #32
 8000b9c:	d11c      	bne.n	8000bd8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	6978      	ldr	r0, [r7, #20]
 8000ba8:	f002 fd3a 	bl	8003620 <HAL_UART_Transmit_DMA>
 8000bac:	4603      	mov	r3, r0
 8000bae:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000bb0:	e002      	b.n	8000bb8 <cubemx_transport_write+0x3c>
            osDelay(1);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f004 f866 	bl	8004c84 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000bb8:	7cfb      	ldrb	r3, [r7, #19]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d105      	bne.n	8000bca <cubemx_transport_write+0x4e>
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b20      	cmp	r3, #32
 8000bc8:	d1f3      	bne.n	8000bb2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000bca:	7cfb      	ldrb	r3, [r7, #19]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <cubemx_transport_write+0x58>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	e002      	b.n	8000bda <cubemx_transport_write+0x5e>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e000      	b.n	8000bda <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000bd8:	2300      	movs	r3, #0
    }
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bf8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfe:	b672      	cpsid	i
}
 8000c00:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <cubemx_transport_read+0x9c>)
 8000c10:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c12:	b662      	cpsie	i
}
 8000c14:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f004 f831 	bl	8004c84 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <cubemx_transport_read+0xa0>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <cubemx_transport_read+0x9c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d103      	bne.n	8000c36 <cubemx_transport_read+0x52>
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	dbe3      	blt.n	8000bfe <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c3a:	e011      	b.n	8000c60 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <cubemx_transport_read+0xa0>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	440b      	add	r3, r1
 8000c46:	4910      	ldr	r1, [pc, #64]	; (8000c88 <cubemx_transport_read+0xa4>)
 8000c48:	5c8a      	ldrb	r2, [r1, r2]
 8000c4a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <cubemx_transport_read+0xa0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	3301      	adds	r3, #1
 8000c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <cubemx_transport_read+0xa0>)
 8000c58:	6013      	str	r3, [r2, #0]
        wrote++;
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <cubemx_transport_read+0xa0>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <cubemx_transport_read+0x9c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d003      	beq.n	8000c74 <cubemx_transport_read+0x90>
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d3e3      	bcc.n	8000c3c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c74:	69bb      	ldr	r3, [r7, #24]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3720      	adds	r7, #32
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20004c98 	.word	0x20004c98
 8000c84:	20004c94 	.word	0x20004c94
 8000c88:	20004494 	.word	0x20004494

08000c8c <subscription_callback>:
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void (* rclc_subscription_callback)(const void *);

void subscription_callback(const void * msgin){
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	    // Cast received message to used type
	    const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60fb      	str	r3, [r7, #12]
	    //HAL_GPIO_TogglePin(LD1_GPIO_Port , LD1_Pin);

	    // Process message
	    //printf("Received: %d\n", msg->linear.x);
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <timer_callback>:

void timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	e9c7 2300 	strd	r2, r3, [r7]
	RCLC_UNUSED(last_call_time);
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <MX_FREERTOS_Init+0x18>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_FREERTOS_Init+0x1c>)
 8000cc6:	f003 ff4b 	bl	8004b60 <osThreadNew>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a03      	ldr	r2, [pc, #12]	; (8000cdc <MX_FREERTOS_Init+0x20>)
 8000cce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08016808 	.word	0x08016808
 8000cd8:	08000ce1 	.word	0x08000ce1
 8000cdc:	20004c9c 	.word	0x20004c9c

08000ce0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ce4:	b0ec      	sub	sp, #432	; 0x1b0
 8000ce6:	af02      	add	r7, sp, #8
 8000ce8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000cec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000cf0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	// micro-ROS configuration

		  rmw_uros_set_custom_transport(
 8000cf2:	4bb3      	ldr	r3, [pc, #716]	; (8000fc0 <StartDefaultTask+0x2e0>)
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	4bb3      	ldr	r3, [pc, #716]	; (8000fc4 <StartDefaultTask+0x2e4>)
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	4bb3      	ldr	r3, [pc, #716]	; (8000fc8 <StartDefaultTask+0x2e8>)
 8000cfc:	4ab3      	ldr	r2, [pc, #716]	; (8000fcc <StartDefaultTask+0x2ec>)
 8000cfe:	49b4      	ldr	r1, [pc, #720]	; (8000fd0 <StartDefaultTask+0x2f0>)
 8000d00:	2001      	movs	r0, #1
 8000d02:	f009 fbe5 	bl	800a4d0 <rmw_uros_set_custom_transport>
		    cubemx_transport_open,
		    cubemx_transport_close,
		    cubemx_transport_write,
		    cubemx_transport_read);

		  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000d06:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f009 fa6a 	bl	800a1e4 <rcutils_get_zero_initialized_allocator>
		  freeRTOS_allocator.allocate = microros_allocate;
 8000d10:	4bb0      	ldr	r3, [pc, #704]	; (8000fd4 <StartDefaultTask+0x2f4>)
 8000d12:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
		  freeRTOS_allocator.deallocate = microros_deallocate;
 8000d16:	4bb0      	ldr	r3, [pc, #704]	; (8000fd8 <StartDefaultTask+0x2f8>)
 8000d18:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
		  freeRTOS_allocator.reallocate = microros_reallocate;
 8000d1c:	4baf      	ldr	r3, [pc, #700]	; (8000fdc <StartDefaultTask+0x2fc>)
 8000d1e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
		  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000d22:	4baf      	ldr	r3, [pc, #700]	; (8000fe0 <StartDefaultTask+0x300>)
 8000d24:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

		  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000d28:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f009 fa67 	bl	800a200 <rcutils_set_default_allocator>
 8000d32:	4603      	mov	r3, r0
 8000d34:	f083 0301 	eor.w	r3, r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <StartDefaultTask+0x66>
		      printf("Error on default allocators (line %d)\n", __LINE__);
 8000d3e:	21ad      	movs	r1, #173	; 0xad
 8000d40:	48a8      	ldr	r0, [pc, #672]	; (8000fe4 <StartDefaultTask+0x304>)
 8000d42:	f014 fc57 	bl	80155f4 <iprintf>
		  }

		  // micro-ROS app

		  rcl_subscription_t subscriber;
		  const char * topic_name = "cmd_vel";
 8000d46:	4ba8      	ldr	r3, [pc, #672]	; (8000fe8 <StartDefaultTask+0x308>)
 8000d48:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

		  rclc_support_t support;
		  rcl_allocator_t allocator;
		  rcl_node_t node;

		  allocator = rcl_get_default_allocator();
 8000d4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d50:	4618      	mov	r0, r3
 8000d52:	f009 fa73 	bl	800a23c <rcutils_get_default_allocator>
 8000d56:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000d5a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000d5e:	f507 7580 	add.w	r5, r7, #256	; 0x100
 8000d62:	461c      	mov	r4, r3
 8000d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	602b      	str	r3, [r5, #0]

		  //create init_options
		  rclc_support_init(&support, 0, NULL, &allocator);
 8000d6c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000d70:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	f009 f90e 	bl	8009f98 <rclc_support_init>

		  // create node
		  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000d7c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000d80:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8000d84:	4a99      	ldr	r2, [pc, #612]	; (8000fec <StartDefaultTask+0x30c>)
 8000d86:	499a      	ldr	r1, [pc, #616]	; (8000ff0 <StartDefaultTask+0x310>)
 8000d88:	f009 f950 	bl	800a02c <rclc_node_init_default>

		  // create publisher
		  rclc_publisher_init_default(
 8000d8c:	f00a f8fa 	bl	800af84 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8000d96:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8000d9a:	4b96      	ldr	r3, [pc, #600]	; (8000ff4 <StartDefaultTask+0x314>)
 8000d9c:	f009 f982 	bl	800a0a4 <rclc_publisher_init_default>
		      &node,
		      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		      "cubemx_publisher");

		  // create subscriber for Twist messages
		  rclc_subscription_init_default(
 8000da0:	f006 fc0c 	bl	80075bc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8000daa:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8000dae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000db2:	f009 f9ab 	bl	800a10c <rclc_subscription_init_default>
		    &subscriber, &node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), topic_name);

		  //Add subscription to the executor
		  rcl_timer_t timer = rcl_get_zero_initialized_timer();
 8000db6:	f008 f8db 	bl	8008f70 <rcl_get_zero_initialized_timer>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		  	const unsigned int timer_timeout = 200;
 8000dc0:	23c8      	movs	r3, #200	; 0xc8
 8000dc2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		  	rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(timer_timeout), timer_callback);
 8000dc6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000dca:	2200      	movs	r2, #0
 8000dcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8000dce:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000dd0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8000dd4:	4622      	mov	r2, r4
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	f04f 0000 	mov.w	r0, #0
 8000ddc:	f04f 0100 	mov.w	r1, #0
 8000de0:	0159      	lsls	r1, r3, #5
 8000de2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000de6:	0150      	lsls	r0, r2, #5
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4621      	mov	r1, r4
 8000dee:	ebb2 0801 	subs.w	r8, r2, r1
 8000df2:	4629      	mov	r1, r5
 8000df4:	eb63 0901 	sbc.w	r9, r3, r1
 8000df8:	f04f 0200 	mov.w	r2, #0
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8000e04:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8000e08:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8000e0c:	4690      	mov	r8, r2
 8000e0e:	4699      	mov	r9, r3
 8000e10:	4623      	mov	r3, r4
 8000e12:	eb18 0a03 	adds.w	sl, r8, r3
 8000e16:	462b      	mov	r3, r5
 8000e18:	eb49 0b03 	adc.w	fp, r9, r3
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000e28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000e2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8000e30:	ebb2 010a 	subs.w	r1, r2, sl
 8000e34:	61b9      	str	r1, [r7, #24]
 8000e36:	eb63 030b 	sbc.w	r3, r3, fp
 8000e3a:	61fb      	str	r3, [r7, #28]
 8000e3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e40:	4603      	mov	r3, r0
 8000e42:	4622      	mov	r2, r4
 8000e44:	189b      	adds	r3, r3, r2
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
 8000e48:	462b      	mov	r3, r5
 8000e4a:	460a      	mov	r2, r1
 8000e4c:	eb42 0303 	adc.w	r3, r2, r3
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
 8000e52:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000e56:	f507 748a 	add.w	r4, r7, #276	; 0x114
 8000e5a:	f107 05f4 	add.w	r5, r7, #244	; 0xf4
 8000e5e:	4b66      	ldr	r3, [pc, #408]	; (8000ff8 <StartDefaultTask+0x318>)
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4621      	mov	r1, r4
 8000e68:	4628      	mov	r0, r5
 8000e6a:	f009 f983 	bl	800a174 <rclc_timer_init_default>

		  	// create executor
		  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8000e6e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000e72:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000e76:	4618      	mov	r0, r3
 8000e78:	f008 fd80 	bl	800997c <rclc_executor_get_zero_initialized_executor>
		  	rclc_executor_init(&executor, &support.context, 2, &allocator);
 8000e7c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e80:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8000e84:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000e88:	2202      	movs	r2, #2
 8000e8a:	f008 fd81 	bl	8009990 <rclc_executor_init>

		  	unsigned int rcl_wait_timeout = 1000;   // in ms
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		  	rclc_executor_set_timeout(&executor, RCL_MS_TO_NS(rcl_wait_timeout));
 8000e96:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ea0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8000ea4:	4622      	mov	r2, r4
 8000ea6:	462b      	mov	r3, r5
 8000ea8:	f04f 0000 	mov.w	r0, #0
 8000eac:	f04f 0100 	mov.w	r1, #0
 8000eb0:	0159      	lsls	r1, r3, #5
 8000eb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000eb6:	0150      	lsls	r0, r2, #5
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4621      	mov	r1, r4
 8000ebe:	1a51      	subs	r1, r2, r1
 8000ec0:	6139      	str	r1, [r7, #16]
 8000ec2:	4629      	mov	r1, r5
 8000ec4:	eb63 0301 	sbc.w	r3, r3, r1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	024b      	lsls	r3, r1, #9
 8000eda:	4641      	mov	r1, r8
 8000edc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8000ee0:	4641      	mov	r1, r8
 8000ee2:	024a      	lsls	r2, r1, #9
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4622      	mov	r2, r4
 8000eec:	189b      	adds	r3, r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	462a      	mov	r2, r5
 8000ef4:	eb42 0303 	adc.w	r3, r2, r3
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000f06:	4649      	mov	r1, r9
 8000f08:	018b      	lsls	r3, r1, #6
 8000f0a:	4641      	mov	r1, r8
 8000f0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000f10:	4641      	mov	r1, r8
 8000f12:	018a      	lsls	r2, r1, #6
 8000f14:	4641      	mov	r1, r8
 8000f16:	1a51      	subs	r1, r2, r1
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	4649      	mov	r1, r9
 8000f1c:	eb63 0301 	sbc.w	r3, r3, r1
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f26:	4603      	mov	r3, r0
 8000f28:	4622      	mov	r2, r4
 8000f2a:	189b      	adds	r3, r3, r2
 8000f2c:	623b      	str	r3, [r7, #32]
 8000f2e:	462b      	mov	r3, r5
 8000f30:	460a      	mov	r2, r1
 8000f32:	eb42 0303 	adc.w	r3, r2, r3
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
 8000f38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f3c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000f40:	4608      	mov	r0, r1
 8000f42:	f008 fd95 	bl	8009a70 <rclc_executor_set_timeout>
		  	rclc_executor_add_timer(&executor, &timer);
 8000f46:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8000f4a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f008 fdd1 	bl	8009af8 <rclc_executor_add_timer>
		  	rclc_executor_add_subscription(&executor, &subscriber, &twist_msg, subscription_callback, ON_NEW_DATA);
 8000f56:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8000f5a:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8000f5e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000f62:	2300      	movs	r3, #0
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <StartDefaultTask+0x31c>)
 8000f68:	f008 fd92 	bl	8009a90 <rclc_executor_add_subscription>

		  	//rclc_executor_spin(&executor); //Blocking subscriber

		  msg.data = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		  for(;;)
		  {
			  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100)); //Non blocking spin for subscriber
 8000f72:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000f76:	a310      	add	r3, pc, #64	; (adr r3, 8000fb8 <StartDefaultTask+0x2d8>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	f008 ffd1 	bl	8009f24 <rclc_executor_spin_some>
			  rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8000f82:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8000f86:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f007 ff0f 	bl	8008db0 <rcl_publish>
 8000f92:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
			  	  if (ret != RCL_RET_OK){
 8000f96:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <StartDefaultTask+0x2c6>
			  		  printf("Error publishing (line %d)\n", __LINE__);
 8000f9e:	21e8      	movs	r1, #232	; 0xe8
 8000fa0:	4817      	ldr	r0, [pc, #92]	; (8001000 <StartDefaultTask+0x320>)
 8000fa2:	f014 fb27 	bl	80155f4 <iprintf>
			  	  }


			  msg.data++;
 8000fa6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000faa:	3301      	adds	r3, #1
 8000fac:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
			  osDelay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f003 fe67 	bl	8004c84 <osDelay>
		  {
 8000fb6:	e7dc      	b.n	8000f72 <StartDefaultTask+0x292>
 8000fb8:	05f5e100 	.word	0x05f5e100
 8000fbc:	00000000 	.word	0x00000000
 8000fc0:	08000be5 	.word	0x08000be5
 8000fc4:	08000b7d 	.word	0x08000b7d
 8000fc8:	08000b5d 	.word	0x08000b5d
 8000fcc:	08000b31 	.word	0x08000b31
 8000fd0:	20007c34 	.word	0x20007c34
 8000fd4:	080011b9 	.word	0x080011b9
 8000fd8:	080011fd 	.word	0x080011fd
 8000fdc:	08001235 	.word	0x08001235
 8000fe0:	080012a1 	.word	0x080012a1
 8000fe4:	08016764 	.word	0x08016764
 8000fe8:	0801678c 	.word	0x0801678c
 8000fec:	08016794 	.word	0x08016794
 8000ff0:	08016798 	.word	0x08016798
 8000ff4:	080167a4 	.word	0x080167a4
 8000ff8:	08000ca5 	.word	0x08000ca5
 8000ffc:	08000c8d 	.word	0x08000c8d
 8001000:	080167b8 	.word	0x080167b8

08001004 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <MX_GPIO_Init+0x94>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <MX_GPIO_Init+0x94>)
 8001024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MX_GPIO_Init+0x94>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MX_GPIO_Init+0x94>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a16      	ldr	r2, [pc, #88]	; (8001098 <MX_GPIO_Init+0x94>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_GPIO_Init+0x94>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2102      	movs	r1, #2
 8001056:	4811      	ldr	r0, [pc, #68]	; (800109c <MX_GPIO_Init+0x98>)
 8001058:	f001 fb7a 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800105c:	2301      	movs	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	480b      	ldr	r0, [pc, #44]	; (800109c <MX_GPIO_Init+0x98>)
 8001070:	f001 f9ea 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001074:	2302      	movs	r3, #2
 8001076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4619      	mov	r1, r3
 800108a:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_GPIO_Init+0x98>)
 800108c:	f001 f9dc 	bl	8002448 <HAL_GPIO_Init>

}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40021c00 	.word	0x40021c00

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a4:	f000 fcaa 	bl	80019fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a8:	f000 f80e 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ac:	f7ff ffaa 	bl	8001004 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b0:	f7ff fd16 	bl	8000ae0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010b4:	f000 fb98 	bl	80017e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010b8:	f003 fd08 	bl	8004acc <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80010bc:	f7ff fdfe 	bl	8000cbc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010c0:	f003 fd28 	bl	8004b14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <main+0x24>
	...

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	; 0x50
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	2230      	movs	r2, #48	; 0x30
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f014 fb78 	bl	80157cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <SystemClock_Config+0xb8>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a22      	ldr	r2, [pc, #136]	; (8001180 <SystemClock_Config+0xb8>)
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <SystemClock_Config+0xb8>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <SystemClock_Config+0xbc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <SystemClock_Config+0xbc>)
 8001116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <SystemClock_Config+0xbc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001128:	2302      	movs	r3, #2
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112c:	2301      	movs	r3, #1
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001130:	2310      	movs	r3, #16
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001134:	2300      	movs	r3, #0
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fb21 	bl	8002784 <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001148:	f000 f830 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114c:	230f      	movs	r3, #15
 800114e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fd84 	bl	8002c74 <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001172:	f000 f81b 	bl	80011ac <Error_Handler>
  }
}
 8001176:	bf00      	nop
 8001178:	3750      	adds	r7, #80	; 0x50
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000

08001188 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800119a:	f000 fc51 	bl	8001a40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40010000 	.word	0x40010000

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <microros_allocate+0x3c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <microros_allocate+0x3c>)
 80011d0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <microros_allocate+0x40>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <microros_allocate+0x40>)
 80011e0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff fa32 	bl	800064c <pvPortMallocMicroROS>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20007bdc 	.word	0x20007bdc
 80011f8:	20007be0 	.word	0x20007be0

080011fc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fb3b 	bl	8000888 <getBlockSize>
 8001212:	4603      	mov	r3, r0
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <microros_deallocate+0x34>)
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	461a      	mov	r2, r3
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <microros_deallocate+0x34>)
 800121e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fad7 	bl	80007d4 <vPortFreeMicroROS>
  }
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20007be0 	.word	0x20007be0

08001234 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <microros_reallocate+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	4413      	add	r3, r2
 800124a:	461a      	mov	r2, r3
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <microros_reallocate+0x64>)
 800124e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <microros_reallocate+0x68>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	4413      	add	r3, r2
 800125a:	461a      	mov	r2, r3
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <microros_reallocate+0x68>)
 800125e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d104      	bne.n	8001270 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001266:	68b8      	ldr	r0, [r7, #8]
 8001268:	f7ff f9f0 	bl	800064c <pvPortMallocMicroROS>
 800126c:	4603      	mov	r3, r0
 800126e:	e00e      	b.n	800128e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f7ff fb09 	bl	8000888 <getBlockSize>
 8001276:	4603      	mov	r3, r0
 8001278:	4a08      	ldr	r2, [pc, #32]	; (800129c <microros_reallocate+0x68>)
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	461a      	mov	r2, r3
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <microros_reallocate+0x68>)
 8001282:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff fb1c 	bl	80008c4 <pvPortReallocMicroROS>
 800128c:	4603      	mov	r3, r0
  }
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20007bdc 	.word	0x20007bdc
 800129c:	20007be0 	.word	0x20007be0

080012a0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	4a0c      	ldr	r2, [pc, #48]	; (80012e8 <microros_zero_allocate+0x48>)
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <microros_zero_allocate+0x48>)
 80012be:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	4a08      	ldr	r2, [pc, #32]	; (80012ec <microros_zero_allocate+0x4c>)
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <microros_zero_allocate+0x4c>)
 80012d2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff fb21 	bl	800091e <pvPortCallocMicroROS>
 80012dc:	4603      	mov	r3, r0
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20007bdc 	.word	0x20007bdc
 80012ec:	20007be0 	.word	0x20007be0

080012f0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80012f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001302:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001306:	a320      	add	r3, pc, #128	; (adr r3, 8001388 <UTILS_NanosecondsToTimespec+0x98>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7fe ffd0 	bl	80002b0 <__aeabi_ldivmod>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800131a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800131e:	a31a      	add	r3, pc, #104	; (adr r3, 8001388 <UTILS_NanosecondsToTimespec+0x98>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7fe ffc4 	bl	80002b0 <__aeabi_ldivmod>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	da20      	bge.n	8001376 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4a11      	ldr	r2, [pc, #68]	; (8001380 <UTILS_NanosecondsToTimespec+0x90>)
 800133a:	fb82 1203 	smull	r1, r2, r2, r3
 800133e:	1712      	asrs	r2, r2, #28
 8001340:	17db      	asrs	r3, r3, #31
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	6979      	ldr	r1, [r7, #20]
 8001350:	17c8      	asrs	r0, r1, #31
 8001352:	460c      	mov	r4, r1
 8001354:	4605      	mov	r5, r0
 8001356:	ebb2 0804 	subs.w	r8, r2, r4
 800135a:	eb63 0905 	sbc.w	r9, r3, r5
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	4906      	ldr	r1, [pc, #24]	; (8001384 <UTILS_NanosecondsToTimespec+0x94>)
 800136c:	fb01 f303 	mul.w	r3, r1, r3
 8001370:	441a      	add	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	609a      	str	r2, [r3, #8]
    }
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001380:	44b82fa1 	.word	0x44b82fa1
 8001384:	3b9aca00 	.word	0x3b9aca00
 8001388:	3b9aca00 	.word	0x3b9aca00
 800138c:	00000000 	.word	0x00000000

08001390 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001394:	b08e      	sub	sp, #56	; 0x38
 8001396:	af00      	add	r7, sp, #0
 8001398:	6278      	str	r0, [r7, #36]	; 0x24
 800139a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800139c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013a0:	2300      	movs	r3, #0
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80013b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b6:	4618      	mov	r0, r3
 80013b8:	f004 ff18 	bl	80061ec <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	17da      	asrs	r2, r3, #31
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	61fa      	str	r2, [r7, #28]
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	69b9      	ldr	r1, [r7, #24]
 80013ce:	000b      	movs	r3, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	2200      	movs	r2, #0
 80013da:	461c      	mov	r4, r3
 80013dc:	4615      	mov	r5, r2
 80013de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013e2:	1911      	adds	r1, r2, r4
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	416b      	adcs	r3, r5
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013ee:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80013f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	f04f 0400 	mov.w	r4, #0
 80013fe:	f04f 0500 	mov.w	r5, #0
 8001402:	015d      	lsls	r5, r3, #5
 8001404:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001408:	0154      	lsls	r4, r2, #5
 800140a:	4622      	mov	r2, r4
 800140c:	462b      	mov	r3, r5
 800140e:	ebb2 0800 	subs.w	r8, r2, r0
 8001412:	eb63 0901 	sbc.w	r9, r3, r1
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001422:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001426:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800142a:	4690      	mov	r8, r2
 800142c:	4699      	mov	r9, r3
 800142e:	eb18 0a00 	adds.w	sl, r8, r0
 8001432:	eb49 0b01 	adc.w	fp, r9, r1
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001442:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001446:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800144a:	ebb2 040a 	subs.w	r4, r2, sl
 800144e:	603c      	str	r4, [r7, #0]
 8001450:	eb63 030b 	sbc.w	r3, r3, fp
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800145a:	4623      	mov	r3, r4
 800145c:	181b      	adds	r3, r3, r0
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	462b      	mov	r3, r5
 8001462:	eb41 0303 	adc.w	r3, r1, r3
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	6a3a      	ldr	r2, [r7, #32]
 800146a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800146e:	f7ff ff3f 	bl	80012f0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001472:	2300      	movs	r3, #0
 8001474:	4618      	mov	r0, r3
 8001476:	3738      	adds	r7, #56	; 0x38
 8001478:	46bd      	mov	sp, r7
 800147a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_MspInit+0x54>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <HAL_MspInit+0x54>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_MspInit+0x54>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_MspInit+0x54>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_MspInit+0x54>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_MspInit+0x54>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	210f      	movs	r1, #15
 80014c2:	f06f 0001 	mvn.w	r0, #1
 80014c6:	f000 fb93 	bl	8001bf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	; 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <HAL_InitTick+0xd0>)
 80014ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f0:	4a2d      	ldr	r2, [pc, #180]	; (80015a8 <HAL_InitTick+0xd0>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6453      	str	r3, [r2, #68]	; 0x44
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <HAL_InitTick+0xd0>)
 80014fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001504:	f107 020c 	add.w	r2, r7, #12
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fd90 	bl	8003034 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001514:	f001 fd7a 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8001518:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800151a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151c:	4a23      	ldr	r2, [pc, #140]	; (80015ac <HAL_InitTick+0xd4>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0c9b      	lsrs	r3, r3, #18
 8001524:	3b01      	subs	r3, #1
 8001526:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_InitTick+0xd8>)
 800152a:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <HAL_InitTick+0xdc>)
 800152c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_InitTick+0xd8>)
 8001530:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001534:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001536:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <HAL_InitTick+0xd8>)
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_InitTick+0xd8>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_InitTick+0xd8>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_InitTick+0xd8>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800154e:	4818      	ldr	r0, [pc, #96]	; (80015b0 <HAL_InitTick+0xd8>)
 8001550:	f001 fda2 	bl	8003098 <HAL_TIM_Base_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800155a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800155e:	2b00      	cmp	r3, #0
 8001560:	d11b      	bne.n	800159a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001562:	4813      	ldr	r0, [pc, #76]	; (80015b0 <HAL_InitTick+0xd8>)
 8001564:	f001 fdf2 	bl	800314c <HAL_TIM_Base_Start_IT>
 8001568:	4603      	mov	r3, r0
 800156a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800156e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001572:	2b00      	cmp	r3, #0
 8001574:	d111      	bne.n	800159a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001576:	2019      	movs	r0, #25
 8001578:	f000 fb56 	bl	8001c28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	d808      	bhi.n	8001594 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001582:	2200      	movs	r2, #0
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	2019      	movs	r0, #25
 8001588:	f000 fb32 	bl	8001bf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800158c:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <HAL_InitTick+0xe0>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e002      	b.n	800159a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800159a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3730      	adds	r7, #48	; 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	431bde83 	.word	0x431bde83
 80015b0:	20007be4 	.word	0x20007be4
 80015b4:	40010000 	.word	0x40010000
 80015b8:	20000008 	.word	0x20000008

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c0:	e7fe      	b.n	80015c0 <NMI_Handler+0x4>

080015c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <HardFault_Handler+0x4>

080015c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <MemManage_Handler+0x4>

080015ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <UsageFault_Handler+0x4>

080015da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <DMA1_Stream5_IRQHandler+0x10>)
 80015ee:	f000 fcc1 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20007c7c 	.word	0x20007c7c

080015fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <DMA1_Stream6_IRQHandler+0x10>)
 8001602:	f000 fcb7 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20007cdc 	.word	0x20007cdc

08001610 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001616:	f001 fdfb 	bl	8003210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20007be4 	.word	0x20007be4

08001624 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <USART2_IRQHandler+0x10>)
 800162a:	f002 f90d 	bl	8003848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20007c34 	.word	0x20007c34

08001638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return 1;
 800163c:	2301      	movs	r3, #1
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_kill>:

int _kill(int pid, int sig)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001652:	f014 f961 	bl	8015918 <__errno>
 8001656:	4603      	mov	r3, r0
 8001658:	2216      	movs	r2, #22
 800165a:	601a      	str	r2, [r3, #0]
  return -1;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_exit>:

void _exit (int status)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001670:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ffe7 	bl	8001648 <_kill>
  while (1) {}    /* Make sure we hang here */
 800167a:	e7fe      	b.n	800167a <_exit+0x12>

0800167c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e00a      	b.n	80016a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168e:	f3af 8000 	nop.w
 8001692:	4601      	mov	r1, r0
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf0      	blt.n	800168e <_read+0x12>
  }

  return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e009      	b.n	80016dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf1      	blt.n	80016c8 <_write+0x12>
  }
  return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_close>:

int _close(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001716:	605a      	str	r2, [r3, #4]
  return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_isatty>:

int _isatty(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f014 f8c6 	bl	8015918 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20018000 	.word	0x20018000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	20007c30 	.word	0x20007c30
 80017c0:	20011410 	.word	0x20011410

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <MX_USART2_UART_Init+0x50>)
 80017f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 80017f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 800180e:	220c      	movs	r2, #12
 8001810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_USART2_UART_Init+0x4c>)
 8001820:	f001 feae 	bl	8003580 <HAL_UART_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800182a:	f7ff fcbf 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20007c34 	.word	0x20007c34
 8001838:	40004400 	.word	0x40004400

0800183c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a4c      	ldr	r2, [pc, #304]	; (800198c <HAL_UART_MspInit+0x150>)
 800185a:	4293      	cmp	r3, r2
 800185c:	f040 8092 	bne.w	8001984 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <HAL_UART_MspInit+0x154>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	4a49      	ldr	r2, [pc, #292]	; (8001990 <HAL_UART_MspInit+0x154>)
 800186a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186e:	6413      	str	r3, [r2, #64]	; 0x40
 8001870:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_UART_MspInit+0x154>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	4b43      	ldr	r3, [pc, #268]	; (8001990 <HAL_UART_MspInit+0x154>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4a42      	ldr	r2, [pc, #264]	; (8001990 <HAL_UART_MspInit+0x154>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6313      	str	r3, [r2, #48]	; 0x30
 800188c:	4b40      	ldr	r3, [pc, #256]	; (8001990 <HAL_UART_MspInit+0x154>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001898:	230c      	movs	r3, #12
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a8:	2307      	movs	r3, #7
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4838      	ldr	r0, [pc, #224]	; (8001994 <HAL_UART_MspInit+0x158>)
 80018b4:	f000 fdc8 	bl	8002448 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80018b8:	4b37      	ldr	r3, [pc, #220]	; (8001998 <HAL_UART_MspInit+0x15c>)
 80018ba:	4a38      	ldr	r2, [pc, #224]	; (800199c <HAL_UART_MspInit+0x160>)
 80018bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80018be:	4b36      	ldr	r3, [pc, #216]	; (8001998 <HAL_UART_MspInit+0x15c>)
 80018c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <HAL_UART_MspInit+0x15c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018cc:	4b32      	ldr	r3, [pc, #200]	; (8001998 <HAL_UART_MspInit+0x15c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_UART_MspInit+0x15c>)
 80018d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_UART_MspInit+0x15c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e0:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_UART_MspInit+0x15c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_UART_MspInit+0x15c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <HAL_UART_MspInit+0x15c>)
 80018ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018f2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f4:	4b28      	ldr	r3, [pc, #160]	; (8001998 <HAL_UART_MspInit+0x15c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80018fa:	4827      	ldr	r0, [pc, #156]	; (8001998 <HAL_UART_MspInit+0x15c>)
 80018fc:	f000 f9a2 	bl	8001c44 <HAL_DMA_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001906:	f7ff fc51 	bl	80011ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a22      	ldr	r2, [pc, #136]	; (8001998 <HAL_UART_MspInit+0x15c>)
 800190e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <HAL_UART_MspInit+0x15c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <HAL_UART_MspInit+0x164>)
 8001918:	4a22      	ldr	r2, [pc, #136]	; (80019a4 <HAL_UART_MspInit+0x168>)
 800191a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800191c:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_UART_MspInit+0x164>)
 800191e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001922:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <HAL_UART_MspInit+0x164>)
 8001926:	2240      	movs	r2, #64	; 0x40
 8001928:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_UART_MspInit+0x164>)
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_UART_MspInit+0x164>)
 8001932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001936:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_UART_MspInit+0x164>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_UART_MspInit+0x164>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <HAL_UART_MspInit+0x164>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_UART_MspInit+0x164>)
 800194c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001950:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <HAL_UART_MspInit+0x164>)
 8001954:	2200      	movs	r2, #0
 8001956:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001958:	4811      	ldr	r0, [pc, #68]	; (80019a0 <HAL_UART_MspInit+0x164>)
 800195a:	f000 f973 	bl	8001c44 <HAL_DMA_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001964:	f7ff fc22 	bl	80011ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <HAL_UART_MspInit+0x164>)
 800196c:	639a      	str	r2, [r3, #56]	; 0x38
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <HAL_UART_MspInit+0x164>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	2105      	movs	r1, #5
 8001978:	2026      	movs	r0, #38	; 0x26
 800197a:	f000 f939 	bl	8001bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800197e:	2026      	movs	r0, #38	; 0x26
 8001980:	f000 f952 	bl	8001c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	; 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40004400 	.word	0x40004400
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000
 8001998:	20007c7c 	.word	0x20007c7c
 800199c:	40026088 	.word	0x40026088
 80019a0:	20007cdc 	.word	0x20007cdc
 80019a4:	400260a0 	.word	0x400260a0

080019a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019ac:	f7ff ff0a 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019b2:	490d      	ldr	r1, [pc, #52]	; (80019e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c8:	4c0a      	ldr	r4, [pc, #40]	; (80019f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80019d6:	f013 ffa5 	bl	8015924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019da:	f7ff fb61 	bl	80010a0 <main>
  bx  lr    
 80019de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	20000860 	.word	0x20000860
  ldr r2, =_sidata
 80019ec:	08017964 	.word	0x08017964
  ldr r2, =_sbss
 80019f0:	20000860 	.word	0x20000860
  ldr r4, =_ebss
 80019f4:	2001140c 	.word	0x2001140c

080019f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC_IRQHandler>
	...

080019fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <HAL_Init+0x40>)
 8001a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_Init+0x40>)
 8001a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <HAL_Init+0x40>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f000 f8d8 	bl	8001bda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2a:	200f      	movs	r0, #15
 8001a2c:	f7ff fd54 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a30:	f7ff fd26 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023c00 	.word	0x40023c00

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	2000000c 	.word	0x2000000c
 8001a64:	20007d3c 	.word	0x20007d3c

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20007d3c 	.word	0x20007d3c

08001a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db0b      	blt.n	8001b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	4907      	ldr	r1, [pc, #28]	; (8001b1c <__NVIC_EnableIRQ+0x38>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	2001      	movs	r0, #1
 8001b06:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000e100 	.word	0xe000e100

08001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	; (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	; (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
         );
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ff4c 	bl	8001a80 <__NVIC_SetPriorityGrouping>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c02:	f7ff ff61 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8001c06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	6978      	ldr	r0, [r7, #20]
 8001c0e:	f7ff ffb1 	bl	8001b74 <NVIC_EncodePriority>
 8001c12:	4602      	mov	r2, r0
 8001c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff80 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff54 	bl	8001ae4 <__NVIC_EnableIRQ>
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff ff0a 	bl	8001a68 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e099      	b.n	8001d94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c80:	e00f      	b.n	8001ca2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c82:	f7ff fef1 	bl	8001a68 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d908      	bls.n	8001ca2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e078      	b.n	8001d94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e8      	bne.n	8001c82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <HAL_DMA_Init+0x158>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d107      	bne.n	8001d0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	4313      	orrs	r3, r2
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f023 0307 	bic.w	r3, r3, #7
 8001d22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d117      	bne.n	8001d66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00e      	beq.n	8001d66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fb01 	bl	8002350 <DMA_CheckFifoParam>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d62:	2301      	movs	r3, #1
 8001d64:	e016      	b.n	8001d94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fab8 	bl	80022e4 <DMA_CalcBaseAndBitshift>
 8001d74:	4603      	mov	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	223f      	movs	r2, #63	; 0x3f
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	f010803f 	.word	0xf010803f

08001da0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_DMA_Start_IT+0x26>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e040      	b.n	8001e48 <HAL_DMA_Start_IT+0xa8>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d12f      	bne.n	8001e3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fa4a 	bl	8002288 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	223f      	movs	r2, #63	; 0x3f
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0216 	orr.w	r2, r2, #22
 8001e0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0208 	orr.w	r2, r2, #8
 8001e26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e005      	b.n	8001e46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
 8001e44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e5e:	f7ff fe03 	bl	8001a68 <HAL_GetTick>
 8001e62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d008      	beq.n	8001e82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e052      	b.n	8001f28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0216 	bic.w	r2, r2, #22
 8001e90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ea0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <HAL_DMA_Abort+0x62>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0208 	bic.w	r2, r2, #8
 8001ec0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed2:	e013      	b.n	8001efc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed4:	f7ff fdc8 	bl	8001a68 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d90c      	bls.n	8001efc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e015      	b.n	8001f28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1e4      	bne.n	8001ed4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	223f      	movs	r2, #63	; 0x3f
 8001f10:	409a      	lsls	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d004      	beq.n	8001f4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00c      	b.n	8001f68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2205      	movs	r2, #5
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f80:	4b8e      	ldr	r3, [pc, #568]	; (80021bc <HAL_DMA_IRQHandler+0x248>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a8e      	ldr	r2, [pc, #568]	; (80021c0 <HAL_DMA_IRQHandler+0x24c>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	0a9b      	lsrs	r3, r3, #10
 8001f8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01a      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0204 	bic.w	r2, r2, #4
 8001fc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	2208      	movs	r2, #8
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d012      	beq.n	8002016 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	2201      	movs	r2, #1
 8002004:	409a      	lsls	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f043 0202 	orr.w	r2, r3, #2
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	2204      	movs	r2, #4
 800201c:	409a      	lsls	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d012      	beq.n	800204c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2204      	movs	r2, #4
 800203a:	409a      	lsls	r2, r3
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	f043 0204 	orr.w	r2, r3, #4
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	2210      	movs	r2, #16
 8002052:	409a      	lsls	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d043      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d03c      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2210      	movs	r2, #16
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d018      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d108      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d024      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
 80020a2:	e01f      	b.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01b      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
 80020b4:	e016      	b.n	80020e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0208 	bic.w	r2, r2, #8
 80020d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	2220      	movs	r2, #32
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 808f 	beq.w	8002214 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8087 	beq.w	8002214 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	2220      	movs	r2, #32
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b05      	cmp	r3, #5
 800211c:	d136      	bne.n	800218c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0216 	bic.w	r2, r2, #22
 800212c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800213c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d103      	bne.n	800214e <HAL_DMA_IRQHandler+0x1da>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0208 	bic.w	r2, r2, #8
 800215c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	223f      	movs	r2, #63	; 0x3f
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217e:	2b00      	cmp	r3, #0
 8002180:	d07e      	beq.n	8002280 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
        }
        return;
 800218a:	e079      	b.n	8002280 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01d      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10d      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d031      	beq.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e02c      	b.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
 80021ba:	bf00      	nop
 80021bc:	20000004 	.word	0x20000004
 80021c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d023      	beq.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
 80021d4:	e01e      	b.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10f      	bne.n	8002204 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0210 	bic.w	r2, r2, #16
 80021f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	2b00      	cmp	r3, #0
 800221a:	d032      	beq.n	8002282 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d022      	beq.n	800226e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2205      	movs	r2, #5
 800222c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	3301      	adds	r3, #1
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	d307      	bcc.n	800225c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f2      	bne.n	8002240 <HAL_DMA_IRQHandler+0x2cc>
 800225a:	e000      	b.n	800225e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800225c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4798      	blx	r3
 800227e:	e000      	b.n	8002282 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002280:	bf00      	nop
    }
  }
}
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d108      	bne.n	80022c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022c6:	e007      	b.n	80022d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	60da      	str	r2, [r3, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3b10      	subs	r3, #16
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <DMA_CalcBaseAndBitshift+0x64>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <DMA_CalcBaseAndBitshift+0x68>)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d909      	bls.n	8002326 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	1d1a      	adds	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	659a      	str	r2, [r3, #88]	; 0x58
 8002324:	e007      	b.n	8002336 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	aaaaaaab 	.word	0xaaaaaaab
 800234c:	08016844 	.word	0x08016844

08002350 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11f      	bne.n	80023aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d856      	bhi.n	800241e <DMA_CheckFifoParam+0xce>
 8002370:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <DMA_CheckFifoParam+0x28>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	08002389 	.word	0x08002389
 800237c:	0800239b 	.word	0x0800239b
 8002380:	08002389 	.word	0x08002389
 8002384:	0800241f 	.word	0x0800241f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d046      	beq.n	8002422 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002398:	e043      	b.n	8002422 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023a2:	d140      	bne.n	8002426 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a8:	e03d      	b.n	8002426 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b2:	d121      	bne.n	80023f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d837      	bhi.n	800242a <DMA_CheckFifoParam+0xda>
 80023ba:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <DMA_CheckFifoParam+0x70>)
 80023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023d7 	.word	0x080023d7
 80023c8:	080023d1 	.word	0x080023d1
 80023cc:	080023e9 	.word	0x080023e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      break;
 80023d4:	e030      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d025      	beq.n	800242e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e6:	e022      	b.n	800242e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023f0:	d11f      	bne.n	8002432 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023f6:	e01c      	b.n	8002432 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d903      	bls.n	8002406 <DMA_CheckFifoParam+0xb6>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d003      	beq.n	800240c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002404:	e018      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      break;
 800240a:	e015      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00e      	beq.n	8002436 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e00b      	b.n	8002436 <DMA_CheckFifoParam+0xe6>
      break;
 800241e:	bf00      	nop
 8002420:	e00a      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e008      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e006      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
 800242c:	e004      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
 8002430:	e002      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;   
 8002432:	bf00      	nop
 8002434:	e000      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
    }
  } 
  
  return status; 
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	e159      	b.n	8002718 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002464:	2201      	movs	r2, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	429a      	cmp	r2, r3
 800247e:	f040 8148 	bne.w	8002712 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d005      	beq.n	800249a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002496:	2b02      	cmp	r3, #2
 8002498:	d130      	bne.n	80024fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 0201 	and.w	r2, r3, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b03      	cmp	r3, #3
 8002506:	d017      	beq.n	8002538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d123      	bne.n	800258c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3208      	adds	r2, #8
 800254c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	69b9      	ldr	r1, [r7, #24]
 8002588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a2 	beq.w	8002712 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b57      	ldr	r3, [pc, #348]	; (8002730 <HAL_GPIO_Init+0x2e8>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a56      	ldr	r2, [pc, #344]	; (8002730 <HAL_GPIO_Init+0x2e8>)
 80025d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b54      	ldr	r3, [pc, #336]	; (8002730 <HAL_GPIO_Init+0x2e8>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ea:	4a52      	ldr	r2, [pc, #328]	; (8002734 <HAL_GPIO_Init+0x2ec>)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	220f      	movs	r2, #15
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a49      	ldr	r2, [pc, #292]	; (8002738 <HAL_GPIO_Init+0x2f0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d019      	beq.n	800264a <HAL_GPIO_Init+0x202>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a48      	ldr	r2, [pc, #288]	; (800273c <HAL_GPIO_Init+0x2f4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_GPIO_Init+0x1fe>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a47      	ldr	r2, [pc, #284]	; (8002740 <HAL_GPIO_Init+0x2f8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00d      	beq.n	8002642 <HAL_GPIO_Init+0x1fa>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a46      	ldr	r2, [pc, #280]	; (8002744 <HAL_GPIO_Init+0x2fc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <HAL_GPIO_Init+0x1f6>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a45      	ldr	r2, [pc, #276]	; (8002748 <HAL_GPIO_Init+0x300>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_GPIO_Init+0x1f2>
 8002636:	2304      	movs	r3, #4
 8002638:	e008      	b.n	800264c <HAL_GPIO_Init+0x204>
 800263a:	2307      	movs	r3, #7
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x204>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <HAL_GPIO_Init+0x204>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x204>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_GPIO_Init+0x204>
 800264a:	2300      	movs	r3, #0
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	f002 0203 	and.w	r2, r2, #3
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4093      	lsls	r3, r2
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265c:	4935      	ldr	r1, [pc, #212]	; (8002734 <HAL_GPIO_Init+0x2ec>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266a:	4b38      	ldr	r3, [pc, #224]	; (800274c <HAL_GPIO_Init+0x304>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268e:	4a2f      	ldr	r2, [pc, #188]	; (800274c <HAL_GPIO_Init+0x304>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002694:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_GPIO_Init+0x304>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b8:	4a24      	ldr	r2, [pc, #144]	; (800274c <HAL_GPIO_Init+0x304>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_GPIO_Init+0x304>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e2:	4a1a      	ldr	r2, [pc, #104]	; (800274c <HAL_GPIO_Init+0x304>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_GPIO_Init+0x304>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800270c:	4a0f      	ldr	r2, [pc, #60]	; (800274c <HAL_GPIO_Init+0x304>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3301      	adds	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	f67f aea2 	bls.w	8002464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40013800 	.word	0x40013800
 8002738:	40020000 	.word	0x40020000
 800273c:	40020400 	.word	0x40020400
 8002740:	40020800 	.word	0x40020800
 8002744:	40020c00 	.word	0x40020c00
 8002748:	40021000 	.word	0x40021000
 800274c:	40013c00 	.word	0x40013c00

08002750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
 800275c:	4613      	mov	r3, r2
 800275e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002760:	787b      	ldrb	r3, [r7, #1]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800276c:	e003      	b.n	8002776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	041a      	lsls	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	619a      	str	r2, [r3, #24]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e267      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d075      	beq.n	800288e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027a2:	4b88      	ldr	r3, [pc, #544]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d00c      	beq.n	80027c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ae:	4b85      	ldr	r3, [pc, #532]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d112      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ba:	4b82      	ldr	r3, [pc, #520]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c6:	d10b      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c8:	4b7e      	ldr	r3, [pc, #504]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d05b      	beq.n	800288c <HAL_RCC_OscConfig+0x108>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d157      	bne.n	800288c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e242      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e8:	d106      	bne.n	80027f8 <HAL_RCC_OscConfig+0x74>
 80027ea:	4b76      	ldr	r3, [pc, #472]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a75      	ldr	r2, [pc, #468]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e01d      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4b70      	ldr	r3, [pc, #448]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a6f      	ldr	r2, [pc, #444]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b6d      	ldr	r3, [pc, #436]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6c      	ldr	r2, [pc, #432]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e00b      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 800281c:	4b69      	ldr	r3, [pc, #420]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a68      	ldr	r2, [pc, #416]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b66      	ldr	r3, [pc, #408]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a65      	ldr	r2, [pc, #404]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 800282e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7ff f914 	bl	8001a68 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7ff f910 	bl	8001a68 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	; 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e207      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b5b      	ldr	r3, [pc, #364]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0xc0>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7ff f900 	bl	8001a68 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800286c:	f7ff f8fc 	bl	8001a68 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	; 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1f3      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287e:	4b51      	ldr	r3, [pc, #324]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0xe8>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d063      	beq.n	8002962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800289a:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d11c      	bne.n	80028ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b2:	4b44      	ldr	r3, [pc, #272]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d116      	bne.n	80028ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_RCC_OscConfig+0x152>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e1c7      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d6:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4937      	ldr	r1, [pc, #220]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ea:	e03a      	b.n	8002962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f4:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <HAL_RCC_OscConfig+0x244>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7ff f8b5 	bl	8001a68 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002902:	f7ff f8b1 	bl	8001a68 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1a8      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4925      	ldr	r1, [pc, #148]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
 8002934:	e015      	b.n	8002962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCC_OscConfig+0x244>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7ff f894 	bl	8001a68 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002944:	f7ff f890 	bl	8001a68 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e187      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d036      	beq.n	80029dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d016      	beq.n	80029a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_RCC_OscConfig+0x248>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7ff f874 	bl	8001a68 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002984:	f7ff f870 	bl	8001a68 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e167      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x200>
 80029a2:	e01b      	b.n	80029dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a4:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_RCC_OscConfig+0x248>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029aa:	f7ff f85d 	bl	8001a68 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	e00e      	b.n	80029d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b2:	f7ff f859 	bl	8001a68 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d907      	bls.n	80029d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e150      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
 80029c4:	40023800 	.word	0x40023800
 80029c8:	42470000 	.word	0x42470000
 80029cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	4b88      	ldr	r3, [pc, #544]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ea      	bne.n	80029b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8097 	beq.w	8002b18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ee:	4b81      	ldr	r3, [pc, #516]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	4b7d      	ldr	r3, [pc, #500]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a7c      	ldr	r2, [pc, #496]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b7a      	ldr	r3, [pc, #488]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	4b77      	ldr	r3, [pc, #476]	; (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d118      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a26:	4b74      	ldr	r3, [pc, #464]	; (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a73      	ldr	r2, [pc, #460]	; (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a32:	f7ff f819 	bl	8001a68 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3a:	f7ff f815 	bl	8001a68 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e10c      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x2ea>
 8002a60:	4b64      	ldr	r3, [pc, #400]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	4a63      	ldr	r2, [pc, #396]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6c:	e01c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x324>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x30c>
 8002a76:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	4a5e      	ldr	r2, [pc, #376]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	6713      	str	r3, [r2, #112]	; 0x70
 8002a82:	4b5c      	ldr	r3, [pc, #368]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	4a5b      	ldr	r2, [pc, #364]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0x324>
 8002a90:	4b58      	ldr	r3, [pc, #352]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a57      	ldr	r2, [pc, #348]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9c:	4b55      	ldr	r3, [pc, #340]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	4a54      	ldr	r2, [pc, #336]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	f023 0304 	bic.w	r3, r3, #4
 8002aa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fe ffda 	bl	8001a68 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fe ffd6 	bl	8001a68 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0cb      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ace:	4b49      	ldr	r3, [pc, #292]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ee      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x334>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002adc:	f7fe ffc4 	bl	8001a68 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae4:	f7fe ffc0 	bl	8001a68 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e0b5      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afa:	4b3e      	ldr	r3, [pc, #248]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1ee      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0c:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	4a38      	ldr	r2, [pc, #224]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a1 	beq.w	8002c64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b22:	4b34      	ldr	r3, [pc, #208]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d05c      	beq.n	8002be8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d141      	bne.n	8002bba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b36:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe ff94 	bl	8001a68 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe ff90 	bl	8001a68 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e087      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	019b      	lsls	r3, r3, #6
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	085b      	lsrs	r3, r3, #1
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	041b      	lsls	r3, r3, #16
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	491b      	ldr	r1, [pc, #108]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fe ff69 	bl	8001a68 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fe ff65 	bl	8001a68 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e05c      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x416>
 8002bb8:	e054      	b.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7fe ff52 	bl	8001a68 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe ff4e 	bl	8001a68 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e045      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x444>
 8002be6:	e03d      	b.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e038      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x4ec>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d028      	beq.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d121      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d11a      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d111      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800

08002c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0cc      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c88:	4b68      	ldr	r3, [pc, #416]	; (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d90c      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	4b65      	ldr	r3, [pc, #404]	; (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b63      	ldr	r3, [pc, #396]	; (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0b8      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc8:	4b59      	ldr	r3, [pc, #356]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a58      	ldr	r2, [pc, #352]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce0:	4b53      	ldr	r3, [pc, #332]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a52      	ldr	r2, [pc, #328]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b50      	ldr	r3, [pc, #320]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	494d      	ldr	r1, [pc, #308]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d044      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d119      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d32:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d42:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e067      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d52:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4934      	ldr	r1, [pc, #208]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d64:	f7fe fe80 	bl	8001a68 <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7fe fe7c 	bl	8001a68 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e04f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 020c 	and.w	r2, r3, #12
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1eb      	bne.n	8002d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d20c      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e032      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc8:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4916      	ldr	r1, [pc, #88]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	490e      	ldr	r1, [pc, #56]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dfa:	f000 f821 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	490a      	ldr	r1, [pc, #40]	; (8002e34 <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	5ccb      	ldrb	r3, [r1, r3]
 8002e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e12:	4a09      	ldr	r2, [pc, #36]	; (8002e38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e16:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_RCC_ClockConfig+0x1c8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fb5c 	bl	80014d8 <HAL_InitTick>

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023c00 	.word	0x40023c00
 8002e30:	40023800 	.word	0x40023800
 8002e34:	0801682c 	.word	0x0801682c
 8002e38:	20000004 	.word	0x20000004
 8002e3c:	20000008 	.word	0x20000008

08002e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e44:	b090      	sub	sp, #64	; 0x40
 8002e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d00d      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x40>
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	f200 80a1 	bhi.w	8002fac <HAL_RCC_GetSysClockFreq+0x16c>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x34>
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d003      	beq.n	8002e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e72:	e09b      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b53      	ldr	r3, [pc, #332]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e78:	e09b      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e7a:	4b53      	ldr	r3, [pc, #332]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e7e:	e098      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e80:	4b4f      	ldr	r3, [pc, #316]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e88:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e8a:	4b4d      	ldr	r3, [pc, #308]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d028      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e96:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	099b      	lsrs	r3, r3, #6
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	627a      	str	r2, [r7, #36]	; 0x24
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4b47      	ldr	r3, [pc, #284]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002eac:	fb03 f201 	mul.w	r2, r3, r1
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	fb00 f303 	mul.w	r3, r0, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a43      	ldr	r2, [pc, #268]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002eba:	fba0 1202 	umull	r1, r2, r0, r2
 8002ebe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ec0:	460a      	mov	r2, r1
 8002ec2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec6:	4413      	add	r3, r2
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	2200      	movs	r2, #0
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	61fa      	str	r2, [r7, #28]
 8002ed2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002eda:	f7fd fa39 	bl	8000350 <__aeabi_uldivmod>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee6:	e053      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee8:	4b35      	ldr	r3, [pc, #212]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	099b      	lsrs	r3, r3, #6
 8002eee:	2200      	movs	r2, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	617a      	str	r2, [r7, #20]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002efa:	f04f 0b00 	mov.w	fp, #0
 8002efe:	4652      	mov	r2, sl
 8002f00:	465b      	mov	r3, fp
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	0159      	lsls	r1, r3, #5
 8002f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f10:	0150      	lsls	r0, r2, #5
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	ebb2 080a 	subs.w	r8, r2, sl
 8002f1a:	eb63 090b 	sbc.w	r9, r3, fp
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f32:	ebb2 0408 	subs.w	r4, r2, r8
 8002f36:	eb63 0509 	sbc.w	r5, r3, r9
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	00eb      	lsls	r3, r5, #3
 8002f44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f48:	00e2      	lsls	r2, r4, #3
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	461d      	mov	r5, r3
 8002f4e:	eb14 030a 	adds.w	r3, r4, sl
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	eb45 030b 	adc.w	r3, r5, fp
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f66:	4629      	mov	r1, r5
 8002f68:	028b      	lsls	r3, r1, #10
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f70:	4621      	mov	r1, r4
 8002f72:	028a      	lsls	r2, r1, #10
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	60fa      	str	r2, [r7, #12]
 8002f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f84:	f7fd f9e4 	bl	8000350 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002fa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3740      	adds	r7, #64	; 0x40
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	00f42400 	.word	0x00f42400
 8002fc8:	017d7840 	.word	0x017d7840

08002fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000004 	.word	0x20000004

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fe8:	f7ff fff0 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0a9b      	lsrs	r3, r3, #10
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4903      	ldr	r1, [pc, #12]	; (8003008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	0801683c 	.word	0x0801683c

0800300c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003010:	f7ff ffdc 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	0b5b      	lsrs	r3, r3, #13
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4903      	ldr	r1, [pc, #12]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40023800 	.word	0x40023800
 8003030:	0801683c 	.word	0x0801683c

08003034 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	220f      	movs	r2, #15
 8003042:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	08db      	lsrs	r3, r3, #3
 800306e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_RCC_GetClockConfig+0x60>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0207 	and.w	r2, r3, #7
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	601a      	str	r2, [r3, #0]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	40023c00 	.word	0x40023c00

08003098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e041      	b.n	800312e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f839 	bl	8003136 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f000 f9b2 	bl	8003440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d001      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e044      	b.n	80031ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_TIM_Base_Start_IT+0xb0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d018      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x6c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d013      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x6c>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_TIM_Base_Start_IT+0xb4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00e      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x6c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a19      	ldr	r2, [pc, #100]	; (8003204 <HAL_TIM_Base_Start_IT+0xb8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d009      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x6c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a17      	ldr	r2, [pc, #92]	; (8003208 <HAL_TIM_Base_Start_IT+0xbc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d004      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x6c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a16      	ldr	r2, [pc, #88]	; (800320c <HAL_TIM_Base_Start_IT+0xc0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d111      	bne.n	80031dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b06      	cmp	r3, #6
 80031c8:	d010      	beq.n	80031ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0201 	orr.w	r2, r2, #1
 80031d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031da:	e007      	b.n	80031ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40014000 	.word	0x40014000

08003210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d020      	beq.n	8003274 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01b      	beq.n	8003274 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0202 	mvn.w	r2, #2
 8003244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f8d2 	bl	8003404 <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f8c4 	bl	80033f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f8d5 	bl	8003418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b00      	cmp	r3, #0
 800327c:	d020      	beq.n	80032c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01b      	beq.n	80032c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0204 	mvn.w	r2, #4
 8003290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2202      	movs	r2, #2
 8003296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f8ac 	bl	8003404 <HAL_TIM_IC_CaptureCallback>
 80032ac:	e005      	b.n	80032ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f89e 	bl	80033f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f8af 	bl	8003418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d020      	beq.n	800330c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01b      	beq.n	800330c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0208 	mvn.w	r2, #8
 80032dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2204      	movs	r2, #4
 80032e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f886 	bl	8003404 <HAL_TIM_IC_CaptureCallback>
 80032f8:	e005      	b.n	8003306 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f878 	bl	80033f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f889 	bl	8003418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b00      	cmp	r3, #0
 8003314:	d020      	beq.n	8003358 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01b      	beq.n	8003358 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0210 	mvn.w	r2, #16
 8003328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2208      	movs	r2, #8
 800332e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f860 	bl	8003404 <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f852 	bl	80033f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f863 	bl	8003418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00c      	beq.n	800337c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0201 	mvn.w	r2, #1
 8003374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd ff06 	bl	8001188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00c      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8e6 	bl	800356c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f834 	bl	800342c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00c      	beq.n	80033e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0220 	mvn.w	r2, #32
 80033e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f8b8 	bl	8003558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a3a      	ldr	r2, [pc, #232]	; (800353c <TIM_Base_SetConfig+0xfc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00f      	beq.n	8003478 <TIM_Base_SetConfig+0x38>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345e:	d00b      	beq.n	8003478 <TIM_Base_SetConfig+0x38>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a37      	ldr	r2, [pc, #220]	; (8003540 <TIM_Base_SetConfig+0x100>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d007      	beq.n	8003478 <TIM_Base_SetConfig+0x38>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a36      	ldr	r2, [pc, #216]	; (8003544 <TIM_Base_SetConfig+0x104>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d003      	beq.n	8003478 <TIM_Base_SetConfig+0x38>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a35      	ldr	r2, [pc, #212]	; (8003548 <TIM_Base_SetConfig+0x108>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d108      	bne.n	800348a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a2b      	ldr	r2, [pc, #172]	; (800353c <TIM_Base_SetConfig+0xfc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01b      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003498:	d017      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a28      	ldr	r2, [pc, #160]	; (8003540 <TIM_Base_SetConfig+0x100>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a27      	ldr	r2, [pc, #156]	; (8003544 <TIM_Base_SetConfig+0x104>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00f      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a26      	ldr	r2, [pc, #152]	; (8003548 <TIM_Base_SetConfig+0x108>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00b      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a25      	ldr	r2, [pc, #148]	; (800354c <TIM_Base_SetConfig+0x10c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a24      	ldr	r2, [pc, #144]	; (8003550 <TIM_Base_SetConfig+0x110>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a23      	ldr	r2, [pc, #140]	; (8003554 <TIM_Base_SetConfig+0x114>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d108      	bne.n	80034dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a0e      	ldr	r2, [pc, #56]	; (800353c <TIM_Base_SetConfig+0xfc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d103      	bne.n	8003510 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d105      	bne.n	800352e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f023 0201 	bic.w	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	611a      	str	r2, [r3, #16]
  }
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40010000 	.word	0x40010000
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800
 8003548:	40000c00 	.word	0x40000c00
 800354c:	40014000 	.word	0x40014000
 8003550:	40014400 	.word	0x40014400
 8003554:	40014800 	.word	0x40014800

08003558 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e042      	b.n	8003618 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fe f948 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	; 0x24
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 ffc9 	bl	800455c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08c      	sub	sp, #48	; 0x30
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	4613      	mov	r3, r2
 800362c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b20      	cmp	r3, #32
 8003638:	d156      	bne.n	80036e8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_UART_Transmit_DMA+0x26>
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e04f      	b.n	80036ea <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	88fa      	ldrh	r2, [r7, #6]
 800365a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2221      	movs	r2, #33	; 0x21
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <HAL_UART_Transmit_DMA+0xd4>)
 8003670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	4a20      	ldr	r2, [pc, #128]	; (80036f8 <HAL_UART_Transmit_DMA+0xd8>)
 8003678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_UART_Transmit_DMA+0xdc>)
 8003680:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	2200      	movs	r2, #0
 8003688:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800368a:	f107 0308 	add.w	r3, r7, #8
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	6819      	ldr	r1, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3304      	adds	r3, #4
 800369e:	461a      	mov	r2, r3
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	f7fe fb7d 	bl	8001da0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3314      	adds	r3, #20
 80036b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	617b      	str	r3, [r7, #20]
   return(result);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3314      	adds	r3, #20
 80036ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036d0:	627a      	str	r2, [r7, #36]	; 0x24
 80036d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	6a39      	ldr	r1, [r7, #32]
 80036d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e5      	bne.n	80036b0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
  }
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3730      	adds	r7, #48	; 0x30
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	08003de9 	.word	0x08003de9
 80036f8:	08003e83 	.word	0x08003e83
 80036fc:	08004007 	.word	0x08004007

08003700 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	4613      	mov	r3, r2
 800370c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b20      	cmp	r3, #32
 8003718:	d112      	bne.n	8003740 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_UART_Receive_DMA+0x26>
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e00b      	b.n	8003742 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	461a      	mov	r2, r3
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fcb0 	bl	800409c <UART_Start_Receive_DMA>
 800373c:	4603      	mov	r3, r0
 800373e:	e000      	b.n	8003742 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b090      	sub	sp, #64	; 0x40
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003752:	2300      	movs	r3, #0
 8003754:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	bf0c      	ite	eq
 8003764:	2301      	moveq	r3, #1
 8003766:	2300      	movne	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b21      	cmp	r3, #33	; 0x21
 8003776:	d128      	bne.n	80037ca <HAL_UART_DMAStop+0x80>
 8003778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d025      	beq.n	80037ca <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3314      	adds	r3, #20
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	623b      	str	r3, [r7, #32]
   return(result);
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003794:	63bb      	str	r3, [r7, #56]	; 0x38
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3314      	adds	r3, #20
 800379c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800379e:	633a      	str	r2, [r7, #48]	; 0x30
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e5      	bne.n	800377e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fb46 	bl	8001e50 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fd03 	bl	80041d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b22      	cmp	r3, #34	; 0x22
 80037ea:	d128      	bne.n	800383e <HAL_UART_DMAStop+0xf4>
 80037ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d025      	beq.n	800383e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3314      	adds	r3, #20
 80037f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	60fb      	str	r3, [r7, #12]
   return(result);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3314      	adds	r3, #20
 8003810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003812:	61fa      	str	r2, [r7, #28]
 8003814:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	69b9      	ldr	r1, [r7, #24]
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	617b      	str	r3, [r7, #20]
   return(result);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e5      	bne.n	80037f2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe fb0c 	bl	8001e50 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fcf1 	bl	8004220 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3740      	adds	r7, #64	; 0x40
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b0ba      	sub	sp, #232	; 0xe8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800386e:	2300      	movs	r3, #0
 8003870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003874:	2300      	movs	r3, #0
 8003876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800387a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10f      	bne.n	80038ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800388e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_UART_IRQHandler+0x66>
 800389a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fd99 	bl	80043de <UART_Receive_IT>
      return;
 80038ac:	e25b      	b.n	8003d66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80de 	beq.w	8003a74 <HAL_UART_IRQHandler+0x22c>
 80038b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80d1 	beq.w	8003a74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_UART_IRQHandler+0xae>
 80038de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f043 0201 	orr.w	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <HAL_UART_IRQHandler+0xd2>
 8003902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	f043 0202 	orr.w	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800391a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <HAL_UART_IRQHandler+0xf6>
 8003926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d005      	beq.n	800393e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f043 0204 	orr.w	r2, r3, #4
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800393e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d011      	beq.n	800396e <HAL_UART_IRQHandler+0x126>
 800394a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d105      	bne.n	8003962 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d005      	beq.n	800396e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f043 0208 	orr.w	r2, r3, #8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 81f2 	beq.w	8003d5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_UART_IRQHandler+0x14e>
 8003984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fd24 	bl	80043de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d103      	bne.n	80039c2 <HAL_UART_IRQHandler+0x17a>
 80039ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d04f      	beq.n	8003a62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fc2c 	bl	8004220 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d141      	bne.n	8003a5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3314      	adds	r3, #20
 80039dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039e4:	e853 3f00 	ldrex	r3, [r3]
 80039e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3314      	adds	r3, #20
 80039fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1d9      	bne.n	80039d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d013      	beq.n	8003a52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	4a7e      	ldr	r2, [pc, #504]	; (8003c28 <HAL_UART_IRQHandler+0x3e0>)
 8003a30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fa7a 	bl	8001f30 <HAL_DMA_Abort_IT>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d016      	beq.n	8003a70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a50:	e00e      	b.n	8003a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f9b2 	bl	8003dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	e00a      	b.n	8003a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f9ae 	bl	8003dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a60:	e006      	b.n	8003a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f9aa 	bl	8003dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003a6e:	e175      	b.n	8003d5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a70:	bf00      	nop
    return;
 8003a72:	e173      	b.n	8003d5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	f040 814f 	bne.w	8003d1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8148 	beq.w	8003d1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8141 	beq.w	8003d1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b40      	cmp	r3, #64	; 0x40
 8003abc:	f040 80b6 	bne.w	8003c2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003acc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8145 	beq.w	8003d60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	f080 813e 	bcs.w	8003d60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af6:	f000 8088 	beq.w	8003c0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1d9      	bne.n	8003afa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3314      	adds	r3, #20
 8003b4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3314      	adds	r3, #20
 8003b66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e1      	bne.n	8003b46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3314      	adds	r3, #20
 8003b88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3314      	adds	r3, #20
 8003ba2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ba6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ba8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e3      	bne.n	8003b82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	330c      	adds	r3, #12
 8003bce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bda:	f023 0310 	bic.w	r3, r3, #16
 8003bde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bec:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e3      	bne.n	8003bc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe f923 	bl	8001e50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	4619      	mov	r1, r3
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f8d5 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c26:	e09b      	b.n	8003d60 <HAL_UART_IRQHandler+0x518>
 8003c28:	080042e7 	.word	0x080042e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 808e 	beq.w	8003d64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8089 	beq.w	8003d64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c76:	647a      	str	r2, [r7, #68]	; 0x44
 8003c78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e3      	bne.n	8003c52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3314      	adds	r3, #20
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	623b      	str	r3, [r7, #32]
   return(result);
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3314      	adds	r3, #20
 8003caa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cae:	633a      	str	r2, [r7, #48]	; 0x30
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e3      	bne.n	8003c8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0310 	bic.w	r3, r3, #16
 8003ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cf4:	61fa      	str	r2, [r7, #28]
 8003cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	69b9      	ldr	r1, [r7, #24]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	617b      	str	r3, [r7, #20]
   return(result);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e3      	bne.n	8003cd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d12:	4619      	mov	r1, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f85b 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d1a:	e023      	b.n	8003d64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d009      	beq.n	8003d3c <HAL_UART_IRQHandler+0x4f4>
 8003d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 faea 	bl	800430e <UART_Transmit_IT>
    return;
 8003d3a:	e014      	b.n	8003d66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00e      	beq.n	8003d66 <HAL_UART_IRQHandler+0x51e>
 8003d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fb2a 	bl	80043ae <UART_EndTransmit_IT>
    return;
 8003d5a:	e004      	b.n	8003d66 <HAL_UART_IRQHandler+0x51e>
    return;
 8003d5c:	bf00      	nop
 8003d5e:	e002      	b.n	8003d66 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d60:	bf00      	nop
 8003d62:	e000      	b.n	8003d66 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d64:	bf00      	nop
  }
}
 8003d66:	37e8      	adds	r7, #232	; 0xe8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b090      	sub	sp, #64	; 0x40
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d137      	bne.n	8003e74 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e06:	2200      	movs	r2, #0
 8003e08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3314      	adds	r3, #20
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	623b      	str	r3, [r7, #32]
   return(result);
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e20:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3314      	adds	r3, #20
 8003e28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e2a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e5      	bne.n	8003e0a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e54:	637b      	str	r3, [r7, #52]	; 0x34
 8003e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e5e:	61fa      	str	r2, [r7, #28]
 8003e60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	69b9      	ldr	r1, [r7, #24]
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	617b      	str	r3, [r7, #20]
   return(result);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e5      	bne.n	8003e3e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e72:	e002      	b.n	8003e7a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003e74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e76:	f7ff ff79 	bl	8003d6c <HAL_UART_TxCpltCallback>
}
 8003e7a:	bf00      	nop
 8003e7c:	3740      	adds	r7, #64	; 0x40
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff ff75 	bl	8003d80 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b09c      	sub	sp, #112	; 0x70
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d172      	bne.n	8003fa0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eca:	e853 3f00 	ldrex	r3, [r3]
 8003ece:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ee0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ee2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ee6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ee8:	e841 2300 	strex	r3, r2, [r1]
 8003eec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e5      	bne.n	8003ec0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3314      	adds	r3, #20
 8003efa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3314      	adds	r3, #20
 8003f12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f14:	647a      	str	r2, [r7, #68]	; 0x44
 8003f16:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e5      	bne.n	8003ef4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3314      	adds	r3, #20
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	623b      	str	r3, [r7, #32]
   return(result);
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3314      	adds	r3, #20
 8003f46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f48:	633a      	str	r2, [r7, #48]	; 0x30
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e5      	bne.n	8003f28 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d119      	bne.n	8003fa0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	330c      	adds	r3, #12
 8003f72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0310 	bic.w	r3, r3, #16
 8003f82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f8c:	61fa      	str	r2, [r7, #28]
 8003f8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	69b9      	ldr	r1, [r7, #24]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	617b      	str	r3, [r7, #20]
   return(result);
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e5      	bne.n	8003f6c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d106      	bne.n	8003fbc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003fb6:	f7ff ff0b 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fba:	e002      	b.n	8003fc2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003fbc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003fbe:	f7ff fee9 	bl	8003d94 <HAL_UART_RxCpltCallback>
}
 8003fc2:	bf00      	nop
 8003fc4:	3770      	adds	r7, #112	; 0x70
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d108      	bne.n	8003ff8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	4619      	mov	r1, r3
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f7ff feed 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ff6:	e002      	b.n	8003ffe <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff fed5 	bl	8003da8 <HAL_UART_RxHalfCpltCallback>
}
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004022:	2b80      	cmp	r3, #128	; 0x80
 8004024:	bf0c      	ite	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	2300      	movne	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b21      	cmp	r3, #33	; 0x21
 8004038:	d108      	bne.n	800404c <UART_DMAError+0x46>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2200      	movs	r2, #0
 8004044:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004046:	68b8      	ldr	r0, [r7, #8]
 8004048:	f000 f8c2 	bl	80041d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004056:	2b40      	cmp	r3, #64	; 0x40
 8004058:	bf0c      	ite	eq
 800405a:	2301      	moveq	r3, #1
 800405c:	2300      	movne	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b22      	cmp	r3, #34	; 0x22
 800406c:	d108      	bne.n	8004080 <UART_DMAError+0x7a>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2200      	movs	r2, #0
 8004078:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800407a:	68b8      	ldr	r0, [r7, #8]
 800407c:	f000 f8d0 	bl	8004220 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	f043 0210 	orr.w	r2, r3, #16
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800408c:	68b8      	ldr	r0, [r7, #8]
 800408e:	f7ff fe95 	bl	8003dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b098      	sub	sp, #96	; 0x60
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2222      	movs	r2, #34	; 0x22
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c8:	4a3e      	ldr	r2, [pc, #248]	; (80041c4 <UART_Start_Receive_DMA+0x128>)
 80040ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d0:	4a3d      	ldr	r2, [pc, #244]	; (80041c8 <UART_Start_Receive_DMA+0x12c>)
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	4a3c      	ldr	r2, [pc, #240]	; (80041cc <UART_Start_Receive_DMA+0x130>)
 80040da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	2200      	movs	r2, #0
 80040e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80040e4:	f107 0308 	add.w	r3, r7, #8
 80040e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	f7fd fe50 	bl	8001da0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d019      	beq.n	8004152 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	330c      	adds	r3, #12
 8004124:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004134:	65bb      	str	r3, [r7, #88]	; 0x58
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800413e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004140:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800414c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e5      	bne.n	800411e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3314      	adds	r3, #20
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	657b      	str	r3, [r7, #84]	; 0x54
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3314      	adds	r3, #20
 8004170:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004172:	63ba      	str	r2, [r7, #56]	; 0x38
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e5      	bne.n	8004152 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	617b      	str	r3, [r7, #20]
   return(result);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800419c:	653b      	str	r3, [r7, #80]	; 0x50
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3314      	adds	r3, #20
 80041a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80041a6:	627a      	str	r2, [r7, #36]	; 0x24
 80041a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6a39      	ldr	r1, [r7, #32]
 80041ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e5      	bne.n	8004186 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3760      	adds	r7, #96	; 0x60
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	08003e9f 	.word	0x08003e9f
 80041c8:	08003fcb 	.word	0x08003fcb
 80041cc:	08004007 	.word	0x08004007

080041d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b089      	sub	sp, #36	; 0x24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	330c      	adds	r3, #12
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	61ba      	str	r2, [r7, #24]
 80041fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6979      	ldr	r1, [r7, #20]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	613b      	str	r3, [r7, #16]
   return(result);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e5      	bne.n	80041d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004214:	bf00      	nop
 8004216:	3724      	adds	r7, #36	; 0x24
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b095      	sub	sp, #84	; 0x54
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	330c      	adds	r3, #12
 800422e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800423e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004248:	643a      	str	r2, [r7, #64]	; 0x40
 800424a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800424e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e5      	bne.n	8004228 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3314      	adds	r3, #20
 8004262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	61fb      	str	r3, [r7, #28]
   return(result);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	64bb      	str	r3, [r7, #72]	; 0x48
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3314      	adds	r3, #20
 800427a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800427c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800427e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e5      	bne.n	800425c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	2b01      	cmp	r3, #1
 8004296:	d119      	bne.n	80042cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f023 0310 	bic.w	r3, r3, #16
 80042ae:	647b      	str	r3, [r7, #68]	; 0x44
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042b8:	61ba      	str	r2, [r7, #24]
 80042ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	6979      	ldr	r1, [r7, #20]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	613b      	str	r3, [r7, #16]
   return(result);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e5      	bne.n	8004298 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042da:	bf00      	nop
 80042dc:	3754      	adds	r7, #84	; 0x54
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7ff fd5b 	bl	8003dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b21      	cmp	r3, #33	; 0x21
 8004320:	d13e      	bne.n	80043a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432a:	d114      	bne.n	8004356 <UART_Transmit_IT+0x48>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d110      	bne.n	8004356 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004348:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	1c9a      	adds	r2, r3, #2
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	621a      	str	r2, [r3, #32]
 8004354:	e008      	b.n	8004368 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	1c59      	adds	r1, r3, #1
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6211      	str	r1, [r2, #32]
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29b      	uxth	r3, r3
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	4619      	mov	r1, r3
 8004376:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10f      	bne.n	800439c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800438a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800439a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e000      	b.n	80043a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
  }
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff fccc 	bl	8003d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b08c      	sub	sp, #48	; 0x30
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b22      	cmp	r3, #34	; 0x22
 80043f0:	f040 80ae 	bne.w	8004550 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fc:	d117      	bne.n	800442e <UART_Receive_IT+0x50>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d113      	bne.n	800442e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	b29b      	uxth	r3, r3
 8004418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441c:	b29a      	uxth	r2, r3
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	1c9a      	adds	r2, r3, #2
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	629a      	str	r2, [r3, #40]	; 0x28
 800442c:	e026      	b.n	800447c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004440:	d007      	beq.n	8004452 <UART_Receive_IT+0x74>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <UART_Receive_IT+0x82>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	e008      	b.n	8004472 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800446c:	b2da      	uxtb	r2, r3
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29b      	uxth	r3, r3
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4619      	mov	r1, r3
 800448a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800448c:	2b00      	cmp	r3, #0
 800448e:	d15d      	bne.n	800454c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0220 	bic.w	r2, r2, #32
 800449e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d135      	bne.n	8004542 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	613b      	str	r3, [r7, #16]
   return(result);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f023 0310 	bic.w	r3, r3, #16
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fc:	623a      	str	r2, [r7, #32]
 80044fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	69f9      	ldr	r1, [r7, #28]
 8004502:	6a3a      	ldr	r2, [r7, #32]
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	61bb      	str	r3, [r7, #24]
   return(result);
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e5      	bne.n	80044dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b10      	cmp	r3, #16
 800451c:	d10a      	bne.n	8004534 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004538:	4619      	mov	r1, r3
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fc48 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
 8004540:	e002      	b.n	8004548 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff fc26 	bl	8003d94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	e002      	b.n	8004552 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	e000      	b.n	8004552 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004550:	2302      	movs	r3, #2
  }
}
 8004552:	4618      	mov	r0, r3
 8004554:	3730      	adds	r7, #48	; 0x30
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800455c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004560:	b0c0      	sub	sp, #256	; 0x100
 8004562:	af00      	add	r7, sp, #0
 8004564:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004578:	68d9      	ldr	r1, [r3, #12]
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	ea40 0301 	orr.w	r3, r0, r1
 8004584:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	431a      	orrs	r2, r3
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	431a      	orrs	r2, r3
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045b4:	f021 010c 	bic.w	r1, r1, #12
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045c2:	430b      	orrs	r3, r1
 80045c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d6:	6999      	ldr	r1, [r3, #24]
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	ea40 0301 	orr.w	r3, r0, r1
 80045e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4b8f      	ldr	r3, [pc, #572]	; (8004828 <UART_SetConfig+0x2cc>)
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d005      	beq.n	80045fc <UART_SetConfig+0xa0>
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	4b8d      	ldr	r3, [pc, #564]	; (800482c <UART_SetConfig+0x2d0>)
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d104      	bne.n	8004606 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045fc:	f7fe fd06 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8004600:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004604:	e003      	b.n	800460e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004606:	f7fe fced 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 800460a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004618:	f040 810c 	bne.w	8004834 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800461c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004620:	2200      	movs	r2, #0
 8004622:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004626:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800462a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800462e:	4622      	mov	r2, r4
 8004630:	462b      	mov	r3, r5
 8004632:	1891      	adds	r1, r2, r2
 8004634:	65b9      	str	r1, [r7, #88]	; 0x58
 8004636:	415b      	adcs	r3, r3
 8004638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800463a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800463e:	4621      	mov	r1, r4
 8004640:	eb12 0801 	adds.w	r8, r2, r1
 8004644:	4629      	mov	r1, r5
 8004646:	eb43 0901 	adc.w	r9, r3, r1
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800465e:	4690      	mov	r8, r2
 8004660:	4699      	mov	r9, r3
 8004662:	4623      	mov	r3, r4
 8004664:	eb18 0303 	adds.w	r3, r8, r3
 8004668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800466c:	462b      	mov	r3, r5
 800466e:	eb49 0303 	adc.w	r3, r9, r3
 8004672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004682:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004686:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800468a:	460b      	mov	r3, r1
 800468c:	18db      	adds	r3, r3, r3
 800468e:	653b      	str	r3, [r7, #80]	; 0x50
 8004690:	4613      	mov	r3, r2
 8004692:	eb42 0303 	adc.w	r3, r2, r3
 8004696:	657b      	str	r3, [r7, #84]	; 0x54
 8004698:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800469c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046a0:	f7fb fe56 	bl	8000350 <__aeabi_uldivmod>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4b61      	ldr	r3, [pc, #388]	; (8004830 <UART_SetConfig+0x2d4>)
 80046aa:	fba3 2302 	umull	r2, r3, r3, r2
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	011c      	lsls	r4, r3, #4
 80046b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046c4:	4642      	mov	r2, r8
 80046c6:	464b      	mov	r3, r9
 80046c8:	1891      	adds	r1, r2, r2
 80046ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80046cc:	415b      	adcs	r3, r3
 80046ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046d4:	4641      	mov	r1, r8
 80046d6:	eb12 0a01 	adds.w	sl, r2, r1
 80046da:	4649      	mov	r1, r9
 80046dc:	eb43 0b01 	adc.w	fp, r3, r1
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f4:	4692      	mov	sl, r2
 80046f6:	469b      	mov	fp, r3
 80046f8:	4643      	mov	r3, r8
 80046fa:	eb1a 0303 	adds.w	r3, sl, r3
 80046fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004702:	464b      	mov	r3, r9
 8004704:	eb4b 0303 	adc.w	r3, fp, r3
 8004708:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004718:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800471c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004720:	460b      	mov	r3, r1
 8004722:	18db      	adds	r3, r3, r3
 8004724:	643b      	str	r3, [r7, #64]	; 0x40
 8004726:	4613      	mov	r3, r2
 8004728:	eb42 0303 	adc.w	r3, r2, r3
 800472c:	647b      	str	r3, [r7, #68]	; 0x44
 800472e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004732:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004736:	f7fb fe0b 	bl	8000350 <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4611      	mov	r1, r2
 8004740:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <UART_SetConfig+0x2d4>)
 8004742:	fba3 2301 	umull	r2, r3, r3, r1
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	2264      	movs	r2, #100	; 0x64
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	1acb      	subs	r3, r1, r3
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004756:	4b36      	ldr	r3, [pc, #216]	; (8004830 <UART_SetConfig+0x2d4>)
 8004758:	fba3 2302 	umull	r2, r3, r3, r2
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004764:	441c      	add	r4, r3
 8004766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800476a:	2200      	movs	r2, #0
 800476c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004770:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004774:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004778:	4642      	mov	r2, r8
 800477a:	464b      	mov	r3, r9
 800477c:	1891      	adds	r1, r2, r2
 800477e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004780:	415b      	adcs	r3, r3
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004788:	4641      	mov	r1, r8
 800478a:	1851      	adds	r1, r2, r1
 800478c:	6339      	str	r1, [r7, #48]	; 0x30
 800478e:	4649      	mov	r1, r9
 8004790:	414b      	adcs	r3, r1
 8004792:	637b      	str	r3, [r7, #52]	; 0x34
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047a0:	4659      	mov	r1, fp
 80047a2:	00cb      	lsls	r3, r1, #3
 80047a4:	4651      	mov	r1, sl
 80047a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047aa:	4651      	mov	r1, sl
 80047ac:	00ca      	lsls	r2, r1, #3
 80047ae:	4610      	mov	r0, r2
 80047b0:	4619      	mov	r1, r3
 80047b2:	4603      	mov	r3, r0
 80047b4:	4642      	mov	r2, r8
 80047b6:	189b      	adds	r3, r3, r2
 80047b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047bc:	464b      	mov	r3, r9
 80047be:	460a      	mov	r2, r1
 80047c0:	eb42 0303 	adc.w	r3, r2, r3
 80047c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047dc:	460b      	mov	r3, r1
 80047de:	18db      	adds	r3, r3, r3
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e2:	4613      	mov	r3, r2
 80047e4:	eb42 0303 	adc.w	r3, r2, r3
 80047e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047f2:	f7fb fdad 	bl	8000350 <__aeabi_uldivmod>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <UART_SetConfig+0x2d4>)
 80047fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	2164      	movs	r1, #100	; 0x64
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	3332      	adds	r3, #50	; 0x32
 800480e:	4a08      	ldr	r2, [pc, #32]	; (8004830 <UART_SetConfig+0x2d4>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	f003 0207 	and.w	r2, r3, #7
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4422      	add	r2, r4
 8004822:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004824:	e106      	b.n	8004a34 <UART_SetConfig+0x4d8>
 8004826:	bf00      	nop
 8004828:	40011000 	.word	0x40011000
 800482c:	40011400 	.word	0x40011400
 8004830:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800483e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004842:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004846:	4642      	mov	r2, r8
 8004848:	464b      	mov	r3, r9
 800484a:	1891      	adds	r1, r2, r2
 800484c:	6239      	str	r1, [r7, #32]
 800484e:	415b      	adcs	r3, r3
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
 8004852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004856:	4641      	mov	r1, r8
 8004858:	1854      	adds	r4, r2, r1
 800485a:	4649      	mov	r1, r9
 800485c:	eb43 0501 	adc.w	r5, r3, r1
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	00eb      	lsls	r3, r5, #3
 800486a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800486e:	00e2      	lsls	r2, r4, #3
 8004870:	4614      	mov	r4, r2
 8004872:	461d      	mov	r5, r3
 8004874:	4643      	mov	r3, r8
 8004876:	18e3      	adds	r3, r4, r3
 8004878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800487c:	464b      	mov	r3, r9
 800487e:	eb45 0303 	adc.w	r3, r5, r3
 8004882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004892:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048a2:	4629      	mov	r1, r5
 80048a4:	008b      	lsls	r3, r1, #2
 80048a6:	4621      	mov	r1, r4
 80048a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ac:	4621      	mov	r1, r4
 80048ae:	008a      	lsls	r2, r1, #2
 80048b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048b4:	f7fb fd4c 	bl	8000350 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4b60      	ldr	r3, [pc, #384]	; (8004a40 <UART_SetConfig+0x4e4>)
 80048be:	fba3 2302 	umull	r2, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	011c      	lsls	r4, r3, #4
 80048c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048d8:	4642      	mov	r2, r8
 80048da:	464b      	mov	r3, r9
 80048dc:	1891      	adds	r1, r2, r2
 80048de:	61b9      	str	r1, [r7, #24]
 80048e0:	415b      	adcs	r3, r3
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048e8:	4641      	mov	r1, r8
 80048ea:	1851      	adds	r1, r2, r1
 80048ec:	6139      	str	r1, [r7, #16]
 80048ee:	4649      	mov	r1, r9
 80048f0:	414b      	adcs	r3, r1
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004900:	4659      	mov	r1, fp
 8004902:	00cb      	lsls	r3, r1, #3
 8004904:	4651      	mov	r1, sl
 8004906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800490a:	4651      	mov	r1, sl
 800490c:	00ca      	lsls	r2, r1, #3
 800490e:	4610      	mov	r0, r2
 8004910:	4619      	mov	r1, r3
 8004912:	4603      	mov	r3, r0
 8004914:	4642      	mov	r2, r8
 8004916:	189b      	adds	r3, r3, r2
 8004918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800491c:	464b      	mov	r3, r9
 800491e:	460a      	mov	r2, r1
 8004920:	eb42 0303 	adc.w	r3, r2, r3
 8004924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	67bb      	str	r3, [r7, #120]	; 0x78
 8004932:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004940:	4649      	mov	r1, r9
 8004942:	008b      	lsls	r3, r1, #2
 8004944:	4641      	mov	r1, r8
 8004946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800494a:	4641      	mov	r1, r8
 800494c:	008a      	lsls	r2, r1, #2
 800494e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004952:	f7fb fcfd 	bl	8000350 <__aeabi_uldivmod>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4611      	mov	r1, r2
 800495c:	4b38      	ldr	r3, [pc, #224]	; (8004a40 <UART_SetConfig+0x4e4>)
 800495e:	fba3 2301 	umull	r2, r3, r3, r1
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	2264      	movs	r2, #100	; 0x64
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	1acb      	subs	r3, r1, r3
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	3332      	adds	r3, #50	; 0x32
 8004970:	4a33      	ldr	r2, [pc, #204]	; (8004a40 <UART_SetConfig+0x4e4>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800497c:	441c      	add	r4, r3
 800497e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004982:	2200      	movs	r2, #0
 8004984:	673b      	str	r3, [r7, #112]	; 0x70
 8004986:	677a      	str	r2, [r7, #116]	; 0x74
 8004988:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800498c:	4642      	mov	r2, r8
 800498e:	464b      	mov	r3, r9
 8004990:	1891      	adds	r1, r2, r2
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	415b      	adcs	r3, r3
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800499c:	4641      	mov	r1, r8
 800499e:	1851      	adds	r1, r2, r1
 80049a0:	6039      	str	r1, [r7, #0]
 80049a2:	4649      	mov	r1, r9
 80049a4:	414b      	adcs	r3, r1
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049b4:	4659      	mov	r1, fp
 80049b6:	00cb      	lsls	r3, r1, #3
 80049b8:	4651      	mov	r1, sl
 80049ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049be:	4651      	mov	r1, sl
 80049c0:	00ca      	lsls	r2, r1, #3
 80049c2:	4610      	mov	r0, r2
 80049c4:	4619      	mov	r1, r3
 80049c6:	4603      	mov	r3, r0
 80049c8:	4642      	mov	r2, r8
 80049ca:	189b      	adds	r3, r3, r2
 80049cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80049ce:	464b      	mov	r3, r9
 80049d0:	460a      	mov	r2, r1
 80049d2:	eb42 0303 	adc.w	r3, r2, r3
 80049d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	663b      	str	r3, [r7, #96]	; 0x60
 80049e2:	667a      	str	r2, [r7, #100]	; 0x64
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049f0:	4649      	mov	r1, r9
 80049f2:	008b      	lsls	r3, r1, #2
 80049f4:	4641      	mov	r1, r8
 80049f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049fa:	4641      	mov	r1, r8
 80049fc:	008a      	lsls	r2, r1, #2
 80049fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a02:	f7fb fca5 	bl	8000350 <__aeabi_uldivmod>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <UART_SetConfig+0x4e4>)
 8004a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a10:	095b      	lsrs	r3, r3, #5
 8004a12:	2164      	movs	r1, #100	; 0x64
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	3332      	adds	r3, #50	; 0x32
 8004a1e:	4a08      	ldr	r2, [pc, #32]	; (8004a40 <UART_SetConfig+0x4e4>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	f003 020f 	and.w	r2, r3, #15
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4422      	add	r2, r4
 8004a32:	609a      	str	r2, [r3, #8]
}
 8004a34:	bf00      	nop
 8004a36:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a40:	51eb851f 	.word	0x51eb851f

08004a44 <__NVIC_SetPriority>:
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	6039      	str	r1, [r7, #0]
 8004a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	db0a      	blt.n	8004a6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	490c      	ldr	r1, [pc, #48]	; (8004a90 <__NVIC_SetPriority+0x4c>)
 8004a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a62:	0112      	lsls	r2, r2, #4
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	440b      	add	r3, r1
 8004a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a6c:	e00a      	b.n	8004a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	4908      	ldr	r1, [pc, #32]	; (8004a94 <__NVIC_SetPriority+0x50>)
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	3b04      	subs	r3, #4
 8004a7c:	0112      	lsls	r2, r2, #4
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	440b      	add	r3, r1
 8004a82:	761a      	strb	r2, [r3, #24]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	e000e100 	.word	0xe000e100
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a9c:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <SysTick_Handler+0x1c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004aa0:	f001 fd24 	bl	80064ec <xTaskGetSchedulerState>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d001      	beq.n	8004aae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004aaa:	f002 fb0d 	bl	80070c8 <xPortSysTickHandler>
  }
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	e000e010 	.word	0xe000e010

08004ab8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004abc:	2100      	movs	r1, #0
 8004abe:	f06f 0004 	mvn.w	r0, #4
 8004ac2:	f7ff ffbf 	bl	8004a44 <__NVIC_SetPriority>
#endif
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ad2:	f3ef 8305 	mrs	r3, IPSR
 8004ad6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ad8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004ade:	f06f 0305 	mvn.w	r3, #5
 8004ae2:	607b      	str	r3, [r7, #4]
 8004ae4:	e00c      	b.n	8004b00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ae6:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <osKernelInitialize+0x44>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d105      	bne.n	8004afa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004aee:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <osKernelInitialize+0x44>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	e002      	b.n	8004b00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004afe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b00:	687b      	ldr	r3, [r7, #4]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20007d40 	.word	0x20007d40

08004b14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b1a:	f3ef 8305 	mrs	r3, IPSR
 8004b1e:	603b      	str	r3, [r7, #0]
  return(result);
 8004b20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b26:	f06f 0305 	mvn.w	r3, #5
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	e010      	b.n	8004b50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <osKernelStart+0x48>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d109      	bne.n	8004b4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b36:	f7ff ffbf 	bl	8004ab8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b3a:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <osKernelStart+0x48>)
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b40:	f001 f866 	bl	8005c10 <vTaskStartScheduler>
      stat = osOK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	607b      	str	r3, [r7, #4]
 8004b48:	e002      	b.n	8004b50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b50:	687b      	ldr	r3, [r7, #4]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20007d40 	.word	0x20007d40

08004b60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08e      	sub	sp, #56	; 0x38
 8004b64:	af04      	add	r7, sp, #16
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b70:	f3ef 8305 	mrs	r3, IPSR
 8004b74:	617b      	str	r3, [r7, #20]
  return(result);
 8004b76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d17e      	bne.n	8004c7a <osThreadNew+0x11a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d07b      	beq.n	8004c7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b86:	2318      	movs	r3, #24
 8004b88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d045      	beq.n	8004c26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <osThreadNew+0x48>
        name = attr->name;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <osThreadNew+0x6e>
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	2b38      	cmp	r3, #56	; 0x38
 8004bc0:	d805      	bhi.n	8004bce <osThreadNew+0x6e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <osThreadNew+0x72>
        return (NULL);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e054      	b.n	8004c7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00e      	beq.n	8004c08 <osThreadNew+0xa8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2b5b      	cmp	r3, #91	; 0x5b
 8004bf0:	d90a      	bls.n	8004c08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d006      	beq.n	8004c08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <osThreadNew+0xa8>
        mem = 1;
 8004c02:	2301      	movs	r3, #1
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	e010      	b.n	8004c2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10c      	bne.n	8004c2a <osThreadNew+0xca>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d108      	bne.n	8004c2a <osThreadNew+0xca>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d104      	bne.n	8004c2a <osThreadNew+0xca>
          mem = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]
 8004c24:	e001      	b.n	8004c2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d110      	bne.n	8004c52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c38:	9202      	str	r2, [sp, #8]
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6a3a      	ldr	r2, [r7, #32]
 8004c44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fe0c 	bl	8005864 <xTaskCreateStatic>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	e013      	b.n	8004c7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d110      	bne.n	8004c7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	f107 0310 	add.w	r3, r7, #16
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fe57 	bl	800591e <xTaskCreate>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d001      	beq.n	8004c7a <osThreadNew+0x11a>
            hTask = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c7a:	693b      	ldr	r3, [r7, #16]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3728      	adds	r7, #40	; 0x28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c8c:	f3ef 8305 	mrs	r3, IPSR
 8004c90:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <osDelay+0x1c>
    stat = osErrorISR;
 8004c98:	f06f 0305 	mvn.w	r3, #5
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	e007      	b.n	8004cb0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 ff7c 	bl	8005ba8 <vTaskDelay>
    }
  }

  return (stat);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a07      	ldr	r2, [pc, #28]	; (8004ce8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ccc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4a06      	ldr	r2, [pc, #24]	; (8004cec <vApplicationGetIdleTaskMemory+0x30>)
 8004cd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	601a      	str	r2, [r3, #0]
}
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20007d44 	.word	0x20007d44
 8004cec:	20007da0 	.word	0x20007da0

08004cf0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4a07      	ldr	r2, [pc, #28]	; (8004d1c <vApplicationGetTimerTaskMemory+0x2c>)
 8004d00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4a06      	ldr	r2, [pc, #24]	; (8004d20 <vApplicationGetTimerTaskMemory+0x30>)
 8004d06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d0e:	601a      	str	r2, [r3, #0]
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	20007fa0 	.word	0x20007fa0
 8004d20:	20007ffc 	.word	0x20007ffc

08004d24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f103 0208 	add.w	r2, r3, #8
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f103 0208 	add.w	r2, r3, #8
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f103 0208 	add.w	r2, r3, #8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ddc:	d103      	bne.n	8004de6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	e00c      	b.n	8004e00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3308      	adds	r3, #8
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	e002      	b.n	8004df4 <vListInsert+0x2e>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d2f6      	bcs.n	8004dee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	601a      	str	r2, [r3, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6892      	ldr	r2, [r2, #8]
 8004e4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6852      	ldr	r2, [r2, #4]
 8004e58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d103      	bne.n	8004e6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	1e5a      	subs	r2, r3, #1
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <xQueueGenericReset+0x2a>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60bb      	str	r3, [r7, #8]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004eb6:	f002 f875 	bl	8006fa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	441a      	add	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	68f9      	ldr	r1, [r7, #12]
 8004eea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004eec:	fb01 f303 	mul.w	r3, r1, r3
 8004ef0:	441a      	add	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	22ff      	movs	r2, #255	; 0xff
 8004efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	22ff      	movs	r2, #255	; 0xff
 8004f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d114      	bne.n	8004f36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01a      	beq.n	8004f4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3310      	adds	r3, #16
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 f903 	bl	8006124 <xTaskRemoveFromEventList>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d012      	beq.n	8004f4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <xQueueGenericReset+0xcc>)
 8004f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	e009      	b.n	8004f4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3310      	adds	r3, #16
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fef2 	bl	8004d24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3324      	adds	r3, #36	; 0x24
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff feed 	bl	8004d24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f4a:	f002 f85b 	bl	8007004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f4e:	2301      	movs	r3, #1
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08e      	sub	sp, #56	; 0x38
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f82:	bf00      	nop
 8004f84:	e7fe      	b.n	8004f84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <xQueueGenericCreateStatic+0x52>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <xQueueGenericCreateStatic+0x56>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <xQueueGenericCreateStatic+0x58>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	623b      	str	r3, [r7, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d102      	bne.n	8004fda <xQueueGenericCreateStatic+0x7e>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <xQueueGenericCreateStatic+0x82>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <xQueueGenericCreateStatic+0x84>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	61fb      	str	r3, [r7, #28]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ffa:	2350      	movs	r3, #80	; 0x50
 8004ffc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b50      	cmp	r3, #80	; 0x50
 8005002:	d00a      	beq.n	800501a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	61bb      	str	r3, [r7, #24]
}
 8005016:	bf00      	nop
 8005018:	e7fe      	b.n	8005018 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800501a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00d      	beq.n	8005042 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800502e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	4613      	mov	r3, r2
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f805 	bl	800504c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005044:	4618      	mov	r0, r3
 8005046:	3730      	adds	r7, #48	; 0x30
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d103      	bne.n	8005068 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	e002      	b.n	800506e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800507a:	2101      	movs	r1, #1
 800507c:	69b8      	ldr	r0, [r7, #24]
 800507e:	f7ff ff05 	bl	8004e8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	78fa      	ldrb	r2, [r7, #3]
 8005086:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800508a:	bf00      	nop
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08e      	sub	sp, #56	; 0x38
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050a2:	2300      	movs	r3, #0
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <xQueueGenericSend+0x32>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d103      	bne.n	80050d4 <xQueueGenericSend+0x40>
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <xQueueGenericSend+0x44>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <xQueueGenericSend+0x46>
 80050d8:	2300      	movs	r3, #0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <xQueueGenericSend+0x60>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050f0:	bf00      	nop
 80050f2:	e7fe      	b.n	80050f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d103      	bne.n	8005102 <xQueueGenericSend+0x6e>
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <xQueueGenericSend+0x72>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <xQueueGenericSend+0x74>
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <xQueueGenericSend+0x8e>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	623b      	str	r3, [r7, #32]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005122:	f001 f9e3 	bl	80064ec <xTaskGetSchedulerState>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <xQueueGenericSend+0x9e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <xQueueGenericSend+0xa2>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <xQueueGenericSend+0xa4>
 8005136:	2300      	movs	r3, #0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <xQueueGenericSend+0xbe>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	61fb      	str	r3, [r7, #28]
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005152:	f001 ff27 	bl	8006fa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	429a      	cmp	r2, r3
 8005160:	d302      	bcc.n	8005168 <xQueueGenericSend+0xd4>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d129      	bne.n	80051bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800516e:	f000 fa0b 	bl	8005588 <prvCopyDataToQueue>
 8005172:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	2b00      	cmp	r3, #0
 800517a:	d010      	beq.n	800519e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	3324      	adds	r3, #36	; 0x24
 8005180:	4618      	mov	r0, r3
 8005182:	f000 ffcf 	bl	8006124 <xTaskRemoveFromEventList>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d013      	beq.n	80051b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800518c:	4b3f      	ldr	r3, [pc, #252]	; (800528c <xQueueGenericSend+0x1f8>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	e00a      	b.n	80051b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051a4:	4b39      	ldr	r3, [pc, #228]	; (800528c <xQueueGenericSend+0x1f8>)
 80051a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051b4:	f001 ff26 	bl	8007004 <vPortExitCritical>
				return pdPASS;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e063      	b.n	8005284 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051c2:	f001 ff1f 	bl	8007004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	e05c      	b.n	8005284 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d106      	bne.n	80051de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051d0:	f107 0314 	add.w	r3, r7, #20
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 f82f 	bl	8006238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051da:	2301      	movs	r3, #1
 80051dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051de:	f001 ff11 	bl	8007004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051e2:	f000 fd7b 	bl	8005cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051e6:	f001 fedd 	bl	8006fa4 <vPortEnterCritical>
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f0:	b25b      	sxtb	r3, r3
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f6:	d103      	bne.n	8005200 <xQueueGenericSend+0x16c>
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005206:	b25b      	sxtb	r3, r3
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800520c:	d103      	bne.n	8005216 <xQueueGenericSend+0x182>
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005216:	f001 fef5 	bl	8007004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800521a:	1d3a      	adds	r2, r7, #4
 800521c:	f107 0314 	add.w	r3, r7, #20
 8005220:	4611      	mov	r1, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f001 f81e 	bl	8006264 <xTaskCheckForTimeOut>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d124      	bne.n	8005278 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800522e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005230:	f000 faa2 	bl	8005778 <prvIsQueueFull>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d018      	beq.n	800526c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	3310      	adds	r3, #16
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	4611      	mov	r1, r2
 8005242:	4618      	mov	r0, r3
 8005244:	f000 ff1e 	bl	8006084 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800524a:	f000 fa2d 	bl	80056a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800524e:	f000 fd53 	bl	8005cf8 <xTaskResumeAll>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	f47f af7c 	bne.w	8005152 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800525a:	4b0c      	ldr	r3, [pc, #48]	; (800528c <xQueueGenericSend+0x1f8>)
 800525c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	e772      	b.n	8005152 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800526c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800526e:	f000 fa1b 	bl	80056a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005272:	f000 fd41 	bl	8005cf8 <xTaskResumeAll>
 8005276:	e76c      	b.n	8005152 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800527a:	f000 fa15 	bl	80056a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800527e:	f000 fd3b 	bl	8005cf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005282:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005284:	4618      	mov	r0, r3
 8005286:	3738      	adds	r7, #56	; 0x38
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	e000ed04 	.word	0xe000ed04

08005290 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b090      	sub	sp, #64	; 0x40
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80052a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d103      	bne.n	80052cc <xQueueGenericSendFromISR+0x3c>
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <xQueueGenericSendFromISR+0x40>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <xQueueGenericSendFromISR+0x42>
 80052d0:	2300      	movs	r3, #0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d103      	bne.n	80052fa <xQueueGenericSendFromISR+0x6a>
 80052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <xQueueGenericSendFromISR+0x6e>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <xQueueGenericSendFromISR+0x70>
 80052fe:	2300      	movs	r3, #0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	623b      	str	r3, [r7, #32]
}
 8005316:	bf00      	nop
 8005318:	e7fe      	b.n	8005318 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800531a:	f001 ff25 	bl	8007168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800531e:	f3ef 8211 	mrs	r2, BASEPRI
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	61fa      	str	r2, [r7, #28]
 8005334:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005336:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005342:	429a      	cmp	r2, r3
 8005344:	d302      	bcc.n	800534c <xQueueGenericSendFromISR+0xbc>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d12f      	bne.n	80053ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005362:	f000 f911 	bl	8005588 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005366:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800536e:	d112      	bne.n	8005396 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	2b00      	cmp	r3, #0
 8005376:	d016      	beq.n	80053a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	3324      	adds	r3, #36	; 0x24
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fed1 	bl	8006124 <xTaskRemoveFromEventList>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00e      	beq.n	80053a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e007      	b.n	80053a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005396:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800539a:	3301      	adds	r3, #1
 800539c:	b2db      	uxtb	r3, r3
 800539e:	b25a      	sxtb	r2, r3
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053a6:	2301      	movs	r3, #1
 80053a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80053aa:	e001      	b.n	80053b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3740      	adds	r7, #64	; 0x40
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08c      	sub	sp, #48	; 0x30
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053d4:	2300      	movs	r3, #0
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <xQueueReceive+0x30>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	623b      	str	r3, [r7, #32]
}
 80053f4:	bf00      	nop
 80053f6:	e7fe      	b.n	80053f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <xQueueReceive+0x3e>
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <xQueueReceive+0x42>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <xQueueReceive+0x44>
 800540a:	2300      	movs	r3, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xQueueReceive+0x5e>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	61fb      	str	r3, [r7, #28]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005426:	f001 f861 	bl	80064ec <xTaskGetSchedulerState>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <xQueueReceive+0x6e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <xQueueReceive+0x72>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <xQueueReceive+0x74>
 800543a:	2300      	movs	r3, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xQueueReceive+0x8e>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	61bb      	str	r3, [r7, #24]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005456:	f001 fda5 	bl	8006fa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800545a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01f      	beq.n	80054a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800546a:	f000 f8f7 	bl	800565c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	1e5a      	subs	r2, r3, #1
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00f      	beq.n	800549e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	3310      	adds	r3, #16
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fe4e 	bl	8006124 <xTaskRemoveFromEventList>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800548e:	4b3d      	ldr	r3, [pc, #244]	; (8005584 <xQueueReceive+0x1bc>)
 8005490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800549e:	f001 fdb1 	bl	8007004 <vPortExitCritical>
				return pdPASS;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e069      	b.n	800557a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d103      	bne.n	80054b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054ac:	f001 fdaa 	bl	8007004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e062      	b.n	800557a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054ba:	f107 0310 	add.w	r3, r7, #16
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 feba 	bl	8006238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054c8:	f001 fd9c 	bl	8007004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054cc:	f000 fc06 	bl	8005cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054d0:	f001 fd68 	bl	8006fa4 <vPortEnterCritical>
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054da:	b25b      	sxtb	r3, r3
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e0:	d103      	bne.n	80054ea <xQueueReceive+0x122>
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054f0:	b25b      	sxtb	r3, r3
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f6:	d103      	bne.n	8005500 <xQueueReceive+0x138>
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005500:	f001 fd80 	bl	8007004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005504:	1d3a      	adds	r2, r7, #4
 8005506:	f107 0310 	add.w	r3, r7, #16
 800550a:	4611      	mov	r1, r2
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fea9 	bl	8006264 <xTaskCheckForTimeOut>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d123      	bne.n	8005560 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800551a:	f000 f917 	bl	800574c <prvIsQueueEmpty>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d017      	beq.n	8005554 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	3324      	adds	r3, #36	; 0x24
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fda9 	bl	8006084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005534:	f000 f8b8 	bl	80056a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005538:	f000 fbde 	bl	8005cf8 <xTaskResumeAll>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d189      	bne.n	8005456 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <xQueueReceive+0x1bc>)
 8005544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	e780      	b.n	8005456 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005556:	f000 f8a7 	bl	80056a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800555a:	f000 fbcd 	bl	8005cf8 <xTaskResumeAll>
 800555e:	e77a      	b.n	8005456 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005562:	f000 f8a1 	bl	80056a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005566:	f000 fbc7 	bl	8005cf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800556a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800556c:	f000 f8ee 	bl	800574c <prvIsQueueEmpty>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	f43f af6f 	beq.w	8005456 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005578:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800557a:	4618      	mov	r0, r3
 800557c:	3730      	adds	r7, #48	; 0x30
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	e000ed04 	.word	0xe000ed04

08005588 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10d      	bne.n	80055c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d14d      	bne.n	800564a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 ffb8 	bl	8006528 <xTaskPriorityDisinherit>
 80055b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	609a      	str	r2, [r3, #8]
 80055c0:	e043      	b.n	800564a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d119      	bne.n	80055fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6858      	ldr	r0, [r3, #4]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	461a      	mov	r2, r3
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	f010 f9d5 	bl	8015982 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	441a      	add	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d32b      	bcc.n	800564a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	605a      	str	r2, [r3, #4]
 80055fa:	e026      	b.n	800564a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68d8      	ldr	r0, [r3, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	461a      	mov	r2, r3
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	f010 f9bb 	bl	8015982 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	425b      	negs	r3, r3
 8005616:	441a      	add	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d207      	bcs.n	8005638 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	425b      	negs	r3, r3
 8005632:	441a      	add	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d105      	bne.n	800564a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	3b01      	subs	r3, #1
 8005648:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005652:	697b      	ldr	r3, [r7, #20]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d018      	beq.n	80056a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	441a      	add	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	429a      	cmp	r2, r3
 8005686:	d303      	bcc.n	8005690 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68d9      	ldr	r1, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	461a      	mov	r2, r3
 800569a:	6838      	ldr	r0, [r7, #0]
 800569c:	f010 f971 	bl	8015982 <memcpy>
	}
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056b0:	f001 fc78 	bl	8006fa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056bc:	e011      	b.n	80056e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d012      	beq.n	80056ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3324      	adds	r3, #36	; 0x24
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fd2a 	bl	8006124 <xTaskRemoveFromEventList>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056d6:	f000 fe27 	bl	8006328 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	3b01      	subs	r3, #1
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	dce9      	bgt.n	80056be <prvUnlockQueue+0x16>
 80056ea:	e000      	b.n	80056ee <prvUnlockQueue+0x46>
					break;
 80056ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	22ff      	movs	r2, #255	; 0xff
 80056f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056f6:	f001 fc85 	bl	8007004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056fa:	f001 fc53 	bl	8006fa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005704:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005706:	e011      	b.n	800572c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d012      	beq.n	8005736 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3310      	adds	r3, #16
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fd05 	bl	8006124 <xTaskRemoveFromEventList>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005720:	f000 fe02 	bl	8006328 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005724:	7bbb      	ldrb	r3, [r7, #14]
 8005726:	3b01      	subs	r3, #1
 8005728:	b2db      	uxtb	r3, r3
 800572a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800572c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005730:	2b00      	cmp	r3, #0
 8005732:	dce9      	bgt.n	8005708 <prvUnlockQueue+0x60>
 8005734:	e000      	b.n	8005738 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005736:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	22ff      	movs	r2, #255	; 0xff
 800573c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005740:	f001 fc60 	bl	8007004 <vPortExitCritical>
}
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005754:	f001 fc26 	bl	8006fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005760:	2301      	movs	r3, #1
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e001      	b.n	800576a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800576a:	f001 fc4b 	bl	8007004 <vPortExitCritical>

	return xReturn;
 800576e:	68fb      	ldr	r3, [r7, #12]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005780:	f001 fc10 	bl	8006fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578c:	429a      	cmp	r2, r3
 800578e:	d102      	bne.n	8005796 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005790:	2301      	movs	r3, #1
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	e001      	b.n	800579a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800579a:	f001 fc33 	bl	8007004 <vPortExitCritical>

	return xReturn;
 800579e:	68fb      	ldr	r3, [r7, #12]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e014      	b.n	80057e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057b8:	4a0f      	ldr	r2, [pc, #60]	; (80057f8 <vQueueAddToRegistry+0x50>)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10b      	bne.n	80057dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057c4:	490c      	ldr	r1, [pc, #48]	; (80057f8 <vQueueAddToRegistry+0x50>)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057ce:	4a0a      	ldr	r2, [pc, #40]	; (80057f8 <vQueueAddToRegistry+0x50>)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4413      	add	r3, r2
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057da:	e006      	b.n	80057ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3301      	adds	r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b07      	cmp	r3, #7
 80057e6:	d9e7      	bls.n	80057b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	200083fc 	.word	0x200083fc

080057fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800580c:	f001 fbca 	bl	8006fa4 <vPortEnterCritical>
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005816:	b25b      	sxtb	r3, r3
 8005818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800581c:	d103      	bne.n	8005826 <vQueueWaitForMessageRestricted+0x2a>
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800582c:	b25b      	sxtb	r3, r3
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005832:	d103      	bne.n	800583c <vQueueWaitForMessageRestricted+0x40>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800583c:	f001 fbe2 	bl	8007004 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	2b00      	cmp	r3, #0
 8005846:	d106      	bne.n	8005856 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	3324      	adds	r3, #36	; 0x24
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fc3b 	bl	80060cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005856:	6978      	ldr	r0, [r7, #20]
 8005858:	f7ff ff26 	bl	80056a8 <prvUnlockQueue>
	}
 800585c:	bf00      	nop
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08e      	sub	sp, #56	; 0x38
 8005868:	af04      	add	r7, sp, #16
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	623b      	str	r3, [r7, #32]
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <xTaskCreateStatic+0x46>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	61fb      	str	r3, [r7, #28]
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058aa:	235c      	movs	r3, #92	; 0x5c
 80058ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b5c      	cmp	r3, #92	; 0x5c
 80058b2:	d00a      	beq.n	80058ca <xTaskCreateStatic+0x66>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	61bb      	str	r3, [r7, #24]
}
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d01e      	beq.n	8005910 <xTaskCreateStatic+0xac>
 80058d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01b      	beq.n	8005910 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058ea:	2300      	movs	r3, #0
 80058ec:	9303      	str	r3, [sp, #12]
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	9302      	str	r3, [sp, #8]
 80058f2:	f107 0314 	add.w	r3, r7, #20
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f850 	bl	80059a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800590a:	f000 f8dd 	bl	8005ac8 <prvAddNewTaskToReadyList>
 800590e:	e001      	b.n	8005914 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005914:	697b      	ldr	r3, [r7, #20]
	}
 8005916:	4618      	mov	r0, r3
 8005918:	3728      	adds	r7, #40	; 0x28
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800591e:	b580      	push	{r7, lr}
 8005920:	b08c      	sub	sp, #48	; 0x30
 8005922:	af04      	add	r7, sp, #16
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	603b      	str	r3, [r7, #0]
 800592a:	4613      	mov	r3, r2
 800592c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4618      	mov	r0, r3
 8005934:	f001 fc58 	bl	80071e8 <pvPortMalloc>
 8005938:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00e      	beq.n	800595e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005940:	205c      	movs	r0, #92	; 0x5c
 8005942:	f001 fc51 	bl	80071e8 <pvPortMalloc>
 8005946:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	631a      	str	r2, [r3, #48]	; 0x30
 8005954:	e005      	b.n	8005962 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005956:	6978      	ldr	r0, [r7, #20]
 8005958:	f001 fd12 	bl	8007380 <vPortFree>
 800595c:	e001      	b.n	8005962 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d017      	beq.n	8005998 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005970:	88fa      	ldrh	r2, [r7, #6]
 8005972:	2300      	movs	r3, #0
 8005974:	9303      	str	r3, [sp, #12]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	9302      	str	r3, [sp, #8]
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 f80e 	bl	80059a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800598c:	69f8      	ldr	r0, [r7, #28]
 800598e:	f000 f89b 	bl	8005ac8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005992:	2301      	movs	r3, #1
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	e002      	b.n	800599e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800599c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800599e:	69bb      	ldr	r3, [r7, #24]
	}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	461a      	mov	r2, r3
 80059c0:	21a5      	movs	r1, #165	; 0xa5
 80059c2:	f00f ff03 	bl	80157cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059d0:	3b01      	subs	r3, #1
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <prvInitialiseNewTask+0x58>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	617b      	str	r3, [r7, #20]
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01f      	beq.n	8005a46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
 8005a0a:	e012      	b.n	8005a32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	7819      	ldrb	r1, [r3, #0]
 8005a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	4413      	add	r3, r2
 8005a1a:	3334      	adds	r3, #52	; 0x34
 8005a1c:	460a      	mov	r2, r1
 8005a1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d006      	beq.n	8005a3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	61fb      	str	r3, [r7, #28]
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2b0f      	cmp	r3, #15
 8005a36:	d9e9      	bls.n	8005a0c <prvInitialiseNewTask+0x64>
 8005a38:	e000      	b.n	8005a3c <prvInitialiseNewTask+0x94>
			{
				break;
 8005a3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a44:	e003      	b.n	8005a4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	2b37      	cmp	r3, #55	; 0x37
 8005a52:	d901      	bls.n	8005a58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a54:	2337      	movs	r3, #55	; 0x37
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	2200      	movs	r2, #0
 8005a68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff f978 	bl	8004d64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	3318      	adds	r3, #24
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff f973 	bl	8004d64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	2200      	movs	r2, #0
 8005a98:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	68f9      	ldr	r1, [r7, #12]
 8005aa6:	69b8      	ldr	r0, [r7, #24]
 8005aa8:	f001 f94e 	bl	8006d48 <pxPortInitialiseStack>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005abc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005abe:	bf00      	nop
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ad0:	f001 fa68 	bl	8006fa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ad4:	4b2d      	ldr	r3, [pc, #180]	; (8005b8c <prvAddNewTaskToReadyList+0xc4>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	4a2c      	ldr	r2, [pc, #176]	; (8005b8c <prvAddNewTaskToReadyList+0xc4>)
 8005adc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ade:	4b2c      	ldr	r3, [pc, #176]	; (8005b90 <prvAddNewTaskToReadyList+0xc8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d109      	bne.n	8005afa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ae6:	4a2a      	ldr	r2, [pc, #168]	; (8005b90 <prvAddNewTaskToReadyList+0xc8>)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005aec:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <prvAddNewTaskToReadyList+0xc4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d110      	bne.n	8005b16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005af4:	f000 fc3c 	bl	8006370 <prvInitialiseTaskLists>
 8005af8:	e00d      	b.n	8005b16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005afa:	4b26      	ldr	r3, [pc, #152]	; (8005b94 <prvAddNewTaskToReadyList+0xcc>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b02:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <prvAddNewTaskToReadyList+0xc8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d802      	bhi.n	8005b16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b10:	4a1f      	ldr	r2, [pc, #124]	; (8005b90 <prvAddNewTaskToReadyList+0xc8>)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b16:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <prvAddNewTaskToReadyList+0xd0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	4a1e      	ldr	r2, [pc, #120]	; (8005b98 <prvAddNewTaskToReadyList+0xd0>)
 8005b1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b20:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <prvAddNewTaskToReadyList+0xd0>)
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <prvAddNewTaskToReadyList+0xd4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d903      	bls.n	8005b3c <prvAddNewTaskToReadyList+0x74>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	4a18      	ldr	r2, [pc, #96]	; (8005b9c <prvAddNewTaskToReadyList+0xd4>)
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4a15      	ldr	r2, [pc, #84]	; (8005ba0 <prvAddNewTaskToReadyList+0xd8>)
 8005b4a:	441a      	add	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	4619      	mov	r1, r3
 8005b52:	4610      	mov	r0, r2
 8005b54:	f7ff f913 	bl	8004d7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b58:	f001 fa54 	bl	8007004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <prvAddNewTaskToReadyList+0xcc>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00e      	beq.n	8005b82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b64:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <prvAddNewTaskToReadyList+0xc8>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d207      	bcs.n	8005b82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b72:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <prvAddNewTaskToReadyList+0xdc>)
 8005b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20008910 	.word	0x20008910
 8005b90:	2000843c 	.word	0x2000843c
 8005b94:	2000891c 	.word	0x2000891c
 8005b98:	2000892c 	.word	0x2000892c
 8005b9c:	20008918 	.word	0x20008918
 8005ba0:	20008440 	.word	0x20008440
 8005ba4:	e000ed04 	.word	0xe000ed04

08005ba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d017      	beq.n	8005bea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bba:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <vTaskDelay+0x60>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <vTaskDelay+0x30>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	60bb      	str	r3, [r7, #8]
}
 8005bd4:	bf00      	nop
 8005bd6:	e7fe      	b.n	8005bd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bd8:	f000 f880 	bl	8005cdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bdc:	2100      	movs	r1, #0
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fd10 	bl	8006604 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005be4:	f000 f888 	bl	8005cf8 <xTaskResumeAll>
 8005be8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d107      	bne.n	8005c00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bf0:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <vTaskDelay+0x64>)
 8005bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c00:	bf00      	nop
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	20008938 	.word	0x20008938
 8005c0c:	e000ed04 	.word	0xe000ed04

08005c10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08a      	sub	sp, #40	; 0x28
 8005c14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c1e:	463a      	mov	r2, r7
 8005c20:	1d39      	adds	r1, r7, #4
 8005c22:	f107 0308 	add.w	r3, r7, #8
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff f848 	bl	8004cbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	9202      	str	r2, [sp, #8]
 8005c34:	9301      	str	r3, [sp, #4]
 8005c36:	2300      	movs	r3, #0
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	460a      	mov	r2, r1
 8005c3e:	4921      	ldr	r1, [pc, #132]	; (8005cc4 <vTaskStartScheduler+0xb4>)
 8005c40:	4821      	ldr	r0, [pc, #132]	; (8005cc8 <vTaskStartScheduler+0xb8>)
 8005c42:	f7ff fe0f 	bl	8005864 <xTaskCreateStatic>
 8005c46:	4603      	mov	r3, r0
 8005c48:	4a20      	ldr	r2, [pc, #128]	; (8005ccc <vTaskStartScheduler+0xbc>)
 8005c4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c4c:	4b1f      	ldr	r3, [pc, #124]	; (8005ccc <vTaskStartScheduler+0xbc>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c54:	2301      	movs	r3, #1
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	e001      	b.n	8005c5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d102      	bne.n	8005c6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c64:	f000 fd22 	bl	80066ac <xTimerCreateTimerTask>
 8005c68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d116      	bne.n	8005c9e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	613b      	str	r3, [r7, #16]
}
 8005c82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c84:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <vTaskStartScheduler+0xc0>)
 8005c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c8c:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <vTaskStartScheduler+0xc4>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c92:	4b11      	ldr	r3, [pc, #68]	; (8005cd8 <vTaskStartScheduler+0xc8>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c98:	f001 f8e2 	bl	8006e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c9c:	e00e      	b.n	8005cbc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ca4:	d10a      	bne.n	8005cbc <vTaskStartScheduler+0xac>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	60fb      	str	r3, [r7, #12]
}
 8005cb8:	bf00      	nop
 8005cba:	e7fe      	b.n	8005cba <vTaskStartScheduler+0xaa>
}
 8005cbc:	bf00      	nop
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	080167d4 	.word	0x080167d4
 8005cc8:	08006341 	.word	0x08006341
 8005ccc:	20008934 	.word	0x20008934
 8005cd0:	20008930 	.word	0x20008930
 8005cd4:	2000891c 	.word	0x2000891c
 8005cd8:	20008914 	.word	0x20008914

08005cdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ce0:	4b04      	ldr	r3, [pc, #16]	; (8005cf4 <vTaskSuspendAll+0x18>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	4a03      	ldr	r2, [pc, #12]	; (8005cf4 <vTaskSuspendAll+0x18>)
 8005ce8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cea:	bf00      	nop
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20008938 	.word	0x20008938

08005cf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d06:	4b42      	ldr	r3, [pc, #264]	; (8005e10 <xTaskResumeAll+0x118>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	603b      	str	r3, [r7, #0]
}
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d24:	f001 f93e 	bl	8006fa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d28:	4b39      	ldr	r3, [pc, #228]	; (8005e10 <xTaskResumeAll+0x118>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	4a38      	ldr	r2, [pc, #224]	; (8005e10 <xTaskResumeAll+0x118>)
 8005d30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d32:	4b37      	ldr	r3, [pc, #220]	; (8005e10 <xTaskResumeAll+0x118>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d162      	bne.n	8005e00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d3a:	4b36      	ldr	r3, [pc, #216]	; (8005e14 <xTaskResumeAll+0x11c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d05e      	beq.n	8005e00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d42:	e02f      	b.n	8005da4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d44:	4b34      	ldr	r3, [pc, #208]	; (8005e18 <xTaskResumeAll+0x120>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3318      	adds	r3, #24
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff f871 	bl	8004e38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff f86c 	bl	8004e38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d64:	4b2d      	ldr	r3, [pc, #180]	; (8005e1c <xTaskResumeAll+0x124>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d903      	bls.n	8005d74 <xTaskResumeAll+0x7c>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	4a2a      	ldr	r2, [pc, #168]	; (8005e1c <xTaskResumeAll+0x124>)
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4a27      	ldr	r2, [pc, #156]	; (8005e20 <xTaskResumeAll+0x128>)
 8005d82:	441a      	add	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f7fe fff7 	bl	8004d7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d94:	4b23      	ldr	r3, [pc, #140]	; (8005e24 <xTaskResumeAll+0x12c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d302      	bcc.n	8005da4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d9e:	4b22      	ldr	r3, [pc, #136]	; (8005e28 <xTaskResumeAll+0x130>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005da4:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <xTaskResumeAll+0x120>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1cb      	bne.n	8005d44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005db2:	f000 fb7b 	bl	80064ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005db6:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <xTaskResumeAll+0x134>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d010      	beq.n	8005de4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dc2:	f000 f847 	bl	8005e54 <xTaskIncrementTick>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005dcc:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <xTaskResumeAll+0x130>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f1      	bne.n	8005dc2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005dde:	4b13      	ldr	r3, [pc, #76]	; (8005e2c <xTaskResumeAll+0x134>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005de4:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <xTaskResumeAll+0x130>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d009      	beq.n	8005e00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dec:	2301      	movs	r3, #1
 8005dee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005df0:	4b0f      	ldr	r3, [pc, #60]	; (8005e30 <xTaskResumeAll+0x138>)
 8005df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e00:	f001 f900 	bl	8007004 <vPortExitCritical>

	return xAlreadyYielded;
 8005e04:	68bb      	ldr	r3, [r7, #8]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20008938 	.word	0x20008938
 8005e14:	20008910 	.word	0x20008910
 8005e18:	200088d0 	.word	0x200088d0
 8005e1c:	20008918 	.word	0x20008918
 8005e20:	20008440 	.word	0x20008440
 8005e24:	2000843c 	.word	0x2000843c
 8005e28:	20008924 	.word	0x20008924
 8005e2c:	20008920 	.word	0x20008920
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e3a:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <xTaskGetTickCount+0x1c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e40:	687b      	ldr	r3, [r7, #4]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	20008914 	.word	0x20008914

08005e54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e5e:	4b4f      	ldr	r3, [pc, #316]	; (8005f9c <xTaskIncrementTick+0x148>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f040 808f 	bne.w	8005f86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e68:	4b4d      	ldr	r3, [pc, #308]	; (8005fa0 <xTaskIncrementTick+0x14c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e70:	4a4b      	ldr	r2, [pc, #300]	; (8005fa0 <xTaskIncrementTick+0x14c>)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d120      	bne.n	8005ebe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e7c:	4b49      	ldr	r3, [pc, #292]	; (8005fa4 <xTaskIncrementTick+0x150>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <xTaskIncrementTick+0x48>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	603b      	str	r3, [r7, #0]
}
 8005e98:	bf00      	nop
 8005e9a:	e7fe      	b.n	8005e9a <xTaskIncrementTick+0x46>
 8005e9c:	4b41      	ldr	r3, [pc, #260]	; (8005fa4 <xTaskIncrementTick+0x150>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	4b41      	ldr	r3, [pc, #260]	; (8005fa8 <xTaskIncrementTick+0x154>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a3f      	ldr	r2, [pc, #252]	; (8005fa4 <xTaskIncrementTick+0x150>)
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	4a3f      	ldr	r2, [pc, #252]	; (8005fa8 <xTaskIncrementTick+0x154>)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	4b3e      	ldr	r3, [pc, #248]	; (8005fac <xTaskIncrementTick+0x158>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	4a3d      	ldr	r2, [pc, #244]	; (8005fac <xTaskIncrementTick+0x158>)
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	f000 faf7 	bl	80064ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ebe:	4b3c      	ldr	r3, [pc, #240]	; (8005fb0 <xTaskIncrementTick+0x15c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d349      	bcc.n	8005f5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ec8:	4b36      	ldr	r3, [pc, #216]	; (8005fa4 <xTaskIncrementTick+0x150>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d104      	bne.n	8005edc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed2:	4b37      	ldr	r3, [pc, #220]	; (8005fb0 <xTaskIncrementTick+0x15c>)
 8005ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ed8:	601a      	str	r2, [r3, #0]
					break;
 8005eda:	e03f      	b.n	8005f5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005edc:	4b31      	ldr	r3, [pc, #196]	; (8005fa4 <xTaskIncrementTick+0x150>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d203      	bcs.n	8005efc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ef4:	4a2e      	ldr	r2, [pc, #184]	; (8005fb0 <xTaskIncrementTick+0x15c>)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005efa:	e02f      	b.n	8005f5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fe ff99 	bl	8004e38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d004      	beq.n	8005f18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	3318      	adds	r3, #24
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fe ff90 	bl	8004e38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1c:	4b25      	ldr	r3, [pc, #148]	; (8005fb4 <xTaskIncrementTick+0x160>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d903      	bls.n	8005f2c <xTaskIncrementTick+0xd8>
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	4a22      	ldr	r2, [pc, #136]	; (8005fb4 <xTaskIncrementTick+0x160>)
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4a1f      	ldr	r2, [pc, #124]	; (8005fb8 <xTaskIncrementTick+0x164>)
 8005f3a:	441a      	add	r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	4619      	mov	r1, r3
 8005f42:	4610      	mov	r0, r2
 8005f44:	f7fe ff1b 	bl	8004d7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	; (8005fbc <xTaskIncrementTick+0x168>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d3b8      	bcc.n	8005ec8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f56:	2301      	movs	r3, #1
 8005f58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f5a:	e7b5      	b.n	8005ec8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f5c:	4b17      	ldr	r3, [pc, #92]	; (8005fbc <xTaskIncrementTick+0x168>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f62:	4915      	ldr	r1, [pc, #84]	; (8005fb8 <xTaskIncrementTick+0x164>)
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d901      	bls.n	8005f78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f74:	2301      	movs	r3, #1
 8005f76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f78:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <xTaskIncrementTick+0x16c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f80:	2301      	movs	r3, #1
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	e004      	b.n	8005f90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f86:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <xTaskIncrementTick+0x170>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	4a0d      	ldr	r2, [pc, #52]	; (8005fc4 <xTaskIncrementTick+0x170>)
 8005f8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f90:	697b      	ldr	r3, [r7, #20]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20008938 	.word	0x20008938
 8005fa0:	20008914 	.word	0x20008914
 8005fa4:	200088c8 	.word	0x200088c8
 8005fa8:	200088cc 	.word	0x200088cc
 8005fac:	20008928 	.word	0x20008928
 8005fb0:	20008930 	.word	0x20008930
 8005fb4:	20008918 	.word	0x20008918
 8005fb8:	20008440 	.word	0x20008440
 8005fbc:	2000843c 	.word	0x2000843c
 8005fc0:	20008924 	.word	0x20008924
 8005fc4:	20008920 	.word	0x20008920

08005fc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fce:	4b28      	ldr	r3, [pc, #160]	; (8006070 <vTaskSwitchContext+0xa8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fd6:	4b27      	ldr	r3, [pc, #156]	; (8006074 <vTaskSwitchContext+0xac>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fdc:	e041      	b.n	8006062 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005fde:	4b25      	ldr	r3, [pc, #148]	; (8006074 <vTaskSwitchContext+0xac>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe4:	4b24      	ldr	r3, [pc, #144]	; (8006078 <vTaskSwitchContext+0xb0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	e010      	b.n	800600e <vTaskSwitchContext+0x46>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <vTaskSwitchContext+0x40>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	607b      	str	r3, [r7, #4]
}
 8006004:	bf00      	nop
 8006006:	e7fe      	b.n	8006006 <vTaskSwitchContext+0x3e>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3b01      	subs	r3, #1
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	491b      	ldr	r1, [pc, #108]	; (800607c <vTaskSwitchContext+0xb4>)
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	440b      	add	r3, r1
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0e4      	beq.n	8005fec <vTaskSwitchContext+0x24>
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4a13      	ldr	r2, [pc, #76]	; (800607c <vTaskSwitchContext+0xb4>)
 800602e:	4413      	add	r3, r2
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	605a      	str	r2, [r3, #4]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	3308      	adds	r3, #8
 8006044:	429a      	cmp	r2, r3
 8006046:	d104      	bne.n	8006052 <vTaskSwitchContext+0x8a>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	605a      	str	r2, [r3, #4]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	4a09      	ldr	r2, [pc, #36]	; (8006080 <vTaskSwitchContext+0xb8>)
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	4a06      	ldr	r2, [pc, #24]	; (8006078 <vTaskSwitchContext+0xb0>)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6013      	str	r3, [r2, #0]
}
 8006062:	bf00      	nop
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	20008938 	.word	0x20008938
 8006074:	20008924 	.word	0x20008924
 8006078:	20008918 	.word	0x20008918
 800607c:	20008440 	.word	0x20008440
 8006080:	2000843c 	.word	0x2000843c

08006084 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	60fb      	str	r3, [r7, #12]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <vTaskPlaceOnEventList+0x44>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3318      	adds	r3, #24
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fe fe87 	bl	8004dc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060b8:	2101      	movs	r1, #1
 80060ba:	6838      	ldr	r0, [r7, #0]
 80060bc:	f000 faa2 	bl	8006604 <prvAddCurrentTaskToDelayedList>
}
 80060c0:	bf00      	nop
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	2000843c 	.word	0x2000843c

080060cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	617b      	str	r3, [r7, #20]
}
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060f4:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <vTaskPlaceOnEventListRestricted+0x54>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3318      	adds	r3, #24
 80060fa:	4619      	mov	r1, r3
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f7fe fe3e 	bl	8004d7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800610c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	68b8      	ldr	r0, [r7, #8]
 8006112:	f000 fa77 	bl	8006604 <prvAddCurrentTaskToDelayedList>
	}
 8006116:	bf00      	nop
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	2000843c 	.word	0x2000843c

08006124 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10a      	bne.n	8006150 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	60fb      	str	r3, [r7, #12]
}
 800614c:	bf00      	nop
 800614e:	e7fe      	b.n	800614e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	3318      	adds	r3, #24
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe fe6f 	bl	8004e38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800615a:	4b1e      	ldr	r3, [pc, #120]	; (80061d4 <xTaskRemoveFromEventList+0xb0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d11d      	bne.n	800619e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	3304      	adds	r3, #4
 8006166:	4618      	mov	r0, r3
 8006168:	f7fe fe66 	bl	8004e38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006170:	4b19      	ldr	r3, [pc, #100]	; (80061d8 <xTaskRemoveFromEventList+0xb4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d903      	bls.n	8006180 <xTaskRemoveFromEventList+0x5c>
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	4a16      	ldr	r2, [pc, #88]	; (80061d8 <xTaskRemoveFromEventList+0xb4>)
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4a13      	ldr	r2, [pc, #76]	; (80061dc <xTaskRemoveFromEventList+0xb8>)
 800618e:	441a      	add	r2, r3
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	3304      	adds	r3, #4
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	f7fe fdf1 	bl	8004d7e <vListInsertEnd>
 800619c:	e005      	b.n	80061aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	3318      	adds	r3, #24
 80061a2:	4619      	mov	r1, r3
 80061a4:	480e      	ldr	r0, [pc, #56]	; (80061e0 <xTaskRemoveFromEventList+0xbc>)
 80061a6:	f7fe fdea 	bl	8004d7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <xTaskRemoveFromEventList+0xc0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d905      	bls.n	80061c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <xTaskRemoveFromEventList+0xc4>)
 80061be:	2201      	movs	r2, #1
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	e001      	b.n	80061c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80061c8:	697b      	ldr	r3, [r7, #20]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20008938 	.word	0x20008938
 80061d8:	20008918 	.word	0x20008918
 80061dc:	20008440 	.word	0x20008440
 80061e0:	200088d0 	.word	0x200088d0
 80061e4:	2000843c 	.word	0x2000843c
 80061e8:	20008924 	.word	0x20008924

080061ec <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <vTaskSetTimeOutState+0x24>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	60fb      	str	r3, [r7, #12]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8006210:	f000 fec8 	bl	8006fa4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006214:	4b06      	ldr	r3, [pc, #24]	; (8006230 <vTaskSetTimeOutState+0x44>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800621c:	4b05      	ldr	r3, [pc, #20]	; (8006234 <vTaskSetTimeOutState+0x48>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8006224:	f000 feee 	bl	8007004 <vPortExitCritical>
}
 8006228:	bf00      	nop
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	20008928 	.word	0x20008928
 8006234:	20008914 	.word	0x20008914

08006238 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <vTaskInternalSetTimeOutState+0x24>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <vTaskInternalSetTimeOutState+0x28>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	605a      	str	r2, [r3, #4]
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	20008928 	.word	0x20008928
 8006260:	20008914 	.word	0x20008914

08006264 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10a      	bne.n	800628a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	613b      	str	r3, [r7, #16]
}
 8006286:	bf00      	nop
 8006288:	e7fe      	b.n	8006288 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	60fb      	str	r3, [r7, #12]
}
 80062a2:	bf00      	nop
 80062a4:	e7fe      	b.n	80062a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80062a6:	f000 fe7d 	bl	8006fa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <xTaskCheckForTimeOut+0xbc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062c2:	d102      	bne.n	80062ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062c4:	2300      	movs	r3, #0
 80062c6:	61fb      	str	r3, [r7, #28]
 80062c8:	e023      	b.n	8006312 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4b15      	ldr	r3, [pc, #84]	; (8006324 <xTaskCheckForTimeOut+0xc0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d007      	beq.n	80062e6 <xTaskCheckForTimeOut+0x82>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d302      	bcc.n	80062e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062e0:	2301      	movs	r3, #1
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	e015      	b.n	8006312 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d20b      	bcs.n	8006308 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	1ad2      	subs	r2, r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff ff9b 	bl	8006238 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006302:	2300      	movs	r3, #0
 8006304:	61fb      	str	r3, [r7, #28]
 8006306:	e004      	b.n	8006312 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800630e:	2301      	movs	r3, #1
 8006310:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006312:	f000 fe77 	bl	8007004 <vPortExitCritical>

	return xReturn;
 8006316:	69fb      	ldr	r3, [r7, #28]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	20008914 	.word	0x20008914
 8006324:	20008928 	.word	0x20008928

08006328 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800632c:	4b03      	ldr	r3, [pc, #12]	; (800633c <vTaskMissedYield+0x14>)
 800632e:	2201      	movs	r2, #1
 8006330:	601a      	str	r2, [r3, #0]
}
 8006332:	bf00      	nop
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	20008924 	.word	0x20008924

08006340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006348:	f000 f852 	bl	80063f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800634c:	4b06      	ldr	r3, [pc, #24]	; (8006368 <prvIdleTask+0x28>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d9f9      	bls.n	8006348 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006354:	4b05      	ldr	r3, [pc, #20]	; (800636c <prvIdleTask+0x2c>)
 8006356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006364:	e7f0      	b.n	8006348 <prvIdleTask+0x8>
 8006366:	bf00      	nop
 8006368:	20008440 	.word	0x20008440
 800636c:	e000ed04 	.word	0xe000ed04

08006370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006376:	2300      	movs	r3, #0
 8006378:	607b      	str	r3, [r7, #4]
 800637a:	e00c      	b.n	8006396 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4a12      	ldr	r2, [pc, #72]	; (80063d0 <prvInitialiseTaskLists+0x60>)
 8006388:	4413      	add	r3, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fcca 	bl	8004d24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3301      	adds	r3, #1
 8006394:	607b      	str	r3, [r7, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b37      	cmp	r3, #55	; 0x37
 800639a:	d9ef      	bls.n	800637c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800639c:	480d      	ldr	r0, [pc, #52]	; (80063d4 <prvInitialiseTaskLists+0x64>)
 800639e:	f7fe fcc1 	bl	8004d24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063a2:	480d      	ldr	r0, [pc, #52]	; (80063d8 <prvInitialiseTaskLists+0x68>)
 80063a4:	f7fe fcbe 	bl	8004d24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063a8:	480c      	ldr	r0, [pc, #48]	; (80063dc <prvInitialiseTaskLists+0x6c>)
 80063aa:	f7fe fcbb 	bl	8004d24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063ae:	480c      	ldr	r0, [pc, #48]	; (80063e0 <prvInitialiseTaskLists+0x70>)
 80063b0:	f7fe fcb8 	bl	8004d24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063b4:	480b      	ldr	r0, [pc, #44]	; (80063e4 <prvInitialiseTaskLists+0x74>)
 80063b6:	f7fe fcb5 	bl	8004d24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063ba:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <prvInitialiseTaskLists+0x78>)
 80063bc:	4a05      	ldr	r2, [pc, #20]	; (80063d4 <prvInitialiseTaskLists+0x64>)
 80063be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063c0:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <prvInitialiseTaskLists+0x7c>)
 80063c2:	4a05      	ldr	r2, [pc, #20]	; (80063d8 <prvInitialiseTaskLists+0x68>)
 80063c4:	601a      	str	r2, [r3, #0]
}
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20008440 	.word	0x20008440
 80063d4:	200088a0 	.word	0x200088a0
 80063d8:	200088b4 	.word	0x200088b4
 80063dc:	200088d0 	.word	0x200088d0
 80063e0:	200088e4 	.word	0x200088e4
 80063e4:	200088fc 	.word	0x200088fc
 80063e8:	200088c8 	.word	0x200088c8
 80063ec:	200088cc 	.word	0x200088cc

080063f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063f6:	e019      	b.n	800642c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063f8:	f000 fdd4 	bl	8006fa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063fc:	4b10      	ldr	r3, [pc, #64]	; (8006440 <prvCheckTasksWaitingTermination+0x50>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3304      	adds	r3, #4
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fd15 	bl	8004e38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800640e:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <prvCheckTasksWaitingTermination+0x54>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3b01      	subs	r3, #1
 8006414:	4a0b      	ldr	r2, [pc, #44]	; (8006444 <prvCheckTasksWaitingTermination+0x54>)
 8006416:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006418:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <prvCheckTasksWaitingTermination+0x58>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3b01      	subs	r3, #1
 800641e:	4a0a      	ldr	r2, [pc, #40]	; (8006448 <prvCheckTasksWaitingTermination+0x58>)
 8006420:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006422:	f000 fdef 	bl	8007004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f810 	bl	800644c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <prvCheckTasksWaitingTermination+0x58>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e1      	bne.n	80063f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	200088e4 	.word	0x200088e4
 8006444:	20008910 	.word	0x20008910
 8006448:	200088f8 	.word	0x200088f8

0800644c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800645a:	2b00      	cmp	r3, #0
 800645c:	d108      	bne.n	8006470 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	4618      	mov	r0, r3
 8006464:	f000 ff8c 	bl	8007380 <vPortFree>
				vPortFree( pxTCB );
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 ff89 	bl	8007380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800646e:	e018      	b.n	80064a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006476:	2b01      	cmp	r3, #1
 8006478:	d103      	bne.n	8006482 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 ff80 	bl	8007380 <vPortFree>
	}
 8006480:	e00f      	b.n	80064a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006488:	2b02      	cmp	r3, #2
 800648a:	d00a      	beq.n	80064a2 <prvDeleteTCB+0x56>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	60fb      	str	r3, [r7, #12]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <prvDeleteTCB+0x54>
	}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b2:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <prvResetNextTaskUnblockTime+0x38>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d104      	bne.n	80064c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064bc:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <prvResetNextTaskUnblockTime+0x3c>)
 80064be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064c4:	e008      	b.n	80064d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <prvResetNextTaskUnblockTime+0x38>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	4a04      	ldr	r2, [pc, #16]	; (80064e8 <prvResetNextTaskUnblockTime+0x3c>)
 80064d6:	6013      	str	r3, [r2, #0]
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	200088c8 	.word	0x200088c8
 80064e8:	20008930 	.word	0x20008930

080064ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064f2:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <xTaskGetSchedulerState+0x34>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064fa:	2301      	movs	r3, #1
 80064fc:	607b      	str	r3, [r7, #4]
 80064fe:	e008      	b.n	8006512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006500:	4b08      	ldr	r3, [pc, #32]	; (8006524 <xTaskGetSchedulerState+0x38>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006508:	2302      	movs	r3, #2
 800650a:	607b      	str	r3, [r7, #4]
 800650c:	e001      	b.n	8006512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800650e:	2300      	movs	r3, #0
 8006510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006512:	687b      	ldr	r3, [r7, #4]
	}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	2000891c 	.word	0x2000891c
 8006524:	20008938 	.word	0x20008938

08006528 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d056      	beq.n	80065ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800653e:	4b2e      	ldr	r3, [pc, #184]	; (80065f8 <xTaskPriorityDisinherit+0xd0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	429a      	cmp	r2, r3
 8006546:	d00a      	beq.n	800655e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	60fb      	str	r3, [r7, #12]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	60bb      	str	r3, [r7, #8]
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006580:	1e5a      	subs	r2, r3, #1
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658e:	429a      	cmp	r2, r3
 8006590:	d02c      	beq.n	80065ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006596:	2b00      	cmp	r3, #0
 8006598:	d128      	bne.n	80065ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	3304      	adds	r3, #4
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fc4a 	bl	8004e38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065bc:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <xTaskPriorityDisinherit+0xd4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d903      	bls.n	80065cc <xTaskPriorityDisinherit+0xa4>
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	4a0c      	ldr	r2, [pc, #48]	; (80065fc <xTaskPriorityDisinherit+0xd4>)
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4a09      	ldr	r2, [pc, #36]	; (8006600 <xTaskPriorityDisinherit+0xd8>)
 80065da:	441a      	add	r2, r3
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	3304      	adds	r3, #4
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f7fe fbcb 	bl	8004d7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065e8:	2301      	movs	r3, #1
 80065ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065ec:	697b      	ldr	r3, [r7, #20]
	}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	2000843c 	.word	0x2000843c
 80065fc:	20008918 	.word	0x20008918
 8006600:	20008440 	.word	0x20008440

08006604 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800660e:	4b21      	ldr	r3, [pc, #132]	; (8006694 <prvAddCurrentTaskToDelayedList+0x90>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006614:	4b20      	ldr	r3, [pc, #128]	; (8006698 <prvAddCurrentTaskToDelayedList+0x94>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3304      	adds	r3, #4
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe fc0c 	bl	8004e38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006626:	d10a      	bne.n	800663e <prvAddCurrentTaskToDelayedList+0x3a>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800662e:	4b1a      	ldr	r3, [pc, #104]	; (8006698 <prvAddCurrentTaskToDelayedList+0x94>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3304      	adds	r3, #4
 8006634:	4619      	mov	r1, r3
 8006636:	4819      	ldr	r0, [pc, #100]	; (800669c <prvAddCurrentTaskToDelayedList+0x98>)
 8006638:	f7fe fba1 	bl	8004d7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800663c:	e026      	b.n	800668c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4413      	add	r3, r2
 8006644:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006646:	4b14      	ldr	r3, [pc, #80]	; (8006698 <prvAddCurrentTaskToDelayedList+0x94>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	429a      	cmp	r2, r3
 8006654:	d209      	bcs.n	800666a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006656:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4b0f      	ldr	r3, [pc, #60]	; (8006698 <prvAddCurrentTaskToDelayedList+0x94>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3304      	adds	r3, #4
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f7fe fbaf 	bl	8004dc6 <vListInsert>
}
 8006668:	e010      	b.n	800668c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800666a:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <prvAddCurrentTaskToDelayedList+0x94>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3304      	adds	r3, #4
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f7fe fba5 	bl	8004dc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	429a      	cmp	r2, r3
 8006684:	d202      	bcs.n	800668c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006686:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6013      	str	r3, [r2, #0]
}
 800668c:	bf00      	nop
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	20008914 	.word	0x20008914
 8006698:	2000843c 	.word	0x2000843c
 800669c:	200088fc 	.word	0x200088fc
 80066a0:	200088cc 	.word	0x200088cc
 80066a4:	200088c8 	.word	0x200088c8
 80066a8:	20008930 	.word	0x20008930

080066ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08a      	sub	sp, #40	; 0x28
 80066b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066b6:	f000 fb07 	bl	8006cc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066ba:	4b1c      	ldr	r3, [pc, #112]	; (800672c <xTimerCreateTimerTask+0x80>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d021      	beq.n	8006706 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066ca:	1d3a      	adds	r2, r7, #4
 80066cc:	f107 0108 	add.w	r1, r7, #8
 80066d0:	f107 030c 	add.w	r3, r7, #12
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe fb0b 	bl	8004cf0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	9202      	str	r2, [sp, #8]
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	2302      	movs	r3, #2
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	2300      	movs	r3, #0
 80066ea:	460a      	mov	r2, r1
 80066ec:	4910      	ldr	r1, [pc, #64]	; (8006730 <xTimerCreateTimerTask+0x84>)
 80066ee:	4811      	ldr	r0, [pc, #68]	; (8006734 <xTimerCreateTimerTask+0x88>)
 80066f0:	f7ff f8b8 	bl	8005864 <xTaskCreateStatic>
 80066f4:	4603      	mov	r3, r0
 80066f6:	4a10      	ldr	r2, [pc, #64]	; (8006738 <xTimerCreateTimerTask+0x8c>)
 80066f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80066fa:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <xTimerCreateTimerTask+0x8c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006702:	2301      	movs	r3, #1
 8006704:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	613b      	str	r3, [r7, #16]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006722:	697b      	ldr	r3, [r7, #20]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	2000896c 	.word	0x2000896c
 8006730:	080167dc 	.word	0x080167dc
 8006734:	08006871 	.word	0x08006871
 8006738:	20008970 	.word	0x20008970

0800673c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08a      	sub	sp, #40	; 0x28
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800674a:	2300      	movs	r3, #0
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	623b      	str	r3, [r7, #32]
}
 8006766:	bf00      	nop
 8006768:	e7fe      	b.n	8006768 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800676a:	4b1a      	ldr	r3, [pc, #104]	; (80067d4 <xTimerGenericCommand+0x98>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d02a      	beq.n	80067c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b05      	cmp	r3, #5
 8006782:	dc18      	bgt.n	80067b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006784:	f7ff feb2 	bl	80064ec <xTaskGetSchedulerState>
 8006788:	4603      	mov	r3, r0
 800678a:	2b02      	cmp	r3, #2
 800678c:	d109      	bne.n	80067a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800678e:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <xTimerGenericCommand+0x98>)
 8006790:	6818      	ldr	r0, [r3, #0]
 8006792:	f107 0110 	add.w	r1, r7, #16
 8006796:	2300      	movs	r3, #0
 8006798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679a:	f7fe fc7b 	bl	8005094 <xQueueGenericSend>
 800679e:	6278      	str	r0, [r7, #36]	; 0x24
 80067a0:	e012      	b.n	80067c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067a2:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <xTimerGenericCommand+0x98>)
 80067a4:	6818      	ldr	r0, [r3, #0]
 80067a6:	f107 0110 	add.w	r1, r7, #16
 80067aa:	2300      	movs	r3, #0
 80067ac:	2200      	movs	r2, #0
 80067ae:	f7fe fc71 	bl	8005094 <xQueueGenericSend>
 80067b2:	6278      	str	r0, [r7, #36]	; 0x24
 80067b4:	e008      	b.n	80067c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067b6:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <xTimerGenericCommand+0x98>)
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	f107 0110 	add.w	r1, r7, #16
 80067be:	2300      	movs	r3, #0
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	f7fe fd65 	bl	8005290 <xQueueGenericSendFromISR>
 80067c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3728      	adds	r7, #40	; 0x28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	2000896c 	.word	0x2000896c

080067d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b088      	sub	sp, #32
 80067dc:	af02      	add	r7, sp, #8
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e2:	4b22      	ldr	r3, [pc, #136]	; (800686c <prvProcessExpiredTimer+0x94>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fe fb21 	bl	8004e38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d022      	beq.n	800684a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	699a      	ldr	r2, [r3, #24]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	18d1      	adds	r1, r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	6978      	ldr	r0, [r7, #20]
 8006812:	f000 f8d1 	bl	80069b8 <prvInsertTimerInActiveList>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01f      	beq.n	800685c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800681c:	2300      	movs	r3, #0
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	2300      	movs	r3, #0
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	2100      	movs	r1, #0
 8006826:	6978      	ldr	r0, [r7, #20]
 8006828:	f7ff ff88 	bl	800673c <xTimerGenericCommand>
 800682c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d113      	bne.n	800685c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	60fb      	str	r3, [r7, #12]
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006850:	f023 0301 	bic.w	r3, r3, #1
 8006854:	b2da      	uxtb	r2, r3
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	6978      	ldr	r0, [r7, #20]
 8006862:	4798      	blx	r3
}
 8006864:	bf00      	nop
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20008964 	.word	0x20008964

08006870 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006878:	f107 0308 	add.w	r3, r7, #8
 800687c:	4618      	mov	r0, r3
 800687e:	f000 f857 	bl	8006930 <prvGetNextExpireTime>
 8006882:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4619      	mov	r1, r3
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f803 	bl	8006894 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800688e:	f000 f8d5 	bl	8006a3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006892:	e7f1      	b.n	8006878 <prvTimerTask+0x8>

08006894 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800689e:	f7ff fa1d 	bl	8005cdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068a2:	f107 0308 	add.w	r3, r7, #8
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 f866 	bl	8006978 <prvSampleTimeNow>
 80068ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d130      	bne.n	8006916 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <prvProcessTimerOrBlockTask+0x3c>
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d806      	bhi.n	80068d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068c2:	f7ff fa19 	bl	8005cf8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7ff ff85 	bl	80067d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80068ce:	e024      	b.n	800691a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d008      	beq.n	80068e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80068d6:	4b13      	ldr	r3, [pc, #76]	; (8006924 <prvProcessTimerOrBlockTask+0x90>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <prvProcessTimerOrBlockTask+0x50>
 80068e0:	2301      	movs	r3, #1
 80068e2:	e000      	b.n	80068e6 <prvProcessTimerOrBlockTask+0x52>
 80068e4:	2300      	movs	r3, #0
 80068e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068e8:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <prvProcessTimerOrBlockTask+0x94>)
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	4619      	mov	r1, r3
 80068f6:	f7fe ff81 	bl	80057fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068fa:	f7ff f9fd 	bl	8005cf8 <xTaskResumeAll>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006904:	4b09      	ldr	r3, [pc, #36]	; (800692c <prvProcessTimerOrBlockTask+0x98>)
 8006906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	f3bf 8f6f 	isb	sy
}
 8006914:	e001      	b.n	800691a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006916:	f7ff f9ef 	bl	8005cf8 <xTaskResumeAll>
}
 800691a:	bf00      	nop
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20008968 	.word	0x20008968
 8006928:	2000896c 	.word	0x2000896c
 800692c:	e000ed04 	.word	0xe000ed04

08006930 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006938:	4b0e      	ldr	r3, [pc, #56]	; (8006974 <prvGetNextExpireTime+0x44>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <prvGetNextExpireTime+0x16>
 8006942:	2201      	movs	r2, #1
 8006944:	e000      	b.n	8006948 <prvGetNextExpireTime+0x18>
 8006946:	2200      	movs	r2, #0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d105      	bne.n	8006960 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006954:	4b07      	ldr	r3, [pc, #28]	; (8006974 <prvGetNextExpireTime+0x44>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	e001      	b.n	8006964 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006964:	68fb      	ldr	r3, [r7, #12]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20008964 	.word	0x20008964

08006978 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006980:	f7ff fa58 	bl	8005e34 <xTaskGetTickCount>
 8006984:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006986:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <prvSampleTimeNow+0x3c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	429a      	cmp	r2, r3
 800698e:	d205      	bcs.n	800699c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006990:	f000 f936 	bl	8006c00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	e002      	b.n	80069a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80069a2:	4a04      	ldr	r2, [pc, #16]	; (80069b4 <prvSampleTimeNow+0x3c>)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069a8:	68fb      	ldr	r3, [r7, #12]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20008974 	.word	0x20008974

080069b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80069c6:	2300      	movs	r3, #0
 80069c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d812      	bhi.n	8006a04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	1ad2      	subs	r2, r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d302      	bcc.n	80069f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80069ec:	2301      	movs	r3, #1
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	e01b      	b.n	8006a2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069f2:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <prvInsertTimerInActiveList+0x7c>)
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3304      	adds	r3, #4
 80069fa:	4619      	mov	r1, r3
 80069fc:	4610      	mov	r0, r2
 80069fe:	f7fe f9e2 	bl	8004dc6 <vListInsert>
 8006a02:	e012      	b.n	8006a2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d206      	bcs.n	8006a1a <prvInsertTimerInActiveList+0x62>
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d302      	bcc.n	8006a1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	e007      	b.n	8006a2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a1a:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <prvInsertTimerInActiveList+0x80>)
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f7fe f9ce 	bl	8004dc6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a2a:	697b      	ldr	r3, [r7, #20]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20008968 	.word	0x20008968
 8006a38:	20008964 	.word	0x20008964

08006a3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08e      	sub	sp, #56	; 0x38
 8006a40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a42:	e0ca      	b.n	8006bda <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	da18      	bge.n	8006a7c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a4a:	1d3b      	adds	r3, r7, #4
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10a      	bne.n	8006a6c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	61fb      	str	r3, [r7, #28]
}
 8006a68:	bf00      	nop
 8006a6a:	e7fe      	b.n	8006a6a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a72:	6850      	ldr	r0, [r2, #4]
 8006a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a76:	6892      	ldr	r2, [r2, #8]
 8006a78:	4611      	mov	r1, r2
 8006a7a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f2c0 80ab 	blt.w	8006bda <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d004      	beq.n	8006a9a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a92:	3304      	adds	r3, #4
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fe f9cf 	bl	8004e38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff ff6b 	bl	8006978 <prvSampleTimeNow>
 8006aa2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b09      	cmp	r3, #9
 8006aa8:	f200 8096 	bhi.w	8006bd8 <prvProcessReceivedCommands+0x19c>
 8006aac:	a201      	add	r2, pc, #4	; (adr r2, 8006ab4 <prvProcessReceivedCommands+0x78>)
 8006aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab2:	bf00      	nop
 8006ab4:	08006add 	.word	0x08006add
 8006ab8:	08006add 	.word	0x08006add
 8006abc:	08006add 	.word	0x08006add
 8006ac0:	08006b51 	.word	0x08006b51
 8006ac4:	08006b65 	.word	0x08006b65
 8006ac8:	08006baf 	.word	0x08006baf
 8006acc:	08006add 	.word	0x08006add
 8006ad0:	08006add 	.word	0x08006add
 8006ad4:	08006b51 	.word	0x08006b51
 8006ad8:	08006b65 	.word	0x08006b65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	18d1      	adds	r1, r2, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006afc:	f7ff ff5c 	bl	80069b8 <prvInsertTimerInActiveList>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d069      	beq.n	8006bda <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d05e      	beq.n	8006bda <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	441a      	add	r2, r3
 8006b24:	2300      	movs	r3, #0
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b2e:	f7ff fe05 	bl	800673c <xTimerGenericCommand>
 8006b32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d14f      	bne.n	8006bda <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	61bb      	str	r3, [r7, #24]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b56:	f023 0301 	bic.w	r3, r3, #1
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006b62:	e03a      	b.n	8006bda <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b6a:	f043 0301 	orr.w	r3, r3, #1
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	617b      	str	r3, [r7, #20]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	18d1      	adds	r1, r2, r3
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ba8:	f7ff ff06 	bl	80069b8 <prvInsertTimerInActiveList>
					break;
 8006bac:	e015      	b.n	8006bda <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d103      	bne.n	8006bc4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bbe:	f000 fbdf 	bl	8007380 <vPortFree>
 8006bc2:	e00a      	b.n	8006bda <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bca:	f023 0301 	bic.w	r3, r3, #1
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006bd6:	e000      	b.n	8006bda <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006bd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bda:	4b08      	ldr	r3, [pc, #32]	; (8006bfc <prvProcessReceivedCommands+0x1c0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	1d39      	adds	r1, r7, #4
 8006be0:	2200      	movs	r2, #0
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fe fbf0 	bl	80053c8 <xQueueReceive>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f47f af2a 	bne.w	8006a44 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006bf0:	bf00      	nop
 8006bf2:	bf00      	nop
 8006bf4:	3730      	adds	r7, #48	; 0x30
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	2000896c 	.word	0x2000896c

08006c00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c06:	e048      	b.n	8006c9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c08:	4b2d      	ldr	r3, [pc, #180]	; (8006cc0 <prvSwitchTimerLists+0xc0>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c12:	4b2b      	ldr	r3, [pc, #172]	; (8006cc0 <prvSwitchTimerLists+0xc0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fe f909 	bl	8004e38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d02e      	beq.n	8006c9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4413      	add	r3, r2
 8006c44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d90e      	bls.n	8006c6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c5a:	4b19      	ldr	r3, [pc, #100]	; (8006cc0 <prvSwitchTimerLists+0xc0>)
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	3304      	adds	r3, #4
 8006c62:	4619      	mov	r1, r3
 8006c64:	4610      	mov	r0, r2
 8006c66:	f7fe f8ae 	bl	8004dc6 <vListInsert>
 8006c6a:	e016      	b.n	8006c9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	2300      	movs	r3, #0
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	2100      	movs	r1, #0
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f7ff fd60 	bl	800673c <xTimerGenericCommand>
 8006c7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	603b      	str	r3, [r7, #0]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c9a:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <prvSwitchTimerLists+0xc0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1b1      	bne.n	8006c08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <prvSwitchTimerLists+0xc0>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006caa:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <prvSwitchTimerLists+0xc4>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a04      	ldr	r2, [pc, #16]	; (8006cc0 <prvSwitchTimerLists+0xc0>)
 8006cb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006cb2:	4a04      	ldr	r2, [pc, #16]	; (8006cc4 <prvSwitchTimerLists+0xc4>)
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	6013      	str	r3, [r2, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20008964 	.word	0x20008964
 8006cc4:	20008968 	.word	0x20008968

08006cc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006cce:	f000 f969 	bl	8006fa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006cd2:	4b15      	ldr	r3, [pc, #84]	; (8006d28 <prvCheckForValidListAndQueue+0x60>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d120      	bne.n	8006d1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006cda:	4814      	ldr	r0, [pc, #80]	; (8006d2c <prvCheckForValidListAndQueue+0x64>)
 8006cdc:	f7fe f822 	bl	8004d24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ce0:	4813      	ldr	r0, [pc, #76]	; (8006d30 <prvCheckForValidListAndQueue+0x68>)
 8006ce2:	f7fe f81f 	bl	8004d24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ce6:	4b13      	ldr	r3, [pc, #76]	; (8006d34 <prvCheckForValidListAndQueue+0x6c>)
 8006ce8:	4a10      	ldr	r2, [pc, #64]	; (8006d2c <prvCheckForValidListAndQueue+0x64>)
 8006cea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006cec:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <prvCheckForValidListAndQueue+0x70>)
 8006cee:	4a10      	ldr	r2, [pc, #64]	; (8006d30 <prvCheckForValidListAndQueue+0x68>)
 8006cf0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	4b11      	ldr	r3, [pc, #68]	; (8006d3c <prvCheckForValidListAndQueue+0x74>)
 8006cf8:	4a11      	ldr	r2, [pc, #68]	; (8006d40 <prvCheckForValidListAndQueue+0x78>)
 8006cfa:	2110      	movs	r1, #16
 8006cfc:	200a      	movs	r0, #10
 8006cfe:	f7fe f92d 	bl	8004f5c <xQueueGenericCreateStatic>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4a08      	ldr	r2, [pc, #32]	; (8006d28 <prvCheckForValidListAndQueue+0x60>)
 8006d06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d08:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <prvCheckForValidListAndQueue+0x60>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d005      	beq.n	8006d1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d10:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <prvCheckForValidListAndQueue+0x60>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	490b      	ldr	r1, [pc, #44]	; (8006d44 <prvCheckForValidListAndQueue+0x7c>)
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe fd46 	bl	80057a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d1c:	f000 f972 	bl	8007004 <vPortExitCritical>
}
 8006d20:	bf00      	nop
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	2000896c 	.word	0x2000896c
 8006d2c:	2000893c 	.word	0x2000893c
 8006d30:	20008950 	.word	0x20008950
 8006d34:	20008964 	.word	0x20008964
 8006d38:	20008968 	.word	0x20008968
 8006d3c:	20008a18 	.word	0x20008a18
 8006d40:	20008978 	.word	0x20008978
 8006d44:	080167e4 	.word	0x080167e4

08006d48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3b04      	subs	r3, #4
 8006d58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	3b04      	subs	r3, #4
 8006d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f023 0201 	bic.w	r2, r3, #1
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3b04      	subs	r3, #4
 8006d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d78:	4a0c      	ldr	r2, [pc, #48]	; (8006dac <pxPortInitialiseStack+0x64>)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3b14      	subs	r3, #20
 8006d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3b04      	subs	r3, #4
 8006d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f06f 0202 	mvn.w	r2, #2
 8006d96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3b20      	subs	r3, #32
 8006d9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	08006db1 	.word	0x08006db1

08006db0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006dba:	4b12      	ldr	r3, [pc, #72]	; (8006e04 <prvTaskExitError+0x54>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc2:	d00a      	beq.n	8006dda <prvTaskExitError+0x2a>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	60fb      	str	r3, [r7, #12]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <prvTaskExitError+0x28>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	60bb      	str	r3, [r7, #8]
}
 8006dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006dee:	bf00      	nop
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0fc      	beq.n	8006df0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006df6:	bf00      	nop
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	20000010 	.word	0x20000010
	...

08006e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e10:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <pxCurrentTCBConst2>)
 8006e12:	6819      	ldr	r1, [r3, #0]
 8006e14:	6808      	ldr	r0, [r1, #0]
 8006e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1a:	f380 8809 	msr	PSP, r0
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f04f 0000 	mov.w	r0, #0
 8006e26:	f380 8811 	msr	BASEPRI, r0
 8006e2a:	4770      	bx	lr
 8006e2c:	f3af 8000 	nop.w

08006e30 <pxCurrentTCBConst2>:
 8006e30:	2000843c 	.word	0x2000843c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop

08006e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e38:	4808      	ldr	r0, [pc, #32]	; (8006e5c <prvPortStartFirstTask+0x24>)
 8006e3a:	6800      	ldr	r0, [r0, #0]
 8006e3c:	6800      	ldr	r0, [r0, #0]
 8006e3e:	f380 8808 	msr	MSP, r0
 8006e42:	f04f 0000 	mov.w	r0, #0
 8006e46:	f380 8814 	msr	CONTROL, r0
 8006e4a:	b662      	cpsie	i
 8006e4c:	b661      	cpsie	f
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	df00      	svc	0
 8006e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e5a:	bf00      	nop
 8006e5c:	e000ed08 	.word	0xe000ed08

08006e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e66:	4b46      	ldr	r3, [pc, #280]	; (8006f80 <xPortStartScheduler+0x120>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a46      	ldr	r2, [pc, #280]	; (8006f84 <xPortStartScheduler+0x124>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d10a      	bne.n	8006e86 <xPortStartScheduler+0x26>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	613b      	str	r3, [r7, #16]
}
 8006e82:	bf00      	nop
 8006e84:	e7fe      	b.n	8006e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e86:	4b3e      	ldr	r3, [pc, #248]	; (8006f80 <xPortStartScheduler+0x120>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a3f      	ldr	r2, [pc, #252]	; (8006f88 <xPortStartScheduler+0x128>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d10a      	bne.n	8006ea6 <xPortStartScheduler+0x46>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	60fb      	str	r3, [r7, #12]
}
 8006ea2:	bf00      	nop
 8006ea4:	e7fe      	b.n	8006ea4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ea6:	4b39      	ldr	r3, [pc, #228]	; (8006f8c <xPortStartScheduler+0x12c>)
 8006ea8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	22ff      	movs	r2, #255	; 0xff
 8006eb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	4b31      	ldr	r3, [pc, #196]	; (8006f90 <xPortStartScheduler+0x130>)
 8006ecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ece:	4b31      	ldr	r3, [pc, #196]	; (8006f94 <xPortStartScheduler+0x134>)
 8006ed0:	2207      	movs	r2, #7
 8006ed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ed4:	e009      	b.n	8006eea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ed6:	4b2f      	ldr	r3, [pc, #188]	; (8006f94 <xPortStartScheduler+0x134>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	4a2d      	ldr	r2, [pc, #180]	; (8006f94 <xPortStartScheduler+0x134>)
 8006ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ee0:	78fb      	ldrb	r3, [r7, #3]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef2:	2b80      	cmp	r3, #128	; 0x80
 8006ef4:	d0ef      	beq.n	8006ed6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ef6:	4b27      	ldr	r3, [pc, #156]	; (8006f94 <xPortStartScheduler+0x134>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f1c3 0307 	rsb	r3, r3, #7
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d00a      	beq.n	8006f18 <xPortStartScheduler+0xb8>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	60bb      	str	r3, [r7, #8]
}
 8006f14:	bf00      	nop
 8006f16:	e7fe      	b.n	8006f16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f18:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <xPortStartScheduler+0x134>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	021b      	lsls	r3, r3, #8
 8006f1e:	4a1d      	ldr	r2, [pc, #116]	; (8006f94 <xPortStartScheduler+0x134>)
 8006f20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f22:	4b1c      	ldr	r3, [pc, #112]	; (8006f94 <xPortStartScheduler+0x134>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f2a:	4a1a      	ldr	r2, [pc, #104]	; (8006f94 <xPortStartScheduler+0x134>)
 8006f2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f36:	4b18      	ldr	r3, [pc, #96]	; (8006f98 <xPortStartScheduler+0x138>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a17      	ldr	r2, [pc, #92]	; (8006f98 <xPortStartScheduler+0x138>)
 8006f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f42:	4b15      	ldr	r3, [pc, #84]	; (8006f98 <xPortStartScheduler+0x138>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a14      	ldr	r2, [pc, #80]	; (8006f98 <xPortStartScheduler+0x138>)
 8006f48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f4e:	f000 f8dd 	bl	800710c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f52:	4b12      	ldr	r3, [pc, #72]	; (8006f9c <xPortStartScheduler+0x13c>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f58:	f000 f8fc 	bl	8007154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f5c:	4b10      	ldr	r3, [pc, #64]	; (8006fa0 <xPortStartScheduler+0x140>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a0f      	ldr	r2, [pc, #60]	; (8006fa0 <xPortStartScheduler+0x140>)
 8006f62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f68:	f7ff ff66 	bl	8006e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f6c:	f7ff f82c 	bl	8005fc8 <vTaskSwitchContext>
	prvTaskExitError();
 8006f70:	f7ff ff1e 	bl	8006db0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	e000ed00 	.word	0xe000ed00
 8006f84:	410fc271 	.word	0x410fc271
 8006f88:	410fc270 	.word	0x410fc270
 8006f8c:	e000e400 	.word	0xe000e400
 8006f90:	20008a68 	.word	0x20008a68
 8006f94:	20008a6c 	.word	0x20008a6c
 8006f98:	e000ed20 	.word	0xe000ed20
 8006f9c:	20000010 	.word	0x20000010
 8006fa0:	e000ef34 	.word	0xe000ef34

08006fa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	607b      	str	r3, [r7, #4]
}
 8006fbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006fbe:	4b0f      	ldr	r3, [pc, #60]	; (8006ffc <vPortEnterCritical+0x58>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	4a0d      	ldr	r2, [pc, #52]	; (8006ffc <vPortEnterCritical+0x58>)
 8006fc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fc8:	4b0c      	ldr	r3, [pc, #48]	; (8006ffc <vPortEnterCritical+0x58>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d10f      	bne.n	8006ff0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <vPortEnterCritical+0x5c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	603b      	str	r3, [r7, #0]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <vPortEnterCritical+0x4a>
	}
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	20000010 	.word	0x20000010
 8007000:	e000ed04 	.word	0xe000ed04

08007004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800700a:	4b12      	ldr	r3, [pc, #72]	; (8007054 <vPortExitCritical+0x50>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <vPortExitCritical+0x24>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	607b      	str	r3, [r7, #4]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007028:	4b0a      	ldr	r3, [pc, #40]	; (8007054 <vPortExitCritical+0x50>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3b01      	subs	r3, #1
 800702e:	4a09      	ldr	r2, [pc, #36]	; (8007054 <vPortExitCritical+0x50>)
 8007030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007032:	4b08      	ldr	r3, [pc, #32]	; (8007054 <vPortExitCritical+0x50>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d105      	bne.n	8007046 <vPortExitCritical+0x42>
 800703a:	2300      	movs	r3, #0
 800703c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	f383 8811 	msr	BASEPRI, r3
}
 8007044:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20000010 	.word	0x20000010
	...

08007060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007060:	f3ef 8009 	mrs	r0, PSP
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	4b15      	ldr	r3, [pc, #84]	; (80070c0 <pxCurrentTCBConst>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	f01e 0f10 	tst.w	lr, #16
 8007070:	bf08      	it	eq
 8007072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707a:	6010      	str	r0, [r2, #0]
 800707c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007084:	f380 8811 	msr	BASEPRI, r0
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f7fe ff9a 	bl	8005fc8 <vTaskSwitchContext>
 8007094:	f04f 0000 	mov.w	r0, #0
 8007098:	f380 8811 	msr	BASEPRI, r0
 800709c:	bc09      	pop	{r0, r3}
 800709e:	6819      	ldr	r1, [r3, #0]
 80070a0:	6808      	ldr	r0, [r1, #0]
 80070a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a6:	f01e 0f10 	tst.w	lr, #16
 80070aa:	bf08      	it	eq
 80070ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070b0:	f380 8809 	msr	PSP, r0
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	f3af 8000 	nop.w

080070c0 <pxCurrentTCBConst>:
 80070c0:	2000843c 	.word	0x2000843c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop

080070c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	607b      	str	r3, [r7, #4]
}
 80070e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070e2:	f7fe feb7 	bl	8005e54 <xTaskIncrementTick>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070ec:	4b06      	ldr	r3, [pc, #24]	; (8007108 <xPortSysTickHandler+0x40>)
 80070ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	2300      	movs	r3, #0
 80070f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	f383 8811 	msr	BASEPRI, r3
}
 80070fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	e000ed04 	.word	0xe000ed04

0800710c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007110:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <vPortSetupTimerInterrupt+0x34>)
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007116:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <vPortSetupTimerInterrupt+0x38>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <vPortSetupTimerInterrupt+0x3c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a0a      	ldr	r2, [pc, #40]	; (800714c <vPortSetupTimerInterrupt+0x40>)
 8007122:	fba2 2303 	umull	r2, r3, r2, r3
 8007126:	099b      	lsrs	r3, r3, #6
 8007128:	4a09      	ldr	r2, [pc, #36]	; (8007150 <vPortSetupTimerInterrupt+0x44>)
 800712a:	3b01      	subs	r3, #1
 800712c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800712e:	4b04      	ldr	r3, [pc, #16]	; (8007140 <vPortSetupTimerInterrupt+0x34>)
 8007130:	2207      	movs	r2, #7
 8007132:	601a      	str	r2, [r3, #0]
}
 8007134:	bf00      	nop
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	e000e010 	.word	0xe000e010
 8007144:	e000e018 	.word	0xe000e018
 8007148:	20000004 	.word	0x20000004
 800714c:	10624dd3 	.word	0x10624dd3
 8007150:	e000e014 	.word	0xe000e014

08007154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007164 <vPortEnableVFP+0x10>
 8007158:	6801      	ldr	r1, [r0, #0]
 800715a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800715e:	6001      	str	r1, [r0, #0]
 8007160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007162:	bf00      	nop
 8007164:	e000ed88 	.word	0xe000ed88

08007168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800716e:	f3ef 8305 	mrs	r3, IPSR
 8007172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b0f      	cmp	r3, #15
 8007178:	d914      	bls.n	80071a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800717a:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <vPortValidateInterruptPriority+0x70>)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007184:	4b15      	ldr	r3, [pc, #84]	; (80071dc <vPortValidateInterruptPriority+0x74>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	7afa      	ldrb	r2, [r7, #11]
 800718a:	429a      	cmp	r2, r3
 800718c:	d20a      	bcs.n	80071a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	607b      	str	r3, [r7, #4]
}
 80071a0:	bf00      	nop
 80071a2:	e7fe      	b.n	80071a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071a4:	4b0e      	ldr	r3, [pc, #56]	; (80071e0 <vPortValidateInterruptPriority+0x78>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071ac:	4b0d      	ldr	r3, [pc, #52]	; (80071e4 <vPortValidateInterruptPriority+0x7c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d90a      	bls.n	80071ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	603b      	str	r3, [r7, #0]
}
 80071c6:	bf00      	nop
 80071c8:	e7fe      	b.n	80071c8 <vPortValidateInterruptPriority+0x60>
	}
 80071ca:	bf00      	nop
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	e000e3f0 	.word	0xe000e3f0
 80071dc:	20008a68 	.word	0x20008a68
 80071e0:	e000ed0c 	.word	0xe000ed0c
 80071e4:	20008a6c 	.word	0x20008a6c

080071e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08a      	sub	sp, #40	; 0x28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071f4:	f7fe fd72 	bl	8005cdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071f8:	4b5b      	ldr	r3, [pc, #364]	; (8007368 <pvPortMalloc+0x180>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007200:	f000 f920 	bl	8007444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007204:	4b59      	ldr	r3, [pc, #356]	; (800736c <pvPortMalloc+0x184>)
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4013      	ands	r3, r2
 800720c:	2b00      	cmp	r3, #0
 800720e:	f040 8093 	bne.w	8007338 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01d      	beq.n	8007254 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007218:	2208      	movs	r2, #8
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	2b00      	cmp	r3, #0
 8007228:	d014      	beq.n	8007254 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f023 0307 	bic.w	r3, r3, #7
 8007230:	3308      	adds	r3, #8
 8007232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <pvPortMalloc+0x6c>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	617b      	str	r3, [r7, #20]
}
 8007250:	bf00      	nop
 8007252:	e7fe      	b.n	8007252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d06e      	beq.n	8007338 <pvPortMalloc+0x150>
 800725a:	4b45      	ldr	r3, [pc, #276]	; (8007370 <pvPortMalloc+0x188>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	429a      	cmp	r2, r3
 8007262:	d869      	bhi.n	8007338 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007264:	4b43      	ldr	r3, [pc, #268]	; (8007374 <pvPortMalloc+0x18c>)
 8007266:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007268:	4b42      	ldr	r3, [pc, #264]	; (8007374 <pvPortMalloc+0x18c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800726e:	e004      	b.n	800727a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	429a      	cmp	r2, r3
 8007282:	d903      	bls.n	800728c <pvPortMalloc+0xa4>
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1f1      	bne.n	8007270 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800728c:	4b36      	ldr	r3, [pc, #216]	; (8007368 <pvPortMalloc+0x180>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007292:	429a      	cmp	r2, r3
 8007294:	d050      	beq.n	8007338 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2208      	movs	r2, #8
 800729c:	4413      	add	r3, r2
 800729e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	2308      	movs	r3, #8
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d91f      	bls.n	80072f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4413      	add	r3, r2
 80072be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <pvPortMalloc+0xf8>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	613b      	str	r3, [r7, #16]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	1ad2      	subs	r2, r2, r3
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072f2:	69b8      	ldr	r0, [r7, #24]
 80072f4:	f000 f908 	bl	8007508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072f8:	4b1d      	ldr	r3, [pc, #116]	; (8007370 <pvPortMalloc+0x188>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	4a1b      	ldr	r2, [pc, #108]	; (8007370 <pvPortMalloc+0x188>)
 8007304:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007306:	4b1a      	ldr	r3, [pc, #104]	; (8007370 <pvPortMalloc+0x188>)
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b1b      	ldr	r3, [pc, #108]	; (8007378 <pvPortMalloc+0x190>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d203      	bcs.n	800731a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007312:	4b17      	ldr	r3, [pc, #92]	; (8007370 <pvPortMalloc+0x188>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a18      	ldr	r2, [pc, #96]	; (8007378 <pvPortMalloc+0x190>)
 8007318:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	4b13      	ldr	r3, [pc, #76]	; (800736c <pvPortMalloc+0x184>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	431a      	orrs	r2, r3
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800732e:	4b13      	ldr	r3, [pc, #76]	; (800737c <pvPortMalloc+0x194>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3301      	adds	r3, #1
 8007334:	4a11      	ldr	r2, [pc, #68]	; (800737c <pvPortMalloc+0x194>)
 8007336:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007338:	f7fe fcde 	bl	8005cf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	f003 0307 	and.w	r3, r3, #7
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <pvPortMalloc+0x174>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	60fb      	str	r3, [r7, #12]
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <pvPortMalloc+0x172>
	return pvReturn;
 800735c:	69fb      	ldr	r3, [r7, #28]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3728      	adds	r7, #40	; 0x28
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	2000c678 	.word	0x2000c678
 800736c:	2000c68c 	.word	0x2000c68c
 8007370:	2000c67c 	.word	0x2000c67c
 8007374:	2000c670 	.word	0x2000c670
 8007378:	2000c680 	.word	0x2000c680
 800737c:	2000c684 	.word	0x2000c684

08007380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d04d      	beq.n	800742e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007392:	2308      	movs	r3, #8
 8007394:	425b      	negs	r3, r3
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	4413      	add	r3, r2
 800739a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	4b24      	ldr	r3, [pc, #144]	; (8007438 <vPortFree+0xb8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <vPortFree+0x44>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	60fb      	str	r3, [r7, #12]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <vPortFree+0x62>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	60bb      	str	r3, [r7, #8]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	4b14      	ldr	r3, [pc, #80]	; (8007438 <vPortFree+0xb8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d01e      	beq.n	800742e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d11a      	bne.n	800742e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <vPortFree+0xb8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	43db      	mvns	r3, r3
 8007402:	401a      	ands	r2, r3
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007408:	f7fe fc68 	bl	8005cdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	4b0a      	ldr	r3, [pc, #40]	; (800743c <vPortFree+0xbc>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4413      	add	r3, r2
 8007416:	4a09      	ldr	r2, [pc, #36]	; (800743c <vPortFree+0xbc>)
 8007418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800741a:	6938      	ldr	r0, [r7, #16]
 800741c:	f000 f874 	bl	8007508 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007420:	4b07      	ldr	r3, [pc, #28]	; (8007440 <vPortFree+0xc0>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3301      	adds	r3, #1
 8007426:	4a06      	ldr	r2, [pc, #24]	; (8007440 <vPortFree+0xc0>)
 8007428:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800742a:	f7fe fc65 	bl	8005cf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800742e:	bf00      	nop
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	2000c68c 	.word	0x2000c68c
 800743c:	2000c67c 	.word	0x2000c67c
 8007440:	2000c688 	.word	0x2000c688

08007444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800744a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800744e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007450:	4b27      	ldr	r3, [pc, #156]	; (80074f0 <prvHeapInit+0xac>)
 8007452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00c      	beq.n	8007478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	3307      	adds	r3, #7
 8007462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0307 	bic.w	r3, r3, #7
 800746a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	4a1f      	ldr	r2, [pc, #124]	; (80074f0 <prvHeapInit+0xac>)
 8007474:	4413      	add	r3, r2
 8007476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800747c:	4a1d      	ldr	r2, [pc, #116]	; (80074f4 <prvHeapInit+0xb0>)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007482:	4b1c      	ldr	r3, [pc, #112]	; (80074f4 <prvHeapInit+0xb0>)
 8007484:	2200      	movs	r2, #0
 8007486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	4413      	add	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007490:	2208      	movs	r2, #8
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1a9b      	subs	r3, r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0307 	bic.w	r3, r3, #7
 800749e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4a15      	ldr	r2, [pc, #84]	; (80074f8 <prvHeapInit+0xb4>)
 80074a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074a6:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <prvHeapInit+0xb4>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2200      	movs	r2, #0
 80074ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074ae:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <prvHeapInit+0xb4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	1ad2      	subs	r2, r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074c4:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <prvHeapInit+0xb4>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	4a0a      	ldr	r2, [pc, #40]	; (80074fc <prvHeapInit+0xb8>)
 80074d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	4a09      	ldr	r2, [pc, #36]	; (8007500 <prvHeapInit+0xbc>)
 80074da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074dc:	4b09      	ldr	r3, [pc, #36]	; (8007504 <prvHeapInit+0xc0>)
 80074de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074e2:	601a      	str	r2, [r3, #0]
}
 80074e4:	bf00      	nop
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	20008a70 	.word	0x20008a70
 80074f4:	2000c670 	.word	0x2000c670
 80074f8:	2000c678 	.word	0x2000c678
 80074fc:	2000c680 	.word	0x2000c680
 8007500:	2000c67c 	.word	0x2000c67c
 8007504:	2000c68c 	.word	0x2000c68c

08007508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007510:	4b28      	ldr	r3, [pc, #160]	; (80075b4 <prvInsertBlockIntoFreeList+0xac>)
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	e002      	b.n	800751c <prvInsertBlockIntoFreeList+0x14>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	429a      	cmp	r2, r3
 8007524:	d8f7      	bhi.n	8007516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	4413      	add	r3, r2
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	429a      	cmp	r2, r3
 8007536:	d108      	bne.n	800754a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	441a      	add	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	441a      	add	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	429a      	cmp	r2, r3
 800755c:	d118      	bne.n	8007590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	429a      	cmp	r2, r3
 8007568:	d00d      	beq.n	8007586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	441a      	add	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	e008      	b.n	8007598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007586:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	e003      	b.n	8007598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	429a      	cmp	r2, r3
 800759e:	d002      	beq.n	80075a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075a6:	bf00      	nop
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	2000c670 	.word	0x2000c670
 80075b8:	2000c678 	.word	0x2000c678

080075bc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80075bc:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	b10a      	cbz	r2, 80075c6 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 80075c2:	4803      	ldr	r0, [pc, #12]	; (80075d0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 80075c4:	4770      	bx	lr
 80075c6:	4a03      	ldr	r2, [pc, #12]	; (80075d4 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 80075c8:	4801      	ldr	r0, [pc, #4]	; (80075d0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	4770      	bx	lr
 80075d0:	2000001c 	.word	0x2000001c
 80075d4:	2000020c 	.word	0x2000020c

080075d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80075d8:	4a02      	ldr	r2, [pc, #8]	; (80075e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 80075da:	4b03      	ldr	r3, [pc, #12]	; (80075e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 80075dc:	6812      	ldr	r2, [r2, #0]
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	2000020c 	.word	0x2000020c
 80075e8:	2000001c 	.word	0x2000001c

080075ec <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 80075ec:	f003 bd66 	b.w	800b0bc <geometry_msgs__msg__Twist__init>

080075f0 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 80075f0:	f003 bd88 	b.w	800b104 <geometry_msgs__msg__Twist__fini>

080075f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80075f4:	b510      	push	{r4, lr}
 80075f6:	f000 f819 	bl	800762c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80075fa:	4c07      	ldr	r4, [pc, #28]	; (8007618 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 80075fc:	60e0      	str	r0, [r4, #12]
 80075fe:	f000 f815 	bl	800762c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007602:	4b06      	ldr	r3, [pc, #24]	; (800761c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8007604:	64a0      	str	r0, [r4, #72]	; 0x48
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	b10a      	cbz	r2, 800760e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800760a:	4804      	ldr	r0, [pc, #16]	; (800761c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800760c:	bd10      	pop	{r4, pc}
 800760e:	4a04      	ldr	r2, [pc, #16]	; (8007620 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 8007610:	4802      	ldr	r0, [pc, #8]	; (800761c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8007612:	6812      	ldr	r2, [r2, #0]
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	bd10      	pop	{r4, pc}
 8007618:	20000034 	.word	0x20000034
 800761c:	200000ac 	.word	0x200000ac
 8007620:	20000210 	.word	0x20000210

08007624 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8007624:	f003 bdaa 	b.w	800b17c <geometry_msgs__msg__Vector3__init>

08007628 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8007628:	f003 bdac 	b.w	800b184 <geometry_msgs__msg__Vector3__fini>

0800762c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800762c:	4b04      	ldr	r3, [pc, #16]	; (8007640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	b10a      	cbz	r2, 8007636 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8007632:	4803      	ldr	r0, [pc, #12]	; (8007640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8007634:	4770      	bx	lr
 8007636:	4a03      	ldr	r2, [pc, #12]	; (8007644 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8007638:	4801      	ldr	r0, [pc, #4]	; (8007640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800763a:	6812      	ldr	r2, [r2, #0]
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	4770      	bx	lr
 8007640:	20000178 	.word	0x20000178
 8007644:	20000210 	.word	0x20000210

08007648 <get_serialized_size_geometry_msgs__msg__Twist>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	4604      	mov	r4, r0
 800764c:	b148      	cbz	r0, 8007662 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800764e:	460d      	mov	r5, r1
 8007650:	f000 f860 	bl	8007714 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007654:	4606      	mov	r6, r0
 8007656:	1829      	adds	r1, r5, r0
 8007658:	f104 0018 	add.w	r0, r4, #24
 800765c:	f000 f85a 	bl	8007714 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007660:	4430      	add	r0, r6
 8007662:	bd70      	pop	{r4, r5, r6, pc}

08007664 <_Twist__cdr_deserialize>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	460c      	mov	r4, r1
 8007668:	b189      	cbz	r1, 800768e <_Twist__cdr_deserialize+0x2a>
 800766a:	4605      	mov	r5, r0
 800766c:	f000 f8de 	bl	800782c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007670:	6843      	ldr	r3, [r0, #4]
 8007672:	4621      	mov	r1, r4
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	4628      	mov	r0, r5
 8007678:	4798      	blx	r3
 800767a:	f000 f8d7 	bl	800782c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800767e:	6843      	ldr	r3, [r0, #4]
 8007680:	f104 0118 	add.w	r1, r4, #24
 8007684:	4628      	mov	r0, r5
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800768c:	4718      	bx	r3
 800768e:	4608      	mov	r0, r1
 8007690:	bd70      	pop	{r4, r5, r6, pc}
 8007692:	bf00      	nop

08007694 <_Twist__cdr_serialize>:
 8007694:	b510      	push	{r4, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	9101      	str	r1, [sp, #4]
 800769a:	b190      	cbz	r0, 80076c2 <_Twist__cdr_serialize+0x2e>
 800769c:	4604      	mov	r4, r0
 800769e:	f000 f8c5 	bl	800782c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80076a2:	6843      	ldr	r3, [r0, #4]
 80076a4:	9901      	ldr	r1, [sp, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	4620      	mov	r0, r4
 80076aa:	4798      	blx	r3
 80076ac:	f000 f8be 	bl	800782c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80076b0:	6843      	ldr	r3, [r0, #4]
 80076b2:	9901      	ldr	r1, [sp, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f104 0018 	add.w	r0, r4, #24
 80076ba:	b002      	add	sp, #8
 80076bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c0:	4718      	bx	r3
 80076c2:	b002      	add	sp, #8
 80076c4:	bd10      	pop	{r4, pc}
 80076c6:	bf00      	nop

080076c8 <_Twist__get_serialized_size>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4604      	mov	r4, r0
 80076cc:	b148      	cbz	r0, 80076e2 <_Twist__get_serialized_size+0x1a>
 80076ce:	2100      	movs	r1, #0
 80076d0:	f000 f820 	bl	8007714 <get_serialized_size_geometry_msgs__msg__Vector3>
 80076d4:	4605      	mov	r5, r0
 80076d6:	4601      	mov	r1, r0
 80076d8:	f104 0018 	add.w	r0, r4, #24
 80076dc:	f000 f81a 	bl	8007714 <get_serialized_size_geometry_msgs__msg__Vector3>
 80076e0:	4428      	add	r0, r5
 80076e2:	bd38      	pop	{r3, r4, r5, pc}

080076e4 <_Twist__max_serialized_size>:
 80076e4:	b510      	push	{r4, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	2301      	movs	r3, #1
 80076ea:	2100      	movs	r1, #0
 80076ec:	f10d 0007 	add.w	r0, sp, #7
 80076f0:	f88d 3007 	strb.w	r3, [sp, #7]
 80076f4:	f000 f87e 	bl	80077f4 <max_serialized_size_geometry_msgs__msg__Vector3>
 80076f8:	4604      	mov	r4, r0
 80076fa:	4601      	mov	r1, r0
 80076fc:	f10d 0007 	add.w	r0, sp, #7
 8007700:	f000 f878 	bl	80077f4 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007704:	4420      	add	r0, r4
 8007706:	b002      	add	sp, #8
 8007708:	bd10      	pop	{r4, pc}
 800770a:	bf00      	nop

0800770c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800770c:	4800      	ldr	r0, [pc, #0]	; (8007710 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800770e:	4770      	bx	lr
 8007710:	20000190 	.word	0x20000190

08007714 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8007714:	b1b8      	cbz	r0, 8007746 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8007716:	b538      	push	{r3, r4, r5, lr}
 8007718:	460d      	mov	r5, r1
 800771a:	4628      	mov	r0, r5
 800771c:	2108      	movs	r1, #8
 800771e:	f001 f9fd 	bl	8008b1c <ucdr_alignment>
 8007722:	f105 0308 	add.w	r3, r5, #8
 8007726:	181c      	adds	r4, r3, r0
 8007728:	2108      	movs	r1, #8
 800772a:	4620      	mov	r0, r4
 800772c:	f001 f9f6 	bl	8008b1c <ucdr_alignment>
 8007730:	3008      	adds	r0, #8
 8007732:	4404      	add	r4, r0
 8007734:	2108      	movs	r1, #8
 8007736:	4620      	mov	r0, r4
 8007738:	f001 f9f0 	bl	8008b1c <ucdr_alignment>
 800773c:	f1c5 0508 	rsb	r5, r5, #8
 8007740:	4428      	add	r0, r5
 8007742:	4420      	add	r0, r4
 8007744:	bd38      	pop	{r3, r4, r5, pc}
 8007746:	4770      	bx	lr

08007748 <_Vector3__cdr_deserialize>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	460c      	mov	r4, r1
 800774c:	b171      	cbz	r1, 800776c <_Vector3__cdr_deserialize+0x24>
 800774e:	4605      	mov	r5, r0
 8007750:	f001 f8c6 	bl	80088e0 <ucdr_deserialize_double>
 8007754:	f104 0108 	add.w	r1, r4, #8
 8007758:	4628      	mov	r0, r5
 800775a:	f001 f8c1 	bl	80088e0 <ucdr_deserialize_double>
 800775e:	f104 0110 	add.w	r1, r4, #16
 8007762:	4628      	mov	r0, r5
 8007764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007768:	f001 b8ba 	b.w	80088e0 <ucdr_deserialize_double>
 800776c:	4608      	mov	r0, r1
 800776e:	bd38      	pop	{r3, r4, r5, pc}

08007770 <_Vector3__cdr_serialize>:
 8007770:	b198      	cbz	r0, 800779a <_Vector3__cdr_serialize+0x2a>
 8007772:	b538      	push	{r3, r4, r5, lr}
 8007774:	ed90 0b00 	vldr	d0, [r0]
 8007778:	460d      	mov	r5, r1
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	f000 ffdf 	bl	8008740 <ucdr_serialize_double>
 8007782:	ed94 0b02 	vldr	d0, [r4, #8]
 8007786:	4628      	mov	r0, r5
 8007788:	f000 ffda 	bl	8008740 <ucdr_serialize_double>
 800778c:	ed94 0b04 	vldr	d0, [r4, #16]
 8007790:	4628      	mov	r0, r5
 8007792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007796:	f000 bfd3 	b.w	8008740 <ucdr_serialize_double>
 800779a:	4770      	bx	lr

0800779c <_Vector3__get_serialized_size>:
 800779c:	b198      	cbz	r0, 80077c6 <_Vector3__get_serialized_size+0x2a>
 800779e:	b510      	push	{r4, lr}
 80077a0:	2108      	movs	r1, #8
 80077a2:	2000      	movs	r0, #0
 80077a4:	f001 f9ba 	bl	8008b1c <ucdr_alignment>
 80077a8:	f100 0408 	add.w	r4, r0, #8
 80077ac:	2108      	movs	r1, #8
 80077ae:	4620      	mov	r0, r4
 80077b0:	f001 f9b4 	bl	8008b1c <ucdr_alignment>
 80077b4:	3008      	adds	r0, #8
 80077b6:	4404      	add	r4, r0
 80077b8:	2108      	movs	r1, #8
 80077ba:	4620      	mov	r0, r4
 80077bc:	f001 f9ae 	bl	8008b1c <ucdr_alignment>
 80077c0:	3008      	adds	r0, #8
 80077c2:	4420      	add	r0, r4
 80077c4:	bd10      	pop	{r4, pc}
 80077c6:	4770      	bx	lr

080077c8 <_Vector3__max_serialized_size>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	2108      	movs	r1, #8
 80077cc:	2000      	movs	r0, #0
 80077ce:	f001 f9a5 	bl	8008b1c <ucdr_alignment>
 80077d2:	f100 0508 	add.w	r5, r0, #8
 80077d6:	2108      	movs	r1, #8
 80077d8:	4628      	mov	r0, r5
 80077da:	f001 f99f 	bl	8008b1c <ucdr_alignment>
 80077de:	f100 0408 	add.w	r4, r0, #8
 80077e2:	442c      	add	r4, r5
 80077e4:	2108      	movs	r1, #8
 80077e6:	4620      	mov	r0, r4
 80077e8:	f001 f998 	bl	8008b1c <ucdr_alignment>
 80077ec:	3008      	adds	r0, #8
 80077ee:	4420      	add	r0, r4
 80077f0:	bd38      	pop	{r3, r4, r5, pc}
 80077f2:	bf00      	nop

080077f4 <max_serialized_size_geometry_msgs__msg__Vector3>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	2301      	movs	r3, #1
 80077f8:	460c      	mov	r4, r1
 80077fa:	7003      	strb	r3, [r0, #0]
 80077fc:	2108      	movs	r1, #8
 80077fe:	4620      	mov	r0, r4
 8007800:	f001 f98c 	bl	8008b1c <ucdr_alignment>
 8007804:	f104 0508 	add.w	r5, r4, #8
 8007808:	1946      	adds	r6, r0, r5
 800780a:	2108      	movs	r1, #8
 800780c:	4630      	mov	r0, r6
 800780e:	f001 f985 	bl	8008b1c <ucdr_alignment>
 8007812:	f100 0508 	add.w	r5, r0, #8
 8007816:	4435      	add	r5, r6
 8007818:	2108      	movs	r1, #8
 800781a:	4628      	mov	r0, r5
 800781c:	f001 f97e 	bl	8008b1c <ucdr_alignment>
 8007820:	f1c4 0408 	rsb	r4, r4, #8
 8007824:	4420      	add	r0, r4
 8007826:	4428      	add	r0, r5
 8007828:	bd70      	pop	{r4, r5, r6, pc}
 800782a:	bf00      	nop

0800782c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800782c:	4800      	ldr	r0, [pc, #0]	; (8007830 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800782e:	4770      	bx	lr
 8007830:	200001c4 	.word	0x200001c4

08007834 <ucdr_serialize_bool>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	460d      	mov	r5, r1
 8007838:	2101      	movs	r1, #1
 800783a:	4604      	mov	r4, r0
 800783c:	f001 f922 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8007840:	b148      	cbz	r0, 8007856 <ucdr_serialize_bool+0x22>
 8007842:	68a3      	ldr	r3, [r4, #8]
 8007844:	701d      	strb	r5, [r3, #0]
 8007846:	68a2      	ldr	r2, [r4, #8]
 8007848:	6923      	ldr	r3, [r4, #16]
 800784a:	2101      	movs	r1, #1
 800784c:	440a      	add	r2, r1
 800784e:	440b      	add	r3, r1
 8007850:	60a2      	str	r2, [r4, #8]
 8007852:	6123      	str	r3, [r4, #16]
 8007854:	7561      	strb	r1, [r4, #21]
 8007856:	7da0      	ldrb	r0, [r4, #22]
 8007858:	f080 0001 	eor.w	r0, r0, #1
 800785c:	bd38      	pop	{r3, r4, r5, pc}
 800785e:	bf00      	nop

08007860 <ucdr_deserialize_bool>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	460d      	mov	r5, r1
 8007864:	2101      	movs	r1, #1
 8007866:	4604      	mov	r4, r0
 8007868:	f001 f90c 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 800786c:	b160      	cbz	r0, 8007888 <ucdr_deserialize_bool+0x28>
 800786e:	68a2      	ldr	r2, [r4, #8]
 8007870:	6923      	ldr	r3, [r4, #16]
 8007872:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007876:	3900      	subs	r1, #0
 8007878:	bf18      	it	ne
 800787a:	2101      	movne	r1, #1
 800787c:	7029      	strb	r1, [r5, #0]
 800787e:	3301      	adds	r3, #1
 8007880:	2101      	movs	r1, #1
 8007882:	60a2      	str	r2, [r4, #8]
 8007884:	6123      	str	r3, [r4, #16]
 8007886:	7561      	strb	r1, [r4, #21]
 8007888:	7da0      	ldrb	r0, [r4, #22]
 800788a:	f080 0001 	eor.w	r0, r0, #1
 800788e:	bd38      	pop	{r3, r4, r5, pc}

08007890 <ucdr_serialize_uint8_t>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	460d      	mov	r5, r1
 8007894:	2101      	movs	r1, #1
 8007896:	4604      	mov	r4, r0
 8007898:	f001 f8f4 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 800789c:	b148      	cbz	r0, 80078b2 <ucdr_serialize_uint8_t+0x22>
 800789e:	68a3      	ldr	r3, [r4, #8]
 80078a0:	701d      	strb	r5, [r3, #0]
 80078a2:	68a2      	ldr	r2, [r4, #8]
 80078a4:	6923      	ldr	r3, [r4, #16]
 80078a6:	2101      	movs	r1, #1
 80078a8:	440a      	add	r2, r1
 80078aa:	440b      	add	r3, r1
 80078ac:	60a2      	str	r2, [r4, #8]
 80078ae:	6123      	str	r3, [r4, #16]
 80078b0:	7561      	strb	r1, [r4, #21]
 80078b2:	7da0      	ldrb	r0, [r4, #22]
 80078b4:	f080 0001 	eor.w	r0, r0, #1
 80078b8:	bd38      	pop	{r3, r4, r5, pc}
 80078ba:	bf00      	nop

080078bc <ucdr_deserialize_uint8_t>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	460d      	mov	r5, r1
 80078c0:	2101      	movs	r1, #1
 80078c2:	4604      	mov	r4, r0
 80078c4:	f001 f8de 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 80078c8:	b150      	cbz	r0, 80078e0 <ucdr_deserialize_uint8_t+0x24>
 80078ca:	68a3      	ldr	r3, [r4, #8]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	702b      	strb	r3, [r5, #0]
 80078d0:	68a2      	ldr	r2, [r4, #8]
 80078d2:	6923      	ldr	r3, [r4, #16]
 80078d4:	2101      	movs	r1, #1
 80078d6:	440a      	add	r2, r1
 80078d8:	440b      	add	r3, r1
 80078da:	60a2      	str	r2, [r4, #8]
 80078dc:	6123      	str	r3, [r4, #16]
 80078de:	7561      	strb	r1, [r4, #21]
 80078e0:	7da0      	ldrb	r0, [r4, #22]
 80078e2:	f080 0001 	eor.w	r0, r0, #1
 80078e6:	bd38      	pop	{r3, r4, r5, pc}

080078e8 <ucdr_serialize_uint16_t>:
 80078e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	460b      	mov	r3, r1
 80078f0:	2102      	movs	r1, #2
 80078f2:	4604      	mov	r4, r0
 80078f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80078f8:	f001 f918 	bl	8008b2c <ucdr_buffer_alignment>
 80078fc:	4601      	mov	r1, r0
 80078fe:	4620      	mov	r0, r4
 8007900:	7d67      	ldrb	r7, [r4, #21]
 8007902:	f001 f957 	bl	8008bb4 <ucdr_advance_buffer>
 8007906:	2102      	movs	r1, #2
 8007908:	4620      	mov	r0, r4
 800790a:	f001 f8af 	bl	8008a6c <ucdr_check_buffer_available_for>
 800790e:	bb78      	cbnz	r0, 8007970 <ucdr_serialize_uint16_t+0x88>
 8007910:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007914:	42ab      	cmp	r3, r5
 8007916:	d926      	bls.n	8007966 <ucdr_serialize_uint16_t+0x7e>
 8007918:	1b5e      	subs	r6, r3, r5
 800791a:	60a3      	str	r3, [r4, #8]
 800791c:	6923      	ldr	r3, [r4, #16]
 800791e:	f1c6 0802 	rsb	r8, r6, #2
 8007922:	4433      	add	r3, r6
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	4641      	mov	r1, r8
 8007928:	4620      	mov	r0, r4
 800792a:	f001 f8ab 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 800792e:	2800      	cmp	r0, #0
 8007930:	d03b      	beq.n	80079aa <ucdr_serialize_uint16_t+0xc2>
 8007932:	7d23      	ldrb	r3, [r4, #20]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d04a      	beq.n	80079ce <ucdr_serialize_uint16_t+0xe6>
 8007938:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800793c:	702b      	strb	r3, [r5, #0]
 800793e:	2e00      	cmp	r6, #0
 8007940:	d040      	beq.n	80079c4 <ucdr_serialize_uint16_t+0xdc>
 8007942:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007946:	706b      	strb	r3, [r5, #1]
 8007948:	6923      	ldr	r3, [r4, #16]
 800794a:	68a2      	ldr	r2, [r4, #8]
 800794c:	7da0      	ldrb	r0, [r4, #22]
 800794e:	3302      	adds	r3, #2
 8007950:	1b9e      	subs	r6, r3, r6
 8007952:	4442      	add	r2, r8
 8007954:	2302      	movs	r3, #2
 8007956:	f080 0001 	eor.w	r0, r0, #1
 800795a:	60a2      	str	r2, [r4, #8]
 800795c:	6126      	str	r6, [r4, #16]
 800795e:	7563      	strb	r3, [r4, #21]
 8007960:	b002      	add	sp, #8
 8007962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007966:	2102      	movs	r1, #2
 8007968:	4620      	mov	r0, r4
 800796a:	f001 f88b 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 800796e:	b190      	cbz	r0, 8007996 <ucdr_serialize_uint16_t+0xae>
 8007970:	7d23      	ldrb	r3, [r4, #20]
 8007972:	2b01      	cmp	r3, #1
 8007974:	68a3      	ldr	r3, [r4, #8]
 8007976:	d014      	beq.n	80079a2 <ucdr_serialize_uint16_t+0xba>
 8007978:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800797c:	701a      	strb	r2, [r3, #0]
 800797e:	68a3      	ldr	r3, [r4, #8]
 8007980:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007984:	705a      	strb	r2, [r3, #1]
 8007986:	68a2      	ldr	r2, [r4, #8]
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	3202      	adds	r2, #2
 800798c:	3302      	adds	r3, #2
 800798e:	2102      	movs	r1, #2
 8007990:	60a2      	str	r2, [r4, #8]
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	7561      	strb	r1, [r4, #21]
 8007996:	7da0      	ldrb	r0, [r4, #22]
 8007998:	f080 0001 	eor.w	r0, r0, #1
 800799c:	b002      	add	sp, #8
 800799e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80079a6:	801a      	strh	r2, [r3, #0]
 80079a8:	e7ed      	b.n	8007986 <ucdr_serialize_uint16_t+0x9e>
 80079aa:	68a2      	ldr	r2, [r4, #8]
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	7da0      	ldrb	r0, [r4, #22]
 80079b0:	7567      	strb	r7, [r4, #21]
 80079b2:	1b92      	subs	r2, r2, r6
 80079b4:	1b9b      	subs	r3, r3, r6
 80079b6:	f080 0001 	eor.w	r0, r0, #1
 80079ba:	60a2      	str	r2, [r4, #8]
 80079bc:	6123      	str	r3, [r4, #16]
 80079be:	b002      	add	sp, #8
 80079c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c4:	68a3      	ldr	r3, [r4, #8]
 80079c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80079ca:	701a      	strb	r2, [r3, #0]
 80079cc:	e7bc      	b.n	8007948 <ucdr_serialize_uint16_t+0x60>
 80079ce:	4628      	mov	r0, r5
 80079d0:	f10d 0506 	add.w	r5, sp, #6
 80079d4:	4629      	mov	r1, r5
 80079d6:	4632      	mov	r2, r6
 80079d8:	f00d ffd3 	bl	8015982 <memcpy>
 80079dc:	68a0      	ldr	r0, [r4, #8]
 80079de:	4642      	mov	r2, r8
 80079e0:	19a9      	adds	r1, r5, r6
 80079e2:	f00d ffce 	bl	8015982 <memcpy>
 80079e6:	e7af      	b.n	8007948 <ucdr_serialize_uint16_t+0x60>

080079e8 <ucdr_serialize_endian_uint16_t>:
 80079e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079ec:	b083      	sub	sp, #12
 80079ee:	460d      	mov	r5, r1
 80079f0:	2102      	movs	r1, #2
 80079f2:	4604      	mov	r4, r0
 80079f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80079f8:	f001 f898 	bl	8008b2c <ucdr_buffer_alignment>
 80079fc:	4601      	mov	r1, r0
 80079fe:	4620      	mov	r0, r4
 8007a00:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007a04:	f001 f8d6 	bl	8008bb4 <ucdr_advance_buffer>
 8007a08:	2102      	movs	r1, #2
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f001 f82e 	bl	8008a6c <ucdr_check_buffer_available_for>
 8007a10:	bb70      	cbnz	r0, 8007a70 <ucdr_serialize_endian_uint16_t+0x88>
 8007a12:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007a16:	42be      	cmp	r6, r7
 8007a18:	d925      	bls.n	8007a66 <ucdr_serialize_endian_uint16_t+0x7e>
 8007a1a:	6923      	ldr	r3, [r4, #16]
 8007a1c:	60a6      	str	r6, [r4, #8]
 8007a1e:	1bf6      	subs	r6, r6, r7
 8007a20:	4433      	add	r3, r6
 8007a22:	f1c6 0902 	rsb	r9, r6, #2
 8007a26:	6123      	str	r3, [r4, #16]
 8007a28:	4649      	mov	r1, r9
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f001 f82a 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d039      	beq.n	8007aa8 <ucdr_serialize_endian_uint16_t+0xc0>
 8007a34:	2d01      	cmp	r5, #1
 8007a36:	d04a      	beq.n	8007ace <ucdr_serialize_endian_uint16_t+0xe6>
 8007a38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007a3c:	703b      	strb	r3, [r7, #0]
 8007a3e:	2e00      	cmp	r6, #0
 8007a40:	d040      	beq.n	8007ac4 <ucdr_serialize_endian_uint16_t+0xdc>
 8007a42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007a46:	707b      	strb	r3, [r7, #1]
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	68a2      	ldr	r2, [r4, #8]
 8007a4c:	7da0      	ldrb	r0, [r4, #22]
 8007a4e:	3302      	adds	r3, #2
 8007a50:	444a      	add	r2, r9
 8007a52:	1b9b      	subs	r3, r3, r6
 8007a54:	2102      	movs	r1, #2
 8007a56:	f080 0001 	eor.w	r0, r0, #1
 8007a5a:	60a2      	str	r2, [r4, #8]
 8007a5c:	6123      	str	r3, [r4, #16]
 8007a5e:	7561      	strb	r1, [r4, #21]
 8007a60:	b003      	add	sp, #12
 8007a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a66:	2102      	movs	r1, #2
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f001 f80b 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8007a6e:	b188      	cbz	r0, 8007a94 <ucdr_serialize_endian_uint16_t+0xac>
 8007a70:	2d01      	cmp	r5, #1
 8007a72:	68a3      	ldr	r3, [r4, #8]
 8007a74:	d014      	beq.n	8007aa0 <ucdr_serialize_endian_uint16_t+0xb8>
 8007a76:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	68a3      	ldr	r3, [r4, #8]
 8007a7e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007a82:	705a      	strb	r2, [r3, #1]
 8007a84:	68a2      	ldr	r2, [r4, #8]
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	3202      	adds	r2, #2
 8007a8a:	3302      	adds	r3, #2
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	60a2      	str	r2, [r4, #8]
 8007a90:	6123      	str	r3, [r4, #16]
 8007a92:	7561      	strb	r1, [r4, #21]
 8007a94:	7da0      	ldrb	r0, [r4, #22]
 8007a96:	f080 0001 	eor.w	r0, r0, #1
 8007a9a:	b003      	add	sp, #12
 8007a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aa0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007aa4:	801a      	strh	r2, [r3, #0]
 8007aa6:	e7ed      	b.n	8007a84 <ucdr_serialize_endian_uint16_t+0x9c>
 8007aa8:	68a2      	ldr	r2, [r4, #8]
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	7da0      	ldrb	r0, [r4, #22]
 8007aae:	f884 8015 	strb.w	r8, [r4, #21]
 8007ab2:	1b92      	subs	r2, r2, r6
 8007ab4:	1b9b      	subs	r3, r3, r6
 8007ab6:	f080 0001 	eor.w	r0, r0, #1
 8007aba:	60a2      	str	r2, [r4, #8]
 8007abc:	6123      	str	r3, [r4, #16]
 8007abe:	b003      	add	sp, #12
 8007ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ac4:	68a3      	ldr	r3, [r4, #8]
 8007ac6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	e7bc      	b.n	8007a48 <ucdr_serialize_endian_uint16_t+0x60>
 8007ace:	f10d 0506 	add.w	r5, sp, #6
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	4632      	mov	r2, r6
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	f00d ff53 	bl	8015982 <memcpy>
 8007adc:	68a0      	ldr	r0, [r4, #8]
 8007ade:	464a      	mov	r2, r9
 8007ae0:	19a9      	adds	r1, r5, r6
 8007ae2:	f00d ff4e 	bl	8015982 <memcpy>
 8007ae6:	e7af      	b.n	8007a48 <ucdr_serialize_endian_uint16_t+0x60>

08007ae8 <ucdr_deserialize_uint16_t>:
 8007ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aec:	460d      	mov	r5, r1
 8007aee:	2102      	movs	r1, #2
 8007af0:	4604      	mov	r4, r0
 8007af2:	f001 f81b 	bl	8008b2c <ucdr_buffer_alignment>
 8007af6:	4601      	mov	r1, r0
 8007af8:	4620      	mov	r0, r4
 8007afa:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007afe:	f001 f859 	bl	8008bb4 <ucdr_advance_buffer>
 8007b02:	2102      	movs	r1, #2
 8007b04:	4620      	mov	r0, r4
 8007b06:	f000 ffb1 	bl	8008a6c <ucdr_check_buffer_available_for>
 8007b0a:	bb60      	cbnz	r0, 8007b66 <ucdr_deserialize_uint16_t+0x7e>
 8007b0c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007b10:	42be      	cmp	r6, r7
 8007b12:	d923      	bls.n	8007b5c <ucdr_deserialize_uint16_t+0x74>
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	60a6      	str	r6, [r4, #8]
 8007b18:	1bf6      	subs	r6, r6, r7
 8007b1a:	4433      	add	r3, r6
 8007b1c:	f1c6 0902 	rsb	r9, r6, #2
 8007b20:	6123      	str	r3, [r4, #16]
 8007b22:	4649      	mov	r1, r9
 8007b24:	4620      	mov	r0, r4
 8007b26:	f000 ffad 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d034      	beq.n	8007b98 <ucdr_deserialize_uint16_t+0xb0>
 8007b2e:	7d23      	ldrb	r3, [r4, #20]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d042      	beq.n	8007bba <ucdr_deserialize_uint16_t+0xd2>
 8007b34:	787b      	ldrb	r3, [r7, #1]
 8007b36:	702b      	strb	r3, [r5, #0]
 8007b38:	2e00      	cmp	r6, #0
 8007b3a:	d03a      	beq.n	8007bb2 <ucdr_deserialize_uint16_t+0xca>
 8007b3c:	783b      	ldrb	r3, [r7, #0]
 8007b3e:	706b      	strb	r3, [r5, #1]
 8007b40:	6923      	ldr	r3, [r4, #16]
 8007b42:	68a2      	ldr	r2, [r4, #8]
 8007b44:	7da0      	ldrb	r0, [r4, #22]
 8007b46:	2102      	movs	r1, #2
 8007b48:	3302      	adds	r3, #2
 8007b4a:	444a      	add	r2, r9
 8007b4c:	1b9b      	subs	r3, r3, r6
 8007b4e:	7561      	strb	r1, [r4, #21]
 8007b50:	60a2      	str	r2, [r4, #8]
 8007b52:	6123      	str	r3, [r4, #16]
 8007b54:	f080 0001 	eor.w	r0, r0, #1
 8007b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f000 ff90 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8007b64:	b180      	cbz	r0, 8007b88 <ucdr_deserialize_uint16_t+0xa0>
 8007b66:	7d23      	ldrb	r3, [r4, #20]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	68a3      	ldr	r3, [r4, #8]
 8007b6c:	d011      	beq.n	8007b92 <ucdr_deserialize_uint16_t+0xaa>
 8007b6e:	785b      	ldrb	r3, [r3, #1]
 8007b70:	702b      	strb	r3, [r5, #0]
 8007b72:	68a3      	ldr	r3, [r4, #8]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	706b      	strb	r3, [r5, #1]
 8007b78:	68a2      	ldr	r2, [r4, #8]
 8007b7a:	6923      	ldr	r3, [r4, #16]
 8007b7c:	3202      	adds	r2, #2
 8007b7e:	3302      	adds	r3, #2
 8007b80:	2102      	movs	r1, #2
 8007b82:	60a2      	str	r2, [r4, #8]
 8007b84:	6123      	str	r3, [r4, #16]
 8007b86:	7561      	strb	r1, [r4, #21]
 8007b88:	7da0      	ldrb	r0, [r4, #22]
 8007b8a:	f080 0001 	eor.w	r0, r0, #1
 8007b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	802b      	strh	r3, [r5, #0]
 8007b96:	e7ef      	b.n	8007b78 <ucdr_deserialize_uint16_t+0x90>
 8007b98:	68a2      	ldr	r2, [r4, #8]
 8007b9a:	6923      	ldr	r3, [r4, #16]
 8007b9c:	7da0      	ldrb	r0, [r4, #22]
 8007b9e:	f884 8015 	strb.w	r8, [r4, #21]
 8007ba2:	1b92      	subs	r2, r2, r6
 8007ba4:	1b9b      	subs	r3, r3, r6
 8007ba6:	60a2      	str	r2, [r4, #8]
 8007ba8:	6123      	str	r3, [r4, #16]
 8007baa:	f080 0001 	eor.w	r0, r0, #1
 8007bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bb2:	68a3      	ldr	r3, [r4, #8]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	706b      	strb	r3, [r5, #1]
 8007bb8:	e7c2      	b.n	8007b40 <ucdr_deserialize_uint16_t+0x58>
 8007bba:	4639      	mov	r1, r7
 8007bbc:	4632      	mov	r2, r6
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f00d fedf 	bl	8015982 <memcpy>
 8007bc4:	68a1      	ldr	r1, [r4, #8]
 8007bc6:	464a      	mov	r2, r9
 8007bc8:	19a8      	adds	r0, r5, r6
 8007bca:	f00d feda 	bl	8015982 <memcpy>
 8007bce:	e7b7      	b.n	8007b40 <ucdr_deserialize_uint16_t+0x58>

08007bd0 <ucdr_deserialize_endian_uint16_t>:
 8007bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd4:	460e      	mov	r6, r1
 8007bd6:	2102      	movs	r1, #2
 8007bd8:	4604      	mov	r4, r0
 8007bda:	4615      	mov	r5, r2
 8007bdc:	f000 ffa6 	bl	8008b2c <ucdr_buffer_alignment>
 8007be0:	4601      	mov	r1, r0
 8007be2:	4620      	mov	r0, r4
 8007be4:	f894 9015 	ldrb.w	r9, [r4, #21]
 8007be8:	f000 ffe4 	bl	8008bb4 <ucdr_advance_buffer>
 8007bec:	2102      	movs	r1, #2
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 ff3c 	bl	8008a6c <ucdr_check_buffer_available_for>
 8007bf4:	bb70      	cbnz	r0, 8007c54 <ucdr_deserialize_endian_uint16_t+0x84>
 8007bf6:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8007bfa:	4547      	cmp	r7, r8
 8007bfc:	d925      	bls.n	8007c4a <ucdr_deserialize_endian_uint16_t+0x7a>
 8007bfe:	6923      	ldr	r3, [r4, #16]
 8007c00:	60a7      	str	r7, [r4, #8]
 8007c02:	eba7 0708 	sub.w	r7, r7, r8
 8007c06:	443b      	add	r3, r7
 8007c08:	f1c7 0a02 	rsb	sl, r7, #2
 8007c0c:	6123      	str	r3, [r4, #16]
 8007c0e:	4651      	mov	r1, sl
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 ff37 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d034      	beq.n	8007c84 <ucdr_deserialize_endian_uint16_t+0xb4>
 8007c1a:	2e01      	cmp	r6, #1
 8007c1c:	d043      	beq.n	8007ca6 <ucdr_deserialize_endian_uint16_t+0xd6>
 8007c1e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007c22:	702b      	strb	r3, [r5, #0]
 8007c24:	2f00      	cmp	r7, #0
 8007c26:	d03a      	beq.n	8007c9e <ucdr_deserialize_endian_uint16_t+0xce>
 8007c28:	f898 3000 	ldrb.w	r3, [r8]
 8007c2c:	706b      	strb	r3, [r5, #1]
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	68a2      	ldr	r2, [r4, #8]
 8007c32:	7da0      	ldrb	r0, [r4, #22]
 8007c34:	2102      	movs	r1, #2
 8007c36:	3302      	adds	r3, #2
 8007c38:	4452      	add	r2, sl
 8007c3a:	1bdb      	subs	r3, r3, r7
 8007c3c:	7561      	strb	r1, [r4, #21]
 8007c3e:	60a2      	str	r2, [r4, #8]
 8007c40:	6123      	str	r3, [r4, #16]
 8007c42:	f080 0001 	eor.w	r0, r0, #1
 8007c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4a:	2102      	movs	r1, #2
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 ff19 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8007c52:	b178      	cbz	r0, 8007c74 <ucdr_deserialize_endian_uint16_t+0xa4>
 8007c54:	2e01      	cmp	r6, #1
 8007c56:	68a3      	ldr	r3, [r4, #8]
 8007c58:	d011      	beq.n	8007c7e <ucdr_deserialize_endian_uint16_t+0xae>
 8007c5a:	785b      	ldrb	r3, [r3, #1]
 8007c5c:	702b      	strb	r3, [r5, #0]
 8007c5e:	68a3      	ldr	r3, [r4, #8]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	706b      	strb	r3, [r5, #1]
 8007c64:	68a2      	ldr	r2, [r4, #8]
 8007c66:	6923      	ldr	r3, [r4, #16]
 8007c68:	3202      	adds	r2, #2
 8007c6a:	3302      	adds	r3, #2
 8007c6c:	2102      	movs	r1, #2
 8007c6e:	60a2      	str	r2, [r4, #8]
 8007c70:	6123      	str	r3, [r4, #16]
 8007c72:	7561      	strb	r1, [r4, #21]
 8007c74:	7da0      	ldrb	r0, [r4, #22]
 8007c76:	f080 0001 	eor.w	r0, r0, #1
 8007c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	802b      	strh	r3, [r5, #0]
 8007c82:	e7ef      	b.n	8007c64 <ucdr_deserialize_endian_uint16_t+0x94>
 8007c84:	68a2      	ldr	r2, [r4, #8]
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	7da0      	ldrb	r0, [r4, #22]
 8007c8a:	f884 9015 	strb.w	r9, [r4, #21]
 8007c8e:	1bd2      	subs	r2, r2, r7
 8007c90:	1bdb      	subs	r3, r3, r7
 8007c92:	60a2      	str	r2, [r4, #8]
 8007c94:	6123      	str	r3, [r4, #16]
 8007c96:	f080 0001 	eor.w	r0, r0, #1
 8007c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9e:	68a3      	ldr	r3, [r4, #8]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	706b      	strb	r3, [r5, #1]
 8007ca4:	e7c3      	b.n	8007c2e <ucdr_deserialize_endian_uint16_t+0x5e>
 8007ca6:	4641      	mov	r1, r8
 8007ca8:	463a      	mov	r2, r7
 8007caa:	4628      	mov	r0, r5
 8007cac:	f00d fe69 	bl	8015982 <memcpy>
 8007cb0:	68a1      	ldr	r1, [r4, #8]
 8007cb2:	4652      	mov	r2, sl
 8007cb4:	19e8      	adds	r0, r5, r7
 8007cb6:	f00d fe64 	bl	8015982 <memcpy>
 8007cba:	e7b8      	b.n	8007c2e <ucdr_deserialize_endian_uint16_t+0x5e>

08007cbc <ucdr_serialize_uint32_t>:
 8007cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	9101      	str	r1, [sp, #4]
 8007cc6:	2104      	movs	r1, #4
 8007cc8:	f000 ff30 	bl	8008b2c <ucdr_buffer_alignment>
 8007ccc:	4601      	mov	r1, r0
 8007cce:	4620      	mov	r0, r4
 8007cd0:	7d67      	ldrb	r7, [r4, #21]
 8007cd2:	f000 ff6f 	bl	8008bb4 <ucdr_advance_buffer>
 8007cd6:	2104      	movs	r1, #4
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f000 fec7 	bl	8008a6c <ucdr_check_buffer_available_for>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d139      	bne.n	8007d56 <ucdr_serialize_uint32_t+0x9a>
 8007ce2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007ce6:	42ab      	cmp	r3, r5
 8007ce8:	d930      	bls.n	8007d4c <ucdr_serialize_uint32_t+0x90>
 8007cea:	1b5e      	subs	r6, r3, r5
 8007cec:	60a3      	str	r3, [r4, #8]
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	f1c6 0804 	rsb	r8, r6, #4
 8007cf4:	4433      	add	r3, r6
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	4641      	mov	r1, r8
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 fec2 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d04c      	beq.n	8007d9e <ucdr_serialize_uint32_t+0xe2>
 8007d04:	7d23      	ldrb	r3, [r4, #20]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d063      	beq.n	8007dd2 <ucdr_serialize_uint32_t+0x116>
 8007d0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007d0e:	702b      	strb	r3, [r5, #0]
 8007d10:	2e00      	cmp	r6, #0
 8007d12:	d051      	beq.n	8007db8 <ucdr_serialize_uint32_t+0xfc>
 8007d14:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007d18:	706b      	strb	r3, [r5, #1]
 8007d1a:	2e01      	cmp	r6, #1
 8007d1c:	d050      	beq.n	8007dc0 <ucdr_serialize_uint32_t+0x104>
 8007d1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007d22:	70ab      	strb	r3, [r5, #2]
 8007d24:	2e02      	cmp	r6, #2
 8007d26:	d04f      	beq.n	8007dc8 <ucdr_serialize_uint32_t+0x10c>
 8007d28:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007d2c:	70eb      	strb	r3, [r5, #3]
 8007d2e:	6923      	ldr	r3, [r4, #16]
 8007d30:	68a2      	ldr	r2, [r4, #8]
 8007d32:	7da0      	ldrb	r0, [r4, #22]
 8007d34:	3304      	adds	r3, #4
 8007d36:	1b9e      	subs	r6, r3, r6
 8007d38:	4442      	add	r2, r8
 8007d3a:	2304      	movs	r3, #4
 8007d3c:	f080 0001 	eor.w	r0, r0, #1
 8007d40:	60a2      	str	r2, [r4, #8]
 8007d42:	6126      	str	r6, [r4, #16]
 8007d44:	7563      	strb	r3, [r4, #21]
 8007d46:	b002      	add	sp, #8
 8007d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d4c:	2104      	movs	r1, #4
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 fe98 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8007d54:	b1d0      	cbz	r0, 8007d8c <ucdr_serialize_uint32_t+0xd0>
 8007d56:	7d23      	ldrb	r3, [r4, #20]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	68a3      	ldr	r3, [r4, #8]
 8007d5c:	d01c      	beq.n	8007d98 <ucdr_serialize_uint32_t+0xdc>
 8007d5e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007d62:	701a      	strb	r2, [r3, #0]
 8007d64:	68a3      	ldr	r3, [r4, #8]
 8007d66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007d6a:	705a      	strb	r2, [r3, #1]
 8007d6c:	68a3      	ldr	r3, [r4, #8]
 8007d6e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007d72:	709a      	strb	r2, [r3, #2]
 8007d74:	68a3      	ldr	r3, [r4, #8]
 8007d76:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007d7a:	70da      	strb	r2, [r3, #3]
 8007d7c:	68a2      	ldr	r2, [r4, #8]
 8007d7e:	6923      	ldr	r3, [r4, #16]
 8007d80:	3204      	adds	r2, #4
 8007d82:	3304      	adds	r3, #4
 8007d84:	2104      	movs	r1, #4
 8007d86:	60a2      	str	r2, [r4, #8]
 8007d88:	6123      	str	r3, [r4, #16]
 8007d8a:	7561      	strb	r1, [r4, #21]
 8007d8c:	7da0      	ldrb	r0, [r4, #22]
 8007d8e:	f080 0001 	eor.w	r0, r0, #1
 8007d92:	b002      	add	sp, #8
 8007d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d98:	9a01      	ldr	r2, [sp, #4]
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	e7ee      	b.n	8007d7c <ucdr_serialize_uint32_t+0xc0>
 8007d9e:	68a2      	ldr	r2, [r4, #8]
 8007da0:	6923      	ldr	r3, [r4, #16]
 8007da2:	7da0      	ldrb	r0, [r4, #22]
 8007da4:	7567      	strb	r7, [r4, #21]
 8007da6:	1b92      	subs	r2, r2, r6
 8007da8:	1b9b      	subs	r3, r3, r6
 8007daa:	f080 0001 	eor.w	r0, r0, #1
 8007dae:	60a2      	str	r2, [r4, #8]
 8007db0:	6123      	str	r3, [r4, #16]
 8007db2:	b002      	add	sp, #8
 8007db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db8:	68a3      	ldr	r3, [r4, #8]
 8007dba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007dbe:	701a      	strb	r2, [r3, #0]
 8007dc0:	68a3      	ldr	r3, [r4, #8]
 8007dc2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007dc6:	701a      	strb	r2, [r3, #0]
 8007dc8:	68a3      	ldr	r3, [r4, #8]
 8007dca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007dce:	701a      	strb	r2, [r3, #0]
 8007dd0:	e7ad      	b.n	8007d2e <ucdr_serialize_uint32_t+0x72>
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	ad01      	add	r5, sp, #4
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4632      	mov	r2, r6
 8007dda:	f00d fdd2 	bl	8015982 <memcpy>
 8007dde:	68a0      	ldr	r0, [r4, #8]
 8007de0:	4642      	mov	r2, r8
 8007de2:	19a9      	adds	r1, r5, r6
 8007de4:	f00d fdcd 	bl	8015982 <memcpy>
 8007de8:	e7a1      	b.n	8007d2e <ucdr_serialize_uint32_t+0x72>
 8007dea:	bf00      	nop

08007dec <ucdr_serialize_endian_uint32_t>:
 8007dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007df0:	b083      	sub	sp, #12
 8007df2:	460d      	mov	r5, r1
 8007df4:	2104      	movs	r1, #4
 8007df6:	4604      	mov	r4, r0
 8007df8:	9201      	str	r2, [sp, #4]
 8007dfa:	f000 fe97 	bl	8008b2c <ucdr_buffer_alignment>
 8007dfe:	4601      	mov	r1, r0
 8007e00:	4620      	mov	r0, r4
 8007e02:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007e06:	f000 fed5 	bl	8008bb4 <ucdr_advance_buffer>
 8007e0a:	2104      	movs	r1, #4
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f000 fe2d 	bl	8008a6c <ucdr_check_buffer_available_for>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d138      	bne.n	8007e88 <ucdr_serialize_endian_uint32_t+0x9c>
 8007e16:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8007e1a:	42b7      	cmp	r7, r6
 8007e1c:	d92f      	bls.n	8007e7e <ucdr_serialize_endian_uint32_t+0x92>
 8007e1e:	6923      	ldr	r3, [r4, #16]
 8007e20:	60a7      	str	r7, [r4, #8]
 8007e22:	1bbf      	subs	r7, r7, r6
 8007e24:	443b      	add	r3, r7
 8007e26:	f1c7 0904 	rsb	r9, r7, #4
 8007e2a:	6123      	str	r3, [r4, #16]
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 fe28 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d04a      	beq.n	8007ece <ucdr_serialize_endian_uint32_t+0xe2>
 8007e38:	2d01      	cmp	r5, #1
 8007e3a:	d063      	beq.n	8007f04 <ucdr_serialize_endian_uint32_t+0x118>
 8007e3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007e40:	7033      	strb	r3, [r6, #0]
 8007e42:	2f00      	cmp	r7, #0
 8007e44:	d051      	beq.n	8007eea <ucdr_serialize_endian_uint32_t+0xfe>
 8007e46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007e4a:	7073      	strb	r3, [r6, #1]
 8007e4c:	2f01      	cmp	r7, #1
 8007e4e:	d050      	beq.n	8007ef2 <ucdr_serialize_endian_uint32_t+0x106>
 8007e50:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007e54:	70b3      	strb	r3, [r6, #2]
 8007e56:	2f02      	cmp	r7, #2
 8007e58:	d04f      	beq.n	8007efa <ucdr_serialize_endian_uint32_t+0x10e>
 8007e5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007e5e:	70f3      	strb	r3, [r6, #3]
 8007e60:	6923      	ldr	r3, [r4, #16]
 8007e62:	68a2      	ldr	r2, [r4, #8]
 8007e64:	7da0      	ldrb	r0, [r4, #22]
 8007e66:	3304      	adds	r3, #4
 8007e68:	444a      	add	r2, r9
 8007e6a:	1bdb      	subs	r3, r3, r7
 8007e6c:	2104      	movs	r1, #4
 8007e6e:	f080 0001 	eor.w	r0, r0, #1
 8007e72:	60a2      	str	r2, [r4, #8]
 8007e74:	6123      	str	r3, [r4, #16]
 8007e76:	7561      	strb	r1, [r4, #21]
 8007e78:	b003      	add	sp, #12
 8007e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e7e:	2104      	movs	r1, #4
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 fdff 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8007e86:	b1c8      	cbz	r0, 8007ebc <ucdr_serialize_endian_uint32_t+0xd0>
 8007e88:	2d01      	cmp	r5, #1
 8007e8a:	68a3      	ldr	r3, [r4, #8]
 8007e8c:	d01c      	beq.n	8007ec8 <ucdr_serialize_endian_uint32_t+0xdc>
 8007e8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007e92:	701a      	strb	r2, [r3, #0]
 8007e94:	68a3      	ldr	r3, [r4, #8]
 8007e96:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007e9a:	705a      	strb	r2, [r3, #1]
 8007e9c:	68a3      	ldr	r3, [r4, #8]
 8007e9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007ea2:	709a      	strb	r2, [r3, #2]
 8007ea4:	68a3      	ldr	r3, [r4, #8]
 8007ea6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007eaa:	70da      	strb	r2, [r3, #3]
 8007eac:	68a2      	ldr	r2, [r4, #8]
 8007eae:	6923      	ldr	r3, [r4, #16]
 8007eb0:	3204      	adds	r2, #4
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	2104      	movs	r1, #4
 8007eb6:	60a2      	str	r2, [r4, #8]
 8007eb8:	6123      	str	r3, [r4, #16]
 8007eba:	7561      	strb	r1, [r4, #21]
 8007ebc:	7da0      	ldrb	r0, [r4, #22]
 8007ebe:	f080 0001 	eor.w	r0, r0, #1
 8007ec2:	b003      	add	sp, #12
 8007ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ec8:	9a01      	ldr	r2, [sp, #4]
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	e7ee      	b.n	8007eac <ucdr_serialize_endian_uint32_t+0xc0>
 8007ece:	68a2      	ldr	r2, [r4, #8]
 8007ed0:	6923      	ldr	r3, [r4, #16]
 8007ed2:	7da0      	ldrb	r0, [r4, #22]
 8007ed4:	f884 8015 	strb.w	r8, [r4, #21]
 8007ed8:	1bd2      	subs	r2, r2, r7
 8007eda:	1bdb      	subs	r3, r3, r7
 8007edc:	f080 0001 	eor.w	r0, r0, #1
 8007ee0:	60a2      	str	r2, [r4, #8]
 8007ee2:	6123      	str	r3, [r4, #16]
 8007ee4:	b003      	add	sp, #12
 8007ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eea:	68a3      	ldr	r3, [r4, #8]
 8007eec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	68a3      	ldr	r3, [r4, #8]
 8007ef4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007ef8:	701a      	strb	r2, [r3, #0]
 8007efa:	68a3      	ldr	r3, [r4, #8]
 8007efc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	e7ad      	b.n	8007e60 <ucdr_serialize_endian_uint32_t+0x74>
 8007f04:	ad01      	add	r5, sp, #4
 8007f06:	4629      	mov	r1, r5
 8007f08:	463a      	mov	r2, r7
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f00d fd39 	bl	8015982 <memcpy>
 8007f10:	68a0      	ldr	r0, [r4, #8]
 8007f12:	464a      	mov	r2, r9
 8007f14:	19e9      	adds	r1, r5, r7
 8007f16:	f00d fd34 	bl	8015982 <memcpy>
 8007f1a:	e7a1      	b.n	8007e60 <ucdr_serialize_endian_uint32_t+0x74>

08007f1c <ucdr_deserialize_uint32_t>:
 8007f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f20:	460d      	mov	r5, r1
 8007f22:	2104      	movs	r1, #4
 8007f24:	4604      	mov	r4, r0
 8007f26:	f000 fe01 	bl	8008b2c <ucdr_buffer_alignment>
 8007f2a:	4601      	mov	r1, r0
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007f32:	f000 fe3f 	bl	8008bb4 <ucdr_advance_buffer>
 8007f36:	2104      	movs	r1, #4
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f000 fd97 	bl	8008a6c <ucdr_check_buffer_available_for>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d138      	bne.n	8007fb4 <ucdr_deserialize_uint32_t+0x98>
 8007f42:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8007f46:	42b7      	cmp	r7, r6
 8007f48:	d92f      	bls.n	8007faa <ucdr_deserialize_uint32_t+0x8e>
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	60a7      	str	r7, [r4, #8]
 8007f4e:	1bbf      	subs	r7, r7, r6
 8007f50:	443b      	add	r3, r7
 8007f52:	f1c7 0904 	rsb	r9, r7, #4
 8007f56:	6123      	str	r3, [r4, #16]
 8007f58:	4649      	mov	r1, r9
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f000 fd92 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d046      	beq.n	8007ff2 <ucdr_deserialize_uint32_t+0xd6>
 8007f64:	7d23      	ldrb	r3, [r4, #20]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d05c      	beq.n	8008024 <ucdr_deserialize_uint32_t+0x108>
 8007f6a:	78f3      	ldrb	r3, [r6, #3]
 8007f6c:	702b      	strb	r3, [r5, #0]
 8007f6e:	2f00      	cmp	r7, #0
 8007f70:	d04c      	beq.n	800800c <ucdr_deserialize_uint32_t+0xf0>
 8007f72:	78b3      	ldrb	r3, [r6, #2]
 8007f74:	706b      	strb	r3, [r5, #1]
 8007f76:	2f01      	cmp	r7, #1
 8007f78:	f105 0302 	add.w	r3, r5, #2
 8007f7c:	d04a      	beq.n	8008014 <ucdr_deserialize_uint32_t+0xf8>
 8007f7e:	7873      	ldrb	r3, [r6, #1]
 8007f80:	70ab      	strb	r3, [r5, #2]
 8007f82:	2f02      	cmp	r7, #2
 8007f84:	f105 0303 	add.w	r3, r5, #3
 8007f88:	d048      	beq.n	800801c <ucdr_deserialize_uint32_t+0x100>
 8007f8a:	7833      	ldrb	r3, [r6, #0]
 8007f8c:	70eb      	strb	r3, [r5, #3]
 8007f8e:	6923      	ldr	r3, [r4, #16]
 8007f90:	68a2      	ldr	r2, [r4, #8]
 8007f92:	7da0      	ldrb	r0, [r4, #22]
 8007f94:	2104      	movs	r1, #4
 8007f96:	3304      	adds	r3, #4
 8007f98:	444a      	add	r2, r9
 8007f9a:	1bdb      	subs	r3, r3, r7
 8007f9c:	7561      	strb	r1, [r4, #21]
 8007f9e:	60a2      	str	r2, [r4, #8]
 8007fa0:	6123      	str	r3, [r4, #16]
 8007fa2:	f080 0001 	eor.w	r0, r0, #1
 8007fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007faa:	2104      	movs	r1, #4
 8007fac:	4620      	mov	r0, r4
 8007fae:	f000 fd69 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8007fb2:	b1b0      	cbz	r0, 8007fe2 <ucdr_deserialize_uint32_t+0xc6>
 8007fb4:	7d23      	ldrb	r3, [r4, #20]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	68a3      	ldr	r3, [r4, #8]
 8007fba:	d017      	beq.n	8007fec <ucdr_deserialize_uint32_t+0xd0>
 8007fbc:	78db      	ldrb	r3, [r3, #3]
 8007fbe:	702b      	strb	r3, [r5, #0]
 8007fc0:	68a3      	ldr	r3, [r4, #8]
 8007fc2:	789b      	ldrb	r3, [r3, #2]
 8007fc4:	706b      	strb	r3, [r5, #1]
 8007fc6:	68a3      	ldr	r3, [r4, #8]
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	70ab      	strb	r3, [r5, #2]
 8007fcc:	68a3      	ldr	r3, [r4, #8]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	70eb      	strb	r3, [r5, #3]
 8007fd2:	68a2      	ldr	r2, [r4, #8]
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	3204      	adds	r2, #4
 8007fd8:	3304      	adds	r3, #4
 8007fda:	2104      	movs	r1, #4
 8007fdc:	60a2      	str	r2, [r4, #8]
 8007fde:	6123      	str	r3, [r4, #16]
 8007fe0:	7561      	strb	r1, [r4, #21]
 8007fe2:	7da0      	ldrb	r0, [r4, #22]
 8007fe4:	f080 0001 	eor.w	r0, r0, #1
 8007fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	602b      	str	r3, [r5, #0]
 8007ff0:	e7ef      	b.n	8007fd2 <ucdr_deserialize_uint32_t+0xb6>
 8007ff2:	68a2      	ldr	r2, [r4, #8]
 8007ff4:	6923      	ldr	r3, [r4, #16]
 8007ff6:	7da0      	ldrb	r0, [r4, #22]
 8007ff8:	f884 8015 	strb.w	r8, [r4, #21]
 8007ffc:	1bd2      	subs	r2, r2, r7
 8007ffe:	1bdb      	subs	r3, r3, r7
 8008000:	60a2      	str	r2, [r4, #8]
 8008002:	6123      	str	r3, [r4, #16]
 8008004:	f080 0001 	eor.w	r0, r0, #1
 8008008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800800c:	68a3      	ldr	r3, [r4, #8]
 800800e:	789b      	ldrb	r3, [r3, #2]
 8008010:	706b      	strb	r3, [r5, #1]
 8008012:	1cab      	adds	r3, r5, #2
 8008014:	68a2      	ldr	r2, [r4, #8]
 8008016:	7852      	ldrb	r2, [r2, #1]
 8008018:	f803 2b01 	strb.w	r2, [r3], #1
 800801c:	68a2      	ldr	r2, [r4, #8]
 800801e:	7812      	ldrb	r2, [r2, #0]
 8008020:	701a      	strb	r2, [r3, #0]
 8008022:	e7b4      	b.n	8007f8e <ucdr_deserialize_uint32_t+0x72>
 8008024:	4631      	mov	r1, r6
 8008026:	463a      	mov	r2, r7
 8008028:	4628      	mov	r0, r5
 800802a:	f00d fcaa 	bl	8015982 <memcpy>
 800802e:	68a1      	ldr	r1, [r4, #8]
 8008030:	464a      	mov	r2, r9
 8008032:	19e8      	adds	r0, r5, r7
 8008034:	f00d fca5 	bl	8015982 <memcpy>
 8008038:	e7a9      	b.n	8007f8e <ucdr_deserialize_uint32_t+0x72>
 800803a:	bf00      	nop

0800803c <ucdr_deserialize_endian_uint32_t>:
 800803c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008040:	460e      	mov	r6, r1
 8008042:	2104      	movs	r1, #4
 8008044:	4604      	mov	r4, r0
 8008046:	4615      	mov	r5, r2
 8008048:	f000 fd70 	bl	8008b2c <ucdr_buffer_alignment>
 800804c:	4601      	mov	r1, r0
 800804e:	4620      	mov	r0, r4
 8008050:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008054:	f000 fdae 	bl	8008bb4 <ucdr_advance_buffer>
 8008058:	2104      	movs	r1, #4
 800805a:	4620      	mov	r0, r4
 800805c:	f000 fd06 	bl	8008a6c <ucdr_check_buffer_available_for>
 8008060:	2800      	cmp	r0, #0
 8008062:	d13c      	bne.n	80080de <ucdr_deserialize_endian_uint32_t+0xa2>
 8008064:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8008068:	42bb      	cmp	r3, r7
 800806a:	d933      	bls.n	80080d4 <ucdr_deserialize_endian_uint32_t+0x98>
 800806c:	eba3 0807 	sub.w	r8, r3, r7
 8008070:	60a3      	str	r3, [r4, #8]
 8008072:	6923      	ldr	r3, [r4, #16]
 8008074:	f1c8 0a04 	rsb	sl, r8, #4
 8008078:	4443      	add	r3, r8
 800807a:	6123      	str	r3, [r4, #16]
 800807c:	4651      	mov	r1, sl
 800807e:	4620      	mov	r0, r4
 8008080:	f000 fd00 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8008084:	2800      	cmp	r0, #0
 8008086:	d048      	beq.n	800811a <ucdr_deserialize_endian_uint32_t+0xde>
 8008088:	2e01      	cmp	r6, #1
 800808a:	d061      	beq.n	8008150 <ucdr_deserialize_endian_uint32_t+0x114>
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	702b      	strb	r3, [r5, #0]
 8008090:	f1b8 0f00 	cmp.w	r8, #0
 8008094:	d050      	beq.n	8008138 <ucdr_deserialize_endian_uint32_t+0xfc>
 8008096:	78bb      	ldrb	r3, [r7, #2]
 8008098:	706b      	strb	r3, [r5, #1]
 800809a:	f1b8 0f01 	cmp.w	r8, #1
 800809e:	f105 0302 	add.w	r3, r5, #2
 80080a2:	d04d      	beq.n	8008140 <ucdr_deserialize_endian_uint32_t+0x104>
 80080a4:	787b      	ldrb	r3, [r7, #1]
 80080a6:	70ab      	strb	r3, [r5, #2]
 80080a8:	f1b8 0f02 	cmp.w	r8, #2
 80080ac:	f105 0303 	add.w	r3, r5, #3
 80080b0:	d04a      	beq.n	8008148 <ucdr_deserialize_endian_uint32_t+0x10c>
 80080b2:	783b      	ldrb	r3, [r7, #0]
 80080b4:	70eb      	strb	r3, [r5, #3]
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	68a2      	ldr	r2, [r4, #8]
 80080ba:	7da0      	ldrb	r0, [r4, #22]
 80080bc:	2104      	movs	r1, #4
 80080be:	3304      	adds	r3, #4
 80080c0:	4452      	add	r2, sl
 80080c2:	eba3 0308 	sub.w	r3, r3, r8
 80080c6:	7561      	strb	r1, [r4, #21]
 80080c8:	60a2      	str	r2, [r4, #8]
 80080ca:	6123      	str	r3, [r4, #16]
 80080cc:	f080 0001 	eor.w	r0, r0, #1
 80080d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d4:	2104      	movs	r1, #4
 80080d6:	4620      	mov	r0, r4
 80080d8:	f000 fcd4 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 80080dc:	b1a8      	cbz	r0, 800810a <ucdr_deserialize_endian_uint32_t+0xce>
 80080de:	2e01      	cmp	r6, #1
 80080e0:	68a3      	ldr	r3, [r4, #8]
 80080e2:	d017      	beq.n	8008114 <ucdr_deserialize_endian_uint32_t+0xd8>
 80080e4:	78db      	ldrb	r3, [r3, #3]
 80080e6:	702b      	strb	r3, [r5, #0]
 80080e8:	68a3      	ldr	r3, [r4, #8]
 80080ea:	789b      	ldrb	r3, [r3, #2]
 80080ec:	706b      	strb	r3, [r5, #1]
 80080ee:	68a3      	ldr	r3, [r4, #8]
 80080f0:	785b      	ldrb	r3, [r3, #1]
 80080f2:	70ab      	strb	r3, [r5, #2]
 80080f4:	68a3      	ldr	r3, [r4, #8]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	70eb      	strb	r3, [r5, #3]
 80080fa:	68a2      	ldr	r2, [r4, #8]
 80080fc:	6923      	ldr	r3, [r4, #16]
 80080fe:	3204      	adds	r2, #4
 8008100:	3304      	adds	r3, #4
 8008102:	2104      	movs	r1, #4
 8008104:	60a2      	str	r2, [r4, #8]
 8008106:	6123      	str	r3, [r4, #16]
 8008108:	7561      	strb	r1, [r4, #21]
 800810a:	7da0      	ldrb	r0, [r4, #22]
 800810c:	f080 0001 	eor.w	r0, r0, #1
 8008110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	602b      	str	r3, [r5, #0]
 8008118:	e7ef      	b.n	80080fa <ucdr_deserialize_endian_uint32_t+0xbe>
 800811a:	68a2      	ldr	r2, [r4, #8]
 800811c:	6923      	ldr	r3, [r4, #16]
 800811e:	7da0      	ldrb	r0, [r4, #22]
 8008120:	f884 9015 	strb.w	r9, [r4, #21]
 8008124:	eba2 0208 	sub.w	r2, r2, r8
 8008128:	eba3 0308 	sub.w	r3, r3, r8
 800812c:	60a2      	str	r2, [r4, #8]
 800812e:	6123      	str	r3, [r4, #16]
 8008130:	f080 0001 	eor.w	r0, r0, #1
 8008134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008138:	68a3      	ldr	r3, [r4, #8]
 800813a:	789b      	ldrb	r3, [r3, #2]
 800813c:	706b      	strb	r3, [r5, #1]
 800813e:	1cab      	adds	r3, r5, #2
 8008140:	68a2      	ldr	r2, [r4, #8]
 8008142:	7852      	ldrb	r2, [r2, #1]
 8008144:	f803 2b01 	strb.w	r2, [r3], #1
 8008148:	68a2      	ldr	r2, [r4, #8]
 800814a:	7812      	ldrb	r2, [r2, #0]
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	e7b2      	b.n	80080b6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8008150:	4639      	mov	r1, r7
 8008152:	4642      	mov	r2, r8
 8008154:	4628      	mov	r0, r5
 8008156:	f00d fc14 	bl	8015982 <memcpy>
 800815a:	68a1      	ldr	r1, [r4, #8]
 800815c:	4652      	mov	r2, sl
 800815e:	eb05 0008 	add.w	r0, r5, r8
 8008162:	f00d fc0e 	bl	8015982 <memcpy>
 8008166:	e7a6      	b.n	80080b6 <ucdr_deserialize_endian_uint32_t+0x7a>

08008168 <ucdr_serialize_uint64_t>:
 8008168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800816c:	2108      	movs	r1, #8
 800816e:	b082      	sub	sp, #8
 8008170:	4604      	mov	r4, r0
 8008172:	e9cd 2300 	strd	r2, r3, [sp]
 8008176:	f000 fcd9 	bl	8008b2c <ucdr_buffer_alignment>
 800817a:	4601      	mov	r1, r0
 800817c:	4620      	mov	r0, r4
 800817e:	7d67      	ldrb	r7, [r4, #21]
 8008180:	f000 fd18 	bl	8008bb4 <ucdr_advance_buffer>
 8008184:	2108      	movs	r1, #8
 8008186:	4620      	mov	r0, r4
 8008188:	f000 fc70 	bl	8008a6c <ucdr_check_buffer_available_for>
 800818c:	2800      	cmp	r0, #0
 800818e:	d14e      	bne.n	800822e <ucdr_serialize_uint64_t+0xc6>
 8008190:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008194:	42ab      	cmp	r3, r5
 8008196:	d945      	bls.n	8008224 <ucdr_serialize_uint64_t+0xbc>
 8008198:	1b5e      	subs	r6, r3, r5
 800819a:	60a3      	str	r3, [r4, #8]
 800819c:	6923      	ldr	r3, [r4, #16]
 800819e:	f1c6 0808 	rsb	r8, r6, #8
 80081a2:	4433      	add	r3, r6
 80081a4:	6123      	str	r3, [r4, #16]
 80081a6:	4641      	mov	r1, r8
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 fc6b 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d074      	beq.n	800829c <ucdr_serialize_uint64_t+0x134>
 80081b2:	7d23      	ldrb	r3, [r4, #20]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	f000 809b 	beq.w	80082f0 <ucdr_serialize_uint64_t+0x188>
 80081ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80081be:	702b      	strb	r3, [r5, #0]
 80081c0:	2e00      	cmp	r6, #0
 80081c2:	d078      	beq.n	80082b6 <ucdr_serialize_uint64_t+0x14e>
 80081c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80081c8:	706b      	strb	r3, [r5, #1]
 80081ca:	2e01      	cmp	r6, #1
 80081cc:	d077      	beq.n	80082be <ucdr_serialize_uint64_t+0x156>
 80081ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80081d2:	70ab      	strb	r3, [r5, #2]
 80081d4:	2e02      	cmp	r6, #2
 80081d6:	d076      	beq.n	80082c6 <ucdr_serialize_uint64_t+0x15e>
 80081d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80081dc:	70eb      	strb	r3, [r5, #3]
 80081de:	2e03      	cmp	r6, #3
 80081e0:	d075      	beq.n	80082ce <ucdr_serialize_uint64_t+0x166>
 80081e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80081e6:	712b      	strb	r3, [r5, #4]
 80081e8:	2e04      	cmp	r6, #4
 80081ea:	d074      	beq.n	80082d6 <ucdr_serialize_uint64_t+0x16e>
 80081ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80081f0:	716b      	strb	r3, [r5, #5]
 80081f2:	2e05      	cmp	r6, #5
 80081f4:	d073      	beq.n	80082de <ucdr_serialize_uint64_t+0x176>
 80081f6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80081fa:	71ab      	strb	r3, [r5, #6]
 80081fc:	2e06      	cmp	r6, #6
 80081fe:	d072      	beq.n	80082e6 <ucdr_serialize_uint64_t+0x17e>
 8008200:	f89d 3000 	ldrb.w	r3, [sp]
 8008204:	71eb      	strb	r3, [r5, #7]
 8008206:	6923      	ldr	r3, [r4, #16]
 8008208:	68a2      	ldr	r2, [r4, #8]
 800820a:	7da0      	ldrb	r0, [r4, #22]
 800820c:	3308      	adds	r3, #8
 800820e:	1b9e      	subs	r6, r3, r6
 8008210:	4442      	add	r2, r8
 8008212:	2308      	movs	r3, #8
 8008214:	f080 0001 	eor.w	r0, r0, #1
 8008218:	60a2      	str	r2, [r4, #8]
 800821a:	6126      	str	r6, [r4, #16]
 800821c:	7563      	strb	r3, [r4, #21]
 800821e:	b002      	add	sp, #8
 8008220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008224:	2108      	movs	r1, #8
 8008226:	4620      	mov	r0, r4
 8008228:	f000 fc2c 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 800822c:	b350      	cbz	r0, 8008284 <ucdr_serialize_uint64_t+0x11c>
 800822e:	7d23      	ldrb	r3, [r4, #20]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d02d      	beq.n	8008290 <ucdr_serialize_uint64_t+0x128>
 8008234:	68a3      	ldr	r3, [r4, #8]
 8008236:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800823a:	701a      	strb	r2, [r3, #0]
 800823c:	68a3      	ldr	r3, [r4, #8]
 800823e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008242:	705a      	strb	r2, [r3, #1]
 8008244:	68a3      	ldr	r3, [r4, #8]
 8008246:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800824a:	709a      	strb	r2, [r3, #2]
 800824c:	68a3      	ldr	r3, [r4, #8]
 800824e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008252:	70da      	strb	r2, [r3, #3]
 8008254:	68a3      	ldr	r3, [r4, #8]
 8008256:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800825a:	711a      	strb	r2, [r3, #4]
 800825c:	68a3      	ldr	r3, [r4, #8]
 800825e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008262:	715a      	strb	r2, [r3, #5]
 8008264:	68a3      	ldr	r3, [r4, #8]
 8008266:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800826a:	719a      	strb	r2, [r3, #6]
 800826c:	68a3      	ldr	r3, [r4, #8]
 800826e:	f89d 2000 	ldrb.w	r2, [sp]
 8008272:	71da      	strb	r2, [r3, #7]
 8008274:	68a2      	ldr	r2, [r4, #8]
 8008276:	6923      	ldr	r3, [r4, #16]
 8008278:	3208      	adds	r2, #8
 800827a:	3308      	adds	r3, #8
 800827c:	2108      	movs	r1, #8
 800827e:	60a2      	str	r2, [r4, #8]
 8008280:	6123      	str	r3, [r4, #16]
 8008282:	7561      	strb	r1, [r4, #21]
 8008284:	7da0      	ldrb	r0, [r4, #22]
 8008286:	f080 0001 	eor.w	r0, r0, #1
 800828a:	b002      	add	sp, #8
 800828c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008290:	466b      	mov	r3, sp
 8008292:	cb03      	ldmia	r3!, {r0, r1}
 8008294:	68a3      	ldr	r3, [r4, #8]
 8008296:	6018      	str	r0, [r3, #0]
 8008298:	6059      	str	r1, [r3, #4]
 800829a:	e7eb      	b.n	8008274 <ucdr_serialize_uint64_t+0x10c>
 800829c:	68a2      	ldr	r2, [r4, #8]
 800829e:	6923      	ldr	r3, [r4, #16]
 80082a0:	7da0      	ldrb	r0, [r4, #22]
 80082a2:	7567      	strb	r7, [r4, #21]
 80082a4:	1b92      	subs	r2, r2, r6
 80082a6:	1b9b      	subs	r3, r3, r6
 80082a8:	f080 0001 	eor.w	r0, r0, #1
 80082ac:	60a2      	str	r2, [r4, #8]
 80082ae:	6123      	str	r3, [r4, #16]
 80082b0:	b002      	add	sp, #8
 80082b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b6:	68a3      	ldr	r3, [r4, #8]
 80082b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80082bc:	701a      	strb	r2, [r3, #0]
 80082be:	68a3      	ldr	r3, [r4, #8]
 80082c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80082c4:	701a      	strb	r2, [r3, #0]
 80082c6:	68a3      	ldr	r3, [r4, #8]
 80082c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80082cc:	701a      	strb	r2, [r3, #0]
 80082ce:	68a3      	ldr	r3, [r4, #8]
 80082d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	68a3      	ldr	r3, [r4, #8]
 80082d8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	68a3      	ldr	r3, [r4, #8]
 80082e0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80082e4:	701a      	strb	r2, [r3, #0]
 80082e6:	68a3      	ldr	r3, [r4, #8]
 80082e8:	f89d 2000 	ldrb.w	r2, [sp]
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	e78a      	b.n	8008206 <ucdr_serialize_uint64_t+0x9e>
 80082f0:	4628      	mov	r0, r5
 80082f2:	466d      	mov	r5, sp
 80082f4:	4629      	mov	r1, r5
 80082f6:	4632      	mov	r2, r6
 80082f8:	f00d fb43 	bl	8015982 <memcpy>
 80082fc:	68a0      	ldr	r0, [r4, #8]
 80082fe:	4642      	mov	r2, r8
 8008300:	19a9      	adds	r1, r5, r6
 8008302:	f00d fb3e 	bl	8015982 <memcpy>
 8008306:	e77e      	b.n	8008206 <ucdr_serialize_uint64_t+0x9e>

08008308 <ucdr_serialize_int16_t>:
 8008308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800830c:	b082      	sub	sp, #8
 800830e:	460b      	mov	r3, r1
 8008310:	2102      	movs	r1, #2
 8008312:	4604      	mov	r4, r0
 8008314:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008318:	f000 fc08 	bl	8008b2c <ucdr_buffer_alignment>
 800831c:	4601      	mov	r1, r0
 800831e:	4620      	mov	r0, r4
 8008320:	7d67      	ldrb	r7, [r4, #21]
 8008322:	f000 fc47 	bl	8008bb4 <ucdr_advance_buffer>
 8008326:	2102      	movs	r1, #2
 8008328:	4620      	mov	r0, r4
 800832a:	f000 fb9f 	bl	8008a6c <ucdr_check_buffer_available_for>
 800832e:	bb78      	cbnz	r0, 8008390 <ucdr_serialize_int16_t+0x88>
 8008330:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008334:	42ab      	cmp	r3, r5
 8008336:	d926      	bls.n	8008386 <ucdr_serialize_int16_t+0x7e>
 8008338:	1b5e      	subs	r6, r3, r5
 800833a:	60a3      	str	r3, [r4, #8]
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	f1c6 0802 	rsb	r8, r6, #2
 8008342:	4433      	add	r3, r6
 8008344:	6123      	str	r3, [r4, #16]
 8008346:	4641      	mov	r1, r8
 8008348:	4620      	mov	r0, r4
 800834a:	f000 fb9b 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 800834e:	2800      	cmp	r0, #0
 8008350:	d03b      	beq.n	80083ca <ucdr_serialize_int16_t+0xc2>
 8008352:	7d23      	ldrb	r3, [r4, #20]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d04a      	beq.n	80083ee <ucdr_serialize_int16_t+0xe6>
 8008358:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800835c:	702b      	strb	r3, [r5, #0]
 800835e:	2e00      	cmp	r6, #0
 8008360:	d040      	beq.n	80083e4 <ucdr_serialize_int16_t+0xdc>
 8008362:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008366:	706b      	strb	r3, [r5, #1]
 8008368:	6923      	ldr	r3, [r4, #16]
 800836a:	68a2      	ldr	r2, [r4, #8]
 800836c:	7da0      	ldrb	r0, [r4, #22]
 800836e:	3302      	adds	r3, #2
 8008370:	1b9e      	subs	r6, r3, r6
 8008372:	4442      	add	r2, r8
 8008374:	2302      	movs	r3, #2
 8008376:	f080 0001 	eor.w	r0, r0, #1
 800837a:	60a2      	str	r2, [r4, #8]
 800837c:	6126      	str	r6, [r4, #16]
 800837e:	7563      	strb	r3, [r4, #21]
 8008380:	b002      	add	sp, #8
 8008382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008386:	2102      	movs	r1, #2
 8008388:	4620      	mov	r0, r4
 800838a:	f000 fb7b 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 800838e:	b190      	cbz	r0, 80083b6 <ucdr_serialize_int16_t+0xae>
 8008390:	7d23      	ldrb	r3, [r4, #20]
 8008392:	2b01      	cmp	r3, #1
 8008394:	68a3      	ldr	r3, [r4, #8]
 8008396:	d014      	beq.n	80083c2 <ucdr_serialize_int16_t+0xba>
 8008398:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	68a3      	ldr	r3, [r4, #8]
 80083a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80083a4:	705a      	strb	r2, [r3, #1]
 80083a6:	68a2      	ldr	r2, [r4, #8]
 80083a8:	6923      	ldr	r3, [r4, #16]
 80083aa:	3202      	adds	r2, #2
 80083ac:	3302      	adds	r3, #2
 80083ae:	2102      	movs	r1, #2
 80083b0:	60a2      	str	r2, [r4, #8]
 80083b2:	6123      	str	r3, [r4, #16]
 80083b4:	7561      	strb	r1, [r4, #21]
 80083b6:	7da0      	ldrb	r0, [r4, #22]
 80083b8:	f080 0001 	eor.w	r0, r0, #1
 80083bc:	b002      	add	sp, #8
 80083be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80083c6:	801a      	strh	r2, [r3, #0]
 80083c8:	e7ed      	b.n	80083a6 <ucdr_serialize_int16_t+0x9e>
 80083ca:	68a2      	ldr	r2, [r4, #8]
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	7da0      	ldrb	r0, [r4, #22]
 80083d0:	7567      	strb	r7, [r4, #21]
 80083d2:	1b92      	subs	r2, r2, r6
 80083d4:	1b9b      	subs	r3, r3, r6
 80083d6:	f080 0001 	eor.w	r0, r0, #1
 80083da:	60a2      	str	r2, [r4, #8]
 80083dc:	6123      	str	r3, [r4, #16]
 80083de:	b002      	add	sp, #8
 80083e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e4:	68a3      	ldr	r3, [r4, #8]
 80083e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80083ea:	701a      	strb	r2, [r3, #0]
 80083ec:	e7bc      	b.n	8008368 <ucdr_serialize_int16_t+0x60>
 80083ee:	4628      	mov	r0, r5
 80083f0:	f10d 0506 	add.w	r5, sp, #6
 80083f4:	4629      	mov	r1, r5
 80083f6:	4632      	mov	r2, r6
 80083f8:	f00d fac3 	bl	8015982 <memcpy>
 80083fc:	68a0      	ldr	r0, [r4, #8]
 80083fe:	4642      	mov	r2, r8
 8008400:	19a9      	adds	r1, r5, r6
 8008402:	f00d fabe 	bl	8015982 <memcpy>
 8008406:	e7af      	b.n	8008368 <ucdr_serialize_int16_t+0x60>

08008408 <ucdr_deserialize_int16_t>:
 8008408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800840c:	460d      	mov	r5, r1
 800840e:	2102      	movs	r1, #2
 8008410:	4604      	mov	r4, r0
 8008412:	f000 fb8b 	bl	8008b2c <ucdr_buffer_alignment>
 8008416:	4601      	mov	r1, r0
 8008418:	4620      	mov	r0, r4
 800841a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800841e:	f000 fbc9 	bl	8008bb4 <ucdr_advance_buffer>
 8008422:	2102      	movs	r1, #2
 8008424:	4620      	mov	r0, r4
 8008426:	f000 fb21 	bl	8008a6c <ucdr_check_buffer_available_for>
 800842a:	bb60      	cbnz	r0, 8008486 <ucdr_deserialize_int16_t+0x7e>
 800842c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008430:	42be      	cmp	r6, r7
 8008432:	d923      	bls.n	800847c <ucdr_deserialize_int16_t+0x74>
 8008434:	6923      	ldr	r3, [r4, #16]
 8008436:	60a6      	str	r6, [r4, #8]
 8008438:	1bf6      	subs	r6, r6, r7
 800843a:	4433      	add	r3, r6
 800843c:	f1c6 0902 	rsb	r9, r6, #2
 8008440:	6123      	str	r3, [r4, #16]
 8008442:	4649      	mov	r1, r9
 8008444:	4620      	mov	r0, r4
 8008446:	f000 fb1d 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 800844a:	2800      	cmp	r0, #0
 800844c:	d034      	beq.n	80084b8 <ucdr_deserialize_int16_t+0xb0>
 800844e:	7d23      	ldrb	r3, [r4, #20]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d042      	beq.n	80084da <ucdr_deserialize_int16_t+0xd2>
 8008454:	787b      	ldrb	r3, [r7, #1]
 8008456:	702b      	strb	r3, [r5, #0]
 8008458:	2e00      	cmp	r6, #0
 800845a:	d03a      	beq.n	80084d2 <ucdr_deserialize_int16_t+0xca>
 800845c:	783b      	ldrb	r3, [r7, #0]
 800845e:	706b      	strb	r3, [r5, #1]
 8008460:	6923      	ldr	r3, [r4, #16]
 8008462:	68a2      	ldr	r2, [r4, #8]
 8008464:	7da0      	ldrb	r0, [r4, #22]
 8008466:	2102      	movs	r1, #2
 8008468:	3302      	adds	r3, #2
 800846a:	444a      	add	r2, r9
 800846c:	1b9b      	subs	r3, r3, r6
 800846e:	7561      	strb	r1, [r4, #21]
 8008470:	60a2      	str	r2, [r4, #8]
 8008472:	6123      	str	r3, [r4, #16]
 8008474:	f080 0001 	eor.w	r0, r0, #1
 8008478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847c:	2102      	movs	r1, #2
 800847e:	4620      	mov	r0, r4
 8008480:	f000 fb00 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8008484:	b180      	cbz	r0, 80084a8 <ucdr_deserialize_int16_t+0xa0>
 8008486:	7d23      	ldrb	r3, [r4, #20]
 8008488:	2b01      	cmp	r3, #1
 800848a:	68a3      	ldr	r3, [r4, #8]
 800848c:	d011      	beq.n	80084b2 <ucdr_deserialize_int16_t+0xaa>
 800848e:	785b      	ldrb	r3, [r3, #1]
 8008490:	702b      	strb	r3, [r5, #0]
 8008492:	68a3      	ldr	r3, [r4, #8]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	706b      	strb	r3, [r5, #1]
 8008498:	68a2      	ldr	r2, [r4, #8]
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	3202      	adds	r2, #2
 800849e:	3302      	adds	r3, #2
 80084a0:	2102      	movs	r1, #2
 80084a2:	60a2      	str	r2, [r4, #8]
 80084a4:	6123      	str	r3, [r4, #16]
 80084a6:	7561      	strb	r1, [r4, #21]
 80084a8:	7da0      	ldrb	r0, [r4, #22]
 80084aa:	f080 0001 	eor.w	r0, r0, #1
 80084ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	802b      	strh	r3, [r5, #0]
 80084b6:	e7ef      	b.n	8008498 <ucdr_deserialize_int16_t+0x90>
 80084b8:	68a2      	ldr	r2, [r4, #8]
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	7da0      	ldrb	r0, [r4, #22]
 80084be:	f884 8015 	strb.w	r8, [r4, #21]
 80084c2:	1b92      	subs	r2, r2, r6
 80084c4:	1b9b      	subs	r3, r3, r6
 80084c6:	60a2      	str	r2, [r4, #8]
 80084c8:	6123      	str	r3, [r4, #16]
 80084ca:	f080 0001 	eor.w	r0, r0, #1
 80084ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084d2:	68a3      	ldr	r3, [r4, #8]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	706b      	strb	r3, [r5, #1]
 80084d8:	e7c2      	b.n	8008460 <ucdr_deserialize_int16_t+0x58>
 80084da:	4639      	mov	r1, r7
 80084dc:	4632      	mov	r2, r6
 80084de:	4628      	mov	r0, r5
 80084e0:	f00d fa4f 	bl	8015982 <memcpy>
 80084e4:	68a1      	ldr	r1, [r4, #8]
 80084e6:	464a      	mov	r2, r9
 80084e8:	19a8      	adds	r0, r5, r6
 80084ea:	f00d fa4a 	bl	8015982 <memcpy>
 80084ee:	e7b7      	b.n	8008460 <ucdr_deserialize_int16_t+0x58>

080084f0 <ucdr_serialize_int32_t>:
 80084f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f4:	b082      	sub	sp, #8
 80084f6:	4604      	mov	r4, r0
 80084f8:	9101      	str	r1, [sp, #4]
 80084fa:	2104      	movs	r1, #4
 80084fc:	f000 fb16 	bl	8008b2c <ucdr_buffer_alignment>
 8008500:	4601      	mov	r1, r0
 8008502:	4620      	mov	r0, r4
 8008504:	7d67      	ldrb	r7, [r4, #21]
 8008506:	f000 fb55 	bl	8008bb4 <ucdr_advance_buffer>
 800850a:	2104      	movs	r1, #4
 800850c:	4620      	mov	r0, r4
 800850e:	f000 faad 	bl	8008a6c <ucdr_check_buffer_available_for>
 8008512:	2800      	cmp	r0, #0
 8008514:	d139      	bne.n	800858a <ucdr_serialize_int32_t+0x9a>
 8008516:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800851a:	42ab      	cmp	r3, r5
 800851c:	d930      	bls.n	8008580 <ucdr_serialize_int32_t+0x90>
 800851e:	1b5e      	subs	r6, r3, r5
 8008520:	60a3      	str	r3, [r4, #8]
 8008522:	6923      	ldr	r3, [r4, #16]
 8008524:	f1c6 0804 	rsb	r8, r6, #4
 8008528:	4433      	add	r3, r6
 800852a:	6123      	str	r3, [r4, #16]
 800852c:	4641      	mov	r1, r8
 800852e:	4620      	mov	r0, r4
 8008530:	f000 faa8 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8008534:	2800      	cmp	r0, #0
 8008536:	d04c      	beq.n	80085d2 <ucdr_serialize_int32_t+0xe2>
 8008538:	7d23      	ldrb	r3, [r4, #20]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d063      	beq.n	8008606 <ucdr_serialize_int32_t+0x116>
 800853e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008542:	702b      	strb	r3, [r5, #0]
 8008544:	2e00      	cmp	r6, #0
 8008546:	d051      	beq.n	80085ec <ucdr_serialize_int32_t+0xfc>
 8008548:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800854c:	706b      	strb	r3, [r5, #1]
 800854e:	2e01      	cmp	r6, #1
 8008550:	d050      	beq.n	80085f4 <ucdr_serialize_int32_t+0x104>
 8008552:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008556:	70ab      	strb	r3, [r5, #2]
 8008558:	2e02      	cmp	r6, #2
 800855a:	d04f      	beq.n	80085fc <ucdr_serialize_int32_t+0x10c>
 800855c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008560:	70eb      	strb	r3, [r5, #3]
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	68a2      	ldr	r2, [r4, #8]
 8008566:	7da0      	ldrb	r0, [r4, #22]
 8008568:	3304      	adds	r3, #4
 800856a:	1b9e      	subs	r6, r3, r6
 800856c:	4442      	add	r2, r8
 800856e:	2304      	movs	r3, #4
 8008570:	f080 0001 	eor.w	r0, r0, #1
 8008574:	60a2      	str	r2, [r4, #8]
 8008576:	6126      	str	r6, [r4, #16]
 8008578:	7563      	strb	r3, [r4, #21]
 800857a:	b002      	add	sp, #8
 800857c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008580:	2104      	movs	r1, #4
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fa7e 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8008588:	b1d0      	cbz	r0, 80085c0 <ucdr_serialize_int32_t+0xd0>
 800858a:	7d23      	ldrb	r3, [r4, #20]
 800858c:	2b01      	cmp	r3, #1
 800858e:	68a3      	ldr	r3, [r4, #8]
 8008590:	d01c      	beq.n	80085cc <ucdr_serialize_int32_t+0xdc>
 8008592:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008596:	701a      	strb	r2, [r3, #0]
 8008598:	68a3      	ldr	r3, [r4, #8]
 800859a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800859e:	705a      	strb	r2, [r3, #1]
 80085a0:	68a3      	ldr	r3, [r4, #8]
 80085a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80085a6:	709a      	strb	r2, [r3, #2]
 80085a8:	68a3      	ldr	r3, [r4, #8]
 80085aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80085ae:	70da      	strb	r2, [r3, #3]
 80085b0:	68a2      	ldr	r2, [r4, #8]
 80085b2:	6923      	ldr	r3, [r4, #16]
 80085b4:	3204      	adds	r2, #4
 80085b6:	3304      	adds	r3, #4
 80085b8:	2104      	movs	r1, #4
 80085ba:	60a2      	str	r2, [r4, #8]
 80085bc:	6123      	str	r3, [r4, #16]
 80085be:	7561      	strb	r1, [r4, #21]
 80085c0:	7da0      	ldrb	r0, [r4, #22]
 80085c2:	f080 0001 	eor.w	r0, r0, #1
 80085c6:	b002      	add	sp, #8
 80085c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085cc:	9a01      	ldr	r2, [sp, #4]
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	e7ee      	b.n	80085b0 <ucdr_serialize_int32_t+0xc0>
 80085d2:	68a2      	ldr	r2, [r4, #8]
 80085d4:	6923      	ldr	r3, [r4, #16]
 80085d6:	7da0      	ldrb	r0, [r4, #22]
 80085d8:	7567      	strb	r7, [r4, #21]
 80085da:	1b92      	subs	r2, r2, r6
 80085dc:	1b9b      	subs	r3, r3, r6
 80085de:	f080 0001 	eor.w	r0, r0, #1
 80085e2:	60a2      	str	r2, [r4, #8]
 80085e4:	6123      	str	r3, [r4, #16]
 80085e6:	b002      	add	sp, #8
 80085e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ec:	68a3      	ldr	r3, [r4, #8]
 80085ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80085f2:	701a      	strb	r2, [r3, #0]
 80085f4:	68a3      	ldr	r3, [r4, #8]
 80085f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80085fa:	701a      	strb	r2, [r3, #0]
 80085fc:	68a3      	ldr	r3, [r4, #8]
 80085fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	e7ad      	b.n	8008562 <ucdr_serialize_int32_t+0x72>
 8008606:	4628      	mov	r0, r5
 8008608:	ad01      	add	r5, sp, #4
 800860a:	4629      	mov	r1, r5
 800860c:	4632      	mov	r2, r6
 800860e:	f00d f9b8 	bl	8015982 <memcpy>
 8008612:	68a0      	ldr	r0, [r4, #8]
 8008614:	4642      	mov	r2, r8
 8008616:	19a9      	adds	r1, r5, r6
 8008618:	f00d f9b3 	bl	8015982 <memcpy>
 800861c:	e7a1      	b.n	8008562 <ucdr_serialize_int32_t+0x72>
 800861e:	bf00      	nop

08008620 <ucdr_deserialize_int32_t>:
 8008620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008624:	460d      	mov	r5, r1
 8008626:	2104      	movs	r1, #4
 8008628:	4604      	mov	r4, r0
 800862a:	f000 fa7f 	bl	8008b2c <ucdr_buffer_alignment>
 800862e:	4601      	mov	r1, r0
 8008630:	4620      	mov	r0, r4
 8008632:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008636:	f000 fabd 	bl	8008bb4 <ucdr_advance_buffer>
 800863a:	2104      	movs	r1, #4
 800863c:	4620      	mov	r0, r4
 800863e:	f000 fa15 	bl	8008a6c <ucdr_check_buffer_available_for>
 8008642:	2800      	cmp	r0, #0
 8008644:	d138      	bne.n	80086b8 <ucdr_deserialize_int32_t+0x98>
 8008646:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800864a:	42b7      	cmp	r7, r6
 800864c:	d92f      	bls.n	80086ae <ucdr_deserialize_int32_t+0x8e>
 800864e:	6923      	ldr	r3, [r4, #16]
 8008650:	60a7      	str	r7, [r4, #8]
 8008652:	1bbf      	subs	r7, r7, r6
 8008654:	443b      	add	r3, r7
 8008656:	f1c7 0904 	rsb	r9, r7, #4
 800865a:	6123      	str	r3, [r4, #16]
 800865c:	4649      	mov	r1, r9
 800865e:	4620      	mov	r0, r4
 8008660:	f000 fa10 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8008664:	2800      	cmp	r0, #0
 8008666:	d046      	beq.n	80086f6 <ucdr_deserialize_int32_t+0xd6>
 8008668:	7d23      	ldrb	r3, [r4, #20]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d05c      	beq.n	8008728 <ucdr_deserialize_int32_t+0x108>
 800866e:	78f3      	ldrb	r3, [r6, #3]
 8008670:	702b      	strb	r3, [r5, #0]
 8008672:	2f00      	cmp	r7, #0
 8008674:	d04c      	beq.n	8008710 <ucdr_deserialize_int32_t+0xf0>
 8008676:	78b3      	ldrb	r3, [r6, #2]
 8008678:	706b      	strb	r3, [r5, #1]
 800867a:	2f01      	cmp	r7, #1
 800867c:	f105 0302 	add.w	r3, r5, #2
 8008680:	d04a      	beq.n	8008718 <ucdr_deserialize_int32_t+0xf8>
 8008682:	7873      	ldrb	r3, [r6, #1]
 8008684:	70ab      	strb	r3, [r5, #2]
 8008686:	2f02      	cmp	r7, #2
 8008688:	f105 0303 	add.w	r3, r5, #3
 800868c:	d048      	beq.n	8008720 <ucdr_deserialize_int32_t+0x100>
 800868e:	7833      	ldrb	r3, [r6, #0]
 8008690:	70eb      	strb	r3, [r5, #3]
 8008692:	6923      	ldr	r3, [r4, #16]
 8008694:	68a2      	ldr	r2, [r4, #8]
 8008696:	7da0      	ldrb	r0, [r4, #22]
 8008698:	2104      	movs	r1, #4
 800869a:	3304      	adds	r3, #4
 800869c:	444a      	add	r2, r9
 800869e:	1bdb      	subs	r3, r3, r7
 80086a0:	7561      	strb	r1, [r4, #21]
 80086a2:	60a2      	str	r2, [r4, #8]
 80086a4:	6123      	str	r3, [r4, #16]
 80086a6:	f080 0001 	eor.w	r0, r0, #1
 80086aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ae:	2104      	movs	r1, #4
 80086b0:	4620      	mov	r0, r4
 80086b2:	f000 f9e7 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 80086b6:	b1b0      	cbz	r0, 80086e6 <ucdr_deserialize_int32_t+0xc6>
 80086b8:	7d23      	ldrb	r3, [r4, #20]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	68a3      	ldr	r3, [r4, #8]
 80086be:	d017      	beq.n	80086f0 <ucdr_deserialize_int32_t+0xd0>
 80086c0:	78db      	ldrb	r3, [r3, #3]
 80086c2:	702b      	strb	r3, [r5, #0]
 80086c4:	68a3      	ldr	r3, [r4, #8]
 80086c6:	789b      	ldrb	r3, [r3, #2]
 80086c8:	706b      	strb	r3, [r5, #1]
 80086ca:	68a3      	ldr	r3, [r4, #8]
 80086cc:	785b      	ldrb	r3, [r3, #1]
 80086ce:	70ab      	strb	r3, [r5, #2]
 80086d0:	68a3      	ldr	r3, [r4, #8]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	70eb      	strb	r3, [r5, #3]
 80086d6:	68a2      	ldr	r2, [r4, #8]
 80086d8:	6923      	ldr	r3, [r4, #16]
 80086da:	3204      	adds	r2, #4
 80086dc:	3304      	adds	r3, #4
 80086de:	2104      	movs	r1, #4
 80086e0:	60a2      	str	r2, [r4, #8]
 80086e2:	6123      	str	r3, [r4, #16]
 80086e4:	7561      	strb	r1, [r4, #21]
 80086e6:	7da0      	ldrb	r0, [r4, #22]
 80086e8:	f080 0001 	eor.w	r0, r0, #1
 80086ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	602b      	str	r3, [r5, #0]
 80086f4:	e7ef      	b.n	80086d6 <ucdr_deserialize_int32_t+0xb6>
 80086f6:	68a2      	ldr	r2, [r4, #8]
 80086f8:	6923      	ldr	r3, [r4, #16]
 80086fa:	7da0      	ldrb	r0, [r4, #22]
 80086fc:	f884 8015 	strb.w	r8, [r4, #21]
 8008700:	1bd2      	subs	r2, r2, r7
 8008702:	1bdb      	subs	r3, r3, r7
 8008704:	60a2      	str	r2, [r4, #8]
 8008706:	6123      	str	r3, [r4, #16]
 8008708:	f080 0001 	eor.w	r0, r0, #1
 800870c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008710:	68a3      	ldr	r3, [r4, #8]
 8008712:	789b      	ldrb	r3, [r3, #2]
 8008714:	706b      	strb	r3, [r5, #1]
 8008716:	1cab      	adds	r3, r5, #2
 8008718:	68a2      	ldr	r2, [r4, #8]
 800871a:	7852      	ldrb	r2, [r2, #1]
 800871c:	f803 2b01 	strb.w	r2, [r3], #1
 8008720:	68a2      	ldr	r2, [r4, #8]
 8008722:	7812      	ldrb	r2, [r2, #0]
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	e7b4      	b.n	8008692 <ucdr_deserialize_int32_t+0x72>
 8008728:	4631      	mov	r1, r6
 800872a:	463a      	mov	r2, r7
 800872c:	4628      	mov	r0, r5
 800872e:	f00d f928 	bl	8015982 <memcpy>
 8008732:	68a1      	ldr	r1, [r4, #8]
 8008734:	464a      	mov	r2, r9
 8008736:	19e8      	adds	r0, r5, r7
 8008738:	f00d f923 	bl	8015982 <memcpy>
 800873c:	e7a9      	b.n	8008692 <ucdr_deserialize_int32_t+0x72>
 800873e:	bf00      	nop

08008740 <ucdr_serialize_double>:
 8008740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008744:	2108      	movs	r1, #8
 8008746:	b082      	sub	sp, #8
 8008748:	4604      	mov	r4, r0
 800874a:	ed8d 0b00 	vstr	d0, [sp]
 800874e:	f000 f9ed 	bl	8008b2c <ucdr_buffer_alignment>
 8008752:	4601      	mov	r1, r0
 8008754:	4620      	mov	r0, r4
 8008756:	7d67      	ldrb	r7, [r4, #21]
 8008758:	f000 fa2c 	bl	8008bb4 <ucdr_advance_buffer>
 800875c:	2108      	movs	r1, #8
 800875e:	4620      	mov	r0, r4
 8008760:	f000 f984 	bl	8008a6c <ucdr_check_buffer_available_for>
 8008764:	2800      	cmp	r0, #0
 8008766:	d14e      	bne.n	8008806 <ucdr_serialize_double+0xc6>
 8008768:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800876c:	42ab      	cmp	r3, r5
 800876e:	d945      	bls.n	80087fc <ucdr_serialize_double+0xbc>
 8008770:	1b5e      	subs	r6, r3, r5
 8008772:	60a3      	str	r3, [r4, #8]
 8008774:	6923      	ldr	r3, [r4, #16]
 8008776:	f1c6 0808 	rsb	r8, r6, #8
 800877a:	4433      	add	r3, r6
 800877c:	6123      	str	r3, [r4, #16]
 800877e:	4641      	mov	r1, r8
 8008780:	4620      	mov	r0, r4
 8008782:	f000 f97f 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8008786:	2800      	cmp	r0, #0
 8008788:	d074      	beq.n	8008874 <ucdr_serialize_double+0x134>
 800878a:	7d23      	ldrb	r3, [r4, #20]
 800878c:	2b01      	cmp	r3, #1
 800878e:	f000 809b 	beq.w	80088c8 <ucdr_serialize_double+0x188>
 8008792:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008796:	702b      	strb	r3, [r5, #0]
 8008798:	2e00      	cmp	r6, #0
 800879a:	d078      	beq.n	800888e <ucdr_serialize_double+0x14e>
 800879c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80087a0:	706b      	strb	r3, [r5, #1]
 80087a2:	2e01      	cmp	r6, #1
 80087a4:	d077      	beq.n	8008896 <ucdr_serialize_double+0x156>
 80087a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80087aa:	70ab      	strb	r3, [r5, #2]
 80087ac:	2e02      	cmp	r6, #2
 80087ae:	d076      	beq.n	800889e <ucdr_serialize_double+0x15e>
 80087b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80087b4:	70eb      	strb	r3, [r5, #3]
 80087b6:	2e03      	cmp	r6, #3
 80087b8:	d075      	beq.n	80088a6 <ucdr_serialize_double+0x166>
 80087ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80087be:	712b      	strb	r3, [r5, #4]
 80087c0:	2e04      	cmp	r6, #4
 80087c2:	d074      	beq.n	80088ae <ucdr_serialize_double+0x16e>
 80087c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80087c8:	716b      	strb	r3, [r5, #5]
 80087ca:	2e05      	cmp	r6, #5
 80087cc:	d073      	beq.n	80088b6 <ucdr_serialize_double+0x176>
 80087ce:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80087d2:	71ab      	strb	r3, [r5, #6]
 80087d4:	2e06      	cmp	r6, #6
 80087d6:	d072      	beq.n	80088be <ucdr_serialize_double+0x17e>
 80087d8:	f89d 3000 	ldrb.w	r3, [sp]
 80087dc:	71eb      	strb	r3, [r5, #7]
 80087de:	6923      	ldr	r3, [r4, #16]
 80087e0:	68a2      	ldr	r2, [r4, #8]
 80087e2:	7da0      	ldrb	r0, [r4, #22]
 80087e4:	3308      	adds	r3, #8
 80087e6:	1b9e      	subs	r6, r3, r6
 80087e8:	4442      	add	r2, r8
 80087ea:	2308      	movs	r3, #8
 80087ec:	f080 0001 	eor.w	r0, r0, #1
 80087f0:	60a2      	str	r2, [r4, #8]
 80087f2:	6126      	str	r6, [r4, #16]
 80087f4:	7563      	strb	r3, [r4, #21]
 80087f6:	b002      	add	sp, #8
 80087f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087fc:	2108      	movs	r1, #8
 80087fe:	4620      	mov	r0, r4
 8008800:	f000 f940 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8008804:	b350      	cbz	r0, 800885c <ucdr_serialize_double+0x11c>
 8008806:	7d23      	ldrb	r3, [r4, #20]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d02d      	beq.n	8008868 <ucdr_serialize_double+0x128>
 800880c:	68a3      	ldr	r3, [r4, #8]
 800880e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008812:	701a      	strb	r2, [r3, #0]
 8008814:	68a3      	ldr	r3, [r4, #8]
 8008816:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800881a:	705a      	strb	r2, [r3, #1]
 800881c:	68a3      	ldr	r3, [r4, #8]
 800881e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008822:	709a      	strb	r2, [r3, #2]
 8008824:	68a3      	ldr	r3, [r4, #8]
 8008826:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800882a:	70da      	strb	r2, [r3, #3]
 800882c:	68a3      	ldr	r3, [r4, #8]
 800882e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008832:	711a      	strb	r2, [r3, #4]
 8008834:	68a3      	ldr	r3, [r4, #8]
 8008836:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800883a:	715a      	strb	r2, [r3, #5]
 800883c:	68a3      	ldr	r3, [r4, #8]
 800883e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008842:	719a      	strb	r2, [r3, #6]
 8008844:	68a3      	ldr	r3, [r4, #8]
 8008846:	f89d 2000 	ldrb.w	r2, [sp]
 800884a:	71da      	strb	r2, [r3, #7]
 800884c:	68a2      	ldr	r2, [r4, #8]
 800884e:	6923      	ldr	r3, [r4, #16]
 8008850:	3208      	adds	r2, #8
 8008852:	3308      	adds	r3, #8
 8008854:	2108      	movs	r1, #8
 8008856:	60a2      	str	r2, [r4, #8]
 8008858:	6123      	str	r3, [r4, #16]
 800885a:	7561      	strb	r1, [r4, #21]
 800885c:	7da0      	ldrb	r0, [r4, #22]
 800885e:	f080 0001 	eor.w	r0, r0, #1
 8008862:	b002      	add	sp, #8
 8008864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008868:	466b      	mov	r3, sp
 800886a:	cb03      	ldmia	r3!, {r0, r1}
 800886c:	68a3      	ldr	r3, [r4, #8]
 800886e:	6018      	str	r0, [r3, #0]
 8008870:	6059      	str	r1, [r3, #4]
 8008872:	e7eb      	b.n	800884c <ucdr_serialize_double+0x10c>
 8008874:	68a2      	ldr	r2, [r4, #8]
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	7da0      	ldrb	r0, [r4, #22]
 800887a:	7567      	strb	r7, [r4, #21]
 800887c:	1b92      	subs	r2, r2, r6
 800887e:	1b9b      	subs	r3, r3, r6
 8008880:	f080 0001 	eor.w	r0, r0, #1
 8008884:	60a2      	str	r2, [r4, #8]
 8008886:	6123      	str	r3, [r4, #16]
 8008888:	b002      	add	sp, #8
 800888a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	68a3      	ldr	r3, [r4, #8]
 8008898:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800889c:	701a      	strb	r2, [r3, #0]
 800889e:	68a3      	ldr	r3, [r4, #8]
 80088a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	68a3      	ldr	r3, [r4, #8]
 80088a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	68a3      	ldr	r3, [r4, #8]
 80088b0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80088b4:	701a      	strb	r2, [r3, #0]
 80088b6:	68a3      	ldr	r3, [r4, #8]
 80088b8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80088bc:	701a      	strb	r2, [r3, #0]
 80088be:	68a3      	ldr	r3, [r4, #8]
 80088c0:	f89d 2000 	ldrb.w	r2, [sp]
 80088c4:	701a      	strb	r2, [r3, #0]
 80088c6:	e78a      	b.n	80087de <ucdr_serialize_double+0x9e>
 80088c8:	4628      	mov	r0, r5
 80088ca:	466d      	mov	r5, sp
 80088cc:	4629      	mov	r1, r5
 80088ce:	4632      	mov	r2, r6
 80088d0:	f00d f857 	bl	8015982 <memcpy>
 80088d4:	68a0      	ldr	r0, [r4, #8]
 80088d6:	4642      	mov	r2, r8
 80088d8:	19a9      	adds	r1, r5, r6
 80088da:	f00d f852 	bl	8015982 <memcpy>
 80088de:	e77e      	b.n	80087de <ucdr_serialize_double+0x9e>

080088e0 <ucdr_deserialize_double>:
 80088e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e4:	460d      	mov	r5, r1
 80088e6:	2108      	movs	r1, #8
 80088e8:	4604      	mov	r4, r0
 80088ea:	f000 f91f 	bl	8008b2c <ucdr_buffer_alignment>
 80088ee:	4601      	mov	r1, r0
 80088f0:	4620      	mov	r0, r4
 80088f2:	f894 9015 	ldrb.w	r9, [r4, #21]
 80088f6:	f000 f95d 	bl	8008bb4 <ucdr_advance_buffer>
 80088fa:	2108      	movs	r1, #8
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 f8b5 	bl	8008a6c <ucdr_check_buffer_available_for>
 8008902:	2800      	cmp	r0, #0
 8008904:	d151      	bne.n	80089aa <ucdr_deserialize_double+0xca>
 8008906:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800890a:	42be      	cmp	r6, r7
 800890c:	d948      	bls.n	80089a0 <ucdr_deserialize_double+0xc0>
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	60a6      	str	r6, [r4, #8]
 8008912:	1bf6      	subs	r6, r6, r7
 8008914:	4433      	add	r3, r6
 8008916:	f1c6 0808 	rsb	r8, r6, #8
 800891a:	6123      	str	r3, [r4, #16]
 800891c:	4641      	mov	r1, r8
 800891e:	4620      	mov	r0, r4
 8008920:	f000 f8b0 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 8008924:	2800      	cmp	r0, #0
 8008926:	d06d      	beq.n	8008a04 <ucdr_deserialize_double+0x124>
 8008928:	7d23      	ldrb	r3, [r4, #20]
 800892a:	2b01      	cmp	r3, #1
 800892c:	f000 8093 	beq.w	8008a56 <ucdr_deserialize_double+0x176>
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	702b      	strb	r3, [r5, #0]
 8008934:	2e00      	cmp	r6, #0
 8008936:	d072      	beq.n	8008a1e <ucdr_deserialize_double+0x13e>
 8008938:	79bb      	ldrb	r3, [r7, #6]
 800893a:	706b      	strb	r3, [r5, #1]
 800893c:	2e01      	cmp	r6, #1
 800893e:	f105 0302 	add.w	r3, r5, #2
 8008942:	d070      	beq.n	8008a26 <ucdr_deserialize_double+0x146>
 8008944:	797b      	ldrb	r3, [r7, #5]
 8008946:	70ab      	strb	r3, [r5, #2]
 8008948:	2e02      	cmp	r6, #2
 800894a:	f105 0303 	add.w	r3, r5, #3
 800894e:	d06e      	beq.n	8008a2e <ucdr_deserialize_double+0x14e>
 8008950:	793b      	ldrb	r3, [r7, #4]
 8008952:	70eb      	strb	r3, [r5, #3]
 8008954:	2e03      	cmp	r6, #3
 8008956:	f105 0304 	add.w	r3, r5, #4
 800895a:	d06c      	beq.n	8008a36 <ucdr_deserialize_double+0x156>
 800895c:	78fb      	ldrb	r3, [r7, #3]
 800895e:	712b      	strb	r3, [r5, #4]
 8008960:	2e04      	cmp	r6, #4
 8008962:	f105 0305 	add.w	r3, r5, #5
 8008966:	d06a      	beq.n	8008a3e <ucdr_deserialize_double+0x15e>
 8008968:	78bb      	ldrb	r3, [r7, #2]
 800896a:	716b      	strb	r3, [r5, #5]
 800896c:	2e05      	cmp	r6, #5
 800896e:	f105 0306 	add.w	r3, r5, #6
 8008972:	d068      	beq.n	8008a46 <ucdr_deserialize_double+0x166>
 8008974:	787b      	ldrb	r3, [r7, #1]
 8008976:	71ab      	strb	r3, [r5, #6]
 8008978:	2e06      	cmp	r6, #6
 800897a:	f105 0307 	add.w	r3, r5, #7
 800897e:	d066      	beq.n	8008a4e <ucdr_deserialize_double+0x16e>
 8008980:	783b      	ldrb	r3, [r7, #0]
 8008982:	71eb      	strb	r3, [r5, #7]
 8008984:	6923      	ldr	r3, [r4, #16]
 8008986:	68a2      	ldr	r2, [r4, #8]
 8008988:	7da0      	ldrb	r0, [r4, #22]
 800898a:	3308      	adds	r3, #8
 800898c:	1b9e      	subs	r6, r3, r6
 800898e:	2308      	movs	r3, #8
 8008990:	4442      	add	r2, r8
 8008992:	7563      	strb	r3, [r4, #21]
 8008994:	60a2      	str	r2, [r4, #8]
 8008996:	6126      	str	r6, [r4, #16]
 8008998:	f080 0001 	eor.w	r0, r0, #1
 800899c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089a0:	2108      	movs	r1, #8
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 f86e 	bl	8008a84 <ucdr_check_final_buffer_behavior>
 80089a8:	b310      	cbz	r0, 80089f0 <ucdr_deserialize_double+0x110>
 80089aa:	7d23      	ldrb	r3, [r4, #20]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	68a3      	ldr	r3, [r4, #8]
 80089b0:	d023      	beq.n	80089fa <ucdr_deserialize_double+0x11a>
 80089b2:	79db      	ldrb	r3, [r3, #7]
 80089b4:	702b      	strb	r3, [r5, #0]
 80089b6:	68a3      	ldr	r3, [r4, #8]
 80089b8:	799b      	ldrb	r3, [r3, #6]
 80089ba:	706b      	strb	r3, [r5, #1]
 80089bc:	68a3      	ldr	r3, [r4, #8]
 80089be:	795b      	ldrb	r3, [r3, #5]
 80089c0:	70ab      	strb	r3, [r5, #2]
 80089c2:	68a3      	ldr	r3, [r4, #8]
 80089c4:	791b      	ldrb	r3, [r3, #4]
 80089c6:	70eb      	strb	r3, [r5, #3]
 80089c8:	68a3      	ldr	r3, [r4, #8]
 80089ca:	78db      	ldrb	r3, [r3, #3]
 80089cc:	712b      	strb	r3, [r5, #4]
 80089ce:	68a3      	ldr	r3, [r4, #8]
 80089d0:	789b      	ldrb	r3, [r3, #2]
 80089d2:	716b      	strb	r3, [r5, #5]
 80089d4:	68a3      	ldr	r3, [r4, #8]
 80089d6:	785b      	ldrb	r3, [r3, #1]
 80089d8:	71ab      	strb	r3, [r5, #6]
 80089da:	68a3      	ldr	r3, [r4, #8]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	71eb      	strb	r3, [r5, #7]
 80089e0:	68a2      	ldr	r2, [r4, #8]
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	3208      	adds	r2, #8
 80089e6:	3308      	adds	r3, #8
 80089e8:	2108      	movs	r1, #8
 80089ea:	60a2      	str	r2, [r4, #8]
 80089ec:	6123      	str	r3, [r4, #16]
 80089ee:	7561      	strb	r1, [r4, #21]
 80089f0:	7da0      	ldrb	r0, [r4, #22]
 80089f2:	f080 0001 	eor.w	r0, r0, #1
 80089f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	606b      	str	r3, [r5, #4]
 8008a00:	602a      	str	r2, [r5, #0]
 8008a02:	e7ed      	b.n	80089e0 <ucdr_deserialize_double+0x100>
 8008a04:	68a2      	ldr	r2, [r4, #8]
 8008a06:	6923      	ldr	r3, [r4, #16]
 8008a08:	7da0      	ldrb	r0, [r4, #22]
 8008a0a:	f884 9015 	strb.w	r9, [r4, #21]
 8008a0e:	1b92      	subs	r2, r2, r6
 8008a10:	1b9b      	subs	r3, r3, r6
 8008a12:	60a2      	str	r2, [r4, #8]
 8008a14:	6123      	str	r3, [r4, #16]
 8008a16:	f080 0001 	eor.w	r0, r0, #1
 8008a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	799b      	ldrb	r3, [r3, #6]
 8008a22:	706b      	strb	r3, [r5, #1]
 8008a24:	1cab      	adds	r3, r5, #2
 8008a26:	68a2      	ldr	r2, [r4, #8]
 8008a28:	7952      	ldrb	r2, [r2, #5]
 8008a2a:	f803 2b01 	strb.w	r2, [r3], #1
 8008a2e:	68a2      	ldr	r2, [r4, #8]
 8008a30:	7912      	ldrb	r2, [r2, #4]
 8008a32:	f803 2b01 	strb.w	r2, [r3], #1
 8008a36:	68a2      	ldr	r2, [r4, #8]
 8008a38:	78d2      	ldrb	r2, [r2, #3]
 8008a3a:	f803 2b01 	strb.w	r2, [r3], #1
 8008a3e:	68a2      	ldr	r2, [r4, #8]
 8008a40:	7892      	ldrb	r2, [r2, #2]
 8008a42:	f803 2b01 	strb.w	r2, [r3], #1
 8008a46:	68a2      	ldr	r2, [r4, #8]
 8008a48:	7852      	ldrb	r2, [r2, #1]
 8008a4a:	f803 2b01 	strb.w	r2, [r3], #1
 8008a4e:	68a2      	ldr	r2, [r4, #8]
 8008a50:	7812      	ldrb	r2, [r2, #0]
 8008a52:	701a      	strb	r2, [r3, #0]
 8008a54:	e796      	b.n	8008984 <ucdr_deserialize_double+0xa4>
 8008a56:	4639      	mov	r1, r7
 8008a58:	4632      	mov	r2, r6
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f00c ff91 	bl	8015982 <memcpy>
 8008a60:	68a1      	ldr	r1, [r4, #8]
 8008a62:	4642      	mov	r2, r8
 8008a64:	19a8      	adds	r0, r5, r6
 8008a66:	f00c ff8c 	bl	8015982 <memcpy>
 8008a6a:	e78b      	b.n	8008984 <ucdr_deserialize_double+0xa4>

08008a6c <ucdr_check_buffer_available_for>:
 8008a6c:	7d83      	ldrb	r3, [r0, #22]
 8008a6e:	b93b      	cbnz	r3, 8008a80 <ucdr_check_buffer_available_for+0x14>
 8008a70:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8008a74:	4419      	add	r1, r3
 8008a76:	4288      	cmp	r0, r1
 8008a78:	bf34      	ite	cc
 8008a7a:	2000      	movcc	r0, #0
 8008a7c:	2001      	movcs	r0, #1
 8008a7e:	4770      	bx	lr
 8008a80:	2000      	movs	r0, #0
 8008a82:	4770      	bx	lr

08008a84 <ucdr_check_final_buffer_behavior>:
 8008a84:	7d83      	ldrb	r3, [r0, #22]
 8008a86:	b943      	cbnz	r3, 8008a9a <ucdr_check_final_buffer_behavior+0x16>
 8008a88:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8008a8c:	4291      	cmp	r1, r2
 8008a8e:	b510      	push	{r4, lr}
 8008a90:	4604      	mov	r4, r0
 8008a92:	d205      	bcs.n	8008aa0 <ucdr_check_final_buffer_behavior+0x1c>
 8008a94:	2301      	movs	r3, #1
 8008a96:	4618      	mov	r0, r3
 8008a98:	bd10      	pop	{r4, pc}
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	4770      	bx	lr
 8008aa0:	6982      	ldr	r2, [r0, #24]
 8008aa2:	b13a      	cbz	r2, 8008ab4 <ucdr_check_final_buffer_behavior+0x30>
 8008aa4:	69c1      	ldr	r1, [r0, #28]
 8008aa6:	4790      	blx	r2
 8008aa8:	f080 0301 	eor.w	r3, r0, #1
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	75a0      	strb	r0, [r4, #22]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	bd10      	pop	{r4, pc}
 8008ab4:	2001      	movs	r0, #1
 8008ab6:	75a0      	strb	r0, [r4, #22]
 8008ab8:	e7fa      	b.n	8008ab0 <ucdr_check_final_buffer_behavior+0x2c>
 8008aba:	bf00      	nop

08008abc <ucdr_set_on_full_buffer_callback>:
 8008abc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop

08008ac4 <ucdr_init_buffer_origin_offset_endian>:
 8008ac4:	b410      	push	{r4}
 8008ac6:	9c01      	ldr	r4, [sp, #4]
 8008ac8:	6001      	str	r1, [r0, #0]
 8008aca:	440a      	add	r2, r1
 8008acc:	6042      	str	r2, [r0, #4]
 8008ace:	190a      	adds	r2, r1, r4
 8008ad0:	441c      	add	r4, r3
 8008ad2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8008ad6:	6082      	str	r2, [r0, #8]
 8008ad8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008adc:	7503      	strb	r3, [r0, #20]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8008ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ae8:	7542      	strb	r2, [r0, #21]
 8008aea:	7582      	strb	r2, [r0, #22]
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop

08008af0 <ucdr_init_buffer_origin_offset>:
 8008af0:	b510      	push	{r4, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	9c04      	ldr	r4, [sp, #16]
 8008af6:	9400      	str	r4, [sp, #0]
 8008af8:	2401      	movs	r4, #1
 8008afa:	9401      	str	r4, [sp, #4]
 8008afc:	f7ff ffe2 	bl	8008ac4 <ucdr_init_buffer_origin_offset_endian>
 8008b00:	b002      	add	sp, #8
 8008b02:	bd10      	pop	{r4, pc}

08008b04 <ucdr_init_buffer_origin>:
 8008b04:	b510      	push	{r4, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	2400      	movs	r4, #0
 8008b0a:	9400      	str	r4, [sp, #0]
 8008b0c:	f7ff fff0 	bl	8008af0 <ucdr_init_buffer_origin_offset>
 8008b10:	b002      	add	sp, #8
 8008b12:	bd10      	pop	{r4, pc}

08008b14 <ucdr_init_buffer>:
 8008b14:	2300      	movs	r3, #0
 8008b16:	f7ff bff5 	b.w	8008b04 <ucdr_init_buffer_origin>
 8008b1a:	bf00      	nop

08008b1c <ucdr_alignment>:
 8008b1c:	fbb0 f3f1 	udiv	r3, r0, r1
 8008b20:	fb03 0011 	mls	r0, r3, r1, r0
 8008b24:	1a08      	subs	r0, r1, r0
 8008b26:	3901      	subs	r1, #1
 8008b28:	4008      	ands	r0, r1
 8008b2a:	4770      	bx	lr

08008b2c <ucdr_buffer_alignment>:
 8008b2c:	7d43      	ldrb	r3, [r0, #21]
 8008b2e:	428b      	cmp	r3, r1
 8008b30:	d208      	bcs.n	8008b44 <ucdr_buffer_alignment+0x18>
 8008b32:	6900      	ldr	r0, [r0, #16]
 8008b34:	fbb0 f3f1 	udiv	r3, r0, r1
 8008b38:	fb01 0013 	mls	r0, r1, r3, r0
 8008b3c:	1a08      	subs	r0, r1, r0
 8008b3e:	3901      	subs	r1, #1
 8008b40:	4008      	ands	r0, r1
 8008b42:	4770      	bx	lr
 8008b44:	2000      	movs	r0, #0
 8008b46:	4770      	bx	lr

08008b48 <ucdr_align_to>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	460d      	mov	r5, r1
 8008b4e:	f7ff ffed 	bl	8008b2c <ucdr_buffer_alignment>
 8008b52:	68a3      	ldr	r3, [r4, #8]
 8008b54:	6921      	ldr	r1, [r4, #16]
 8008b56:	7565      	strb	r5, [r4, #21]
 8008b58:	181a      	adds	r2, r3, r0
 8008b5a:	6863      	ldr	r3, [r4, #4]
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	4408      	add	r0, r1
 8008b60:	bf28      	it	cs
 8008b62:	4613      	movcs	r3, r2
 8008b64:	6120      	str	r0, [r4, #16]
 8008b66:	60a3      	str	r3, [r4, #8]
 8008b68:	bd38      	pop	{r3, r4, r5, pc}
 8008b6a:	bf00      	nop

08008b6c <ucdr_buffer_length>:
 8008b6c:	6882      	ldr	r2, [r0, #8]
 8008b6e:	6800      	ldr	r0, [r0, #0]
 8008b70:	1a10      	subs	r0, r2, r0
 8008b72:	4770      	bx	lr

08008b74 <ucdr_buffer_remaining>:
 8008b74:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8008b78:	1a10      	subs	r0, r2, r0
 8008b7a:	4770      	bx	lr

08008b7c <ucdr_check_final_buffer_behavior_array>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	7d83      	ldrb	r3, [r0, #22]
 8008b80:	b963      	cbnz	r3, 8008b9c <ucdr_check_final_buffer_behavior_array+0x20>
 8008b82:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	4604      	mov	r4, r0
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	d308      	bcc.n	8008ba0 <ucdr_check_final_buffer_behavior_array+0x24>
 8008b8e:	b139      	cbz	r1, 8008ba0 <ucdr_check_final_buffer_behavior_array+0x24>
 8008b90:	6983      	ldr	r3, [r0, #24]
 8008b92:	b163      	cbz	r3, 8008bae <ucdr_check_final_buffer_behavior_array+0x32>
 8008b94:	69c1      	ldr	r1, [r0, #28]
 8008b96:	4798      	blx	r3
 8008b98:	75a0      	strb	r0, [r4, #22]
 8008b9a:	b108      	cbz	r0, 8008ba0 <ucdr_check_final_buffer_behavior_array+0x24>
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f7ff ffe7 	bl	8008b74 <ucdr_buffer_remaining>
 8008ba6:	42a8      	cmp	r0, r5
 8008ba8:	bf28      	it	cs
 8008baa:	4628      	movcs	r0, r5
 8008bac:	bd38      	pop	{r3, r4, r5, pc}
 8008bae:	2301      	movs	r3, #1
 8008bb0:	7583      	strb	r3, [r0, #22]
 8008bb2:	e7f3      	b.n	8008b9c <ucdr_check_final_buffer_behavior_array+0x20>

08008bb4 <ucdr_advance_buffer>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	460d      	mov	r5, r1
 8008bba:	f7ff ff57 	bl	8008a6c <ucdr_check_buffer_available_for>
 8008bbe:	b178      	cbz	r0, 8008be0 <ucdr_advance_buffer+0x2c>
 8008bc0:	6923      	ldr	r3, [r4, #16]
 8008bc2:	68a2      	ldr	r2, [r4, #8]
 8008bc4:	442b      	add	r3, r5
 8008bc6:	6123      	str	r3, [r4, #16]
 8008bc8:	2301      	movs	r3, #1
 8008bca:	442a      	add	r2, r5
 8008bcc:	7563      	strb	r3, [r4, #21]
 8008bce:	60a2      	str	r2, [r4, #8]
 8008bd0:	bd38      	pop	{r3, r4, r5, pc}
 8008bd2:	68a2      	ldr	r2, [r4, #8]
 8008bd4:	6923      	ldr	r3, [r4, #16]
 8008bd6:	4402      	add	r2, r0
 8008bd8:	4403      	add	r3, r0
 8008bda:	1a2d      	subs	r5, r5, r0
 8008bdc:	60a2      	str	r2, [r4, #8]
 8008bde:	6123      	str	r3, [r4, #16]
 8008be0:	4629      	mov	r1, r5
 8008be2:	2201      	movs	r2, #1
 8008be4:	4620      	mov	r0, r4
 8008be6:	f7ff ffc9 	bl	8008b7c <ucdr_check_final_buffer_behavior_array>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d1f1      	bne.n	8008bd2 <ucdr_advance_buffer+0x1e>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	7563      	strb	r3, [r4, #21]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}

08008bf4 <rcl_get_zero_initialized_publisher>:
 8008bf4:	4b01      	ldr	r3, [pc, #4]	; (8008bfc <rcl_get_zero_initialized_publisher+0x8>)
 8008bf6:	6818      	ldr	r0, [r3, #0]
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	08016a0c 	.word	0x08016a0c

08008c00 <rcl_publisher_init>:
 8008c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c04:	b088      	sub	sp, #32
 8008c06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008c08:	2d00      	cmp	r5, #0
 8008c0a:	d06a      	beq.n	8008ce2 <rcl_publisher_init+0xe2>
 8008c0c:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8008c10:	4604      	mov	r4, r0
 8008c12:	4648      	mov	r0, r9
 8008c14:	460e      	mov	r6, r1
 8008c16:	4690      	mov	r8, r2
 8008c18:	461f      	mov	r7, r3
 8008c1a:	f001 fb1d 	bl	800a258 <rcutils_allocator_is_valid>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d05f      	beq.n	8008ce2 <rcl_publisher_init+0xe2>
 8008c22:	2c00      	cmp	r4, #0
 8008c24:	d05d      	beq.n	8008ce2 <rcl_publisher_init+0xe2>
 8008c26:	f8d4 a000 	ldr.w	sl, [r4]
 8008c2a:	f1ba 0f00 	cmp.w	sl, #0
 8008c2e:	d004      	beq.n	8008c3a <rcl_publisher_init+0x3a>
 8008c30:	2764      	movs	r7, #100	; 0x64
 8008c32:	4638      	mov	r0, r7
 8008c34:	b008      	add	sp, #32
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f005 ff12 	bl	800ea64 <rcl_node_is_valid>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d053      	beq.n	8008cec <rcl_publisher_init+0xec>
 8008c44:	f1b8 0f00 	cmp.w	r8, #0
 8008c48:	d04b      	beq.n	8008ce2 <rcl_publisher_init+0xe2>
 8008c4a:	2f00      	cmp	r7, #0
 8008c4c:	d049      	beq.n	8008ce2 <rcl_publisher_init+0xe2>
 8008c4e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8008c52:	aa07      	add	r2, sp, #28
 8008c54:	9205      	str	r2, [sp, #20]
 8008c56:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8008c5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c5e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008c62:	f8cd a01c 	str.w	sl, [sp, #28]
 8008c66:	4639      	mov	r1, r7
 8008c68:	e899 000c 	ldmia.w	r9, {r2, r3}
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f005 ff6d 	bl	800eb4c <rcl_node_resolve_name>
 8008c72:	4607      	mov	r7, r0
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d150      	bne.n	8008d1a <rcl_publisher_init+0x11a>
 8008c78:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 8008c7c:	21c8      	movs	r1, #200	; 0xc8
 8008c7e:	2001      	movs	r0, #1
 8008c80:	4798      	blx	r3
 8008c82:	6020      	str	r0, [r4, #0]
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d04e      	beq.n	8008d26 <rcl_publisher_init+0x126>
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f005 ff0d 	bl	800eaa8 <rcl_node_get_rmw_handle>
 8008c8e:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	9a07      	ldr	r2, [sp, #28]
 8008c96:	6827      	ldr	r7, [r4, #0]
 8008c98:	462b      	mov	r3, r5
 8008c9a:	4641      	mov	r1, r8
 8008c9c:	f001 fc92 	bl	800a5c4 <rmw_create_publisher>
 8008ca0:	6823      	ldr	r3, [r4, #0]
 8008ca2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8008ca6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8008caa:	b370      	cbz	r0, 8008d0a <rcl_publisher_init+0x10a>
 8008cac:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8008cb0:	f001 fd66 	bl	800a780 <rmw_publisher_get_actual_qos>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	b9d0      	cbnz	r0, 8008cf0 <rcl_publisher_init+0xf0>
 8008cba:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8008cbe:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	2270      	movs	r2, #112	; 0x70
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f00c fe5b 	bl	8015982 <memcpy>
 8008ccc:	6832      	ldr	r2, [r6, #0]
 8008cce:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8008cd2:	9807      	ldr	r0, [sp, #28]
 8008cd4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8008cd6:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008cd8:	4798      	blx	r3
 8008cda:	4638      	mov	r0, r7
 8008cdc:	b008      	add	sp, #32
 8008cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce2:	270b      	movs	r7, #11
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	b008      	add	sp, #32
 8008ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cec:	27c8      	movs	r7, #200	; 0xc8
 8008cee:	e7a0      	b.n	8008c32 <rcl_publisher_init+0x32>
 8008cf0:	b18b      	cbz	r3, 8008d16 <rcl_publisher_init+0x116>
 8008cf2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008cf6:	b142      	cbz	r2, 8008d0a <rcl_publisher_init+0x10a>
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f005 fed5 	bl	800eaa8 <rcl_node_get_rmw_handle>
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8008d04:	f001 fd4c 	bl	800a7a0 <rmw_destroy_publisher>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8008d0c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008d0e:	4618      	mov	r0, r3
 8008d10:	4790      	blx	r2
 8008d12:	2300      	movs	r3, #0
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	2701      	movs	r7, #1
 8008d18:	e7db      	b.n	8008cd2 <rcl_publisher_init+0xd2>
 8008d1a:	2867      	cmp	r0, #103	; 0x67
 8008d1c:	d0d9      	beq.n	8008cd2 <rcl_publisher_init+0xd2>
 8008d1e:	2869      	cmp	r0, #105	; 0x69
 8008d20:	d003      	beq.n	8008d2a <rcl_publisher_init+0x12a>
 8008d22:	280a      	cmp	r0, #10
 8008d24:	d1f7      	bne.n	8008d16 <rcl_publisher_init+0x116>
 8008d26:	270a      	movs	r7, #10
 8008d28:	e7d3      	b.n	8008cd2 <rcl_publisher_init+0xd2>
 8008d2a:	2767      	movs	r7, #103	; 0x67
 8008d2c:	e7d1      	b.n	8008cd2 <rcl_publisher_init+0xd2>
 8008d2e:	bf00      	nop

08008d30 <rcl_publisher_get_default_options>:
 8008d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d32:	4d1d      	ldr	r5, [pc, #116]	; (8008da8 <rcl_publisher_get_default_options+0x78>)
 8008d34:	491d      	ldr	r1, [pc, #116]	; (8008dac <rcl_publisher_get_default_options+0x7c>)
 8008d36:	b08b      	sub	sp, #44	; 0x2c
 8008d38:	2250      	movs	r2, #80	; 0x50
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	f00c fe20 	bl	8015982 <memcpy>
 8008d42:	a802      	add	r0, sp, #8
 8008d44:	f001 fa7a 	bl	800a23c <rcutils_get_default_allocator>
 8008d48:	f10d 0c08 	add.w	ip, sp, #8
 8008d4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008d50:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8008d54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008d58:	466e      	mov	r6, sp
 8008d5a:	f8dc 3000 	ldr.w	r3, [ip]
 8008d5e:	f8ce 3000 	str.w	r3, [lr]
 8008d62:	4630      	mov	r0, r6
 8008d64:	f001 fbb0 	bl	800a4c8 <rmw_get_default_publisher_options>
 8008d68:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008d6c:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8008d70:	e883 0003 	stmia.w	r3, {r0, r1}
 8008d74:	2700      	movs	r7, #0
 8008d76:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 8008d7a:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8008d7e:	f005 fe99 	bl	800eab4 <rcl_get_disable_loaned_message>
 8008d82:	b958      	cbnz	r0, 8008d9c <rcl_publisher_get_default_options+0x6c>
 8008d84:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8008d88:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 8008d8c:	4906      	ldr	r1, [pc, #24]	; (8008da8 <rcl_publisher_get_default_options+0x78>)
 8008d8e:	2270      	movs	r2, #112	; 0x70
 8008d90:	4620      	mov	r0, r4
 8008d92:	f00c fdf6 	bl	8015982 <memcpy>
 8008d96:	4620      	mov	r0, r4
 8008d98:	b00b      	add	sp, #44	; 0x2c
 8008d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d9c:	f001 fb24 	bl	800a3e8 <rcutils_reset_error>
 8008da0:	f885 706c 	strb.w	r7, [r5, #108]	; 0x6c
 8008da4:	e7f2      	b.n	8008d8c <rcl_publisher_get_default_options+0x5c>
 8008da6:	bf00      	nop
 8008da8:	2000c690 	.word	0x2000c690
 8008dac:	08016a10 	.word	0x08016a10

08008db0 <rcl_publish>:
 8008db0:	b1f8      	cbz	r0, 8008df2 <rcl_publish+0x42>
 8008db2:	6803      	ldr	r3, [r0, #0]
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	4604      	mov	r4, r0
 8008db8:	b1b3      	cbz	r3, 8008de8 <rcl_publish+0x38>
 8008dba:	4616      	mov	r6, r2
 8008dbc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008dc0:	b192      	cbz	r2, 8008de8 <rcl_publish+0x38>
 8008dc2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8008dc6:	460d      	mov	r5, r1
 8008dc8:	f005 f94a 	bl	800e060 <rcl_context_is_valid>
 8008dcc:	b160      	cbz	r0, 8008de8 <rcl_publish+0x38>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8008dd4:	b140      	cbz	r0, 8008de8 <rcl_publish+0x38>
 8008dd6:	b155      	cbz	r5, 8008dee <rcl_publish+0x3e>
 8008dd8:	4632      	mov	r2, r6
 8008dda:	4629      	mov	r1, r5
 8008ddc:	f001 fb92 	bl	800a504 <rmw_publish>
 8008de0:	3800      	subs	r0, #0
 8008de2:	bf18      	it	ne
 8008de4:	2001      	movne	r0, #1
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008dec:	bd70      	pop	{r4, r5, r6, pc}
 8008dee:	200b      	movs	r0, #11
 8008df0:	bd70      	pop	{r4, r5, r6, pc}
 8008df2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008df6:	4770      	bx	lr

08008df8 <rcl_publisher_is_valid>:
 8008df8:	b1a0      	cbz	r0, 8008e24 <rcl_publisher_is_valid+0x2c>
 8008dfa:	6803      	ldr	r3, [r0, #0]
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	4604      	mov	r4, r0
 8008e00:	b173      	cbz	r3, 8008e20 <rcl_publisher_is_valid+0x28>
 8008e02:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008e06:	b15a      	cbz	r2, 8008e20 <rcl_publisher_is_valid+0x28>
 8008e08:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8008e0c:	f005 f928 	bl	800e060 <rcl_context_is_valid>
 8008e10:	b130      	cbz	r0, 8008e20 <rcl_publisher_is_valid+0x28>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8008e18:	3800      	subs	r0, #0
 8008e1a:	bf18      	it	ne
 8008e1c:	2001      	movne	r0, #1
 8008e1e:	bd10      	pop	{r4, pc}
 8008e20:	2000      	movs	r0, #0
 8008e22:	bd10      	pop	{r4, pc}
 8008e24:	2000      	movs	r0, #0
 8008e26:	4770      	bx	lr

08008e28 <rcl_publisher_is_valid_except_context>:
 8008e28:	b130      	cbz	r0, 8008e38 <rcl_publisher_is_valid_except_context+0x10>
 8008e2a:	6800      	ldr	r0, [r0, #0]
 8008e2c:	b120      	cbz	r0, 8008e38 <rcl_publisher_is_valid_except_context+0x10>
 8008e2e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8008e32:	3800      	subs	r0, #0
 8008e34:	bf18      	it	ne
 8008e36:	2001      	movne	r0, #1
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop

08008e3c <_rcl_timer_time_jump>:
 8008e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e40:	4605      	mov	r5, r0
 8008e42:	b084      	sub	sp, #16
 8008e44:	4614      	mov	r4, r2
 8008e46:	b131      	cbz	r1, 8008e56 <_rcl_timer_time_jump+0x1a>
 8008e48:	7803      	ldrb	r3, [r0, #0]
 8008e4a:	3b02      	subs	r3, #2
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d93f      	bls.n	8008ed0 <_rcl_timer_time_jump+0x94>
 8008e50:	b004      	add	sp, #16
 8008e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e56:	6813      	ldr	r3, [r2, #0]
 8008e58:	a902      	add	r1, sp, #8
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	f006 fb26 	bl	800f4ac <rcl_clock_get_now>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d1f5      	bne.n	8008e50 <_rcl_timer_time_jump+0x14>
 8008e64:	6820      	ldr	r0, [r4, #0]
 8008e66:	2105      	movs	r1, #5
 8008e68:	3020      	adds	r0, #32
 8008e6a:	f001 fa03 	bl	800a274 <__atomic_load_8>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	4681      	mov	r9, r0
 8008e72:	4688      	mov	r8, r1
 8008e74:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8008e78:	2105      	movs	r1, #5
 8008e7a:	f001 f9fb 	bl	800a274 <__atomic_load_8>
 8008e7e:	4607      	mov	r7, r0
 8008e80:	6820      	ldr	r0, [r4, #0]
 8008e82:	460e      	mov	r6, r1
 8008e84:	3018      	adds	r0, #24
 8008e86:	2105      	movs	r1, #5
 8008e88:	f001 f9f4 	bl	800a274 <__atomic_load_8>
 8008e8c:	782b      	ldrb	r3, [r5, #0]
 8008e8e:	9a02      	ldr	r2, [sp, #8]
 8008e90:	3b02      	subs	r3, #2
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	460d      	mov	r5, r1
 8008e96:	9b03      	ldr	r3, [sp, #12]
 8008e98:	4682      	mov	sl, r0
 8008e9a:	d937      	bls.n	8008f0c <_rcl_timer_time_jump+0xd0>
 8008e9c:	42ba      	cmp	r2, r7
 8008e9e:	eb73 0106 	sbcs.w	r1, r3, r6
 8008ea2:	da5f      	bge.n	8008f64 <_rcl_timer_time_jump+0x128>
 8008ea4:	454a      	cmp	r2, r9
 8008ea6:	eb73 0108 	sbcs.w	r1, r3, r8
 8008eaa:	dad1      	bge.n	8008e50 <_rcl_timer_time_jump+0x14>
 8008eac:	6820      	ldr	r0, [r4, #0]
 8008eae:	eb1a 0202 	adds.w	r2, sl, r2
 8008eb2:	eb43 0305 	adc.w	r3, r3, r5
 8008eb6:	2505      	movs	r5, #5
 8008eb8:	3028      	adds	r0, #40	; 0x28
 8008eba:	9500      	str	r5, [sp, #0]
 8008ebc:	f001 fa10 	bl	800a2e0 <__atomic_store_8>
 8008ec0:	6820      	ldr	r0, [r4, #0]
 8008ec2:	9500      	str	r5, [sp, #0]
 8008ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ec8:	3020      	adds	r0, #32
 8008eca:	f001 fa09 	bl	800a2e0 <__atomic_store_8>
 8008ece:	e7bf      	b.n	8008e50 <_rcl_timer_time_jump+0x14>
 8008ed0:	6813      	ldr	r3, [r2, #0]
 8008ed2:	a902      	add	r1, sp, #8
 8008ed4:	6818      	ldr	r0, [r3, #0]
 8008ed6:	f006 fae9 	bl	800f4ac <rcl_clock_get_now>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d1b8      	bne.n	8008e50 <_rcl_timer_time_jump+0x14>
 8008ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	d0b4      	beq.n	8008e50 <_rcl_timer_time_jump+0x14>
 8008ee6:	6820      	ldr	r0, [r4, #0]
 8008ee8:	2105      	movs	r1, #5
 8008eea:	3028      	adds	r0, #40	; 0x28
 8008eec:	f001 f9c2 	bl	800a274 <__atomic_load_8>
 8008ef0:	9d02      	ldr	r5, [sp, #8]
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	6820      	ldr	r0, [r4, #0]
 8008ef8:	1b52      	subs	r2, r2, r5
 8008efa:	f04f 0405 	mov.w	r4, #5
 8008efe:	9400      	str	r4, [sp, #0]
 8008f00:	eb61 0303 	sbc.w	r3, r1, r3
 8008f04:	3030      	adds	r0, #48	; 0x30
 8008f06:	f001 f9eb 	bl	800a2e0 <__atomic_store_8>
 8008f0a:	e7a1      	b.n	8008e50 <_rcl_timer_time_jump+0x14>
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	d09f      	beq.n	8008e50 <_rcl_timer_time_jump+0x14>
 8008f10:	6820      	ldr	r0, [r4, #0]
 8008f12:	f04f 0805 	mov.w	r8, #5
 8008f16:	2300      	movs	r3, #0
 8008f18:	f8cd 8000 	str.w	r8, [sp]
 8008f1c:	3030      	adds	r0, #48	; 0x30
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f001 fa14 	bl	800a34c <__atomic_exchange_8>
 8008f24:	ea51 0300 	orrs.w	r3, r1, r0
 8008f28:	4606      	mov	r6, r0
 8008f2a:	460f      	mov	r7, r1
 8008f2c:	d090      	beq.n	8008e50 <_rcl_timer_time_jump+0x14>
 8008f2e:	9a02      	ldr	r2, [sp, #8]
 8008f30:	9b03      	ldr	r3, [sp, #12]
 8008f32:	f8cd 8000 	str.w	r8, [sp]
 8008f36:	1a12      	subs	r2, r2, r0
 8008f38:	6820      	ldr	r0, [r4, #0]
 8008f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8008f3e:	eb12 020a 	adds.w	r2, r2, sl
 8008f42:	eb43 0305 	adc.w	r3, r3, r5
 8008f46:	3028      	adds	r0, #40	; 0x28
 8008f48:	f001 f9ca 	bl	800a2e0 <__atomic_store_8>
 8008f4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f50:	f8cd 8000 	str.w	r8, [sp]
 8008f54:	6820      	ldr	r0, [r4, #0]
 8008f56:	1b92      	subs	r2, r2, r6
 8008f58:	eb63 0307 	sbc.w	r3, r3, r7
 8008f5c:	3020      	adds	r0, #32
 8008f5e:	f001 f9bf 	bl	800a2e0 <__atomic_store_8>
 8008f62:	e775      	b.n	8008e50 <_rcl_timer_time_jump+0x14>
 8008f64:	6820      	ldr	r0, [r4, #0]
 8008f66:	3008      	adds	r0, #8
 8008f68:	f005 f9d8 	bl	800e31c <rcl_trigger_guard_condition>
 8008f6c:	e770      	b.n	8008e50 <_rcl_timer_time_jump+0x14>
 8008f6e:	bf00      	nop

08008f70 <rcl_get_zero_initialized_timer>:
 8008f70:	4b01      	ldr	r3, [pc, #4]	; (8008f78 <rcl_get_zero_initialized_timer+0x8>)
 8008f72:	6818      	ldr	r0, [r3, #0]
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	08016a60 	.word	0x08016a60
 8008f7c:	00000000 	.word	0x00000000

08008f80 <rcl_timer_init>:
 8008f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f84:	b0af      	sub	sp, #188	; 0xbc
 8008f86:	4604      	mov	r4, r0
 8008f88:	a839      	add	r0, sp, #228	; 0xe4
 8008f8a:	460d      	mov	r5, r1
 8008f8c:	4690      	mov	r8, r2
 8008f8e:	f001 f963 	bl	800a258 <rcutils_allocator_is_valid>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d06a      	beq.n	800906c <rcl_timer_init+0xec>
 8008f96:	2c00      	cmp	r4, #0
 8008f98:	d068      	beq.n	800906c <rcl_timer_init+0xec>
 8008f9a:	2d00      	cmp	r5, #0
 8008f9c:	d066      	beq.n	800906c <rcl_timer_init+0xec>
 8008f9e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	db63      	blt.n	800906c <rcl_timer_init+0xec>
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	b123      	cbz	r3, 8008fb2 <rcl_timer_init+0x32>
 8008fa8:	2664      	movs	r6, #100	; 0x64
 8008faa:	4630      	mov	r0, r6
 8008fac:	b02f      	add	sp, #188	; 0xbc
 8008fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fb2:	a908      	add	r1, sp, #32
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	f006 fa79 	bl	800f4ac <rcl_clock_get_now>
 8008fba:	4606      	mov	r6, r0
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d1f4      	bne.n	8008faa <rcl_timer_init+0x2a>
 8008fc0:	ae06      	add	r6, sp, #24
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	e9cd 5816 	strd	r5, r8, [sp, #88]	; 0x58
 8008fc8:	f005 f8b0 	bl	800e12c <rcl_get_zero_initialized_guard_condition>
 8008fcc:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008fd0:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8008fd4:	ae0b      	add	r6, sp, #44	; 0x2c
 8008fd6:	e889 0003 	stmia.w	r9, {r0, r1}
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f005 f982 	bl	800e2e4 <rcl_guard_condition_get_default_options>
 8008fe0:	ab0d      	add	r3, sp, #52	; 0x34
 8008fe2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008fe6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008fea:	4641      	mov	r1, r8
 8008fec:	e896 000c 	ldmia.w	r6, {r2, r3}
 8008ff0:	4648      	mov	r0, r9
 8008ff2:	f005 f8a5 	bl	800e140 <rcl_guard_condition_init>
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d1d6      	bne.n	8008faa <rcl_timer_init+0x2a>
 8008ffc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d038      	beq.n	8009076 <rcl_timer_init+0xf6>
 8009004:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8009006:	931a      	str	r3, [sp, #104]	; 0x68
 8009008:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 800900c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8009010:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009014:	9f36      	ldr	r7, [sp, #216]	; 0xd8
 8009016:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80090d0 <rcl_timer_init+0x150>
 800901a:	19d0      	adds	r0, r2, r7
 800901c:	9f37      	ldr	r7, [sp, #220]	; 0xdc
 800901e:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
 8009022:	eb43 0107 	adc.w	r1, r3, r7
 8009026:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 800902a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 800902e:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8009032:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009036:	f10d 0e94 	add.w	lr, sp, #148	; 0x94
 800903a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800903e:	f8dc 3000 	ldr.w	r3, [ip]
 8009042:	f8ce 3000 	str.w	r3, [lr]
 8009046:	f04f 0800 	mov.w	r8, #0
 800904a:	4619      	mov	r1, r3
 800904c:	e9cd 882a 	strd	r8, r8, [sp, #168]	; 0xa8
 8009050:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8009052:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
 8009056:	f88d 8090 	strb.w	r8, [sp, #144]	; 0x90
 800905a:	2060      	movs	r0, #96	; 0x60
 800905c:	4798      	blx	r3
 800905e:	6020      	str	r0, [r4, #0]
 8009060:	b358      	cbz	r0, 80090ba <rcl_timer_init+0x13a>
 8009062:	2260      	movs	r2, #96	; 0x60
 8009064:	a916      	add	r1, sp, #88	; 0x58
 8009066:	f00c fc8c 	bl	8015982 <memcpy>
 800906a:	e79e      	b.n	8008faa <rcl_timer_init+0x2a>
 800906c:	260b      	movs	r6, #11
 800906e:	4630      	mov	r0, r6
 8009070:	b02f      	add	sp, #188	; 0xbc
 8009072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009076:	2001      	movs	r0, #1
 8009078:	2100      	movs	r1, #0
 800907a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800907e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009082:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009086:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800908a:	4a13      	ldr	r2, [pc, #76]	; (80090d8 <rcl_timer_init+0x158>)
 800908c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8009090:	9405      	str	r4, [sp, #20]
 8009092:	9204      	str	r2, [sp, #16]
 8009094:	ab12      	add	r3, sp, #72	; 0x48
 8009096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009098:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800909c:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80090a0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80090a4:	4628      	mov	r0, r5
 80090a6:	f006 fa0d 	bl	800f4c4 <rcl_clock_add_jump_callback>
 80090aa:	4680      	mov	r8, r0
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d0a9      	beq.n	8009004 <rcl_timer_init+0x84>
 80090b0:	4648      	mov	r0, r9
 80090b2:	f005 f8f1 	bl	800e298 <rcl_guard_condition_fini>
 80090b6:	4646      	mov	r6, r8
 80090b8:	e777      	b.n	8008faa <rcl_timer_init+0x2a>
 80090ba:	4648      	mov	r0, r9
 80090bc:	f005 f8ec 	bl	800e298 <rcl_guard_condition_fini>
 80090c0:	4905      	ldr	r1, [pc, #20]	; (80090d8 <rcl_timer_init+0x158>)
 80090c2:	4622      	mov	r2, r4
 80090c4:	4628      	mov	r0, r5
 80090c6:	f006 fa5f 	bl	800f588 <rcl_clock_remove_jump_callback>
 80090ca:	260a      	movs	r6, #10
 80090cc:	e76d      	b.n	8008faa <rcl_timer_init+0x2a>
 80090ce:	bf00      	nop
	...
 80090d8:	08008e3d 	.word	0x08008e3d

080090dc <rcl_timer_call>:
 80090dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e0:	b087      	sub	sp, #28
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d06d      	beq.n	80091c2 <rcl_timer_call+0xe6>
 80090e6:	6803      	ldr	r3, [r0, #0]
 80090e8:	4604      	mov	r4, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d063      	beq.n	80091b6 <rcl_timer_call+0xda>
 80090ee:	f3bf 8f5b 	dmb	ish
 80090f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090f6:	f3bf 8f5b 	dmb	ish
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d150      	bne.n	80091a0 <rcl_timer_call+0xc4>
 80090fe:	6803      	ldr	r3, [r0, #0]
 8009100:	a904      	add	r1, sp, #16
 8009102:	6818      	ldr	r0, [r3, #0]
 8009104:	f006 f9d2 	bl	800f4ac <rcl_clock_get_now>
 8009108:	4605      	mov	r5, r0
 800910a:	2800      	cmp	r0, #0
 800910c:	d14a      	bne.n	80091a4 <rcl_timer_call+0xc8>
 800910e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	db4a      	blt.n	80091ac <rcl_timer_call+0xd0>
 8009116:	6820      	ldr	r0, [r4, #0]
 8009118:	f04f 0a05 	mov.w	sl, #5
 800911c:	f8cd a000 	str.w	sl, [sp]
 8009120:	3020      	adds	r0, #32
 8009122:	f001 f913 	bl	800a34c <__atomic_exchange_8>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	f3bf 8f5b 	dmb	ish
 800912c:	4680      	mov	r8, r0
 800912e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8009132:	f3bf 8f5b 	dmb	ish
 8009136:	6820      	ldr	r0, [r4, #0]
 8009138:	4689      	mov	r9, r1
 800913a:	3028      	adds	r0, #40	; 0x28
 800913c:	4651      	mov	r1, sl
 800913e:	f001 f899 	bl	800a274 <__atomic_load_8>
 8009142:	4606      	mov	r6, r0
 8009144:	6820      	ldr	r0, [r4, #0]
 8009146:	460f      	mov	r7, r1
 8009148:	3018      	adds	r0, #24
 800914a:	4651      	mov	r1, sl
 800914c:	f001 f892 	bl	800a274 <__atomic_load_8>
 8009150:	1836      	adds	r6, r6, r0
 8009152:	4602      	mov	r2, r0
 8009154:	4682      	mov	sl, r0
 8009156:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800915a:	eb47 0701 	adc.w	r7, r7, r1
 800915e:	4286      	cmp	r6, r0
 8009160:	460b      	mov	r3, r1
 8009162:	eb77 010c 	sbcs.w	r1, r7, ip
 8009166:	da04      	bge.n	8009172 <rcl_timer_call+0x96>
 8009168:	ea53 0102 	orrs.w	r1, r3, r2
 800916c:	d12e      	bne.n	80091cc <rcl_timer_call+0xf0>
 800916e:	4606      	mov	r6, r0
 8009170:	4667      	mov	r7, ip
 8009172:	6820      	ldr	r0, [r4, #0]
 8009174:	2105      	movs	r1, #5
 8009176:	4632      	mov	r2, r6
 8009178:	463b      	mov	r3, r7
 800917a:	3028      	adds	r0, #40	; 0x28
 800917c:	9100      	str	r1, [sp, #0]
 800917e:	f001 f8af 	bl	800a2e0 <__atomic_store_8>
 8009182:	f1bb 0f00 	cmp.w	fp, #0
 8009186:	d00d      	beq.n	80091a4 <rcl_timer_call+0xc8>
 8009188:	9a04      	ldr	r2, [sp, #16]
 800918a:	9b05      	ldr	r3, [sp, #20]
 800918c:	ebb2 0208 	subs.w	r2, r2, r8
 8009190:	4620      	mov	r0, r4
 8009192:	eb63 0309 	sbc.w	r3, r3, r9
 8009196:	47d8      	blx	fp
 8009198:	4628      	mov	r0, r5
 800919a:	b007      	add	sp, #28
 800919c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a0:	f240 3521 	movw	r5, #801	; 0x321
 80091a4:	4628      	mov	r0, r5
 80091a6:	b007      	add	sp, #28
 80091a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ac:	2501      	movs	r5, #1
 80091ae:	4628      	mov	r0, r5
 80091b0:	b007      	add	sp, #28
 80091b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	f44f 7548 	mov.w	r5, #800	; 0x320
 80091ba:	4628      	mov	r0, r5
 80091bc:	b007      	add	sp, #28
 80091be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c2:	250b      	movs	r5, #11
 80091c4:	4628      	mov	r0, r5
 80091c6:	b007      	add	sp, #28
 80091c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	1b80      	subs	r0, r0, r6
 80091ce:	eb6c 0107 	sbc.w	r1, ip, r7
 80091d2:	3801      	subs	r0, #1
 80091d4:	f161 0100 	sbc.w	r1, r1, #0
 80091d8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80091dc:	f7f7 f868 	bl	80002b0 <__aeabi_ldivmod>
 80091e0:	9b02      	ldr	r3, [sp, #8]
 80091e2:	3001      	adds	r0, #1
 80091e4:	f141 0100 	adc.w	r1, r1, #0
 80091e8:	fb00 f303 	mul.w	r3, r0, r3
 80091ec:	fb01 330a 	mla	r3, r1, sl, r3
 80091f0:	fba0 0a0a 	umull	r0, sl, r0, sl
 80091f4:	1986      	adds	r6, r0, r6
 80091f6:	4453      	add	r3, sl
 80091f8:	eb43 0707 	adc.w	r7, r3, r7
 80091fc:	e7b9      	b.n	8009172 <rcl_timer_call+0x96>
 80091fe:	bf00      	nop

08009200 <rcl_timer_is_ready>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	b378      	cbz	r0, 8009266 <rcl_timer_is_ready+0x66>
 8009206:	6803      	ldr	r3, [r0, #0]
 8009208:	4604      	mov	r4, r0
 800920a:	b383      	cbz	r3, 800926e <rcl_timer_is_ready+0x6e>
 800920c:	460d      	mov	r5, r1
 800920e:	b351      	cbz	r1, 8009266 <rcl_timer_is_ready+0x66>
 8009210:	f3bf 8f5b 	dmb	ish
 8009214:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009218:	f3bf 8f5b 	dmb	ish
 800921c:	b953      	cbnz	r3, 8009234 <rcl_timer_is_ready+0x34>
 800921e:	6803      	ldr	r3, [r0, #0]
 8009220:	4669      	mov	r1, sp
 8009222:	6818      	ldr	r0, [r3, #0]
 8009224:	f006 f942 	bl	800f4ac <rcl_clock_get_now>
 8009228:	4606      	mov	r6, r0
 800922a:	b140      	cbz	r0, 800923e <rcl_timer_is_ready+0x3e>
 800922c:	f240 3321 	movw	r3, #801	; 0x321
 8009230:	4298      	cmp	r0, r3
 8009232:	d101      	bne.n	8009238 <rcl_timer_is_ready+0x38>
 8009234:	2600      	movs	r6, #0
 8009236:	702e      	strb	r6, [r5, #0]
 8009238:	4630      	mov	r0, r6
 800923a:	b002      	add	sp, #8
 800923c:	bd70      	pop	{r4, r5, r6, pc}
 800923e:	6820      	ldr	r0, [r4, #0]
 8009240:	2105      	movs	r1, #5
 8009242:	3028      	adds	r0, #40	; 0x28
 8009244:	f001 f816 	bl	800a274 <__atomic_load_8>
 8009248:	9b00      	ldr	r3, [sp, #0]
 800924a:	1ac0      	subs	r0, r0, r3
 800924c:	9b01      	ldr	r3, [sp, #4]
 800924e:	eb61 0103 	sbc.w	r1, r1, r3
 8009252:	2801      	cmp	r0, #1
 8009254:	f171 0300 	sbcs.w	r3, r1, #0
 8009258:	bfb4      	ite	lt
 800925a:	2301      	movlt	r3, #1
 800925c:	2300      	movge	r3, #0
 800925e:	4630      	mov	r0, r6
 8009260:	702b      	strb	r3, [r5, #0]
 8009262:	b002      	add	sp, #8
 8009264:	bd70      	pop	{r4, r5, r6, pc}
 8009266:	260b      	movs	r6, #11
 8009268:	4630      	mov	r0, r6
 800926a:	b002      	add	sp, #8
 800926c:	bd70      	pop	{r4, r5, r6, pc}
 800926e:	f44f 7648 	mov.w	r6, #800	; 0x320
 8009272:	e7e1      	b.n	8009238 <rcl_timer_is_ready+0x38>

08009274 <rcl_timer_get_time_until_next_call>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	b330      	cbz	r0, 80092c8 <rcl_timer_get_time_until_next_call+0x54>
 800927a:	6803      	ldr	r3, [r0, #0]
 800927c:	4604      	mov	r4, r0
 800927e:	b33b      	cbz	r3, 80092d0 <rcl_timer_get_time_until_next_call+0x5c>
 8009280:	460d      	mov	r5, r1
 8009282:	b309      	cbz	r1, 80092c8 <rcl_timer_get_time_until_next_call+0x54>
 8009284:	f3bf 8f5b 	dmb	ish
 8009288:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800928c:	f3bf 8f5b 	dmb	ish
 8009290:	b9ab      	cbnz	r3, 80092be <rcl_timer_get_time_until_next_call+0x4a>
 8009292:	6803      	ldr	r3, [r0, #0]
 8009294:	4669      	mov	r1, sp
 8009296:	6818      	ldr	r0, [r3, #0]
 8009298:	f006 f908 	bl	800f4ac <rcl_clock_get_now>
 800929c:	4606      	mov	r6, r0
 800929e:	b958      	cbnz	r0, 80092b8 <rcl_timer_get_time_until_next_call+0x44>
 80092a0:	6820      	ldr	r0, [r4, #0]
 80092a2:	2105      	movs	r1, #5
 80092a4:	3028      	adds	r0, #40	; 0x28
 80092a6:	f000 ffe5 	bl	800a274 <__atomic_load_8>
 80092aa:	9b00      	ldr	r3, [sp, #0]
 80092ac:	1ac0      	subs	r0, r0, r3
 80092ae:	9b01      	ldr	r3, [sp, #4]
 80092b0:	6028      	str	r0, [r5, #0]
 80092b2:	eb61 0103 	sbc.w	r1, r1, r3
 80092b6:	6069      	str	r1, [r5, #4]
 80092b8:	4630      	mov	r0, r6
 80092ba:	b002      	add	sp, #8
 80092bc:	bd70      	pop	{r4, r5, r6, pc}
 80092be:	f240 3621 	movw	r6, #801	; 0x321
 80092c2:	4630      	mov	r0, r6
 80092c4:	b002      	add	sp, #8
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
 80092c8:	260b      	movs	r6, #11
 80092ca:	4630      	mov	r0, r6
 80092cc:	b002      	add	sp, #8
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
 80092d0:	f44f 7648 	mov.w	r6, #800	; 0x320
 80092d4:	e7f0      	b.n	80092b8 <rcl_timer_get_time_until_next_call+0x44>
 80092d6:	bf00      	nop

080092d8 <rcl_timer_get_guard_condition>:
 80092d8:	b130      	cbz	r0, 80092e8 <rcl_timer_get_guard_condition+0x10>
 80092da:	6800      	ldr	r0, [r0, #0]
 80092dc:	b120      	cbz	r0, 80092e8 <rcl_timer_get_guard_condition+0x10>
 80092de:	68c3      	ldr	r3, [r0, #12]
 80092e0:	b10b      	cbz	r3, 80092e6 <rcl_timer_get_guard_condition+0xe>
 80092e2:	3008      	adds	r0, #8
 80092e4:	4770      	bx	lr
 80092e6:	4618      	mov	r0, r3
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop

080092ec <_rclc_check_for_new_data>:
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d046      	beq.n	800937e <_rclc_check_for_new_data+0x92>
 80092f0:	b510      	push	{r4, lr}
 80092f2:	7802      	ldrb	r2, [r0, #0]
 80092f4:	b084      	sub	sp, #16
 80092f6:	4603      	mov	r3, r0
 80092f8:	2a0a      	cmp	r2, #10
 80092fa:	d842      	bhi.n	8009382 <_rclc_check_for_new_data+0x96>
 80092fc:	e8df f002 	tbb	[pc, r2]
 8009300:	14181212 	.word	0x14181212
 8009304:	06060614 	.word	0x06060614
 8009308:	2e1a      	.short	0x2e1a
 800930a:	16          	.byte	0x16
 800930b:	00          	.byte	0x00
 800930c:	6a0a      	ldr	r2, [r1, #32]
 800930e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009310:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009314:	2000      	movs	r0, #0
 8009316:	1a12      	subs	r2, r2, r0
 8009318:	bf18      	it	ne
 800931a:	2201      	movne	r2, #1
 800931c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009320:	b004      	add	sp, #16
 8009322:	bd10      	pop	{r4, pc}
 8009324:	680a      	ldr	r2, [r1, #0]
 8009326:	e7f2      	b.n	800930e <_rclc_check_for_new_data+0x22>
 8009328:	698a      	ldr	r2, [r1, #24]
 800932a:	e7f0      	b.n	800930e <_rclc_check_for_new_data+0x22>
 800932c:	688a      	ldr	r2, [r1, #8]
 800932e:	e7ee      	b.n	800930e <_rclc_check_for_new_data+0x22>
 8009330:	690a      	ldr	r2, [r1, #16]
 8009332:	e7ec      	b.n	800930e <_rclc_check_for_new_data+0x22>
 8009334:	685c      	ldr	r4, [r3, #4]
 8009336:	4608      	mov	r0, r1
 8009338:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800933c:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8009340:	f104 0342 	add.w	r3, r4, #66	; 0x42
 8009344:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800934e:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8009352:	f104 0110 	add.w	r1, r4, #16
 8009356:	f007 f94f 	bl	80105f8 <rcl_action_client_wait_set_get_entities_ready>
 800935a:	e7e1      	b.n	8009320 <_rclc_check_for_new_data+0x34>
 800935c:	685c      	ldr	r4, [r3, #4]
 800935e:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8009362:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8009366:	e9cd 3200 	strd	r3, r2, [sp]
 800936a:	4608      	mov	r0, r1
 800936c:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8009370:	f104 0220 	add.w	r2, r4, #32
 8009374:	f104 0110 	add.w	r1, r4, #16
 8009378:	f007 fb56 	bl	8010a28 <rcl_action_server_wait_set_get_entities_ready>
 800937c:	e7d0      	b.n	8009320 <_rclc_check_for_new_data+0x34>
 800937e:	200b      	movs	r0, #11
 8009380:	4770      	bx	lr
 8009382:	2001      	movs	r0, #1
 8009384:	e7cc      	b.n	8009320 <_rclc_check_for_new_data+0x34>
 8009386:	bf00      	nop

08009388 <_rclc_take_new_data>:
 8009388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800938a:	b099      	sub	sp, #100	; 0x64
 800938c:	2800      	cmp	r0, #0
 800938e:	f000 8088 	beq.w	80094a2 <_rclc_take_new_data+0x11a>
 8009392:	7803      	ldrb	r3, [r0, #0]
 8009394:	4604      	mov	r4, r0
 8009396:	2b0a      	cmp	r3, #10
 8009398:	f200 8167 	bhi.w	800966a <_rclc_take_new_data+0x2e2>
 800939c:	e8df f003 	tbb	[pc, r3]
 80093a0:	44152d2d 	.word	0x44152d2d
 80093a4:	19191944 	.word	0x19191944
 80093a8:	065a      	.short	0x065a
 80093aa:	15          	.byte	0x15
 80093ab:	00          	.byte	0x00
 80093ac:	6840      	ldr	r0, [r0, #4]
 80093ae:	f890 3020 	ldrb.w	r3, [r0, #32]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f040 80b2 	bne.w	800951c <_rclc_take_new_data+0x194>
 80093b8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f040 80e4 	bne.w	800958a <_rclc_take_new_data+0x202>
 80093c2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d16f      	bne.n	80094aa <_rclc_take_new_data+0x122>
 80093ca:	2500      	movs	r5, #0
 80093cc:	4628      	mov	r0, r5
 80093ce:	b019      	add	sp, #100	; 0x64
 80093d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093d2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80093d4:	6a0b      	ldr	r3, [r1, #32]
 80093d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0f5      	beq.n	80093ca <_rclc_take_new_data+0x42>
 80093de:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80093e2:	f104 0110 	add.w	r1, r4, #16
 80093e6:	f005 fd5b 	bl	800eea0 <rcl_take_request>
 80093ea:	4605      	mov	r5, r0
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d0ec      	beq.n	80093ca <_rclc_take_new_data+0x42>
 80093f0:	f240 2359 	movw	r3, #601	; 0x259
 80093f4:	4298      	cmp	r0, r3
 80093f6:	d013      	beq.n	8009420 <_rclc_take_new_data+0x98>
 80093f8:	e029      	b.n	800944e <_rclc_take_new_data+0xc6>
 80093fa:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80093fc:	680b      	ldr	r3, [r1, #0]
 80093fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d0e1      	beq.n	80093ca <_rclc_take_new_data+0x42>
 8009406:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800940a:	2300      	movs	r3, #0
 800940c:	aa0a      	add	r2, sp, #40	; 0x28
 800940e:	f005 ff4b 	bl	800f2a8 <rcl_take>
 8009412:	4605      	mov	r5, r0
 8009414:	2800      	cmp	r0, #0
 8009416:	d0d9      	beq.n	80093cc <_rclc_take_new_data+0x44>
 8009418:	f240 1391 	movw	r3, #401	; 0x191
 800941c:	4298      	cmp	r0, r3
 800941e:	d116      	bne.n	800944e <_rclc_take_new_data+0xc6>
 8009420:	2300      	movs	r3, #0
 8009422:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8009426:	e7d1      	b.n	80093cc <_rclc_take_new_data+0x44>
 8009428:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800942a:	698b      	ldr	r3, [r1, #24]
 800942c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0ca      	beq.n	80093ca <_rclc_take_new_data+0x42>
 8009434:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009438:	f104 0110 	add.w	r1, r4, #16
 800943c:	f004 fd80 	bl	800df40 <rcl_take_response>
 8009440:	4605      	mov	r5, r0
 8009442:	2800      	cmp	r0, #0
 8009444:	d0c1      	beq.n	80093ca <_rclc_take_new_data+0x42>
 8009446:	f240 13f5 	movw	r3, #501	; 0x1f5
 800944a:	4298      	cmp	r0, r3
 800944c:	d0be      	beq.n	80093cc <_rclc_take_new_data+0x44>
 800944e:	f000 ffcb 	bl	800a3e8 <rcutils_reset_error>
 8009452:	e7bb      	b.n	80093cc <_rclc_take_new_data+0x44>
 8009454:	6840      	ldr	r0, [r0, #4]
 8009456:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800945a:	2b00      	cmp	r3, #0
 800945c:	d17d      	bne.n	800955a <_rclc_take_new_data+0x1d2>
 800945e:	69c3      	ldr	r3, [r0, #28]
 8009460:	b11b      	cbz	r3, 800946a <_rclc_take_new_data+0xe2>
 8009462:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009466:	2b00      	cmp	r3, #0
 8009468:	d144      	bne.n	80094f4 <_rclc_take_new_data+0x16c>
 800946a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800946e:	2b00      	cmp	r3, #0
 8009470:	f040 80ac 	bne.w	80095cc <_rclc_take_new_data+0x244>
 8009474:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009478:	2b00      	cmp	r3, #0
 800947a:	d0a6      	beq.n	80093ca <_rclc_take_new_data+0x42>
 800947c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800947e:	a90a      	add	r1, sp, #40	; 0x28
 8009480:	3010      	adds	r0, #16
 8009482:	f006 ff91 	bl	80103a8 <rcl_action_take_result_response>
 8009486:	4605      	mov	r5, r0
 8009488:	2800      	cmp	r0, #0
 800948a:	d1e0      	bne.n	800944e <_rclc_take_new_data+0xc6>
 800948c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009490:	6860      	ldr	r0, [r4, #4]
 8009492:	f007 fbed 	bl	8010c70 <rclc_action_find_handle_by_result_request_sequence_number>
 8009496:	2800      	cmp	r0, #0
 8009498:	d098      	beq.n	80093cc <_rclc_take_new_data+0x44>
 800949a:	2301      	movs	r3, #1
 800949c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 80094a0:	e794      	b.n	80093cc <_rclc_take_new_data+0x44>
 80094a2:	250b      	movs	r5, #11
 80094a4:	4628      	mov	r0, r5
 80094a6:	b019      	add	sp, #100	; 0x64
 80094a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094aa:	ae04      	add	r6, sp, #16
 80094ac:	aa0a      	add	r2, sp, #40	; 0x28
 80094ae:	3010      	adds	r0, #16
 80094b0:	4631      	mov	r1, r6
 80094b2:	f007 f9ed 	bl	8010890 <rcl_action_take_cancel_request>
 80094b6:	4605      	mov	r5, r0
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d1c8      	bne.n	800944e <_rclc_take_new_data+0xc6>
 80094bc:	6860      	ldr	r0, [r4, #4]
 80094be:	a90a      	add	r1, sp, #40	; 0x28
 80094c0:	f007 fb94 	bl	8010bec <rclc_action_find_goal_handle_by_uuid>
 80094c4:	4607      	mov	r7, r0
 80094c6:	2800      	cmp	r0, #0
 80094c8:	f000 80bb 	beq.w	8009642 <_rclc_take_new_data+0x2ba>
 80094cc:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80094d0:	2101      	movs	r1, #1
 80094d2:	f007 fb15 	bl	8010b00 <rcl_action_transition_goal_state>
 80094d6:	2803      	cmp	r0, #3
 80094d8:	4684      	mov	ip, r0
 80094da:	f040 80a7 	bne.w	800962c <_rclc_take_new_data+0x2a4>
 80094de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80094e0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80094e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80094ea:	e884 0003 	stmia.w	r4, {r0, r1}
 80094ee:	f887 c008 	strb.w	ip, [r7, #8]
 80094f2:	e76b      	b.n	80093cc <_rclc_take_new_data+0x44>
 80094f4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80094f6:	3010      	adds	r0, #16
 80094f8:	f006 ffd6 	bl	80104a8 <rcl_action_take_feedback>
 80094fc:	4605      	mov	r5, r0
 80094fe:	2800      	cmp	r0, #0
 8009500:	d1a5      	bne.n	800944e <_rclc_take_new_data+0xc6>
 8009502:	6860      	ldr	r0, [r4, #4]
 8009504:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009506:	f007 fb71 	bl	8010bec <rclc_action_find_goal_handle_by_uuid>
 800950a:	4603      	mov	r3, r0
 800950c:	2800      	cmp	r0, #0
 800950e:	f000 80a3 	beq.w	8009658 <_rclc_take_new_data+0x2d0>
 8009512:	2201      	movs	r2, #1
 8009514:	6860      	ldr	r0, [r4, #4]
 8009516:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800951a:	e7a6      	b.n	800946a <_rclc_take_new_data+0xe2>
 800951c:	f007 fb40 	bl	8010ba0 <rclc_action_take_goal_handle>
 8009520:	4606      	mov	r6, r0
 8009522:	6860      	ldr	r0, [r4, #4]
 8009524:	2e00      	cmp	r6, #0
 8009526:	f43f af47 	beq.w	80093b8 <_rclc_take_new_data+0x30>
 800952a:	6070      	str	r0, [r6, #4]
 800952c:	69f2      	ldr	r2, [r6, #28]
 800952e:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8009532:	3010      	adds	r0, #16
 8009534:	f007 f8f4 	bl	8010720 <rcl_action_take_goal_request>
 8009538:	4605      	mov	r5, r0
 800953a:	2800      	cmp	r0, #0
 800953c:	f040 808e 	bne.w	800965c <_rclc_take_new_data+0x2d4>
 8009540:	69f7      	ldr	r7, [r6, #28]
 8009542:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009544:	7235      	strb	r5, [r6, #8]
 8009546:	f8c6 0009 	str.w	r0, [r6, #9]
 800954a:	f8c6 100d 	str.w	r1, [r6, #13]
 800954e:	6860      	ldr	r0, [r4, #4]
 8009550:	f8c6 2011 	str.w	r2, [r6, #17]
 8009554:	f8c6 3015 	str.w	r3, [r6, #21]
 8009558:	e72e      	b.n	80093b8 <_rclc_take_new_data+0x30>
 800955a:	aa04      	add	r2, sp, #16
 800955c:	a90a      	add	r1, sp, #40	; 0x28
 800955e:	3010      	adds	r0, #16
 8009560:	f006 feaa 	bl	80102b8 <rcl_action_take_goal_response>
 8009564:	4605      	mov	r5, r0
 8009566:	2800      	cmp	r0, #0
 8009568:	f47f af71 	bne.w	800944e <_rclc_take_new_data+0xc6>
 800956c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009570:	6860      	ldr	r0, [r4, #4]
 8009572:	f007 fb6b 	bl	8010c4c <rclc_action_find_handle_by_goal_request_sequence_number>
 8009576:	b130      	cbz	r0, 8009586 <_rclc_take_new_data+0x1fe>
 8009578:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800957c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8009580:	2201      	movs	r2, #1
 8009582:	f880 2020 	strb.w	r2, [r0, #32]
 8009586:	6860      	ldr	r0, [r4, #4]
 8009588:	e769      	b.n	800945e <_rclc_take_new_data+0xd6>
 800958a:	aa04      	add	r2, sp, #16
 800958c:	3010      	adds	r0, #16
 800958e:	a90a      	add	r1, sp, #40	; 0x28
 8009590:	f007 f93e 	bl	8010810 <rcl_action_take_result_request>
 8009594:	4605      	mov	r5, r0
 8009596:	2800      	cmp	r0, #0
 8009598:	f47f af59 	bne.w	800944e <_rclc_take_new_data+0xc6>
 800959c:	6860      	ldr	r0, [r4, #4]
 800959e:	a904      	add	r1, sp, #16
 80095a0:	f007 fb24 	bl	8010bec <rclc_action_find_goal_handle_by_uuid>
 80095a4:	4607      	mov	r7, r0
 80095a6:	b160      	cbz	r0, 80095c2 <_rclc_take_new_data+0x23a>
 80095a8:	ad0a      	add	r5, sp, #40	; 0x28
 80095aa:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80095ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80095b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80095b6:	f04f 0c02 	mov.w	ip, #2
 80095ba:	e886 0003 	stmia.w	r6, {r0, r1}
 80095be:	f887 c008 	strb.w	ip, [r7, #8]
 80095c2:	6860      	ldr	r0, [r4, #4]
 80095c4:	2300      	movs	r3, #0
 80095c6:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80095ca:	e6fa      	b.n	80093c2 <_rclc_take_new_data+0x3a>
 80095cc:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80095d0:	a90a      	add	r1, sp, #40	; 0x28
 80095d2:	3010      	adds	r0, #16
 80095d4:	f006 ff28 	bl	8010428 <rcl_action_take_cancel_response>
 80095d8:	4605      	mov	r5, r0
 80095da:	2800      	cmp	r0, #0
 80095dc:	f47f af37 	bne.w	800944e <_rclc_take_new_data+0xc6>
 80095e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80095e4:	6860      	ldr	r0, [r4, #4]
 80095e6:	f007 fb55 	bl	8010c94 <rclc_action_find_handle_by_cancel_request_sequence_number>
 80095ea:	4606      	mov	r6, r0
 80095ec:	6860      	ldr	r0, [r4, #4]
 80095ee:	2e00      	cmp	r6, #0
 80095f0:	f43f af40 	beq.w	8009474 <_rclc_take_new_data+0xec>
 80095f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80095f6:	2701      	movs	r7, #1
 80095f8:	84b7      	strh	r7, [r6, #36]	; 0x24
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f43f af3a 	beq.w	8009474 <_rclc_take_new_data+0xec>
 8009600:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009602:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009606:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800960a:	f007 faef 	bl	8010bec <rclc_action_find_goal_handle_by_uuid>
 800960e:	b138      	cbz	r0, 8009620 <_rclc_take_new_data+0x298>
 8009610:	6860      	ldr	r0, [r4, #4]
 8009612:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009614:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8009618:	3501      	adds	r5, #1
 800961a:	42ab      	cmp	r3, r5
 800961c:	d8f0      	bhi.n	8009600 <_rclc_take_new_data+0x278>
 800961e:	e729      	b.n	8009474 <_rclc_take_new_data+0xec>
 8009620:	6860      	ldr	r0, [r4, #4]
 8009622:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009624:	3501      	adds	r5, #1
 8009626:	42ab      	cmp	r3, r5
 8009628:	d8ea      	bhi.n	8009600 <_rclc_take_new_data+0x278>
 800962a:	e723      	b.n	8009474 <_rclc_take_new_data+0xec>
 800962c:	ab06      	add	r3, sp, #24
 800962e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009630:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009634:	2103      	movs	r1, #3
 8009636:	e896 000c 	ldmia.w	r6, {r2, r3}
 800963a:	6860      	ldr	r0, [r4, #4]
 800963c:	f007 fba0 	bl	8010d80 <rclc_action_server_goal_cancel_reject>
 8009640:	e6c4      	b.n	80093cc <_rclc_take_new_data+0x44>
 8009642:	ab06      	add	r3, sp, #24
 8009644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009646:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800964a:	2102      	movs	r1, #2
 800964c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009650:	6860      	ldr	r0, [r4, #4]
 8009652:	f007 fb95 	bl	8010d80 <rclc_action_server_goal_cancel_reject>
 8009656:	e6b9      	b.n	80093cc <_rclc_take_new_data+0x44>
 8009658:	6860      	ldr	r0, [r4, #4]
 800965a:	e706      	b.n	800946a <_rclc_take_new_data+0xe2>
 800965c:	6860      	ldr	r0, [r4, #4]
 800965e:	4631      	mov	r1, r6
 8009660:	f007 faae 	bl	8010bc0 <rclc_action_remove_used_goal_handle>
 8009664:	f000 fec0 	bl	800a3e8 <rcutils_reset_error>
 8009668:	e6b0      	b.n	80093cc <_rclc_take_new_data+0x44>
 800966a:	2501      	movs	r5, #1
 800966c:	e6ae      	b.n	80093cc <_rclc_take_new_data+0x44>
 800966e:	bf00      	nop

08009670 <_rclc_execute.part.0>:
 8009670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009672:	7803      	ldrb	r3, [r0, #0]
 8009674:	b087      	sub	sp, #28
 8009676:	4604      	mov	r4, r0
 8009678:	2b0a      	cmp	r3, #10
 800967a:	f200 8136 	bhi.w	80098ea <_rclc_execute.part.0+0x27a>
 800967e:	e8df f003 	tbb	[pc, r3]
 8009682:	435e      	.short	0x435e
 8009684:	06a1664f 	.word	0x06a1664f
 8009688:	6c1e0606 	.word	0x6c1e0606
 800968c:	59          	.byte	0x59
 800968d:	00          	.byte	0x00
 800968e:	2b06      	cmp	r3, #6
 8009690:	f000 8122 	beq.w	80098d8 <_rclc_execute.part.0+0x268>
 8009694:	2b07      	cmp	r3, #7
 8009696:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009698:	f040 8118 	bne.w	80098cc <_rclc_execute.part.0+0x25c>
 800969c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 80096a0:	6880      	ldr	r0, [r0, #8]
 80096a2:	4798      	blx	r3
 80096a4:	f104 0110 	add.w	r1, r4, #16
 80096a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80096aa:	6860      	ldr	r0, [r4, #4]
 80096ac:	f005 fc48 	bl	800ef40 <rcl_send_response>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d033      	beq.n	800971c <_rclc_execute.part.0+0xac>
 80096b4:	9005      	str	r0, [sp, #20]
 80096b6:	f000 fe97 	bl	800a3e8 <rcutils_reset_error>
 80096ba:	9805      	ldr	r0, [sp, #20]
 80096bc:	e02e      	b.n	800971c <_rclc_execute.part.0+0xac>
 80096be:	6840      	ldr	r0, [r0, #4]
 80096c0:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 8086 	beq.w	80097d6 <_rclc_execute.part.0+0x166>
 80096ca:	2600      	movs	r6, #0
 80096cc:	2701      	movs	r7, #1
 80096ce:	e004      	b.n	80096da <_rclc_execute.part.0+0x6a>
 80096d0:	f007 fa40 	bl	8010b54 <rclc_action_send_result_request>
 80096d4:	b998      	cbnz	r0, 80096fe <_rclc_execute.part.0+0x8e>
 80096d6:	722f      	strb	r7, [r5, #8]
 80096d8:	6860      	ldr	r0, [r4, #4]
 80096da:	f007 faed 	bl	8010cb8 <rclc_action_find_first_handle_with_goal_response>
 80096de:	4605      	mov	r5, r0
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d077      	beq.n	80097d4 <_rclc_execute.part.0+0x164>
 80096e4:	6863      	ldr	r3, [r4, #4]
 80096e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 80096ee:	f885 6020 	strb.w	r6, [r5, #32]
 80096f2:	4798      	blx	r3
 80096f4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80096f8:	4628      	mov	r0, r5
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1e8      	bne.n	80096d0 <_rclc_execute.part.0+0x60>
 80096fe:	6860      	ldr	r0, [r4, #4]
 8009700:	4629      	mov	r1, r5
 8009702:	f007 fa5d 	bl	8010bc0 <rclc_action_remove_used_goal_handle>
 8009706:	e7e7      	b.n	80096d8 <_rclc_execute.part.0+0x68>
 8009708:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800970c:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 8009710:	2d00      	cmp	r5, #0
 8009712:	f000 80c9 	beq.w	80098a8 <_rclc_execute.part.0+0x238>
 8009716:	6880      	ldr	r0, [r0, #8]
 8009718:	4798      	blx	r3
 800971a:	2000      	movs	r0, #0
 800971c:	b007      	add	sp, #28
 800971e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009720:	6840      	ldr	r0, [r0, #4]
 8009722:	f7ff fcdb 	bl	80090dc <rcl_timer_call>
 8009726:	f240 3321 	movw	r3, #801	; 0x321
 800972a:	4298      	cmp	r0, r3
 800972c:	d004      	beq.n	8009738 <_rclc_execute.part.0+0xc8>
 800972e:	2800      	cmp	r0, #0
 8009730:	d0f4      	beq.n	800971c <_rclc_execute.part.0+0xac>
 8009732:	e7bf      	b.n	80096b4 <_rclc_execute.part.0+0x44>
 8009734:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009736:	4798      	blx	r3
 8009738:	2000      	movs	r0, #0
 800973a:	b007      	add	sp, #28
 800973c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800973e:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 8009742:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009744:	b925      	cbnz	r5, 8009750 <_rclc_execute.part.0+0xe0>
 8009746:	4628      	mov	r0, r5
 8009748:	4798      	blx	r3
 800974a:	4628      	mov	r0, r5
 800974c:	e7e6      	b.n	800971c <_rclc_execute.part.0+0xac>
 800974e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009750:	68a0      	ldr	r0, [r4, #8]
 8009752:	4798      	blx	r3
 8009754:	2000      	movs	r0, #0
 8009756:	b007      	add	sp, #28
 8009758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800975a:	6840      	ldr	r0, [r0, #4]
 800975c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8009760:	bb3b      	cbnz	r3, 80097b2 <_rclc_execute.part.0+0x142>
 8009762:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d07b      	beq.n	8009862 <_rclc_execute.part.0+0x1f2>
 800976a:	f640 0634 	movw	r6, #2100	; 0x834
 800976e:	2701      	movs	r7, #1
 8009770:	e007      	b.n	8009782 <_rclc_execute.part.0+0x112>
 8009772:	4628      	mov	r0, r5
 8009774:	f007 fab8 	bl	8010ce8 <rclc_action_server_response_goal_request>
 8009778:	6860      	ldr	r0, [r4, #4]
 800977a:	4629      	mov	r1, r5
 800977c:	f007 fa20 	bl	8010bc0 <rclc_action_remove_used_goal_handle>
 8009780:	6860      	ldr	r0, [r4, #4]
 8009782:	2100      	movs	r1, #0
 8009784:	f007 fa4a 	bl	8010c1c <rclc_action_find_first_handle_by_status>
 8009788:	4605      	mov	r5, r0
 800978a:	2800      	cmp	r0, #0
 800978c:	d066      	beq.n	800985c <_rclc_execute.part.0+0x1ec>
 800978e:	6863      	ldr	r3, [r4, #4]
 8009790:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	4798      	blx	r3
 8009796:	42b0      	cmp	r0, r6
 8009798:	f04f 0100 	mov.w	r1, #0
 800979c:	d1e9      	bne.n	8009772 <_rclc_execute.part.0+0x102>
 800979e:	2101      	movs	r1, #1
 80097a0:	4628      	mov	r0, r5
 80097a2:	f007 faa1 	bl	8010ce8 <rclc_action_server_response_goal_request>
 80097a6:	722f      	strb	r7, [r5, #8]
 80097a8:	e7ea      	b.n	8009780 <_rclc_execute.part.0+0x110>
 80097aa:	6848      	ldr	r0, [r1, #4]
 80097ac:	f007 fa08 	bl	8010bc0 <rclc_action_remove_used_goal_handle>
 80097b0:	6860      	ldr	r0, [r4, #4]
 80097b2:	f007 fa3f 	bl	8010c34 <rclc_action_find_first_terminated_handle>
 80097b6:	4601      	mov	r1, r0
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d1f6      	bne.n	80097aa <_rclc_execute.part.0+0x13a>
 80097bc:	6860      	ldr	r0, [r4, #4]
 80097be:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80097c2:	e7ce      	b.n	8009762 <_rclc_execute.part.0+0xf2>
 80097c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80097c6:	6880      	ldr	r0, [r0, #8]
 80097c8:	f104 0110 	add.w	r1, r4, #16
 80097cc:	4798      	blx	r3
 80097ce:	2000      	movs	r0, #0
 80097d0:	b007      	add	sp, #28
 80097d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097d4:	6860      	ldr	r0, [r4, #4]
 80097d6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80097da:	b18b      	cbz	r3, 8009800 <_rclc_execute.part.0+0x190>
 80097dc:	68c5      	ldr	r5, [r0, #12]
 80097de:	b32d      	cbz	r5, 800982c <_rclc_execute.part.0+0x1bc>
 80097e0:	2600      	movs	r6, #0
 80097e2:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80097e6:	b143      	cbz	r3, 80097fa <_rclc_execute.part.0+0x18a>
 80097e8:	69c3      	ldr	r3, [r0, #28]
 80097ea:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 80097ee:	b123      	cbz	r3, 80097fa <_rclc_execute.part.0+0x18a>
 80097f0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80097f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80097f4:	4628      	mov	r0, r5
 80097f6:	4798      	blx	r3
 80097f8:	6860      	ldr	r0, [r4, #4]
 80097fa:	682d      	ldr	r5, [r5, #0]
 80097fc:	2d00      	cmp	r5, #0
 80097fe:	d1f0      	bne.n	80097e2 <_rclc_execute.part.0+0x172>
 8009800:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8009804:	b193      	cbz	r3, 800982c <_rclc_execute.part.0+0x1bc>
 8009806:	68c5      	ldr	r5, [r0, #12]
 8009808:	b185      	cbz	r5, 800982c <_rclc_execute.part.0+0x1bc>
 800980a:	2600      	movs	r6, #0
 800980c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8009810:	b14b      	cbz	r3, 8009826 <_rclc_execute.part.0+0x1b6>
 8009812:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009814:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 8009818:	b12b      	cbz	r3, 8009826 <_rclc_execute.part.0+0x1b6>
 800981a:	4628      	mov	r0, r5
 800981c:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8009820:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009822:	4798      	blx	r3
 8009824:	6860      	ldr	r0, [r4, #4]
 8009826:	682d      	ldr	r5, [r5, #0]
 8009828:	2d00      	cmp	r5, #0
 800982a:	d1ef      	bne.n	800980c <_rclc_execute.part.0+0x19c>
 800982c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009830:	2b00      	cmp	r3, #0
 8009832:	d081      	beq.n	8009738 <_rclc_execute.part.0+0xc8>
 8009834:	2700      	movs	r7, #0
 8009836:	e00b      	b.n	8009850 <_rclc_execute.part.0+0x1e0>
 8009838:	6863      	ldr	r3, [r4, #4]
 800983a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800983c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800983e:	6a1e      	ldr	r6, [r3, #32]
 8009840:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 8009844:	47b0      	blx	r6
 8009846:	6860      	ldr	r0, [r4, #4]
 8009848:	4629      	mov	r1, r5
 800984a:	f007 f9b9 	bl	8010bc0 <rclc_action_remove_used_goal_handle>
 800984e:	6860      	ldr	r0, [r4, #4]
 8009850:	f007 fa3e 	bl	8010cd0 <rclc_action_find_first_handle_with_result_response>
 8009854:	4605      	mov	r5, r0
 8009856:	2800      	cmp	r0, #0
 8009858:	d1ee      	bne.n	8009838 <_rclc_execute.part.0+0x1c8>
 800985a:	e76d      	b.n	8009738 <_rclc_execute.part.0+0xc8>
 800985c:	6860      	ldr	r0, [r4, #4]
 800985e:	f880 5020 	strb.w	r5, [r0, #32]
 8009862:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8009866:	2b00      	cmp	r3, #0
 8009868:	f43f af66 	beq.w	8009738 <_rclc_execute.part.0+0xc8>
 800986c:	68c5      	ldr	r5, [r0, #12]
 800986e:	b1b5      	cbz	r5, 800989e <_rclc_execute.part.0+0x22e>
 8009870:	2602      	movs	r6, #2
 8009872:	e001      	b.n	8009878 <_rclc_execute.part.0+0x208>
 8009874:	682d      	ldr	r5, [r5, #0]
 8009876:	b195      	cbz	r5, 800989e <_rclc_execute.part.0+0x22e>
 8009878:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800987c:	2b03      	cmp	r3, #3
 800987e:	d1f9      	bne.n	8009874 <_rclc_execute.part.0+0x204>
 8009880:	69c3      	ldr	r3, [r0, #28]
 8009882:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009884:	4628      	mov	r0, r5
 8009886:	4798      	blx	r3
 8009888:	4603      	mov	r3, r0
 800988a:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800988e:	4628      	mov	r0, r5
 8009890:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8009894:	b163      	cbz	r3, 80098b0 <_rclc_execute.part.0+0x240>
 8009896:	f007 fa47 	bl	8010d28 <rclc_action_server_goal_cancel_accept>
 800989a:	6860      	ldr	r0, [r4, #4]
 800989c:	e7ea      	b.n	8009874 <_rclc_execute.part.0+0x204>
 800989e:	2300      	movs	r3, #0
 80098a0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80098a4:	4618      	mov	r0, r3
 80098a6:	e739      	b.n	800971c <_rclc_execute.part.0+0xac>
 80098a8:	4628      	mov	r0, r5
 80098aa:	4798      	blx	r3
 80098ac:	4628      	mov	r0, r5
 80098ae:	e735      	b.n	800971c <_rclc_execute.part.0+0xac>
 80098b0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80098b2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80098b6:	f105 0758 	add.w	r7, r5, #88	; 0x58
 80098ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098be:	6860      	ldr	r0, [r4, #4]
 80098c0:	2101      	movs	r1, #1
 80098c2:	f007 fa5d 	bl	8010d80 <rclc_action_server_goal_cancel_reject>
 80098c6:	722e      	strb	r6, [r5, #8]
 80098c8:	6860      	ldr	r0, [r4, #4]
 80098ca:	e7d3      	b.n	8009874 <_rclc_execute.part.0+0x204>
 80098cc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80098ce:	6880      	ldr	r0, [r0, #8]
 80098d0:	4798      	blx	r3
 80098d2:	f104 0110 	add.w	r1, r4, #16
 80098d6:	e6e7      	b.n	80096a8 <_rclc_execute.part.0+0x38>
 80098d8:	f100 0110 	add.w	r1, r0, #16
 80098dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80098de:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80098e0:	6880      	ldr	r0, [r0, #8]
 80098e2:	9105      	str	r1, [sp, #20]
 80098e4:	4798      	blx	r3
 80098e6:	9905      	ldr	r1, [sp, #20]
 80098e8:	e6de      	b.n	80096a8 <_rclc_execute.part.0+0x38>
 80098ea:	2001      	movs	r0, #1
 80098ec:	e716      	b.n	800971c <_rclc_execute.part.0+0xac>
 80098ee:	bf00      	nop

080098f0 <rclc_executor_trigger_any>:
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d03f      	beq.n	8009974 <rclc_executor_trigger_any+0x84>
 80098f4:	2900      	cmp	r1, #0
 80098f6:	d03e      	beq.n	8009976 <rclc_executor_trigger_any+0x86>
 80098f8:	4603      	mov	r3, r0
 80098fa:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 80098fe:	2200      	movs	r2, #0
 8009900:	2800      	cmp	r0, #0
 8009902:	d037      	beq.n	8009974 <rclc_executor_trigger_any+0x84>
 8009904:	b430      	push	{r4, r5}
 8009906:	f893 c000 	ldrb.w	ip, [r3]
 800990a:	f1bc 0f08 	cmp.w	ip, #8
 800990e:	d11e      	bne.n	800994e <rclc_executor_trigger_any+0x5e>
 8009910:	685c      	ldr	r4, [r3, #4]
 8009912:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8009914:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8009918:	d105      	bne.n	8009926 <rclc_executor_trigger_any+0x36>
 800991a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800991e:	b910      	cbnz	r0, 8009926 <rclc_executor_trigger_any+0x36>
 8009920:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8009924:	b128      	cbz	r0, 8009932 <rclc_executor_trigger_any+0x42>
 8009926:	bc30      	pop	{r4, r5}
 8009928:	4770      	bx	lr
 800992a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800992e:	2800      	cmp	r0, #0
 8009930:	d1f9      	bne.n	8009926 <rclc_executor_trigger_any+0x36>
 8009932:	3201      	adds	r2, #1
 8009934:	4291      	cmp	r1, r2
 8009936:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800993a:	d018      	beq.n	800996e <rclc_executor_trigger_any+0x7e>
 800993c:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8009940:	2800      	cmp	r0, #0
 8009942:	d0f0      	beq.n	8009926 <rclc_executor_trigger_any+0x36>
 8009944:	f893 c000 	ldrb.w	ip, [r3]
 8009948:	f1bc 0f08 	cmp.w	ip, #8
 800994c:	d0e0      	beq.n	8009910 <rclc_executor_trigger_any+0x20>
 800994e:	f1bc 0f09 	cmp.w	ip, #9
 8009952:	d1ea      	bne.n	800992a <rclc_executor_trigger_any+0x3a>
 8009954:	685c      	ldr	r4, [r3, #4]
 8009956:	6a25      	ldr	r5, [r4, #32]
 8009958:	2d00      	cmp	r5, #0
 800995a:	d1e4      	bne.n	8009926 <rclc_executor_trigger_any+0x36>
 800995c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8009960:	2800      	cmp	r0, #0
 8009962:	d1e0      	bne.n	8009926 <rclc_executor_trigger_any+0x36>
 8009964:	3201      	adds	r2, #1
 8009966:	4291      	cmp	r1, r2
 8009968:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800996c:	d1e6      	bne.n	800993c <rclc_executor_trigger_any+0x4c>
 800996e:	2000      	movs	r0, #0
 8009970:	bc30      	pop	{r4, r5}
 8009972:	4770      	bx	lr
 8009974:	4770      	bx	lr
 8009976:	4608      	mov	r0, r1
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop

0800997c <rclc_executor_get_zero_initialized_executor>:
 800997c:	b510      	push	{r4, lr}
 800997e:	4903      	ldr	r1, [pc, #12]	; (800998c <rclc_executor_get_zero_initialized_executor+0x10>)
 8009980:	4604      	mov	r4, r0
 8009982:	2290      	movs	r2, #144	; 0x90
 8009984:	f00b fffd 	bl	8015982 <memcpy>
 8009988:	4620      	mov	r0, r4
 800998a:	bd10      	pop	{r4, pc}
 800998c:	08016a68 	.word	0x08016a68

08009990 <rclc_executor_init>:
 8009990:	2800      	cmp	r0, #0
 8009992:	d05f      	beq.n	8009a54 <rclc_executor_init+0xc4>
 8009994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009998:	460c      	mov	r4, r1
 800999a:	b0b2      	sub	sp, #200	; 0xc8
 800999c:	2900      	cmp	r1, #0
 800999e:	d051      	beq.n	8009a44 <rclc_executor_init+0xb4>
 80099a0:	4605      	mov	r5, r0
 80099a2:	4618      	mov	r0, r3
 80099a4:	4616      	mov	r6, r2
 80099a6:	461f      	mov	r7, r3
 80099a8:	f000 fc56 	bl	800a258 <rcutils_allocator_is_valid>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d049      	beq.n	8009a44 <rclc_executor_init+0xb4>
 80099b0:	2e00      	cmp	r6, #0
 80099b2:	d047      	beq.n	8009a44 <rclc_executor_init+0xb4>
 80099b4:	492c      	ldr	r1, [pc, #176]	; (8009a68 <rclc_executor_init+0xd8>)
 80099b6:	2290      	movs	r2, #144	; 0x90
 80099b8:	a80e      	add	r0, sp, #56	; 0x38
 80099ba:	f00b ffe2 	bl	8015982 <memcpy>
 80099be:	a90e      	add	r1, sp, #56	; 0x38
 80099c0:	2290      	movs	r2, #144	; 0x90
 80099c2:	4628      	mov	r0, r5
 80099c4:	f00b ffdd 	bl	8015982 <memcpy>
 80099c8:	606c      	str	r4, [r5, #4]
 80099ca:	4668      	mov	r0, sp
 80099cc:	60ee      	str	r6, [r5, #12]
 80099ce:	466c      	mov	r4, sp
 80099d0:	f005 fea2 	bl	800f718 <rcl_get_zero_initialized_wait_set>
 80099d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099d6:	f105 0c18 	add.w	ip, r5, #24
 80099da:	f8d7 8000 	ldr.w	r8, [r7]
 80099de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80099e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80099e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80099ee:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 8009a60 <rclc_executor_init+0xd0>
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	f8cc 3000 	str.w	r3, [ip]
 80099f8:	6939      	ldr	r1, [r7, #16]
 80099fa:	616f      	str	r7, [r5, #20]
 80099fc:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 8009a00:	01b0      	lsls	r0, r6, #6
 8009a02:	47c0      	blx	r8
 8009a04:	60a8      	str	r0, [r5, #8]
 8009a06:	b338      	cbz	r0, 8009a58 <rclc_executor_init+0xc8>
 8009a08:	2400      	movs	r4, #0
 8009a0a:	e000      	b.n	8009a0e <rclc_executor_init+0x7e>
 8009a0c:	68a8      	ldr	r0, [r5, #8]
 8009a0e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8009a12:	4631      	mov	r1, r6
 8009a14:	3401      	adds	r4, #1
 8009a16:	f000 faa7 	bl	8009f68 <rclc_executor_handle_init>
 8009a1a:	42a6      	cmp	r6, r4
 8009a1c:	d1f6      	bne.n	8009a0c <rclc_executor_init+0x7c>
 8009a1e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8009a22:	f000 fa95 	bl	8009f50 <rclc_executor_handle_counters_zero_init>
 8009a26:	4a11      	ldr	r2, [pc, #68]	; (8009a6c <rclc_executor_init+0xdc>)
 8009a28:	68ab      	ldr	r3, [r5, #8]
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	e9c5 2020 	strd	r2, r0, [r5, #128]	; 0x80
 8009a30:	b163      	cbz	r3, 8009a4c <rclc_executor_init+0xbc>
 8009a32:	696b      	ldr	r3, [r5, #20]
 8009a34:	b153      	cbz	r3, 8009a4c <rclc_executor_init+0xbc>
 8009a36:	68eb      	ldr	r3, [r5, #12]
 8009a38:	b143      	cbz	r3, 8009a4c <rclc_executor_init+0xbc>
 8009a3a:	f885 0088 	strb.w	r0, [r5, #136]	; 0x88
 8009a3e:	b032      	add	sp, #200	; 0xc8
 8009a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a44:	200b      	movs	r0, #11
 8009a46:	b032      	add	sp, #200	; 0xc8
 8009a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	b032      	add	sp, #200	; 0xc8
 8009a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a54:	200b      	movs	r0, #11
 8009a56:	4770      	bx	lr
 8009a58:	200a      	movs	r0, #10
 8009a5a:	e7f4      	b.n	8009a46 <rclc_executor_init+0xb6>
 8009a5c:	f3af 8000 	nop.w
 8009a60:	3b9aca00 	.word	0x3b9aca00
 8009a64:	00000000 	.word	0x00000000
 8009a68:	08016a68 	.word	0x08016a68
 8009a6c:	080098f1 	.word	0x080098f1

08009a70 <rclc_executor_set_timeout>:
 8009a70:	b158      	cbz	r0, 8009a8a <rclc_executor_set_timeout+0x1a>
 8009a72:	6881      	ldr	r1, [r0, #8]
 8009a74:	b139      	cbz	r1, 8009a86 <rclc_executor_set_timeout+0x16>
 8009a76:	6941      	ldr	r1, [r0, #20]
 8009a78:	b129      	cbz	r1, 8009a86 <rclc_executor_set_timeout+0x16>
 8009a7a:	68c1      	ldr	r1, [r0, #12]
 8009a7c:	b119      	cbz	r1, 8009a86 <rclc_executor_set_timeout+0x16>
 8009a7e:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
 8009a82:	2000      	movs	r0, #0
 8009a84:	4770      	bx	lr
 8009a86:	2001      	movs	r0, #1
 8009a88:	4770      	bx	lr
 8009a8a:	200b      	movs	r0, #11
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop

08009a90 <rclc_executor_add_subscription>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009a96:	b338      	cbz	r0, 8009ae8 <rclc_executor_add_subscription+0x58>
 8009a98:	b331      	cbz	r1, 8009ae8 <rclc_executor_add_subscription+0x58>
 8009a9a:	b32a      	cbz	r2, 8009ae8 <rclc_executor_add_subscription+0x58>
 8009a9c:	b323      	cbz	r3, 8009ae8 <rclc_executor_add_subscription+0x58>
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 8009aa4:	42a8      	cmp	r0, r5
 8009aa6:	d301      	bcc.n	8009aac <rclc_executor_add_subscription+0x1c>
 8009aa8:	2001      	movs	r0, #1
 8009aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aac:	68a6      	ldr	r6, [r4, #8]
 8009aae:	0187      	lsls	r7, r0, #6
 8009ab0:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8009ab4:	2500      	movs	r5, #0
 8009ab6:	55f5      	strb	r5, [r6, r7]
 8009ab8:	3001      	adds	r0, #1
 8009aba:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
 8009abe:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	f104 0518 	add.w	r5, r4, #24
 8009ac8:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009acc:	f88c e001 	strb.w	lr, [ip, #1]
 8009ad0:	f8ac 3038 	strh.w	r3, [ip, #56]	; 0x38
 8009ad4:	6120      	str	r0, [r4, #16]
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f005 fe32 	bl	800f740 <rcl_wait_set_is_valid>
 8009adc:	b930      	cbnz	r0, 8009aec <rclc_executor_add_subscription+0x5c>
 8009ade:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ae8:	200b      	movs	r0, #11
 8009aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aec:	4628      	mov	r0, r5
 8009aee:	f005 fe2d 	bl	800f74c <rcl_wait_set_fini>
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d0f3      	beq.n	8009ade <rclc_executor_add_subscription+0x4e>
 8009af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009af8 <rclc_executor_add_timer>:
 8009af8:	b300      	cbz	r0, 8009b3c <rclc_executor_add_timer+0x44>
 8009afa:	b1f9      	cbz	r1, 8009b3c <rclc_executor_add_timer+0x44>
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8009b02:	4293      	cmp	r3, r2
 8009b04:	4604      	mov	r4, r0
 8009b06:	d301      	bcc.n	8009b0c <rclc_executor_add_timer+0x14>
 8009b08:	2001      	movs	r0, #1
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	6880      	ldr	r0, [r0, #8]
 8009b0e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 8009b12:	019d      	lsls	r5, r3, #6
 8009b14:	6051      	str	r1, [r2, #4]
 8009b16:	2102      	movs	r1, #2
 8009b18:	5341      	strh	r1, [r0, r5]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	2101      	movs	r1, #1
 8009b20:	f104 0518 	add.w	r5, r4, #24
 8009b24:	62d0      	str	r0, [r2, #44]	; 0x2c
 8009b26:	8711      	strh	r1, [r2, #56]	; 0x38
 8009b28:	4628      	mov	r0, r5
 8009b2a:	6123      	str	r3, [r4, #16]
 8009b2c:	f005 fe08 	bl	800f740 <rcl_wait_set_is_valid>
 8009b30:	b930      	cbnz	r0, 8009b40 <rclc_executor_add_timer+0x48>
 8009b32:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009b34:	3301      	adds	r3, #1
 8009b36:	2000      	movs	r0, #0
 8009b38:	6523      	str	r3, [r4, #80]	; 0x50
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	200b      	movs	r0, #11
 8009b3e:	4770      	bx	lr
 8009b40:	4628      	mov	r0, r5
 8009b42:	f005 fe03 	bl	800f74c <rcl_wait_set_fini>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d0f3      	beq.n	8009b32 <rclc_executor_add_timer+0x3a>
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}

08009b4c <rclc_executor_prepare>:
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d044      	beq.n	8009bda <rclc_executor_prepare+0x8e>
 8009b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b52:	f100 0518 	add.w	r5, r0, #24
 8009b56:	b09b      	sub	sp, #108	; 0x6c
 8009b58:	4604      	mov	r4, r0
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	f005 fdf0 	bl	800f740 <rcl_wait_set_is_valid>
 8009b60:	b110      	cbz	r0, 8009b68 <rclc_executor_prepare+0x1c>
 8009b62:	2000      	movs	r0, #0
 8009b64:	b01b      	add	sp, #108	; 0x6c
 8009b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b68:	4628      	mov	r0, r5
 8009b6a:	f005 fdef 	bl	800f74c <rcl_wait_set_fini>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d130      	bne.n	8009bd4 <rclc_executor_prepare+0x88>
 8009b72:	a80c      	add	r0, sp, #48	; 0x30
 8009b74:	f005 fdd0 	bl	800f718 <rcl_get_zero_initialized_wait_set>
 8009b78:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8009b7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b80:	46ae      	mov	lr, r5
 8009b82:	6967      	ldr	r7, [r4, #20]
 8009b84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009b88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009b90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b94:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009b98:	f8dc 3000 	ldr.w	r3, [ip]
 8009b9c:	f8ce 3000 	str.w	r3, [lr]
 8009ba0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009ba2:	ae04      	add	r6, sp, #16
 8009ba4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	6862      	ldr	r2, [r4, #4]
 8009baa:	6033      	str	r3, [r6, #0]
 8009bac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009bae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009bb0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009bb4:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 8009bb8:	e9cd 2100 	strd	r2, r1, [sp]
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bc0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009bc2:	f006 f8c1 	bl	800fd48 <rcl_wait_set_init>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d0cc      	beq.n	8009b64 <rclc_executor_prepare+0x18>
 8009bca:	900b      	str	r0, [sp, #44]	; 0x2c
 8009bcc:	f000 fc0c 	bl	800a3e8 <rcutils_reset_error>
 8009bd0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009bd2:	e7c7      	b.n	8009b64 <rclc_executor_prepare+0x18>
 8009bd4:	f000 fc08 	bl	800a3e8 <rcutils_reset_error>
 8009bd8:	e7cb      	b.n	8009b72 <rclc_executor_prepare+0x26>
 8009bda:	200b      	movs	r0, #11
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop

08009be0 <rclc_executor_spin_some.part.0>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	f100 0618 	add.w	r6, r0, #24
 8009be8:	b083      	sub	sp, #12
 8009bea:	4691      	mov	r9, r2
 8009bec:	4698      	mov	r8, r3
 8009bee:	4605      	mov	r5, r0
 8009bf0:	f7ff ffac 	bl	8009b4c <rclc_executor_prepare>
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f005 fe75 	bl	800f8e4 <rcl_wait_set_clear>
 8009bfa:	4607      	mov	r7, r0
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	f040 80ed 	bne.w	8009ddc <rclc_executor_spin_some.part.0+0x1fc>
 8009c02:	68eb      	ldr	r3, [r5, #12]
 8009c04:	4604      	mov	r4, r0
 8009c06:	b303      	cbz	r3, 8009c4a <rclc_executor_spin_some.part.0+0x6a>
 8009c08:	68a9      	ldr	r1, [r5, #8]
 8009c0a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8009c0e:	01a2      	lsls	r2, r4, #6
 8009c10:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 8009c14:	b1cb      	cbz	r3, 8009c4a <rclc_executor_spin_some.part.0+0x6a>
 8009c16:	5c8b      	ldrb	r3, [r1, r2]
 8009c18:	2b0a      	cmp	r3, #10
 8009c1a:	f200 80d8 	bhi.w	8009dce <rclc_executor_spin_some.part.0+0x1ee>
 8009c1e:	e8df f003 	tbb	[pc, r3]
 8009c22:	9c9c      	.short	0x9c9c
 8009c24:	068c8ca7 	.word	0x068c8ca7
 8009c28:	bdc90606 	.word	0xbdc90606
 8009c2c:	b2          	.byte	0xb2
 8009c2d:	00          	.byte	0x00
 8009c2e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009c32:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009c36:	4630      	mov	r0, r6
 8009c38:	f006 f99c 	bl	800ff74 <rcl_wait_set_add_service>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	f040 8086 	bne.w	8009d4e <rclc_executor_spin_some.part.0+0x16e>
 8009c42:	68eb      	ldr	r3, [r5, #12]
 8009c44:	3401      	adds	r4, #1
 8009c46:	429c      	cmp	r4, r3
 8009c48:	d3de      	bcc.n	8009c08 <rclc_executor_spin_some.part.0+0x28>
 8009c4a:	4643      	mov	r3, r8
 8009c4c:	464a      	mov	r2, r9
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f006 f9be 	bl	800ffd0 <rcl_wait>
 8009c54:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 80c7 	beq.w	8009dec <rclc_executor_spin_some.part.0+0x20c>
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	f040 80b5 	bne.w	8009dce <rclc_executor_spin_some.part.0+0x1ee>
 8009c64:	68eb      	ldr	r3, [r5, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f000 8159 	beq.w	8009f1e <rclc_executor_spin_some.part.0+0x33e>
 8009c6c:	2400      	movs	r4, #0
 8009c6e:	46a0      	mov	r8, r4
 8009c70:	f240 1991 	movw	r9, #401	; 0x191
 8009c74:	e00a      	b.n	8009c8c <rclc_executor_spin_some.part.0+0xac>
 8009c76:	f7ff fb39 	bl	80092ec <_rclc_check_for_new_data>
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	b110      	cbz	r0, 8009c84 <rclc_executor_spin_some.part.0+0xa4>
 8009c7e:	4548      	cmp	r0, r9
 8009c80:	f040 80b2 	bne.w	8009de8 <rclc_executor_spin_some.part.0+0x208>
 8009c84:	68eb      	ldr	r3, [r5, #12]
 8009c86:	4598      	cmp	r8, r3
 8009c88:	f080 8126 	bcs.w	8009ed8 <rclc_executor_spin_some.part.0+0x2f8>
 8009c8c:	68aa      	ldr	r2, [r5, #8]
 8009c8e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009c92:	4631      	mov	r1, r6
 8009c94:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8009c98:	f108 0801 	add.w	r8, r8, #1
 8009c9c:	f1bc 0f00 	cmp.w	ip, #0
 8009ca0:	d1e9      	bne.n	8009c76 <rclc_executor_spin_some.part.0+0x96>
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 8009caa:	4798      	blx	r3
 8009cac:	2800      	cmp	r0, #0
 8009cae:	f000 809b 	beq.w	8009de8 <rclc_executor_spin_some.part.0+0x208>
 8009cb2:	68eb      	ldr	r3, [r5, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 8097 	beq.w	8009de8 <rclc_executor_spin_some.part.0+0x208>
 8009cba:	f04f 0800 	mov.w	r8, #0
 8009cbe:	f240 1991 	movw	r9, #401	; 0x191
 8009cc2:	e009      	b.n	8009cd8 <rclc_executor_spin_some.part.0+0xf8>
 8009cc4:	f7ff fb60 	bl	8009388 <_rclc_take_new_data>
 8009cc8:	4604      	mov	r4, r0
 8009cca:	b110      	cbz	r0, 8009cd2 <rclc_executor_spin_some.part.0+0xf2>
 8009ccc:	4548      	cmp	r0, r9
 8009cce:	f040 808b 	bne.w	8009de8 <rclc_executor_spin_some.part.0+0x208>
 8009cd2:	68eb      	ldr	r3, [r5, #12]
 8009cd4:	4598      	cmp	r8, r3
 8009cd6:	d209      	bcs.n	8009cec <rclc_executor_spin_some.part.0+0x10c>
 8009cd8:	68a8      	ldr	r0, [r5, #8]
 8009cda:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009cde:	4631      	mov	r1, r6
 8009ce0:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8009ce4:	f108 0801 	add.w	r8, r8, #1
 8009ce8:	2a00      	cmp	r2, #0
 8009cea:	d1eb      	bne.n	8009cc4 <rclc_executor_spin_some.part.0+0xe4>
 8009cec:	2600      	movs	r6, #0
 8009cee:	b97b      	cbnz	r3, 8009d10 <rclc_executor_spin_some.part.0+0x130>
 8009cf0:	e07a      	b.n	8009de8 <rclc_executor_spin_some.part.0+0x208>
 8009cf2:	f812 200c 	ldrb.w	r2, [r2, ip]
 8009cf6:	2a08      	cmp	r2, #8
 8009cf8:	f000 80fd 	beq.w	8009ef6 <rclc_executor_spin_some.part.0+0x316>
 8009cfc:	2a09      	cmp	r2, #9
 8009cfe:	f000 80ef 	beq.w	8009ee0 <rclc_executor_spin_some.part.0+0x300>
 8009d02:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8009d06:	b98a      	cbnz	r2, 8009d2c <rclc_executor_spin_some.part.0+0x14c>
 8009d08:	3601      	adds	r6, #1
 8009d0a:	429e      	cmp	r6, r3
 8009d0c:	d262      	bcs.n	8009dd4 <rclc_executor_spin_some.part.0+0x1f4>
 8009d0e:	2400      	movs	r4, #0
 8009d10:	68aa      	ldr	r2, [r5, #8]
 8009d12:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8009d16:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8009d1a:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8009d1e:	2900      	cmp	r1, #0
 8009d20:	d062      	beq.n	8009de8 <rclc_executor_spin_some.part.0+0x208>
 8009d22:	7841      	ldrb	r1, [r0, #1]
 8009d24:	2900      	cmp	r1, #0
 8009d26:	d0e4      	beq.n	8009cf2 <rclc_executor_spin_some.part.0+0x112>
 8009d28:	2901      	cmp	r1, #1
 8009d2a:	d1ed      	bne.n	8009d08 <rclc_executor_spin_some.part.0+0x128>
 8009d2c:	f7ff fca0 	bl	8009670 <_rclc_execute.part.0>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	f040 80b6 	bne.w	8009ea2 <rclc_executor_spin_some.part.0+0x2c2>
 8009d36:	68eb      	ldr	r3, [r5, #12]
 8009d38:	e7e6      	b.n	8009d08 <rclc_executor_spin_some.part.0+0x128>
 8009d3a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009d3e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009d42:	4630      	mov	r0, r6
 8009d44:	f006 f8ea 	bl	800ff1c <rcl_wait_set_add_client>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	f43f af7a 	beq.w	8009c42 <rclc_executor_spin_some.part.0+0x62>
 8009d4e:	9001      	str	r0, [sp, #4]
 8009d50:	f000 fb4a 	bl	800a3e8 <rcutils_reset_error>
 8009d54:	9801      	ldr	r0, [sp, #4]
 8009d56:	4607      	mov	r7, r0
 8009d58:	e03c      	b.n	8009dd4 <rclc_executor_spin_some.part.0+0x1f4>
 8009d5a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009d5e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009d62:	4630      	mov	r0, r6
 8009d64:	f005 fd92 	bl	800f88c <rcl_wait_set_add_subscription>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	f43f af6a 	beq.w	8009c42 <rclc_executor_spin_some.part.0+0x62>
 8009d6e:	e7ee      	b.n	8009d4e <rclc_executor_spin_some.part.0+0x16e>
 8009d70:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009d74:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009d78:	4630      	mov	r0, r6
 8009d7a:	f006 f89f 	bl	800febc <rcl_wait_set_add_timer>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	f43f af5f 	beq.w	8009c42 <rclc_executor_spin_some.part.0+0x62>
 8009d84:	e7e3      	b.n	8009d4e <rclc_executor_spin_some.part.0+0x16e>
 8009d86:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009d8a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f006 f868 	bl	800fe64 <rcl_wait_set_add_guard_condition>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	f43f af54 	beq.w	8009c42 <rclc_executor_spin_some.part.0+0x62>
 8009d9a:	e7d8      	b.n	8009d4e <rclc_executor_spin_some.part.0+0x16e>
 8009d9c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009da0:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009da4:	3110      	adds	r1, #16
 8009da6:	4630      	mov	r0, r6
 8009da8:	f006 fdea 	bl	8010980 <rcl_action_wait_set_add_action_server>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	f43f af48 	beq.w	8009c42 <rclc_executor_spin_some.part.0+0x62>
 8009db2:	e7cc      	b.n	8009d4e <rclc_executor_spin_some.part.0+0x16e>
 8009db4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009db8:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009dbc:	3110      	adds	r1, #16
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f006 fbb5 	bl	8010530 <rcl_action_wait_set_add_action_client>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f43f af3b 	beq.w	8009c42 <rclc_executor_spin_some.part.0+0x62>
 8009dcc:	e7bf      	b.n	8009d4e <rclc_executor_spin_some.part.0+0x16e>
 8009dce:	f000 fb0b 	bl	800a3e8 <rcutils_reset_error>
 8009dd2:	2701      	movs	r7, #1
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	b003      	add	sp, #12
 8009dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ddc:	f000 fb04 	bl	800a3e8 <rcutils_reset_error>
 8009de0:	4638      	mov	r0, r7
 8009de2:	b003      	add	sp, #12
 8009de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de8:	4627      	mov	r7, r4
 8009dea:	e7f3      	b.n	8009dd4 <rclc_executor_spin_some.part.0+0x1f4>
 8009dec:	68eb      	ldr	r3, [r5, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f000 8092 	beq.w	8009f18 <rclc_executor_spin_some.part.0+0x338>
 8009df4:	2400      	movs	r4, #0
 8009df6:	46a0      	mov	r8, r4
 8009df8:	f240 1991 	movw	r9, #401	; 0x191
 8009dfc:	e008      	b.n	8009e10 <rclc_executor_spin_some.part.0+0x230>
 8009dfe:	f7ff fa75 	bl	80092ec <_rclc_check_for_new_data>
 8009e02:	4604      	mov	r4, r0
 8009e04:	b108      	cbz	r0, 8009e0a <rclc_executor_spin_some.part.0+0x22a>
 8009e06:	4548      	cmp	r0, r9
 8009e08:	d1ee      	bne.n	8009de8 <rclc_executor_spin_some.part.0+0x208>
 8009e0a:	68eb      	ldr	r3, [r5, #12]
 8009e0c:	4598      	cmp	r8, r3
 8009e0e:	d265      	bcs.n	8009edc <rclc_executor_spin_some.part.0+0x2fc>
 8009e10:	68aa      	ldr	r2, [r5, #8]
 8009e12:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009e16:	4631      	mov	r1, r6
 8009e18:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8009e1c:	f108 0801 	add.w	r8, r8, #1
 8009e20:	f1bc 0f00 	cmp.w	ip, #0
 8009e24:	d1eb      	bne.n	8009dfe <rclc_executor_spin_some.part.0+0x21e>
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 8009e2e:	4798      	blx	r3
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d0d9      	beq.n	8009de8 <rclc_executor_spin_some.part.0+0x208>
 8009e34:	68eb      	ldr	r3, [r5, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d0d6      	beq.n	8009de8 <rclc_executor_spin_some.part.0+0x208>
 8009e3a:	f04f 0800 	mov.w	r8, #0
 8009e3e:	f240 1991 	movw	r9, #401	; 0x191
 8009e42:	f240 2a59 	movw	sl, #601	; 0x259
 8009e46:	e00e      	b.n	8009e66 <rclc_executor_spin_some.part.0+0x286>
 8009e48:	f813 300b 	ldrb.w	r3, [r3, fp]
 8009e4c:	2b08      	cmp	r3, #8
 8009e4e:	d033      	beq.n	8009eb8 <rclc_executor_spin_some.part.0+0x2d8>
 8009e50:	2b09      	cmp	r3, #9
 8009e52:	d028      	beq.n	8009ea6 <rclc_executor_spin_some.part.0+0x2c6>
 8009e54:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009e58:	b9fb      	cbnz	r3, 8009e9a <rclc_executor_spin_some.part.0+0x2ba>
 8009e5a:	68eb      	ldr	r3, [r5, #12]
 8009e5c:	f108 0801 	add.w	r8, r8, #1
 8009e60:	4598      	cmp	r8, r3
 8009e62:	d2b7      	bcs.n	8009dd4 <rclc_executor_spin_some.part.0+0x1f4>
 8009e64:	2400      	movs	r4, #0
 8009e66:	68a8      	ldr	r0, [r5, #8]
 8009e68:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009e6c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8009e70:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d0b7      	beq.n	8009de8 <rclc_executor_spin_some.part.0+0x208>
 8009e78:	4631      	mov	r1, r6
 8009e7a:	f7ff fa85 	bl	8009388 <_rclc_take_new_data>
 8009e7e:	b118      	cbz	r0, 8009e88 <rclc_executor_spin_some.part.0+0x2a8>
 8009e80:	4548      	cmp	r0, r9
 8009e82:	d001      	beq.n	8009e88 <rclc_executor_spin_some.part.0+0x2a8>
 8009e84:	4550      	cmp	r0, sl
 8009e86:	d10c      	bne.n	8009ea2 <rclc_executor_spin_some.part.0+0x2c2>
 8009e88:	68ab      	ldr	r3, [r5, #8]
 8009e8a:	eb13 000b 	adds.w	r0, r3, fp
 8009e8e:	d021      	beq.n	8009ed4 <rclc_executor_spin_some.part.0+0x2f4>
 8009e90:	7842      	ldrb	r2, [r0, #1]
 8009e92:	2a00      	cmp	r2, #0
 8009e94:	d0d8      	beq.n	8009e48 <rclc_executor_spin_some.part.0+0x268>
 8009e96:	2a01      	cmp	r2, #1
 8009e98:	d1df      	bne.n	8009e5a <rclc_executor_spin_some.part.0+0x27a>
 8009e9a:	f7ff fbe9 	bl	8009670 <_rclc_execute.part.0>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d0db      	beq.n	8009e5a <rclc_executor_spin_some.part.0+0x27a>
 8009ea2:	4607      	mov	r7, r0
 8009ea4:	e796      	b.n	8009dd4 <rclc_executor_spin_some.part.0+0x1f4>
 8009ea6:	6843      	ldr	r3, [r0, #4]
 8009ea8:	6a1a      	ldr	r2, [r3, #32]
 8009eaa:	2a00      	cmp	r2, #0
 8009eac:	d1f5      	bne.n	8009e9a <rclc_executor_spin_some.part.0+0x2ba>
 8009eae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0d1      	beq.n	8009e5a <rclc_executor_spin_some.part.0+0x27a>
 8009eb6:	e7f0      	b.n	8009e9a <rclc_executor_spin_some.part.0+0x2ba>
 8009eb8:	6843      	ldr	r3, [r0, #4]
 8009eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ebc:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8009ec0:	d1eb      	bne.n	8009e9a <rclc_executor_spin_some.part.0+0x2ba>
 8009ec2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	d1e7      	bne.n	8009e9a <rclc_executor_spin_some.part.0+0x2ba>
 8009eca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0c3      	beq.n	8009e5a <rclc_executor_spin_some.part.0+0x27a>
 8009ed2:	e7e2      	b.n	8009e9a <rclc_executor_spin_some.part.0+0x2ba>
 8009ed4:	270b      	movs	r7, #11
 8009ed6:	e77d      	b.n	8009dd4 <rclc_executor_spin_some.part.0+0x1f4>
 8009ed8:	68aa      	ldr	r2, [r5, #8]
 8009eda:	e6e2      	b.n	8009ca2 <rclc_executor_spin_some.part.0+0xc2>
 8009edc:	68aa      	ldr	r2, [r5, #8]
 8009ede:	e7a2      	b.n	8009e26 <rclc_executor_spin_some.part.0+0x246>
 8009ee0:	6842      	ldr	r2, [r0, #4]
 8009ee2:	6a11      	ldr	r1, [r2, #32]
 8009ee4:	2900      	cmp	r1, #0
 8009ee6:	f47f af21 	bne.w	8009d2c <rclc_executor_spin_some.part.0+0x14c>
 8009eea:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8009eee:	2a00      	cmp	r2, #0
 8009ef0:	f43f af0a 	beq.w	8009d08 <rclc_executor_spin_some.part.0+0x128>
 8009ef4:	e71a      	b.n	8009d2c <rclc_executor_spin_some.part.0+0x14c>
 8009ef6:	6842      	ldr	r2, [r0, #4]
 8009ef8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8009efa:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8009efe:	f47f af15 	bne.w	8009d2c <rclc_executor_spin_some.part.0+0x14c>
 8009f02:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8009f06:	2900      	cmp	r1, #0
 8009f08:	f47f af10 	bne.w	8009d2c <rclc_executor_spin_some.part.0+0x14c>
 8009f0c:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8009f10:	2a00      	cmp	r2, #0
 8009f12:	f43f aef9 	beq.w	8009d08 <rclc_executor_spin_some.part.0+0x128>
 8009f16:	e709      	b.n	8009d2c <rclc_executor_spin_some.part.0+0x14c>
 8009f18:	68aa      	ldr	r2, [r5, #8]
 8009f1a:	461c      	mov	r4, r3
 8009f1c:	e783      	b.n	8009e26 <rclc_executor_spin_some.part.0+0x246>
 8009f1e:	68aa      	ldr	r2, [r5, #8]
 8009f20:	461c      	mov	r4, r3
 8009f22:	e6be      	b.n	8009ca2 <rclc_executor_spin_some.part.0+0xc2>

08009f24 <rclc_executor_spin_some>:
 8009f24:	b190      	cbz	r0, 8009f4c <rclc_executor_spin_some+0x28>
 8009f26:	b570      	push	{r4, r5, r6, lr}
 8009f28:	4604      	mov	r4, r0
 8009f2a:	6840      	ldr	r0, [r0, #4]
 8009f2c:	4616      	mov	r6, r2
 8009f2e:	461d      	mov	r5, r3
 8009f30:	f004 f896 	bl	800e060 <rcl_context_is_valid>
 8009f34:	b130      	cbz	r0, 8009f44 <rclc_executor_spin_some+0x20>
 8009f36:	4632      	mov	r2, r6
 8009f38:	462b      	mov	r3, r5
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f40:	f7ff be4e 	b.w	8009be0 <rclc_executor_spin_some.part.0>
 8009f44:	f000 fa50 	bl	800a3e8 <rcutils_reset_error>
 8009f48:	2001      	movs	r0, #1
 8009f4a:	bd70      	pop	{r4, r5, r6, pc}
 8009f4c:	200b      	movs	r0, #11
 8009f4e:	4770      	bx	lr

08009f50 <rclc_executor_handle_counters_zero_init>:
 8009f50:	b130      	cbz	r0, 8009f60 <rclc_executor_handle_counters_zero_init+0x10>
 8009f52:	b508      	push	{r3, lr}
 8009f54:	2220      	movs	r2, #32
 8009f56:	2100      	movs	r1, #0
 8009f58:	f00b fc38 	bl	80157cc <memset>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	bd08      	pop	{r3, pc}
 8009f60:	200b      	movs	r0, #11
 8009f62:	4770      	bx	lr
 8009f64:	0000      	movs	r0, r0
	...

08009f68 <rclc_executor_handle_init>:
 8009f68:	b168      	cbz	r0, 8009f86 <rclc_executor_handle_init+0x1e>
 8009f6a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8009f90 <rclc_executor_handle_init+0x28>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	220b      	movs	r2, #11
 8009f72:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 8009f76:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8009f7a:	e9c0 310c 	strd	r3, r1, [r0, #48]	; 0x30
 8009f7e:	8002      	strh	r2, [r0, #0]
 8009f80:	8703      	strh	r3, [r0, #56]	; 0x38
 8009f82:	4618      	mov	r0, r3
 8009f84:	4770      	bx	lr
 8009f86:	200b      	movs	r0, #11
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	f3af 8000 	nop.w
	...

08009f98 <rclc_support_init>:
 8009f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f9c:	b086      	sub	sp, #24
 8009f9e:	b3b8      	cbz	r0, 800a010 <rclc_support_init+0x78>
 8009fa0:	461c      	mov	r4, r3
 8009fa2:	b3ab      	cbz	r3, 800a010 <rclc_support_init+0x78>
 8009fa4:	460f      	mov	r7, r1
 8009fa6:	4690      	mov	r8, r2
 8009fa8:	4606      	mov	r6, r0
 8009faa:	f004 fb03 	bl	800e5b4 <rcl_get_zero_initialized_init_options>
 8009fae:	f104 030c 	add.w	r3, r4, #12
 8009fb2:	9005      	str	r0, [sp, #20]
 8009fb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009fb8:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009fbc:	a805      	add	r0, sp, #20
 8009fbe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009fc2:	f004 faf9 	bl	800e5b8 <rcl_init_options_init>
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	b9e0      	cbnz	r0, 800a004 <rclc_support_init+0x6c>
 8009fca:	ad02      	add	r5, sp, #8
 8009fcc:	4628      	mov	r0, r5
 8009fce:	f004 f83d 	bl	800e04c <rcl_get_zero_initialized_context>
 8009fd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009fd6:	4633      	mov	r3, r6
 8009fd8:	e886 0003 	stmia.w	r6, {r0, r1}
 8009fdc:	aa05      	add	r2, sp, #20
 8009fde:	4641      	mov	r1, r8
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	f004 f9b1 	bl	800e348 <rcl_init>
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	b9b8      	cbnz	r0, 800a01a <rclc_support_init+0x82>
 8009fea:	60b4      	str	r4, [r6, #8]
 8009fec:	4622      	mov	r2, r4
 8009fee:	f106 010c 	add.w	r1, r6, #12
 8009ff2:	2003      	movs	r0, #3
 8009ff4:	f005 f9e2 	bl	800f3bc <rcl_clock_init>
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	b970      	cbnz	r0, 800a01a <rclc_support_init+0x82>
 8009ffc:	a805      	add	r0, sp, #20
 8009ffe:	f004 fb37 	bl	800e670 <rcl_init_options_fini>
 800a002:	b108      	cbz	r0, 800a008 <rclc_support_init+0x70>
 800a004:	f000 f9f0 	bl	800a3e8 <rcutils_reset_error>
 800a008:	4628      	mov	r0, r5
 800a00a:	b006      	add	sp, #24
 800a00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a010:	250b      	movs	r5, #11
 800a012:	4628      	mov	r0, r5
 800a014:	b006      	add	sp, #24
 800a016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a01a:	f000 f9e5 	bl	800a3e8 <rcutils_reset_error>
 800a01e:	a805      	add	r0, sp, #20
 800a020:	f004 fb26 	bl	800e670 <rcl_init_options_fini>
 800a024:	2800      	cmp	r0, #0
 800a026:	d0ef      	beq.n	800a008 <rclc_support_init+0x70>
 800a028:	e7ec      	b.n	800a004 <rclc_support_init+0x6c>
 800a02a:	bf00      	nop

0800a02c <rclc_node_init_default>:
 800a02c:	b3b8      	cbz	r0, 800a09e <rclc_node_init_default+0x72>
 800a02e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a032:	460d      	mov	r5, r1
 800a034:	b0a3      	sub	sp, #140	; 0x8c
 800a036:	b329      	cbz	r1, 800a084 <rclc_node_init_default+0x58>
 800a038:	4616      	mov	r6, r2
 800a03a:	b31a      	cbz	r2, 800a084 <rclc_node_init_default+0x58>
 800a03c:	461f      	mov	r7, r3
 800a03e:	b30b      	cbz	r3, 800a084 <rclc_node_init_default+0x58>
 800a040:	f10d 0810 	add.w	r8, sp, #16
 800a044:	4604      	mov	r4, r0
 800a046:	4640      	mov	r0, r8
 800a048:	f004 fbbc 	bl	800e7c4 <rcl_get_zero_initialized_node>
 800a04c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a050:	f10d 0918 	add.w	r9, sp, #24
 800a054:	e884 0003 	stmia.w	r4, {r0, r1}
 800a058:	4648      	mov	r0, r9
 800a05a:	f004 fd4b 	bl	800eaf4 <rcl_node_get_default_options>
 800a05e:	4640      	mov	r0, r8
 800a060:	f004 fbb0 	bl	800e7c4 <rcl_get_zero_initialized_node>
 800a064:	f8cd 9000 	str.w	r9, [sp]
 800a068:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a06c:	463b      	mov	r3, r7
 800a06e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a072:	4632      	mov	r2, r6
 800a074:	4629      	mov	r1, r5
 800a076:	4620      	mov	r0, r4
 800a078:	f004 fbae 	bl	800e7d8 <rcl_node_init>
 800a07c:	b930      	cbnz	r0, 800a08c <rclc_node_init_default+0x60>
 800a07e:	b023      	add	sp, #140	; 0x8c
 800a080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a084:	200b      	movs	r0, #11
 800a086:	b023      	add	sp, #140	; 0x8c
 800a088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a08c:	9003      	str	r0, [sp, #12]
 800a08e:	f000 f9ab 	bl	800a3e8 <rcutils_reset_error>
 800a092:	f000 f9a9 	bl	800a3e8 <rcutils_reset_error>
 800a096:	9803      	ldr	r0, [sp, #12]
 800a098:	b023      	add	sp, #140	; 0x8c
 800a09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a09e:	200b      	movs	r0, #11
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop

0800a0a4 <rclc_publisher_init_default>:
 800a0a4:	b368      	cbz	r0, 800a102 <rclc_publisher_init_default+0x5e>
 800a0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0aa:	460d      	mov	r5, r1
 800a0ac:	b0a0      	sub	sp, #128	; 0x80
 800a0ae:	b321      	cbz	r1, 800a0fa <rclc_publisher_init_default+0x56>
 800a0b0:	4616      	mov	r6, r2
 800a0b2:	b312      	cbz	r2, 800a0fa <rclc_publisher_init_default+0x56>
 800a0b4:	461f      	mov	r7, r3
 800a0b6:	b303      	cbz	r3, 800a0fa <rclc_publisher_init_default+0x56>
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	f7fe fd9b 	bl	8008bf4 <rcl_get_zero_initialized_publisher>
 800a0be:	f10d 0810 	add.w	r8, sp, #16
 800a0c2:	6020      	str	r0, [r4, #0]
 800a0c4:	4640      	mov	r0, r8
 800a0c6:	f7fe fe33 	bl	8008d30 <rcl_publisher_get_default_options>
 800a0ca:	490f      	ldr	r1, [pc, #60]	; (800a108 <rclc_publisher_init_default+0x64>)
 800a0cc:	2250      	movs	r2, #80	; 0x50
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	f00b fc57 	bl	8015982 <memcpy>
 800a0d4:	f8cd 8000 	str.w	r8, [sp]
 800a0d8:	463b      	mov	r3, r7
 800a0da:	4632      	mov	r2, r6
 800a0dc:	4629      	mov	r1, r5
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f7fe fd8e 	bl	8008c00 <rcl_publisher_init>
 800a0e4:	b910      	cbnz	r0, 800a0ec <rclc_publisher_init_default+0x48>
 800a0e6:	b020      	add	sp, #128	; 0x80
 800a0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ec:	9003      	str	r0, [sp, #12]
 800a0ee:	f000 f97b 	bl	800a3e8 <rcutils_reset_error>
 800a0f2:	9803      	ldr	r0, [sp, #12]
 800a0f4:	b020      	add	sp, #128	; 0x80
 800a0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0fa:	200b      	movs	r0, #11
 800a0fc:	b020      	add	sp, #128	; 0x80
 800a0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a102:	200b      	movs	r0, #11
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	08016af8 	.word	0x08016af8

0800a10c <rclc_subscription_init_default>:
 800a10c:	b368      	cbz	r0, 800a16a <rclc_subscription_init_default+0x5e>
 800a10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a112:	460d      	mov	r5, r1
 800a114:	b0a2      	sub	sp, #136	; 0x88
 800a116:	b321      	cbz	r1, 800a162 <rclc_subscription_init_default+0x56>
 800a118:	4616      	mov	r6, r2
 800a11a:	b312      	cbz	r2, 800a162 <rclc_subscription_init_default+0x56>
 800a11c:	461f      	mov	r7, r3
 800a11e:	b303      	cbz	r3, 800a162 <rclc_subscription_init_default+0x56>
 800a120:	4604      	mov	r4, r0
 800a122:	f004 ffe1 	bl	800f0e8 <rcl_get_zero_initialized_subscription>
 800a126:	f10d 0810 	add.w	r8, sp, #16
 800a12a:	6020      	str	r0, [r4, #0]
 800a12c:	4640      	mov	r0, r8
 800a12e:	f005 f889 	bl	800f244 <rcl_subscription_get_default_options>
 800a132:	490f      	ldr	r1, [pc, #60]	; (800a170 <rclc_subscription_init_default+0x64>)
 800a134:	2250      	movs	r2, #80	; 0x50
 800a136:	4640      	mov	r0, r8
 800a138:	f00b fc23 	bl	8015982 <memcpy>
 800a13c:	f8cd 8000 	str.w	r8, [sp]
 800a140:	463b      	mov	r3, r7
 800a142:	4632      	mov	r2, r6
 800a144:	4629      	mov	r1, r5
 800a146:	4620      	mov	r0, r4
 800a148:	f004 ffd4 	bl	800f0f4 <rcl_subscription_init>
 800a14c:	b910      	cbnz	r0, 800a154 <rclc_subscription_init_default+0x48>
 800a14e:	b022      	add	sp, #136	; 0x88
 800a150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a154:	9003      	str	r0, [sp, #12]
 800a156:	f000 f947 	bl	800a3e8 <rcutils_reset_error>
 800a15a:	9803      	ldr	r0, [sp, #12]
 800a15c:	b022      	add	sp, #136	; 0x88
 800a15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a162:	200b      	movs	r0, #11
 800a164:	b022      	add	sp, #136	; 0x88
 800a166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a16a:	200b      	movs	r0, #11
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	08016b48 	.word	0x08016b48

0800a174 <rclc_timer_init_default>:
 800a174:	b360      	cbz	r0, 800a1d0 <rclc_timer_init_default+0x5c>
 800a176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17a:	460e      	mov	r6, r1
 800a17c:	b08a      	sub	sp, #40	; 0x28
 800a17e:	b319      	cbz	r1, 800a1c8 <rclc_timer_init_default+0x54>
 800a180:	4690      	mov	r8, r2
 800a182:	461f      	mov	r7, r3
 800a184:	4605      	mov	r5, r0
 800a186:	f7fe fef3 	bl	8008f70 <rcl_get_zero_initialized_timer>
 800a18a:	68b4      	ldr	r4, [r6, #8]
 800a18c:	6028      	str	r0, [r5, #0]
 800a18e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a190:	f10d 0c0c 	add.w	ip, sp, #12
 800a194:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	f8cc 3000 	str.w	r3, [ip]
 800a19e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1a0:	9302      	str	r3, [sp, #8]
 800a1a2:	e9cd 8700 	strd	r8, r7, [sp]
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	4632      	mov	r2, r6
 800a1aa:	f106 010c 	add.w	r1, r6, #12
 800a1ae:	f7fe fee7 	bl	8008f80 <rcl_timer_init>
 800a1b2:	b910      	cbnz	r0, 800a1ba <rclc_timer_init_default+0x46>
 800a1b4:	b00a      	add	sp, #40	; 0x28
 800a1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ba:	9009      	str	r0, [sp, #36]	; 0x24
 800a1bc:	f000 f914 	bl	800a3e8 <rcutils_reset_error>
 800a1c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1c2:	b00a      	add	sp, #40	; 0x28
 800a1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c8:	200b      	movs	r0, #11
 800a1ca:	b00a      	add	sp, #40	; 0x28
 800a1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d0:	200b      	movs	r0, #11
 800a1d2:	4770      	bx	lr

0800a1d4 <__default_zero_allocate>:
 800a1d4:	f00a bf0a 	b.w	8014fec <calloc>

0800a1d8 <__default_reallocate>:
 800a1d8:	f00b b896 	b.w	8015308 <realloc>

0800a1dc <__default_deallocate>:
 800a1dc:	f00a bf74 	b.w	80150c8 <free>

0800a1e0 <__default_allocate>:
 800a1e0:	f00a bf6a 	b.w	80150b8 <malloc>

0800a1e4 <rcutils_get_zero_initialized_allocator>:
 800a1e4:	b510      	push	{r4, lr}
 800a1e6:	4c05      	ldr	r4, [pc, #20]	; (800a1fc <rcutils_get_zero_initialized_allocator+0x18>)
 800a1e8:	4686      	mov	lr, r0
 800a1ea:	4684      	mov	ip, r0
 800a1ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	f8cc 3000 	str.w	r3, [ip]
 800a1f8:	4670      	mov	r0, lr
 800a1fa:	bd10      	pop	{r4, pc}
 800a1fc:	08016b98 	.word	0x08016b98

0800a200 <rcutils_set_default_allocator>:
 800a200:	b1a8      	cbz	r0, 800a22e <rcutils_set_default_allocator+0x2e>
 800a202:	6802      	ldr	r2, [r0, #0]
 800a204:	b1a2      	cbz	r2, 800a230 <rcutils_set_default_allocator+0x30>
 800a206:	6841      	ldr	r1, [r0, #4]
 800a208:	b1a1      	cbz	r1, 800a234 <rcutils_set_default_allocator+0x34>
 800a20a:	b410      	push	{r4}
 800a20c:	68c4      	ldr	r4, [r0, #12]
 800a20e:	b164      	cbz	r4, 800a22a <rcutils_set_default_allocator+0x2a>
 800a210:	6880      	ldr	r0, [r0, #8]
 800a212:	b138      	cbz	r0, 800a224 <rcutils_set_default_allocator+0x24>
 800a214:	4b08      	ldr	r3, [pc, #32]	; (800a238 <rcutils_set_default_allocator+0x38>)
 800a216:	601a      	str	r2, [r3, #0]
 800a218:	2200      	movs	r2, #0
 800a21a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a21e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a222:	2001      	movs	r0, #1
 800a224:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a228:	4770      	bx	lr
 800a22a:	4620      	mov	r0, r4
 800a22c:	e7fa      	b.n	800a224 <rcutils_set_default_allocator+0x24>
 800a22e:	4770      	bx	lr
 800a230:	4610      	mov	r0, r2
 800a232:	4770      	bx	lr
 800a234:	4608      	mov	r0, r1
 800a236:	4770      	bx	lr
 800a238:	200001f8 	.word	0x200001f8

0800a23c <rcutils_get_default_allocator>:
 800a23c:	b510      	push	{r4, lr}
 800a23e:	4c05      	ldr	r4, [pc, #20]	; (800a254 <rcutils_get_default_allocator+0x18>)
 800a240:	4686      	mov	lr, r0
 800a242:	4684      	mov	ip, r0
 800a244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a246:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a24a:	6823      	ldr	r3, [r4, #0]
 800a24c:	f8cc 3000 	str.w	r3, [ip]
 800a250:	4670      	mov	r0, lr
 800a252:	bd10      	pop	{r4, pc}
 800a254:	200001f8 	.word	0x200001f8

0800a258 <rcutils_allocator_is_valid>:
 800a258:	b158      	cbz	r0, 800a272 <rcutils_allocator_is_valid+0x1a>
 800a25a:	6803      	ldr	r3, [r0, #0]
 800a25c:	b143      	cbz	r3, 800a270 <rcutils_allocator_is_valid+0x18>
 800a25e:	6843      	ldr	r3, [r0, #4]
 800a260:	b133      	cbz	r3, 800a270 <rcutils_allocator_is_valid+0x18>
 800a262:	68c3      	ldr	r3, [r0, #12]
 800a264:	b123      	cbz	r3, 800a270 <rcutils_allocator_is_valid+0x18>
 800a266:	6880      	ldr	r0, [r0, #8]
 800a268:	3800      	subs	r0, #0
 800a26a:	bf18      	it	ne
 800a26c:	2001      	movne	r0, #1
 800a26e:	4770      	bx	lr
 800a270:	4618      	mov	r0, r3
 800a272:	4770      	bx	lr

0800a274 <__atomic_load_8>:
 800a274:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800a278:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800a27c:	4a15      	ldr	r2, [pc, #84]	; (800a2d4 <__atomic_load_8+0x60>)
 800a27e:	4b16      	ldr	r3, [pc, #88]	; (800a2d8 <__atomic_load_8+0x64>)
 800a280:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800a284:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800a288:	fb02 f101 	mul.w	r1, r2, r1
 800a28c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800a290:	fba3 2301 	umull	r2, r3, r3, r1
 800a294:	091b      	lsrs	r3, r3, #4
 800a296:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a29a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800a29e:	b4d0      	push	{r4, r6, r7}
 800a2a0:	4c0e      	ldr	r4, [pc, #56]	; (800a2dc <__atomic_load_8+0x68>)
 800a2a2:	1ac9      	subs	r1, r1, r3
 800a2a4:	1862      	adds	r2, r4, r1
 800a2a6:	f04f 0c01 	mov.w	ip, #1
 800a2aa:	e8d2 3f4f 	ldrexb	r3, [r2]
 800a2ae:	e8c2 cf46 	strexb	r6, ip, [r2]
 800a2b2:	2e00      	cmp	r6, #0
 800a2b4:	d1f9      	bne.n	800a2aa <__atomic_load_8+0x36>
 800a2b6:	f3bf 8f5b 	dmb	ish
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1f4      	bne.n	800a2aa <__atomic_load_8+0x36>
 800a2c0:	e9d0 6700 	ldrd	r6, r7, [r0]
 800a2c4:	f3bf 8f5b 	dmb	ish
 800a2c8:	5463      	strb	r3, [r4, r1]
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	4639      	mov	r1, r7
 800a2ce:	bcd0      	pop	{r4, r6, r7}
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	27d4eb2d 	.word	0x27d4eb2d
 800a2d8:	b21642c9 	.word	0xb21642c9
 800a2dc:	2000c700 	.word	0x2000c700

0800a2e0 <__atomic_store_8>:
 800a2e0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800a2e4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800a2ee:	4c14      	ldr	r4, [pc, #80]	; (800a340 <__atomic_store_8+0x60>)
 800a2f0:	4d14      	ldr	r5, [pc, #80]	; (800a344 <__atomic_store_8+0x64>)
 800a2f2:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800a2f6:	fb04 f101 	mul.w	r1, r4, r1
 800a2fa:	4c13      	ldr	r4, [pc, #76]	; (800a348 <__atomic_store_8+0x68>)
 800a2fc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800a300:	fba4 4e01 	umull	r4, lr, r4, r1
 800a304:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800a308:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800a30c:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800a310:	eba1 0e0e 	sub.w	lr, r1, lr
 800a314:	eb05 0c0e 	add.w	ip, r5, lr
 800a318:	f04f 0401 	mov.w	r4, #1
 800a31c:	e8dc 1f4f 	ldrexb	r1, [ip]
 800a320:	e8cc 4f46 	strexb	r6, r4, [ip]
 800a324:	2e00      	cmp	r6, #0
 800a326:	d1f9      	bne.n	800a31c <__atomic_store_8+0x3c>
 800a328:	f3bf 8f5b 	dmb	ish
 800a32c:	b2c9      	uxtb	r1, r1
 800a32e:	2900      	cmp	r1, #0
 800a330:	d1f4      	bne.n	800a31c <__atomic_store_8+0x3c>
 800a332:	e9c0 2300 	strd	r2, r3, [r0]
 800a336:	f3bf 8f5b 	dmb	ish
 800a33a:	f805 100e 	strb.w	r1, [r5, lr]
 800a33e:	bd70      	pop	{r4, r5, r6, pc}
 800a340:	27d4eb2d 	.word	0x27d4eb2d
 800a344:	2000c700 	.word	0x2000c700
 800a348:	b21642c9 	.word	0xb21642c9

0800a34c <__atomic_exchange_8>:
 800a34c:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800a350:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 800a354:	4916      	ldr	r1, [pc, #88]	; (800a3b0 <__atomic_exchange_8+0x64>)
 800a356:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800a35a:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800a35e:	fb01 fc0c 	mul.w	ip, r1, ip
 800a362:	4914      	ldr	r1, [pc, #80]	; (800a3b4 <__atomic_exchange_8+0x68>)
 800a364:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800a368:	b570      	push	{r4, r5, r6, lr}
 800a36a:	4605      	mov	r5, r0
 800a36c:	fba1 010c 	umull	r0, r1, r1, ip
 800a370:	0909      	lsrs	r1, r1, #4
 800a372:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800a376:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800a37a:	4e0f      	ldr	r6, [pc, #60]	; (800a3b8 <__atomic_exchange_8+0x6c>)
 800a37c:	ebac 0c01 	sub.w	ip, ip, r1
 800a380:	eb06 010c 	add.w	r1, r6, ip
 800a384:	f04f 0e01 	mov.w	lr, #1
 800a388:	e8d1 4f4f 	ldrexb	r4, [r1]
 800a38c:	e8c1 ef40 	strexb	r0, lr, [r1]
 800a390:	2800      	cmp	r0, #0
 800a392:	d1f9      	bne.n	800a388 <__atomic_exchange_8+0x3c>
 800a394:	f3bf 8f5b 	dmb	ish
 800a398:	b2e4      	uxtb	r4, r4
 800a39a:	2c00      	cmp	r4, #0
 800a39c:	d1f4      	bne.n	800a388 <__atomic_exchange_8+0x3c>
 800a39e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a3a2:	e9c5 2300 	strd	r2, r3, [r5]
 800a3a6:	f3bf 8f5b 	dmb	ish
 800a3aa:	f806 400c 	strb.w	r4, [r6, ip]
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}
 800a3b0:	27d4eb2d 	.word	0x27d4eb2d
 800a3b4:	b21642c9 	.word	0xb21642c9
 800a3b8:	2000c700 	.word	0x2000c700

0800a3bc <rcutils_get_error_string>:
 800a3bc:	4b06      	ldr	r3, [pc, #24]	; (800a3d8 <rcutils_get_error_string+0x1c>)
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	b13b      	cbz	r3, 800a3d2 <rcutils_get_error_string+0x16>
 800a3c2:	4b06      	ldr	r3, [pc, #24]	; (800a3dc <rcutils_get_error_string+0x20>)
 800a3c4:	781a      	ldrb	r2, [r3, #0]
 800a3c6:	b90a      	cbnz	r2, 800a3cc <rcutils_get_error_string+0x10>
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	701a      	strb	r2, [r3, #0]
 800a3cc:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <rcutils_get_error_string+0x24>)
 800a3ce:	7818      	ldrb	r0, [r3, #0]
 800a3d0:	4770      	bx	lr
 800a3d2:	4b04      	ldr	r3, [pc, #16]	; (800a3e4 <rcutils_get_error_string+0x28>)
 800a3d4:	7818      	ldrb	r0, [r3, #0]
 800a3d6:	4770      	bx	lr
 800a3d8:	2000c717 	.word	0x2000c717
 800a3dc:	2000c729 	.word	0x2000c729
 800a3e0:	2000c728 	.word	0x2000c728
 800a3e4:	08016bac 	.word	0x08016bac

0800a3e8 <rcutils_reset_error>:
 800a3e8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800a408 <rcutils_reset_error+0x20>
 800a3ec:	4a08      	ldr	r2, [pc, #32]	; (800a410 <rcutils_reset_error+0x28>)
 800a3ee:	4809      	ldr	r0, [pc, #36]	; (800a414 <rcutils_reset_error+0x2c>)
 800a3f0:	4909      	ldr	r1, [pc, #36]	; (800a418 <rcutils_reset_error+0x30>)
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	8013      	strh	r3, [r2, #0]
 800a3f6:	ed82 7b02 	vstr	d7, [r2, #8]
 800a3fa:	4a08      	ldr	r2, [pc, #32]	; (800a41c <rcutils_reset_error+0x34>)
 800a3fc:	7003      	strb	r3, [r0, #0]
 800a3fe:	700b      	strb	r3, [r1, #0]
 800a400:	7013      	strb	r3, [r2, #0]
 800a402:	4770      	bx	lr
 800a404:	f3af 8000 	nop.w
	...
 800a410:	2000c718 	.word	0x2000c718
 800a414:	2000c729 	.word	0x2000c729
 800a418:	2000c728 	.word	0x2000c728
 800a41c:	2000c717 	.word	0x2000c717

0800a420 <rcutils_system_time_now>:
 800a420:	b318      	cbz	r0, 800a46a <rcutils_system_time_now+0x4a>
 800a422:	b570      	push	{r4, r5, r6, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	4604      	mov	r4, r0
 800a428:	4669      	mov	r1, sp
 800a42a:	2001      	movs	r0, #1
 800a42c:	f7f6 ffb0 	bl	8001390 <clock_gettime>
 800a430:	2800      	cmp	r0, #0
 800a432:	db17      	blt.n	800a464 <rcutils_system_time_now+0x44>
 800a434:	e9dd 3600 	ldrd	r3, r6, [sp]
 800a438:	2e00      	cmp	r6, #0
 800a43a:	db13      	blt.n	800a464 <rcutils_system_time_now+0x44>
 800a43c:	9902      	ldr	r1, [sp, #8]
 800a43e:	2900      	cmp	r1, #0
 800a440:	db0d      	blt.n	800a45e <rcutils_system_time_now+0x3e>
 800a442:	4d0b      	ldr	r5, [pc, #44]	; (800a470 <rcutils_system_time_now+0x50>)
 800a444:	fba3 3205 	umull	r3, r2, r3, r5
 800a448:	185b      	adds	r3, r3, r1
 800a44a:	fb05 2206 	mla	r2, r5, r6, r2
 800a44e:	f04f 0000 	mov.w	r0, #0
 800a452:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a456:	e9c4 3200 	strd	r3, r2, [r4]
 800a45a:	b004      	add	sp, #16
 800a45c:	bd70      	pop	{r4, r5, r6, pc}
 800a45e:	ea53 0206 	orrs.w	r2, r3, r6
 800a462:	d1ee      	bne.n	800a442 <rcutils_system_time_now+0x22>
 800a464:	2002      	movs	r0, #2
 800a466:	b004      	add	sp, #16
 800a468:	bd70      	pop	{r4, r5, r6, pc}
 800a46a:	200b      	movs	r0, #11
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	3b9aca00 	.word	0x3b9aca00

0800a474 <rcutils_steady_time_now>:
 800a474:	b318      	cbz	r0, 800a4be <rcutils_steady_time_now+0x4a>
 800a476:	b570      	push	{r4, r5, r6, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	4604      	mov	r4, r0
 800a47c:	4669      	mov	r1, sp
 800a47e:	2000      	movs	r0, #0
 800a480:	f7f6 ff86 	bl	8001390 <clock_gettime>
 800a484:	2800      	cmp	r0, #0
 800a486:	db17      	blt.n	800a4b8 <rcutils_steady_time_now+0x44>
 800a488:	e9dd 3600 	ldrd	r3, r6, [sp]
 800a48c:	2e00      	cmp	r6, #0
 800a48e:	db13      	blt.n	800a4b8 <rcutils_steady_time_now+0x44>
 800a490:	9902      	ldr	r1, [sp, #8]
 800a492:	2900      	cmp	r1, #0
 800a494:	db0d      	blt.n	800a4b2 <rcutils_steady_time_now+0x3e>
 800a496:	4d0b      	ldr	r5, [pc, #44]	; (800a4c4 <rcutils_steady_time_now+0x50>)
 800a498:	fba3 3205 	umull	r3, r2, r3, r5
 800a49c:	185b      	adds	r3, r3, r1
 800a49e:	fb05 2206 	mla	r2, r5, r6, r2
 800a4a2:	f04f 0000 	mov.w	r0, #0
 800a4a6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a4aa:	e9c4 3200 	strd	r3, r2, [r4]
 800a4ae:	b004      	add	sp, #16
 800a4b0:	bd70      	pop	{r4, r5, r6, pc}
 800a4b2:	ea53 0206 	orrs.w	r2, r3, r6
 800a4b6:	d1ee      	bne.n	800a496 <rcutils_steady_time_now+0x22>
 800a4b8:	2002      	movs	r0, #2
 800a4ba:	b004      	add	sp, #16
 800a4bc:	bd70      	pop	{r4, r5, r6, pc}
 800a4be:	200b      	movs	r0, #11
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	3b9aca00 	.word	0x3b9aca00

0800a4c8 <rmw_get_default_publisher_options>:
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	6002      	str	r2, [r0, #0]
 800a4cc:	7102      	strb	r2, [r0, #4]
 800a4ce:	4770      	bx	lr

0800a4d0 <rmw_uros_set_custom_transport>:
 800a4d0:	b470      	push	{r4, r5, r6}
 800a4d2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a4d6:	b162      	cbz	r2, 800a4f2 <rmw_uros_set_custom_transport+0x22>
 800a4d8:	b15b      	cbz	r3, 800a4f2 <rmw_uros_set_custom_transport+0x22>
 800a4da:	b155      	cbz	r5, 800a4f2 <rmw_uros_set_custom_transport+0x22>
 800a4dc:	b14e      	cbz	r6, 800a4f2 <rmw_uros_set_custom_transport+0x22>
 800a4de:	4c06      	ldr	r4, [pc, #24]	; (800a4f8 <rmw_uros_set_custom_transport+0x28>)
 800a4e0:	7020      	strb	r0, [r4, #0]
 800a4e2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a4e6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a4ea:	6166      	str	r6, [r4, #20]
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	bc70      	pop	{r4, r5, r6}
 800a4f0:	4770      	bx	lr
 800a4f2:	200b      	movs	r0, #11
 800a4f4:	bc70      	pop	{r4, r5, r6}
 800a4f6:	4770      	bx	lr
 800a4f8:	2000c72c 	.word	0x2000c72c

0800a4fc <flush_session>:
 800a4fc:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800a4fe:	f001 bd53 	b.w	800bfa8 <uxr_run_session_until_confirm_delivery>
 800a502:	bf00      	nop

0800a504 <rmw_publish>:
 800a504:	2800      	cmp	r0, #0
 800a506:	d053      	beq.n	800a5b0 <rmw_publish+0xac>
 800a508:	b570      	push	{r4, r5, r6, lr}
 800a50a:	460d      	mov	r5, r1
 800a50c:	b08e      	sub	sp, #56	; 0x38
 800a50e:	2900      	cmp	r1, #0
 800a510:	d04b      	beq.n	800a5aa <rmw_publish+0xa6>
 800a512:	4604      	mov	r4, r0
 800a514:	6800      	ldr	r0, [r0, #0]
 800a516:	f000 fced 	bl	800aef4 <is_uxrce_rmw_identifier_valid>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d045      	beq.n	800a5aa <rmw_publish+0xa6>
 800a51e:	6866      	ldr	r6, [r4, #4]
 800a520:	2e00      	cmp	r6, #0
 800a522:	d042      	beq.n	800a5aa <rmw_publish+0xa6>
 800a524:	69b4      	ldr	r4, [r6, #24]
 800a526:	4628      	mov	r0, r5
 800a528:	6923      	ldr	r3, [r4, #16]
 800a52a:	4798      	blx	r3
 800a52c:	69f3      	ldr	r3, [r6, #28]
 800a52e:	9005      	str	r0, [sp, #20]
 800a530:	b113      	cbz	r3, 800a538 <rmw_publish+0x34>
 800a532:	a805      	add	r0, sp, #20
 800a534:	4798      	blx	r3
 800a536:	9805      	ldr	r0, [sp, #20]
 800a538:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	9000      	str	r0, [sp, #0]
 800a540:	6972      	ldr	r2, [r6, #20]
 800a542:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800a544:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800a548:	ab06      	add	r3, sp, #24
 800a54a:	f002 fb19 	bl	800cb80 <uxr_prepare_output_stream>
 800a54e:	b1d8      	cbz	r0, 800a588 <rmw_publish+0x84>
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	a906      	add	r1, sp, #24
 800a554:	4628      	mov	r0, r5
 800a556:	4798      	blx	r3
 800a558:	6a33      	ldr	r3, [r6, #32]
 800a55a:	4604      	mov	r4, r0
 800a55c:	b10b      	cbz	r3, 800a562 <rmw_publish+0x5e>
 800a55e:	a806      	add	r0, sp, #24
 800a560:	4798      	blx	r3
 800a562:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800a566:	2b01      	cmp	r3, #1
 800a568:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a56c:	d022      	beq.n	800a5b4 <rmw_publish+0xb0>
 800a56e:	6918      	ldr	r0, [r3, #16]
 800a570:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800a572:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a576:	f001 fd17 	bl	800bfa8 <uxr_run_session_until_confirm_delivery>
 800a57a:	4020      	ands	r0, r4
 800a57c:	b2c4      	uxtb	r4, r0
 800a57e:	f084 0001 	eor.w	r0, r4, #1
 800a582:	b2c0      	uxtb	r0, r0
 800a584:	b00e      	add	sp, #56	; 0x38
 800a586:	bd70      	pop	{r4, r5, r6, pc}
 800a588:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a58c:	6918      	ldr	r0, [r3, #16]
 800a58e:	9b05      	ldr	r3, [sp, #20]
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	4b0b      	ldr	r3, [pc, #44]	; (800a5c0 <rmw_publish+0xbc>)
 800a594:	9301      	str	r3, [sp, #4]
 800a596:	9602      	str	r6, [sp, #8]
 800a598:	6972      	ldr	r2, [r6, #20]
 800a59a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800a59c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a5a0:	ab06      	add	r3, sp, #24
 800a5a2:	f002 fb1d 	bl	800cbe0 <uxr_prepare_output_stream_fragmented>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d1d2      	bne.n	800a550 <rmw_publish+0x4c>
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	b00e      	add	sp, #56	; 0x38
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
 800a5b0:	2001      	movs	r0, #1
 800a5b2:	4770      	bx	lr
 800a5b4:	6918      	ldr	r0, [r3, #16]
 800a5b6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a5ba:	f001 f935 	bl	800b828 <uxr_flash_output_streams>
 800a5be:	e7de      	b.n	800a57e <rmw_publish+0x7a>
 800a5c0:	0800a4fd 	.word	0x0800a4fd

0800a5c4 <rmw_create_publisher>:
 800a5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c8:	b087      	sub	sp, #28
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	f000 80cc 	beq.w	800a768 <rmw_create_publisher+0x1a4>
 800a5d0:	460e      	mov	r6, r1
 800a5d2:	2900      	cmp	r1, #0
 800a5d4:	f000 80c8 	beq.w	800a768 <rmw_create_publisher+0x1a4>
 800a5d8:	4604      	mov	r4, r0
 800a5da:	6800      	ldr	r0, [r0, #0]
 800a5dc:	4615      	mov	r5, r2
 800a5de:	4698      	mov	r8, r3
 800a5e0:	f000 fc88 	bl	800aef4 <is_uxrce_rmw_identifier_valid>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	f000 80bf 	beq.w	800a768 <rmw_create_publisher+0x1a4>
 800a5ea:	2d00      	cmp	r5, #0
 800a5ec:	f000 80bc 	beq.w	800a768 <rmw_create_publisher+0x1a4>
 800a5f0:	782b      	ldrb	r3, [r5, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 80b8 	beq.w	800a768 <rmw_create_publisher+0x1a4>
 800a5f8:	f1b8 0f00 	cmp.w	r8, #0
 800a5fc:	f000 80b4 	beq.w	800a768 <rmw_create_publisher+0x1a4>
 800a600:	485c      	ldr	r0, [pc, #368]	; (800a774 <rmw_create_publisher+0x1b0>)
 800a602:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a606:	f007 f87d 	bl	8011704 <get_memory>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	f000 80ac 	beq.w	800a768 <rmw_create_publisher+0x1a4>
 800a610:	6884      	ldr	r4, [r0, #8]
 800a612:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800a616:	f007 f8fb 	bl	8011810 <rmw_get_implementation_identifier>
 800a61a:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800a61e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800a622:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800a626:	4628      	mov	r0, r5
 800a628:	f7f5 fe3a 	bl	80002a0 <strlen>
 800a62c:	3001      	adds	r0, #1
 800a62e:	283c      	cmp	r0, #60	; 0x3c
 800a630:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800a634:	f200 8091 	bhi.w	800a75a <rmw_create_publisher+0x196>
 800a638:	4a4f      	ldr	r2, [pc, #316]	; (800a778 <rmw_create_publisher+0x1b4>)
 800a63a:	462b      	mov	r3, r5
 800a63c:	213c      	movs	r1, #60	; 0x3c
 800a63e:	4650      	mov	r0, sl
 800a640:	f00a ffea 	bl	8015618 <sniprintf>
 800a644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a648:	67e3      	str	r3, [r4, #124]	; 0x7c
 800a64a:	4641      	mov	r1, r8
 800a64c:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800a650:	2250      	movs	r2, #80	; 0x50
 800a652:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a656:	f00b f994 	bl	8015982 <memcpy>
 800a65a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800a65e:	4947      	ldr	r1, [pc, #284]	; (800a77c <rmw_create_publisher+0x1b8>)
 800a660:	2b02      	cmp	r3, #2
 800a662:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a666:	bf0c      	ite	eq
 800a668:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800a66c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800a670:	67a3      	str	r3, [r4, #120]	; 0x78
 800a672:	2300      	movs	r3, #0
 800a674:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a678:	4630      	mov	r0, r6
 800a67a:	f000 fc49 	bl	800af10 <get_message_typesupport_handle>
 800a67e:	2800      	cmp	r0, #0
 800a680:	d06b      	beq.n	800a75a <rmw_create_publisher+0x196>
 800a682:	6842      	ldr	r2, [r0, #4]
 800a684:	61a2      	str	r2, [r4, #24]
 800a686:	2a00      	cmp	r2, #0
 800a688:	d067      	beq.n	800a75a <rmw_create_publisher+0x196>
 800a68a:	4629      	mov	r1, r5
 800a68c:	4643      	mov	r3, r8
 800a68e:	4648      	mov	r0, r9
 800a690:	f007 fb26 	bl	8011ce0 <create_topic>
 800a694:	6260      	str	r0, [r4, #36]	; 0x24
 800a696:	2800      	cmp	r0, #0
 800a698:	d063      	beq.n	800a762 <rmw_create_publisher+0x19e>
 800a69a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a69e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6a2:	2103      	movs	r1, #3
 800a6a4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800a6a8:	1c42      	adds	r2, r0, #1
 800a6aa:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800a6ae:	f000 ff6d 	bl	800b58c <uxr_object_id>
 800a6b2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800a6b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6ba:	6120      	str	r0, [r4, #16]
 800a6bc:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800a6c0:	6910      	ldr	r0, [r2, #16]
 800a6c2:	2506      	movs	r5, #6
 800a6c4:	9500      	str	r5, [sp, #0]
 800a6c6:	6819      	ldr	r1, [r3, #0]
 800a6c8:	6922      	ldr	r2, [r4, #16]
 800a6ca:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a6ce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a6d2:	f000 fe0d 	bl	800b2f0 <uxr_buffer_create_publisher_bin>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a6dc:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800a6e0:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800a6e4:	f000 fb86 	bl	800adf4 <run_xrce_session>
 800a6e8:	b3b8      	cbz	r0, 800a75a <rmw_create_publisher+0x196>
 800a6ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f2:	2105      	movs	r1, #5
 800a6f4:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800a6f8:	1c42      	adds	r2, r0, #1
 800a6fa:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800a6fe:	f000 ff45 	bl	800b58c <uxr_object_id>
 800a702:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a706:	6160      	str	r0, [r4, #20]
 800a708:	691e      	ldr	r6, [r3, #16]
 800a70a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a70e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800a712:	f10d 0a10 	add.w	sl, sp, #16
 800a716:	4641      	mov	r1, r8
 800a718:	4650      	mov	r0, sl
 800a71a:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800a71e:	f000 fb85 	bl	800ae2c <convert_qos_profile>
 800a722:	9503      	str	r5, [sp, #12]
 800a724:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a728:	9001      	str	r0, [sp, #4]
 800a72a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a72e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800a738:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a73c:	f8d8 1000 	ldr.w	r1, [r8]
 800a740:	4630      	mov	r0, r6
 800a742:	f000 fe35 	bl	800b3b0 <uxr_buffer_create_datawriter_bin>
 800a746:	4602      	mov	r2, r0
 800a748:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a74c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800a750:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800a754:	f000 fb4e 	bl	800adf4 <run_xrce_session>
 800a758:	b938      	cbnz	r0, 800a76a <rmw_create_publisher+0x1a6>
 800a75a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a75c:	b108      	cbz	r0, 800a762 <rmw_create_publisher+0x19e>
 800a75e:	f000 fa47 	bl	800abf0 <rmw_uxrce_fini_topic_memory>
 800a762:	4638      	mov	r0, r7
 800a764:	f000 f9ec 	bl	800ab40 <rmw_uxrce_fini_publisher_memory>
 800a768:	2700      	movs	r7, #0
 800a76a:	4638      	mov	r0, r7
 800a76c:	b007      	add	sp, #28
 800a76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a772:	bf00      	nop
 800a774:	20011024 	.word	0x20011024
 800a778:	08016bc0 	.word	0x08016bc0
 800a77c:	08016940 	.word	0x08016940

0800a780 <rmw_publisher_get_actual_qos>:
 800a780:	b150      	cbz	r0, 800a798 <rmw_publisher_get_actual_qos+0x18>
 800a782:	b508      	push	{r3, lr}
 800a784:	460b      	mov	r3, r1
 800a786:	b149      	cbz	r1, 800a79c <rmw_publisher_get_actual_qos+0x1c>
 800a788:	6841      	ldr	r1, [r0, #4]
 800a78a:	2250      	movs	r2, #80	; 0x50
 800a78c:	3128      	adds	r1, #40	; 0x28
 800a78e:	4618      	mov	r0, r3
 800a790:	f00b f8f7 	bl	8015982 <memcpy>
 800a794:	2000      	movs	r0, #0
 800a796:	bd08      	pop	{r3, pc}
 800a798:	200b      	movs	r0, #11
 800a79a:	4770      	bx	lr
 800a79c:	200b      	movs	r0, #11
 800a79e:	bd08      	pop	{r3, pc}

0800a7a0 <rmw_destroy_publisher>:
 800a7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a2:	b128      	cbz	r0, 800a7b0 <rmw_destroy_publisher+0x10>
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	6800      	ldr	r0, [r0, #0]
 800a7a8:	460d      	mov	r5, r1
 800a7aa:	f000 fba3 	bl	800aef4 <is_uxrce_rmw_identifier_valid>
 800a7ae:	b910      	cbnz	r0, 800a7b6 <rmw_destroy_publisher+0x16>
 800a7b0:	2401      	movs	r4, #1
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b6:	6863      	ldr	r3, [r4, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d0f9      	beq.n	800a7b0 <rmw_destroy_publisher+0x10>
 800a7bc:	2d00      	cmp	r5, #0
 800a7be:	d0f7      	beq.n	800a7b0 <rmw_destroy_publisher+0x10>
 800a7c0:	6828      	ldr	r0, [r5, #0]
 800a7c2:	f000 fb97 	bl	800aef4 <is_uxrce_rmw_identifier_valid>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d0f2      	beq.n	800a7b0 <rmw_destroy_publisher+0x10>
 800a7ca:	686c      	ldr	r4, [r5, #4]
 800a7cc:	2c00      	cmp	r4, #0
 800a7ce:	d0ef      	beq.n	800a7b0 <rmw_destroy_publisher+0x10>
 800a7d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a7d2:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800a7d6:	f007 fad3 	bl	8011d80 <destroy_topic>
 800a7da:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a7de:	6962      	ldr	r2, [r4, #20]
 800a7e0:	6918      	ldr	r0, [r3, #16]
 800a7e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800a7e6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a7ea:	6819      	ldr	r1, [r3, #0]
 800a7ec:	f000 fccc 	bl	800b188 <uxr_buffer_delete_entity>
 800a7f0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a7f4:	6922      	ldr	r2, [r4, #16]
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	6809      	ldr	r1, [r1, #0]
 800a800:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800a804:	f000 fcc0 	bl	800b188 <uxr_buffer_delete_entity>
 800a808:	693e      	ldr	r6, [r7, #16]
 800a80a:	4622      	mov	r2, r4
 800a80c:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800a810:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800a814:	4604      	mov	r4, r0
 800a816:	4630      	mov	r0, r6
 800a818:	f000 faec 	bl	800adf4 <run_xrce_session>
 800a81c:	693e      	ldr	r6, [r7, #16]
 800a81e:	4622      	mov	r2, r4
 800a820:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800a824:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800a828:	4604      	mov	r4, r0
 800a82a:	4630      	mov	r0, r6
 800a82c:	f000 fae2 	bl	800adf4 <run_xrce_session>
 800a830:	b12c      	cbz	r4, 800a83e <rmw_destroy_publisher+0x9e>
 800a832:	b120      	cbz	r0, 800a83e <rmw_destroy_publisher+0x9e>
 800a834:	2400      	movs	r4, #0
 800a836:	4628      	mov	r0, r5
 800a838:	f000 f982 	bl	800ab40 <rmw_uxrce_fini_publisher_memory>
 800a83c:	e7b9      	b.n	800a7b2 <rmw_destroy_publisher+0x12>
 800a83e:	2402      	movs	r4, #2
 800a840:	e7f9      	b.n	800a836 <rmw_destroy_publisher+0x96>
 800a842:	bf00      	nop

0800a844 <rmw_uxrce_init_service_memory>:
 800a844:	b1e2      	cbz	r2, 800a880 <rmw_uxrce_init_service_memory+0x3c>
 800a846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a84a:	7b05      	ldrb	r5, [r0, #12]
 800a84c:	4606      	mov	r6, r0
 800a84e:	b9ad      	cbnz	r5, 800a87c <rmw_uxrce_init_service_memory+0x38>
 800a850:	23c8      	movs	r3, #200	; 0xc8
 800a852:	e9c0 5500 	strd	r5, r5, [r0]
 800a856:	6083      	str	r3, [r0, #8]
 800a858:	f240 1301 	movw	r3, #257	; 0x101
 800a85c:	4617      	mov	r7, r2
 800a85e:	8183      	strh	r3, [r0, #12]
 800a860:	460c      	mov	r4, r1
 800a862:	46a8      	mov	r8, r5
 800a864:	4621      	mov	r1, r4
 800a866:	4630      	mov	r0, r6
 800a868:	3501      	adds	r5, #1
 800a86a:	f006 ff5b 	bl	8011724 <put_memory>
 800a86e:	42af      	cmp	r7, r5
 800a870:	60a4      	str	r4, [r4, #8]
 800a872:	f884 800c 	strb.w	r8, [r4, #12]
 800a876:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800a87a:	d1f3      	bne.n	800a864 <rmw_uxrce_init_service_memory+0x20>
 800a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop

0800a884 <rmw_uxrce_init_client_memory>:
 800a884:	b1e2      	cbz	r2, 800a8c0 <rmw_uxrce_init_client_memory+0x3c>
 800a886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a88a:	7b05      	ldrb	r5, [r0, #12]
 800a88c:	4606      	mov	r6, r0
 800a88e:	b9ad      	cbnz	r5, 800a8bc <rmw_uxrce_init_client_memory+0x38>
 800a890:	23c8      	movs	r3, #200	; 0xc8
 800a892:	e9c0 5500 	strd	r5, r5, [r0]
 800a896:	6083      	str	r3, [r0, #8]
 800a898:	f240 1301 	movw	r3, #257	; 0x101
 800a89c:	4617      	mov	r7, r2
 800a89e:	8183      	strh	r3, [r0, #12]
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	46a8      	mov	r8, r5
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	3501      	adds	r5, #1
 800a8aa:	f006 ff3b 	bl	8011724 <put_memory>
 800a8ae:	42af      	cmp	r7, r5
 800a8b0:	60a4      	str	r4, [r4, #8]
 800a8b2:	f884 800c 	strb.w	r8, [r4, #12]
 800a8b6:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800a8ba:	d1f3      	bne.n	800a8a4 <rmw_uxrce_init_client_memory+0x20>
 800a8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop

0800a8c4 <rmw_uxrce_init_publisher_memory>:
 800a8c4:	b1e2      	cbz	r2, 800a900 <rmw_uxrce_init_publisher_memory+0x3c>
 800a8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ca:	7b05      	ldrb	r5, [r0, #12]
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	b9ad      	cbnz	r5, 800a8fc <rmw_uxrce_init_publisher_memory+0x38>
 800a8d0:	23d8      	movs	r3, #216	; 0xd8
 800a8d2:	e9c0 5500 	strd	r5, r5, [r0]
 800a8d6:	6083      	str	r3, [r0, #8]
 800a8d8:	f240 1301 	movw	r3, #257	; 0x101
 800a8dc:	4617      	mov	r7, r2
 800a8de:	8183      	strh	r3, [r0, #12]
 800a8e0:	460c      	mov	r4, r1
 800a8e2:	46a8      	mov	r8, r5
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	3501      	adds	r5, #1
 800a8ea:	f006 ff1b 	bl	8011724 <put_memory>
 800a8ee:	42af      	cmp	r7, r5
 800a8f0:	60a4      	str	r4, [r4, #8]
 800a8f2:	f884 800c 	strb.w	r8, [r4, #12]
 800a8f6:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800a8fa:	d1f3      	bne.n	800a8e4 <rmw_uxrce_init_publisher_memory+0x20>
 800a8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop

0800a904 <rmw_uxrce_init_subscription_memory>:
 800a904:	b1e2      	cbz	r2, 800a940 <rmw_uxrce_init_subscription_memory+0x3c>
 800a906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a90a:	7b05      	ldrb	r5, [r0, #12]
 800a90c:	4606      	mov	r6, r0
 800a90e:	b9ad      	cbnz	r5, 800a93c <rmw_uxrce_init_subscription_memory+0x38>
 800a910:	23d8      	movs	r3, #216	; 0xd8
 800a912:	e9c0 5500 	strd	r5, r5, [r0]
 800a916:	6083      	str	r3, [r0, #8]
 800a918:	f240 1301 	movw	r3, #257	; 0x101
 800a91c:	4617      	mov	r7, r2
 800a91e:	8183      	strh	r3, [r0, #12]
 800a920:	460c      	mov	r4, r1
 800a922:	46a8      	mov	r8, r5
 800a924:	4621      	mov	r1, r4
 800a926:	4630      	mov	r0, r6
 800a928:	3501      	adds	r5, #1
 800a92a:	f006 fefb 	bl	8011724 <put_memory>
 800a92e:	42af      	cmp	r7, r5
 800a930:	60a4      	str	r4, [r4, #8]
 800a932:	f884 800c 	strb.w	r8, [r4, #12]
 800a936:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800a93a:	d1f3      	bne.n	800a924 <rmw_uxrce_init_subscription_memory+0x20>
 800a93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop

0800a944 <rmw_uxrce_init_node_memory>:
 800a944:	b1e2      	cbz	r2, 800a980 <rmw_uxrce_init_node_memory+0x3c>
 800a946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a94a:	7b05      	ldrb	r5, [r0, #12]
 800a94c:	4606      	mov	r6, r0
 800a94e:	b9ad      	cbnz	r5, 800a97c <rmw_uxrce_init_node_memory+0x38>
 800a950:	23a4      	movs	r3, #164	; 0xa4
 800a952:	e9c0 5500 	strd	r5, r5, [r0]
 800a956:	6083      	str	r3, [r0, #8]
 800a958:	f240 1301 	movw	r3, #257	; 0x101
 800a95c:	4617      	mov	r7, r2
 800a95e:	8183      	strh	r3, [r0, #12]
 800a960:	460c      	mov	r4, r1
 800a962:	46a8      	mov	r8, r5
 800a964:	4621      	mov	r1, r4
 800a966:	4630      	mov	r0, r6
 800a968:	3501      	adds	r5, #1
 800a96a:	f006 fedb 	bl	8011724 <put_memory>
 800a96e:	42af      	cmp	r7, r5
 800a970:	60a4      	str	r4, [r4, #8]
 800a972:	f884 800c 	strb.w	r8, [r4, #12]
 800a976:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800a97a:	d1f3      	bne.n	800a964 <rmw_uxrce_init_node_memory+0x20>
 800a97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop

0800a984 <rmw_uxrce_init_session_memory>:
 800a984:	b1ea      	cbz	r2, 800a9c2 <rmw_uxrce_init_session_memory+0x3e>
 800a986:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a98a:	7b05      	ldrb	r5, [r0, #12]
 800a98c:	4606      	mov	r6, r0
 800a98e:	b9b5      	cbnz	r5, 800a9be <rmw_uxrce_init_session_memory+0x3a>
 800a990:	e9c0 5500 	strd	r5, r5, [r0]
 800a994:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800a998:	f240 1301 	movw	r3, #257	; 0x101
 800a99c:	4617      	mov	r7, r2
 800a99e:	f8c0 8008 	str.w	r8, [r0, #8]
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	8183      	strh	r3, [r0, #12]
 800a9a6:	46a9      	mov	r9, r5
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	3501      	adds	r5, #1
 800a9ae:	f006 feb9 	bl	8011724 <put_memory>
 800a9b2:	42af      	cmp	r7, r5
 800a9b4:	60a4      	str	r4, [r4, #8]
 800a9b6:	f884 900c 	strb.w	r9, [r4, #12]
 800a9ba:	4444      	add	r4, r8
 800a9bc:	d1f4      	bne.n	800a9a8 <rmw_uxrce_init_session_memory+0x24>
 800a9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9c2:	4770      	bx	lr

0800a9c4 <rmw_uxrce_init_topic_memory>:
 800a9c4:	b1e2      	cbz	r2, 800aa00 <rmw_uxrce_init_topic_memory+0x3c>
 800a9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ca:	7b05      	ldrb	r5, [r0, #12]
 800a9cc:	4606      	mov	r6, r0
 800a9ce:	b9ad      	cbnz	r5, 800a9fc <rmw_uxrce_init_topic_memory+0x38>
 800a9d0:	231c      	movs	r3, #28
 800a9d2:	e9c0 5500 	strd	r5, r5, [r0]
 800a9d6:	6083      	str	r3, [r0, #8]
 800a9d8:	f240 1301 	movw	r3, #257	; 0x101
 800a9dc:	4617      	mov	r7, r2
 800a9de:	8183      	strh	r3, [r0, #12]
 800a9e0:	460c      	mov	r4, r1
 800a9e2:	46a8      	mov	r8, r5
 800a9e4:	4621      	mov	r1, r4
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	3501      	adds	r5, #1
 800a9ea:	f006 fe9b 	bl	8011724 <put_memory>
 800a9ee:	42af      	cmp	r7, r5
 800a9f0:	60a4      	str	r4, [r4, #8]
 800a9f2:	f884 800c 	strb.w	r8, [r4, #12]
 800a9f6:	f104 041c 	add.w	r4, r4, #28
 800a9fa:	d1f3      	bne.n	800a9e4 <rmw_uxrce_init_topic_memory+0x20>
 800a9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop

0800aa04 <rmw_uxrce_init_static_input_buffer_memory>:
 800aa04:	b1ea      	cbz	r2, 800aa42 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800aa06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0a:	7b05      	ldrb	r5, [r0, #12]
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	b9b5      	cbnz	r5, 800aa3e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800aa10:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800aa14:	e9c0 5500 	strd	r5, r5, [r0]
 800aa18:	6083      	str	r3, [r0, #8]
 800aa1a:	f240 1301 	movw	r3, #257	; 0x101
 800aa1e:	4617      	mov	r7, r2
 800aa20:	8183      	strh	r3, [r0, #12]
 800aa22:	460c      	mov	r4, r1
 800aa24:	46a8      	mov	r8, r5
 800aa26:	4621      	mov	r1, r4
 800aa28:	4630      	mov	r0, r6
 800aa2a:	3501      	adds	r5, #1
 800aa2c:	f006 fe7a 	bl	8011724 <put_memory>
 800aa30:	42af      	cmp	r7, r5
 800aa32:	60a4      	str	r4, [r4, #8]
 800aa34:	f884 800c 	strb.w	r8, [r4, #12]
 800aa38:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800aa3c:	d1f3      	bne.n	800aa26 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800aa3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa42:	4770      	bx	lr

0800aa44 <rmw_uxrce_init_init_options_impl_memory>:
 800aa44:	b1e2      	cbz	r2, 800aa80 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800aa46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4a:	7b05      	ldrb	r5, [r0, #12]
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	b9ad      	cbnz	r5, 800aa7c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800aa50:	232c      	movs	r3, #44	; 0x2c
 800aa52:	e9c0 5500 	strd	r5, r5, [r0]
 800aa56:	6083      	str	r3, [r0, #8]
 800aa58:	f240 1301 	movw	r3, #257	; 0x101
 800aa5c:	4617      	mov	r7, r2
 800aa5e:	8183      	strh	r3, [r0, #12]
 800aa60:	460c      	mov	r4, r1
 800aa62:	46a8      	mov	r8, r5
 800aa64:	4621      	mov	r1, r4
 800aa66:	4630      	mov	r0, r6
 800aa68:	3501      	adds	r5, #1
 800aa6a:	f006 fe5b 	bl	8011724 <put_memory>
 800aa6e:	42af      	cmp	r7, r5
 800aa70:	60a4      	str	r4, [r4, #8]
 800aa72:	f884 800c 	strb.w	r8, [r4, #12]
 800aa76:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800aa7a:	d1f3      	bne.n	800aa64 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800aa7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop

0800aa84 <rmw_uxrce_init_wait_set_memory>:
 800aa84:	b1e2      	cbz	r2, 800aac0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800aa86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8a:	7b05      	ldrb	r5, [r0, #12]
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	b9ad      	cbnz	r5, 800aabc <rmw_uxrce_init_wait_set_memory+0x38>
 800aa90:	231c      	movs	r3, #28
 800aa92:	e9c0 5500 	strd	r5, r5, [r0]
 800aa96:	6083      	str	r3, [r0, #8]
 800aa98:	f240 1301 	movw	r3, #257	; 0x101
 800aa9c:	4617      	mov	r7, r2
 800aa9e:	8183      	strh	r3, [r0, #12]
 800aaa0:	460c      	mov	r4, r1
 800aaa2:	46a8      	mov	r8, r5
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	3501      	adds	r5, #1
 800aaaa:	f006 fe3b 	bl	8011724 <put_memory>
 800aaae:	42af      	cmp	r7, r5
 800aab0:	60a4      	str	r4, [r4, #8]
 800aab2:	f884 800c 	strb.w	r8, [r4, #12]
 800aab6:	f104 041c 	add.w	r4, r4, #28
 800aaba:	d1f3      	bne.n	800aaa4 <rmw_uxrce_init_wait_set_memory+0x20>
 800aabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop

0800aac4 <rmw_uxrce_init_guard_condition_memory>:
 800aac4:	b1e2      	cbz	r2, 800ab00 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800aac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaca:	7b05      	ldrb	r5, [r0, #12]
 800aacc:	4606      	mov	r6, r0
 800aace:	b9ad      	cbnz	r5, 800aafc <rmw_uxrce_init_guard_condition_memory+0x38>
 800aad0:	2320      	movs	r3, #32
 800aad2:	e9c0 5500 	strd	r5, r5, [r0]
 800aad6:	6083      	str	r3, [r0, #8]
 800aad8:	f240 1301 	movw	r3, #257	; 0x101
 800aadc:	4617      	mov	r7, r2
 800aade:	8183      	strh	r3, [r0, #12]
 800aae0:	460c      	mov	r4, r1
 800aae2:	46a8      	mov	r8, r5
 800aae4:	4621      	mov	r1, r4
 800aae6:	4630      	mov	r0, r6
 800aae8:	3501      	adds	r5, #1
 800aaea:	f006 fe1b 	bl	8011724 <put_memory>
 800aaee:	42af      	cmp	r7, r5
 800aaf0:	60a4      	str	r4, [r4, #8]
 800aaf2:	f884 800c 	strb.w	r8, [r4, #12]
 800aaf6:	f104 0420 	add.w	r4, r4, #32
 800aafa:	d1f3      	bne.n	800aae4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800aafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop

0800ab04 <rmw_uxrce_fini_session_memory>:
 800ab04:	4601      	mov	r1, r0
 800ab06:	4801      	ldr	r0, [pc, #4]	; (800ab0c <rmw_uxrce_fini_session_memory+0x8>)
 800ab08:	f006 be0c 	b.w	8011724 <put_memory>
 800ab0c:	20011044 	.word	0x20011044

0800ab10 <rmw_uxrce_fini_node_memory>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4604      	mov	r4, r0
 800ab14:	6800      	ldr	r0, [r0, #0]
 800ab16:	b128      	cbz	r0, 800ab24 <rmw_uxrce_fini_node_memory+0x14>
 800ab18:	4b07      	ldr	r3, [pc, #28]	; (800ab38 <rmw_uxrce_fini_node_memory+0x28>)
 800ab1a:	6819      	ldr	r1, [r3, #0]
 800ab1c:	f7f5 fb60 	bl	80001e0 <strcmp>
 800ab20:	b940      	cbnz	r0, 800ab34 <rmw_uxrce_fini_node_memory+0x24>
 800ab22:	6020      	str	r0, [r4, #0]
 800ab24:	6861      	ldr	r1, [r4, #4]
 800ab26:	b129      	cbz	r1, 800ab34 <rmw_uxrce_fini_node_memory+0x24>
 800ab28:	2500      	movs	r5, #0
 800ab2a:	4804      	ldr	r0, [pc, #16]	; (800ab3c <rmw_uxrce_fini_node_memory+0x2c>)
 800ab2c:	610d      	str	r5, [r1, #16]
 800ab2e:	f006 fdf9 	bl	8011724 <put_memory>
 800ab32:	6065      	str	r5, [r4, #4]
 800ab34:	bd38      	pop	{r3, r4, r5, pc}
 800ab36:	bf00      	nop
 800ab38:	080173a4 	.word	0x080173a4
 800ab3c:	20011014 	.word	0x20011014

0800ab40 <rmw_uxrce_fini_publisher_memory>:
 800ab40:	b510      	push	{r4, lr}
 800ab42:	4604      	mov	r4, r0
 800ab44:	6800      	ldr	r0, [r0, #0]
 800ab46:	b128      	cbz	r0, 800ab54 <rmw_uxrce_fini_publisher_memory+0x14>
 800ab48:	4b06      	ldr	r3, [pc, #24]	; (800ab64 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ab4a:	6819      	ldr	r1, [r3, #0]
 800ab4c:	f7f5 fb48 	bl	80001e0 <strcmp>
 800ab50:	b938      	cbnz	r0, 800ab62 <rmw_uxrce_fini_publisher_memory+0x22>
 800ab52:	6020      	str	r0, [r4, #0]
 800ab54:	6861      	ldr	r1, [r4, #4]
 800ab56:	b121      	cbz	r1, 800ab62 <rmw_uxrce_fini_publisher_memory+0x22>
 800ab58:	4803      	ldr	r0, [pc, #12]	; (800ab68 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ab5a:	f006 fde3 	bl	8011724 <put_memory>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	6063      	str	r3, [r4, #4]
 800ab62:	bd10      	pop	{r4, pc}
 800ab64:	080173a4 	.word	0x080173a4
 800ab68:	20011024 	.word	0x20011024

0800ab6c <rmw_uxrce_fini_subscription_memory>:
 800ab6c:	b510      	push	{r4, lr}
 800ab6e:	4604      	mov	r4, r0
 800ab70:	6800      	ldr	r0, [r0, #0]
 800ab72:	b128      	cbz	r0, 800ab80 <rmw_uxrce_fini_subscription_memory+0x14>
 800ab74:	4b06      	ldr	r3, [pc, #24]	; (800ab90 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ab76:	6819      	ldr	r1, [r3, #0]
 800ab78:	f7f5 fb32 	bl	80001e0 <strcmp>
 800ab7c:	b938      	cbnz	r0, 800ab8e <rmw_uxrce_fini_subscription_memory+0x22>
 800ab7e:	6020      	str	r0, [r4, #0]
 800ab80:	6861      	ldr	r1, [r4, #4]
 800ab82:	b121      	cbz	r1, 800ab8e <rmw_uxrce_fini_subscription_memory+0x22>
 800ab84:	4803      	ldr	r0, [pc, #12]	; (800ab94 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ab86:	f006 fdcd 	bl	8011724 <put_memory>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	6063      	str	r3, [r4, #4]
 800ab8e:	bd10      	pop	{r4, pc}
 800ab90:	080173a4 	.word	0x080173a4
 800ab94:	20011064 	.word	0x20011064

0800ab98 <rmw_uxrce_fini_service_memory>:
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	6800      	ldr	r0, [r0, #0]
 800ab9e:	b128      	cbz	r0, 800abac <rmw_uxrce_fini_service_memory+0x14>
 800aba0:	4b06      	ldr	r3, [pc, #24]	; (800abbc <rmw_uxrce_fini_service_memory+0x24>)
 800aba2:	6819      	ldr	r1, [r3, #0]
 800aba4:	f7f5 fb1c 	bl	80001e0 <strcmp>
 800aba8:	b938      	cbnz	r0, 800abba <rmw_uxrce_fini_service_memory+0x22>
 800abaa:	6020      	str	r0, [r4, #0]
 800abac:	6861      	ldr	r1, [r4, #4]
 800abae:	b121      	cbz	r1, 800abba <rmw_uxrce_fini_service_memory+0x22>
 800abb0:	4803      	ldr	r0, [pc, #12]	; (800abc0 <rmw_uxrce_fini_service_memory+0x28>)
 800abb2:	f006 fdb7 	bl	8011724 <put_memory>
 800abb6:	2300      	movs	r3, #0
 800abb8:	6063      	str	r3, [r4, #4]
 800abba:	bd10      	pop	{r4, pc}
 800abbc:	080173a4 	.word	0x080173a4
 800abc0:	20011034 	.word	0x20011034

0800abc4 <rmw_uxrce_fini_client_memory>:
 800abc4:	b510      	push	{r4, lr}
 800abc6:	4604      	mov	r4, r0
 800abc8:	6800      	ldr	r0, [r0, #0]
 800abca:	b128      	cbz	r0, 800abd8 <rmw_uxrce_fini_client_memory+0x14>
 800abcc:	4b06      	ldr	r3, [pc, #24]	; (800abe8 <rmw_uxrce_fini_client_memory+0x24>)
 800abce:	6819      	ldr	r1, [r3, #0]
 800abd0:	f7f5 fb06 	bl	80001e0 <strcmp>
 800abd4:	b938      	cbnz	r0, 800abe6 <rmw_uxrce_fini_client_memory+0x22>
 800abd6:	6020      	str	r0, [r4, #0]
 800abd8:	6861      	ldr	r1, [r4, #4]
 800abda:	b121      	cbz	r1, 800abe6 <rmw_uxrce_fini_client_memory+0x22>
 800abdc:	4803      	ldr	r0, [pc, #12]	; (800abec <rmw_uxrce_fini_client_memory+0x28>)
 800abde:	f006 fda1 	bl	8011724 <put_memory>
 800abe2:	2300      	movs	r3, #0
 800abe4:	6063      	str	r3, [r4, #4]
 800abe6:	bd10      	pop	{r4, pc}
 800abe8:	080173a4 	.word	0x080173a4
 800abec:	2000c748 	.word	0x2000c748

0800abf0 <rmw_uxrce_fini_topic_memory>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	4604      	mov	r4, r0
 800abf4:	4621      	mov	r1, r4
 800abf6:	4803      	ldr	r0, [pc, #12]	; (800ac04 <rmw_uxrce_fini_topic_memory+0x14>)
 800abf8:	f006 fd94 	bl	8011724 <put_memory>
 800abfc:	2300      	movs	r3, #0
 800abfe:	61a3      	str	r3, [r4, #24]
 800ac00:	bd10      	pop	{r4, pc}
 800ac02:	bf00      	nop
 800ac04:	20011074 	.word	0x20011074

0800ac08 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ac08:	b082      	sub	sp, #8
 800ac0a:	b530      	push	{r4, r5, lr}
 800ac0c:	4925      	ldr	r1, [pc, #148]	; (800aca4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ac0e:	680d      	ldr	r5, [r1, #0]
 800ac10:	ac03      	add	r4, sp, #12
 800ac12:	e884 000c 	stmia.w	r4, {r2, r3}
 800ac16:	461c      	mov	r4, r3
 800ac18:	2d00      	cmp	r5, #0
 800ac1a:	d041      	beq.n	800aca0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ac1c:	462b      	mov	r3, r5
 800ac1e:	2100      	movs	r1, #0
 800ac20:	689a      	ldr	r2, [r3, #8]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800ac28:	4290      	cmp	r0, r2
 800ac2a:	bf08      	it	eq
 800ac2c:	3101      	addeq	r1, #1
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1f6      	bne.n	800ac20 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ac32:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d029      	beq.n	800ac8e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ac3a:	d907      	bls.n	800ac4c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ac3c:	2b03      	cmp	r3, #3
 800ac3e:	d005      	beq.n	800ac4c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ac40:	2100      	movs	r1, #0
 800ac42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac46:	4608      	mov	r0, r1
 800ac48:	b002      	add	sp, #8
 800ac4a:	4770      	bx	lr
 800ac4c:	b314      	cbz	r4, 800ac94 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ac4e:	428c      	cmp	r4, r1
 800ac50:	d820      	bhi.n	800ac94 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ac52:	2d00      	cmp	r5, #0
 800ac54:	d0f4      	beq.n	800ac40 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ac56:	2100      	movs	r1, #0
 800ac58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ac5c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800ac60:	e002      	b.n	800ac68 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800ac62:	686d      	ldr	r5, [r5, #4]
 800ac64:	2d00      	cmp	r5, #0
 800ac66:	d0ec      	beq.n	800ac42 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ac68:	68ab      	ldr	r3, [r5, #8]
 800ac6a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800ac6e:	4290      	cmp	r0, r2
 800ac70:	d1f7      	bne.n	800ac62 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ac72:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800ac76:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800ac7a:	4562      	cmp	r2, ip
 800ac7c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ac80:	eb73 0e04 	sbcs.w	lr, r3, r4
 800ac84:	daed      	bge.n	800ac62 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ac86:	4694      	mov	ip, r2
 800ac88:	461c      	mov	r4, r3
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	e7e9      	b.n	800ac62 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ac8e:	b10c      	cbz	r4, 800ac94 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ac90:	428c      	cmp	r4, r1
 800ac92:	d9d5      	bls.n	800ac40 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ac94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac98:	4802      	ldr	r0, [pc, #8]	; (800aca4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ac9a:	b002      	add	sp, #8
 800ac9c:	f006 bd32 	b.w	8011704 <get_memory>
 800aca0:	4629      	mov	r1, r5
 800aca2:	e7c6      	b.n	800ac32 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800aca4:	20011054 	.word	0x20011054

0800aca8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800aca8:	4b11      	ldr	r3, [pc, #68]	; (800acf0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	b530      	push	{r4, r5, lr}
 800acae:	b1e3      	cbz	r3, 800acea <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800acb0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800acb4:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800acb8:	2400      	movs	r4, #0
 800acba:	e001      	b.n	800acc0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	b193      	cbz	r3, 800ace6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800acc0:	689a      	ldr	r2, [r3, #8]
 800acc2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800acc6:	4288      	cmp	r0, r1
 800acc8:	d1f8      	bne.n	800acbc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800acca:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800acce:	f8d2 281c 	ldr.w	r2, [r2, #2076]	; 0x81c
 800acd2:	4571      	cmp	r1, lr
 800acd4:	eb72 050c 	sbcs.w	r5, r2, ip
 800acd8:	daf0      	bge.n	800acbc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800acda:	461c      	mov	r4, r3
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	468e      	mov	lr, r1
 800ace0:	4694      	mov	ip, r2
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1ec      	bne.n	800acc0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ace6:	4620      	mov	r0, r4
 800ace8:	bd30      	pop	{r4, r5, pc}
 800acea:	461c      	mov	r4, r3
 800acec:	4620      	mov	r0, r4
 800acee:	bd30      	pop	{r4, r5, pc}
 800acf0:	20011054 	.word	0x20011054
 800acf4:	00000000 	.word	0x00000000

0800acf8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	4b3c      	ldr	r3, [pc, #240]	; (800adf0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800acfe:	ed2d 8b06 	vpush	{d8-d10}
 800ad02:	681f      	ldr	r7, [r3, #0]
 800ad04:	b08d      	sub	sp, #52	; 0x34
 800ad06:	f007 fe6b 	bl	80129e0 <rmw_uros_epoch_nanos>
 800ad0a:	2f00      	cmp	r7, #0
 800ad0c:	d05d      	beq.n	800adca <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ad0e:	46b8      	mov	r8, r7
 800ad10:	ed9f 8b31 	vldr	d8, [pc, #196]	; 800add8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ad14:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ad18:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800ad1c:	2b04      	cmp	r3, #4
 800ad1e:	ed9f ab30 	vldr	d10, [pc, #192]	; 800ade0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ad22:	ed9f 9b31 	vldr	d9, [pc, #196]	; 800ade8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ad26:	4681      	mov	r9, r0
 800ad28:	468a      	mov	sl, r1
 800ad2a:	ac04      	add	r4, sp, #16
 800ad2c:	d03f      	beq.n	800adae <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ad2e:	2b05      	cmp	r3, #5
 800ad30:	d044      	beq.n	800adbc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d03b      	beq.n	800adae <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ad36:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ad3a:	ed8d ab06 	vstr	d10, [sp, #24]
 800ad3e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ad42:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800ad46:	ab08      	add	r3, sp, #32
 800ad48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad4a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ad4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ad52:	f006 fb0b 	bl	801136c <rmw_time_equal>
 800ad56:	b118      	cbz	r0, 800ad60 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ad58:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ad5c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ad60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ad64:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800ad68:	f8d5 781c 	ldr.w	r7, [r5, #2076]	; 0x81c
 800ad6c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ad70:	f006 fb50 	bl	8011414 <rmw_time_total_nsec>
 800ad74:	1830      	adds	r0, r6, r0
 800ad76:	eb47 0101 	adc.w	r1, r7, r1
 800ad7a:	4548      	cmp	r0, r9
 800ad7c:	eb71 030a 	sbcs.w	r3, r1, sl
 800ad80:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800ad84:	db05      	blt.n	800ad92 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800ad86:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800ad8a:	4591      	cmp	r9, r2
 800ad8c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800ad90:	da03      	bge.n	800ad9a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800ad92:	4817      	ldr	r0, [pc, #92]	; (800adf0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ad94:	4641      	mov	r1, r8
 800ad96:	f006 fcc5 	bl	8011724 <put_memory>
 800ad9a:	f1bb 0f00 	cmp.w	fp, #0
 800ad9e:	d014      	beq.n	800adca <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ada0:	46d8      	mov	r8, fp
 800ada2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ada6:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800adaa:	2b04      	cmp	r3, #4
 800adac:	d1bf      	bne.n	800ad2e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800adae:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800adb2:	3340      	adds	r3, #64	; 0x40
 800adb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800adb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800adba:	e7c0      	b.n	800ad3e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800adbc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800adc0:	3348      	adds	r3, #72	; 0x48
 800adc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800adc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800adc8:	e7b9      	b.n	800ad3e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800adca:	b00d      	add	sp, #52	; 0x34
 800adcc:	ecbd 8b06 	vpop	{d8-d10}
 800add0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add4:	f3af 8000 	nop.w
	...
 800ade0:	00000001 	.word	0x00000001
 800ade4:	00000000 	.word	0x00000000
 800ade8:	0000001e 	.word	0x0000001e
 800adec:	00000000 	.word	0x00000000
 800adf0:	20011054 	.word	0x20011054

0800adf4 <run_xrce_session>:
 800adf4:	b510      	push	{r4, lr}
 800adf6:	788c      	ldrb	r4, [r1, #2]
 800adf8:	b086      	sub	sp, #24
 800adfa:	2c01      	cmp	r4, #1
 800adfc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ae00:	d00c      	beq.n	800ae1c <run_xrce_session+0x28>
 800ae02:	4619      	mov	r1, r3
 800ae04:	2301      	movs	r3, #1
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	f10d 020e 	add.w	r2, sp, #14
 800ae0c:	f10d 0317 	add.w	r3, sp, #23
 800ae10:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ae14:	f001 f8ee 	bl	800bff4 <uxr_run_session_until_all_status>
 800ae18:	b006      	add	sp, #24
 800ae1a:	bd10      	pop	{r4, pc}
 800ae1c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ae20:	f000 fd02 	bl	800b828 <uxr_flash_output_streams>
 800ae24:	4620      	mov	r0, r4
 800ae26:	b006      	add	sp, #24
 800ae28:	bd10      	pop	{r4, pc}
 800ae2a:	bf00      	nop

0800ae2c <convert_qos_profile>:
 800ae2c:	7a4a      	ldrb	r2, [r1, #9]
 800ae2e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ae32:	2a02      	cmp	r2, #2
 800ae34:	bf18      	it	ne
 800ae36:	2200      	movne	r2, #0
 800ae38:	7002      	strb	r2, [r0, #0]
 800ae3a:	780a      	ldrb	r2, [r1, #0]
 800ae3c:	8889      	ldrh	r1, [r1, #4]
 800ae3e:	8081      	strh	r1, [r0, #4]
 800ae40:	f1ac 0c02 	sub.w	ip, ip, #2
 800ae44:	f1a2 0202 	sub.w	r2, r2, #2
 800ae48:	fabc fc8c 	clz	ip, ip
 800ae4c:	fab2 f282 	clz	r2, r2
 800ae50:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ae54:	0952      	lsrs	r2, r2, #5
 800ae56:	f880 c001 	strb.w	ip, [r0, #1]
 800ae5a:	7082      	strb	r2, [r0, #2]
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop

0800ae60 <generate_type_name>:
 800ae60:	b530      	push	{r4, r5, lr}
 800ae62:	2300      	movs	r3, #0
 800ae64:	700b      	strb	r3, [r1, #0]
 800ae66:	6803      	ldr	r3, [r0, #0]
 800ae68:	b087      	sub	sp, #28
 800ae6a:	4614      	mov	r4, r2
 800ae6c:	b1d3      	cbz	r3, 800aea4 <generate_type_name+0x44>
 800ae6e:	4a0f      	ldr	r2, [pc, #60]	; (800aeac <generate_type_name+0x4c>)
 800ae70:	4615      	mov	r5, r2
 800ae72:	9203      	str	r2, [sp, #12]
 800ae74:	9500      	str	r5, [sp, #0]
 800ae76:	6842      	ldr	r2, [r0, #4]
 800ae78:	480d      	ldr	r0, [pc, #52]	; (800aeb0 <generate_type_name+0x50>)
 800ae7a:	9001      	str	r0, [sp, #4]
 800ae7c:	4608      	mov	r0, r1
 800ae7e:	490d      	ldr	r1, [pc, #52]	; (800aeb4 <generate_type_name+0x54>)
 800ae80:	9204      	str	r2, [sp, #16]
 800ae82:	9105      	str	r1, [sp, #20]
 800ae84:	9102      	str	r1, [sp, #8]
 800ae86:	4a0c      	ldr	r2, [pc, #48]	; (800aeb8 <generate_type_name+0x58>)
 800ae88:	4621      	mov	r1, r4
 800ae8a:	f00a fbc5 	bl	8015618 <sniprintf>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	db05      	blt.n	800ae9e <generate_type_name+0x3e>
 800ae92:	4284      	cmp	r4, r0
 800ae94:	bfd4      	ite	le
 800ae96:	2000      	movle	r0, #0
 800ae98:	2001      	movgt	r0, #1
 800ae9a:	b007      	add	sp, #28
 800ae9c:	bd30      	pop	{r4, r5, pc}
 800ae9e:	2000      	movs	r0, #0
 800aea0:	b007      	add	sp, #28
 800aea2:	bd30      	pop	{r4, r5, pc}
 800aea4:	4b05      	ldr	r3, [pc, #20]	; (800aebc <generate_type_name+0x5c>)
 800aea6:	4a01      	ldr	r2, [pc, #4]	; (800aeac <generate_type_name+0x4c>)
 800aea8:	461d      	mov	r5, r3
 800aeaa:	e7e2      	b.n	800ae72 <generate_type_name+0x12>
 800aeac:	08016bb0 	.word	0x08016bb0
 800aeb0:	08016bc8 	.word	0x08016bc8
 800aeb4:	08016bc4 	.word	0x08016bc4
 800aeb8:	08016bb4 	.word	0x08016bb4
 800aebc:	0801717c 	.word	0x0801717c

0800aec0 <generate_topic_name>:
 800aec0:	b510      	push	{r4, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	4614      	mov	r4, r2
 800aec6:	9000      	str	r0, [sp, #0]
 800aec8:	4b08      	ldr	r3, [pc, #32]	; (800aeec <generate_topic_name+0x2c>)
 800aeca:	4a09      	ldr	r2, [pc, #36]	; (800aef0 <generate_topic_name+0x30>)
 800aecc:	4608      	mov	r0, r1
 800aece:	4621      	mov	r1, r4
 800aed0:	f00a fba2 	bl	8015618 <sniprintf>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	db05      	blt.n	800aee4 <generate_topic_name+0x24>
 800aed8:	4284      	cmp	r4, r0
 800aeda:	bfd4      	ite	le
 800aedc:	2000      	movle	r0, #0
 800aede:	2001      	movgt	r0, #1
 800aee0:	b002      	add	sp, #8
 800aee2:	bd10      	pop	{r4, pc}
 800aee4:	2000      	movs	r0, #0
 800aee6:	b002      	add	sp, #8
 800aee8:	bd10      	pop	{r4, pc}
 800aeea:	bf00      	nop
 800aeec:	08016bd4 	.word	0x08016bd4
 800aef0:	08016bcc 	.word	0x08016bcc

0800aef4 <is_uxrce_rmw_identifier_valid>:
 800aef4:	b510      	push	{r4, lr}
 800aef6:	4604      	mov	r4, r0
 800aef8:	b140      	cbz	r0, 800af0c <is_uxrce_rmw_identifier_valid+0x18>
 800aefa:	f006 fc89 	bl	8011810 <rmw_get_implementation_identifier>
 800aefe:	4601      	mov	r1, r0
 800af00:	4620      	mov	r0, r4
 800af02:	f7f5 f96d 	bl	80001e0 <strcmp>
 800af06:	fab0 f080 	clz	r0, r0
 800af0a:	0940      	lsrs	r0, r0, #5
 800af0c:	bd10      	pop	{r4, pc}
 800af0e:	bf00      	nop

0800af10 <get_message_typesupport_handle>:
 800af10:	6883      	ldr	r3, [r0, #8]
 800af12:	4718      	bx	r3

0800af14 <get_message_typesupport_handle_function>:
 800af14:	b510      	push	{r4, lr}
 800af16:	4604      	mov	r4, r0
 800af18:	6800      	ldr	r0, [r0, #0]
 800af1a:	f7f5 f961 	bl	80001e0 <strcmp>
 800af1e:	2800      	cmp	r0, #0
 800af20:	bf0c      	ite	eq
 800af22:	4620      	moveq	r0, r4
 800af24:	2000      	movne	r0, #0
 800af26:	bd10      	pop	{r4, pc}

0800af28 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800af28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2c:	6805      	ldr	r5, [r0, #0]
 800af2e:	4604      	mov	r4, r0
 800af30:	4628      	mov	r0, r5
 800af32:	460e      	mov	r6, r1
 800af34:	f7f5 f954 	bl	80001e0 <strcmp>
 800af38:	b1c8      	cbz	r0, 800af6e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800af3a:	4b11      	ldr	r3, [pc, #68]	; (800af80 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	429d      	cmp	r5, r3
 800af40:	d112      	bne.n	800af68 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800af42:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800af46:	f8d8 4000 	ldr.w	r4, [r8]
 800af4a:	b16c      	cbz	r4, 800af68 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800af4c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800af50:	2700      	movs	r7, #0
 800af52:	3d04      	subs	r5, #4
 800af54:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800af58:	4631      	mov	r1, r6
 800af5a:	f7f5 f941 	bl	80001e0 <strcmp>
 800af5e:	00bb      	lsls	r3, r7, #2
 800af60:	b140      	cbz	r0, 800af74 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800af62:	3701      	adds	r7, #1
 800af64:	42bc      	cmp	r4, r7
 800af66:	d1f5      	bne.n	800af54 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800af68:	2000      	movs	r0, #0
 800af6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af6e:	4620      	mov	r0, r4
 800af70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af74:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800af78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af7c:	58d3      	ldr	r3, [r2, r3]
 800af7e:	4718      	bx	r3
 800af80:	2000020c 	.word	0x2000020c

0800af84 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800af84:	4b04      	ldr	r3, [pc, #16]	; (800af98 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	b10a      	cbz	r2, 800af8e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800af8a:	4803      	ldr	r0, [pc, #12]	; (800af98 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800af8c:	4770      	bx	lr
 800af8e:	4a03      	ldr	r2, [pc, #12]	; (800af9c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800af90:	4801      	ldr	r0, [pc, #4]	; (800af98 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800af92:	6812      	ldr	r2, [r2, #0]
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	4770      	bx	lr
 800af98:	2000021c 	.word	0x2000021c
 800af9c:	2000020c 	.word	0x2000020c

0800afa0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800afa0:	4a02      	ldr	r2, [pc, #8]	; (800afac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800afa2:	4b03      	ldr	r3, [pc, #12]	; (800afb0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800afa4:	6812      	ldr	r2, [r2, #0]
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	2000020c 	.word	0x2000020c
 800afb0:	2000021c 	.word	0x2000021c

0800afb4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800afb4:	f007 bd4e 	b.w	8012a54 <std_msgs__msg__Int32__init>

0800afb8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800afb8:	f007 bd50 	b.w	8012a5c <std_msgs__msg__Int32__fini>

0800afbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800afbc:	4b04      	ldr	r3, [pc, #16]	; (800afd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	b10a      	cbz	r2, 800afc6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800afc2:	4803      	ldr	r0, [pc, #12]	; (800afd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800afc4:	4770      	bx	lr
 800afc6:	4a03      	ldr	r2, [pc, #12]	; (800afd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800afc8:	4801      	ldr	r0, [pc, #4]	; (800afd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800afca:	6812      	ldr	r2, [r2, #0]
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	4770      	bx	lr
 800afd0:	20000270 	.word	0x20000270
 800afd4:	20000210 	.word	0x20000210

0800afd8 <_Int32__max_serialized_size>:
 800afd8:	b508      	push	{r3, lr}
 800afda:	2104      	movs	r1, #4
 800afdc:	2000      	movs	r0, #0
 800afde:	f7fd fd9d 	bl	8008b1c <ucdr_alignment>
 800afe2:	3004      	adds	r0, #4
 800afe4:	bd08      	pop	{r3, pc}
 800afe6:	bf00      	nop

0800afe8 <_Int32__cdr_deserialize>:
 800afe8:	b109      	cbz	r1, 800afee <_Int32__cdr_deserialize+0x6>
 800afea:	f7fd bb19 	b.w	8008620 <ucdr_deserialize_int32_t>
 800afee:	4608      	mov	r0, r1
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop

0800aff4 <get_serialized_size_std_msgs__msg__Int32>:
 800aff4:	b138      	cbz	r0, 800b006 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800aff6:	b508      	push	{r3, lr}
 800aff8:	460b      	mov	r3, r1
 800affa:	4618      	mov	r0, r3
 800affc:	2104      	movs	r1, #4
 800affe:	f7fd fd8d 	bl	8008b1c <ucdr_alignment>
 800b002:	3004      	adds	r0, #4
 800b004:	bd08      	pop	{r3, pc}
 800b006:	4770      	bx	lr

0800b008 <_Int32__cdr_serialize>:
 800b008:	460a      	mov	r2, r1
 800b00a:	b118      	cbz	r0, 800b014 <_Int32__cdr_serialize+0xc>
 800b00c:	6801      	ldr	r1, [r0, #0]
 800b00e:	4610      	mov	r0, r2
 800b010:	f7fd ba6e 	b.w	80084f0 <ucdr_serialize_int32_t>
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop

0800b018 <_Int32__get_serialized_size>:
 800b018:	b130      	cbz	r0, 800b028 <_Int32__get_serialized_size+0x10>
 800b01a:	b508      	push	{r3, lr}
 800b01c:	2104      	movs	r1, #4
 800b01e:	2000      	movs	r0, #0
 800b020:	f7fd fd7c 	bl	8008b1c <ucdr_alignment>
 800b024:	3004      	adds	r0, #4
 800b026:	bd08      	pop	{r3, pc}
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop

0800b02c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b02c:	4800      	ldr	r0, [pc, #0]	; (800b030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800b02e:	4770      	bx	lr
 800b030:	20000288 	.word	0x20000288

0800b034 <geometry_msgs__msg__Twist__get_type_hash>:
 800b034:	4800      	ldr	r0, [pc, #0]	; (800b038 <geometry_msgs__msg__Twist__get_type_hash+0x4>)
 800b036:	4770      	bx	lr
 800b038:	200003ac 	.word	0x200003ac

0800b03c <geometry_msgs__msg__Twist__get_type_description>:
 800b03c:	b510      	push	{r4, lr}
 800b03e:	4c08      	ldr	r4, [pc, #32]	; (800b060 <geometry_msgs__msg__Twist__get_type_description+0x24>)
 800b040:	7820      	ldrb	r0, [r4, #0]
 800b042:	b108      	cbz	r0, 800b048 <geometry_msgs__msg__Twist__get_type_description+0xc>
 800b044:	4807      	ldr	r0, [pc, #28]	; (800b064 <geometry_msgs__msg__Twist__get_type_description+0x28>)
 800b046:	bd10      	pop	{r4, pc}
 800b048:	f000 f86c 	bl	800b124 <geometry_msgs__msg__Vector3__get_type_description>
 800b04c:	300c      	adds	r0, #12
 800b04e:	c807      	ldmia	r0, {r0, r1, r2}
 800b050:	4b05      	ldr	r3, [pc, #20]	; (800b068 <geometry_msgs__msg__Twist__get_type_description+0x2c>)
 800b052:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b056:	2301      	movs	r3, #1
 800b058:	4802      	ldr	r0, [pc, #8]	; (800b064 <geometry_msgs__msg__Twist__get_type_description+0x28>)
 800b05a:	7023      	strb	r3, [r4, #0]
 800b05c:	bd10      	pop	{r4, pc}
 800b05e:	bf00      	nop
 800b060:	20011095 	.word	0x20011095
 800b064:	08016d1c 	.word	0x08016d1c
 800b068:	2000036c 	.word	0x2000036c

0800b06c <geometry_msgs__msg__Twist__get_type_description_sources>:
 800b06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06e:	4e0f      	ldr	r6, [pc, #60]	; (800b0ac <geometry_msgs__msg__Twist__get_type_description_sources+0x40>)
 800b070:	7837      	ldrb	r7, [r6, #0]
 800b072:	b10f      	cbz	r7, 800b078 <geometry_msgs__msg__Twist__get_type_description_sources+0xc>
 800b074:	480e      	ldr	r0, [pc, #56]	; (800b0b0 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 800b076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b078:	4d0e      	ldr	r5, [pc, #56]	; (800b0b4 <geometry_msgs__msg__Twist__get_type_description_sources+0x48>)
 800b07a:	4c0f      	ldr	r4, [pc, #60]	; (800b0b8 <geometry_msgs__msg__Twist__get_type_description_sources+0x4c>)
 800b07c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b07e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	f844 3b04 	str.w	r3, [r4], #4
 800b08a:	4638      	mov	r0, r7
 800b08c:	f000 f856 	bl	800b13c <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 800b090:	2301      	movs	r3, #1
 800b092:	4684      	mov	ip, r0
 800b094:	7033      	strb	r3, [r6, #0]
 800b096:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b09a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b09c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b0a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0a2:	f8dc 3000 	ldr.w	r3, [ip]
 800b0a6:	4802      	ldr	r0, [pc, #8]	; (800b0b0 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ac:	20011094 	.word	0x20011094
 800b0b0:	08016d64 	.word	0x08016d64
 800b0b4:	08016d40 	.word	0x08016d40
 800b0b8:	20011098 	.word	0x20011098

0800b0bc <geometry_msgs__msg__Twist__init>:
 800b0bc:	b570      	push	{r4, r5, r6, lr}
 800b0be:	4605      	mov	r5, r0
 800b0c0:	b1a8      	cbz	r0, 800b0ee <geometry_msgs__msg__Twist__init+0x32>
 800b0c2:	f000 f85b 	bl	800b17c <geometry_msgs__msg__Vector3__init>
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	b140      	cbz	r0, 800b0dc <geometry_msgs__msg__Twist__init+0x20>
 800b0ca:	f105 0618 	add.w	r6, r5, #24
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	f000 f854 	bl	800b17c <geometry_msgs__msg__Vector3__init>
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	b168      	cbz	r0, 800b0f4 <geometry_msgs__msg__Twist__init+0x38>
 800b0d8:	4620      	mov	r0, r4
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	4628      	mov	r0, r5
 800b0de:	f000 f851 	bl	800b184 <geometry_msgs__msg__Vector3__fini>
 800b0e2:	f105 0018 	add.w	r0, r5, #24
 800b0e6:	f000 f84d 	bl	800b184 <geometry_msgs__msg__Vector3__fini>
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	bd70      	pop	{r4, r5, r6, pc}
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	f000 f845 	bl	800b184 <geometry_msgs__msg__Vector3__fini>
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f000 f842 	bl	800b184 <geometry_msgs__msg__Vector3__fini>
 800b100:	e7ea      	b.n	800b0d8 <geometry_msgs__msg__Twist__init+0x1c>
 800b102:	bf00      	nop

0800b104 <geometry_msgs__msg__Twist__fini>:
 800b104:	b148      	cbz	r0, 800b11a <geometry_msgs__msg__Twist__fini+0x16>
 800b106:	b510      	push	{r4, lr}
 800b108:	4604      	mov	r4, r0
 800b10a:	f000 f83b 	bl	800b184 <geometry_msgs__msg__Vector3__fini>
 800b10e:	f104 0018 	add.w	r0, r4, #24
 800b112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b116:	f000 b835 	b.w	800b184 <geometry_msgs__msg__Vector3__fini>
 800b11a:	4770      	bx	lr

0800b11c <geometry_msgs__msg__Vector3__get_type_hash>:
 800b11c:	4800      	ldr	r0, [pc, #0]	; (800b120 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 800b11e:	4770      	bx	lr
 800b120:	20000548 	.word	0x20000548

0800b124 <geometry_msgs__msg__Vector3__get_type_description>:
 800b124:	4b03      	ldr	r3, [pc, #12]	; (800b134 <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 800b126:	781a      	ldrb	r2, [r3, #0]
 800b128:	b90a      	cbnz	r2, 800b12e <geometry_msgs__msg__Vector3__get_type_description+0xa>
 800b12a:	2201      	movs	r2, #1
 800b12c:	701a      	strb	r2, [r3, #0]
 800b12e:	4802      	ldr	r0, [pc, #8]	; (800b138 <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	200110e1 	.word	0x200110e1
 800b138:	08016d70 	.word	0x08016d70

0800b13c <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 800b13c:	4800      	ldr	r0, [pc, #0]	; (800b140 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 800b13e:	4770      	bx	lr
 800b140:	08016d94 	.word	0x08016d94

0800b144 <geometry_msgs__msg__Vector3__get_type_description_sources>:
 800b144:	4b09      	ldr	r3, [pc, #36]	; (800b16c <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 800b146:	781a      	ldrb	r2, [r3, #0]
 800b148:	b96a      	cbnz	r2, 800b166 <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 800b14a:	b430      	push	{r4, r5}
 800b14c:	4d08      	ldr	r5, [pc, #32]	; (800b170 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 800b14e:	4c09      	ldr	r4, [pc, #36]	; (800b174 <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 800b150:	2201      	movs	r2, #1
 800b152:	701a      	strb	r2, [r3, #0]
 800b154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b15a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	4806      	ldr	r0, [pc, #24]	; (800b178 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	bc30      	pop	{r4, r5}
 800b164:	4770      	bx	lr
 800b166:	4804      	ldr	r0, [pc, #16]	; (800b178 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	200110e0 	.word	0x200110e0
 800b170:	08016d94 	.word	0x08016d94
 800b174:	200110e4 	.word	0x200110e4
 800b178:	08016db8 	.word	0x08016db8

0800b17c <geometry_msgs__msg__Vector3__init>:
 800b17c:	3800      	subs	r0, #0
 800b17e:	bf18      	it	ne
 800b180:	2001      	movne	r0, #1
 800b182:	4770      	bx	lr

0800b184 <geometry_msgs__msg__Vector3__fini>:
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop

0800b188 <uxr_buffer_delete_entity>:
 800b188:	b510      	push	{r4, lr}
 800b18a:	2300      	movs	r3, #0
 800b18c:	b08e      	sub	sp, #56	; 0x38
 800b18e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b192:	2303      	movs	r3, #3
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	2204      	movs	r2, #4
 800b198:	ab06      	add	r3, sp, #24
 800b19a:	4604      	mov	r4, r0
 800b19c:	9103      	str	r1, [sp, #12]
 800b19e:	f001 f951 	bl	800c444 <uxr_prepare_stream_to_write_submessage>
 800b1a2:	b918      	cbnz	r0, 800b1ac <uxr_buffer_delete_entity+0x24>
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	b00e      	add	sp, #56	; 0x38
 800b1aa:	bd10      	pop	{r4, pc}
 800b1ac:	9902      	ldr	r1, [sp, #8]
 800b1ae:	aa05      	add	r2, sp, #20
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f001 fa7d 	bl	800c6b0 <uxr_init_base_object_request>
 800b1b6:	a905      	add	r1, sp, #20
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	a806      	add	r0, sp, #24
 800b1bc:	f002 fcce 	bl	800db5c <uxr_serialize_DELETE_Payload>
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	b00e      	add	sp, #56	; 0x38
 800b1c4:	bd10      	pop	{r4, pc}
 800b1c6:	bf00      	nop

0800b1c8 <uxr_common_create_entity>:
 800b1c8:	b510      	push	{r4, lr}
 800b1ca:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800b1ce:	b08c      	sub	sp, #48	; 0x30
 800b1d0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b1d4:	f1bc 0f01 	cmp.w	ip, #1
 800b1d8:	bf0c      	ite	eq
 800b1da:	f003 0201 	andeq.w	r2, r3, #1
 800b1de:	2200      	movne	r2, #0
 800b1e0:	330e      	adds	r3, #14
 800b1e2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800b1e6:	9101      	str	r1, [sp, #4]
 800b1e8:	441a      	add	r2, r3
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	9903      	ldr	r1, [sp, #12]
 800b1f0:	ab04      	add	r3, sp, #16
 800b1f2:	b292      	uxth	r2, r2
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	f001 f925 	bl	800c444 <uxr_prepare_stream_to_write_submessage>
 800b1fa:	b918      	cbnz	r0, 800b204 <uxr_common_create_entity+0x3c>
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	4620      	mov	r0, r4
 800b200:	b00c      	add	sp, #48	; 0x30
 800b202:	bd10      	pop	{r4, pc}
 800b204:	9902      	ldr	r1, [sp, #8]
 800b206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b208:	4620      	mov	r0, r4
 800b20a:	f001 fa51 	bl	800c6b0 <uxr_init_base_object_request>
 800b20e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b210:	4604      	mov	r4, r0
 800b212:	a804      	add	r0, sp, #16
 800b214:	f002 fbfe 	bl	800da14 <uxr_serialize_CREATE_Payload>
 800b218:	4620      	mov	r0, r4
 800b21a:	b00c      	add	sp, #48	; 0x30
 800b21c:	bd10      	pop	{r4, pc}
 800b21e:	bf00      	nop

0800b220 <uxr_buffer_create_participant_bin>:
 800b220:	b570      	push	{r4, r5, r6, lr}
 800b222:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800b226:	ac11      	add	r4, sp, #68	; 0x44
 800b228:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800b22c:	2303      	movs	r3, #3
 800b22e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b232:	7223      	strb	r3, [r4, #8]
 800b234:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800b236:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800b23a:	2201      	movs	r2, #1
 800b23c:	2100      	movs	r1, #0
 800b23e:	4605      	mov	r5, r0
 800b240:	7122      	strb	r2, [r4, #4]
 800b242:	f88d 1014 	strb.w	r1, [sp, #20]
 800b246:	b1cb      	cbz	r3, 800b27c <uxr_buffer_create_participant_bin+0x5c>
 800b248:	f88d 201c 	strb.w	r2, [sp, #28]
 800b24c:	9308      	str	r3, [sp, #32]
 800b24e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b252:	a915      	add	r1, sp, #84	; 0x54
 800b254:	a809      	add	r0, sp, #36	; 0x24
 800b256:	f7fd fc5d 	bl	8008b14 <ucdr_init_buffer>
 800b25a:	a905      	add	r1, sp, #20
 800b25c:	a809      	add	r0, sp, #36	; 0x24
 800b25e:	f001 ffbb 	bl	800d1d8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800b262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b264:	9600      	str	r6, [sp, #0]
 800b266:	9401      	str	r4, [sp, #4]
 800b268:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b26c:	60e3      	str	r3, [r4, #12]
 800b26e:	4628      	mov	r0, r5
 800b270:	b29b      	uxth	r3, r3
 800b272:	f7ff ffa9 	bl	800b1c8 <uxr_common_create_entity>
 800b276:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800b27a:	bd70      	pop	{r4, r5, r6, pc}
 800b27c:	f88d 301c 	strb.w	r3, [sp, #28]
 800b280:	e7e5      	b.n	800b24e <uxr_buffer_create_participant_bin+0x2e>
 800b282:	bf00      	nop

0800b284 <uxr_buffer_create_topic_bin>:
 800b284:	b570      	push	{r4, r5, r6, lr}
 800b286:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800b28a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b28e:	9105      	str	r1, [sp, #20]
 800b290:	4605      	mov	r5, r0
 800b292:	a997      	add	r1, sp, #604	; 0x25c
 800b294:	4618      	mov	r0, r3
 800b296:	2302      	movs	r3, #2
 800b298:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800b29c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800b2a0:	f000 f996 	bl	800b5d0 <uxr_object_id_to_raw>
 800b2a4:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800b2a6:	9306      	str	r3, [sp, #24]
 800b2a8:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800b2aa:	930a      	str	r3, [sp, #40]	; 0x28
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b2bc:	a917      	add	r1, sp, #92	; 0x5c
 800b2be:	2300      	movs	r3, #0
 800b2c0:	a80b      	add	r0, sp, #44	; 0x2c
 800b2c2:	f88d 301c 	strb.w	r3, [sp, #28]
 800b2c6:	f7fd fc25 	bl	8008b14 <ucdr_init_buffer>
 800b2ca:	a906      	add	r1, sp, #24
 800b2cc:	a80b      	add	r0, sp, #44	; 0x2c
 800b2ce:	f001 ffa5 	bl	800d21c <uxr_serialize_OBJK_Topic_Binary>
 800b2d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2d4:	9316      	str	r3, [sp, #88]	; 0x58
 800b2d6:	ac13      	add	r4, sp, #76	; 0x4c
 800b2d8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b2dc:	9600      	str	r6, [sp, #0]
 800b2de:	9401      	str	r4, [sp, #4]
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	f7ff ff70 	bl	800b1c8 <uxr_common_create_entity>
 800b2e8:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800b2ec:	bd70      	pop	{r4, r5, r6, pc}
 800b2ee:	bf00      	nop

0800b2f0 <uxr_buffer_create_publisher_bin>:
 800b2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2f2:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	9105      	str	r1, [sp, #20]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	2603      	movs	r6, #3
 800b2fe:	a992      	add	r1, sp, #584	; 0x248
 800b300:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b304:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800b308:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800b30c:	f000 f960 	bl	800b5d0 <uxr_object_id_to_raw>
 800b310:	2300      	movs	r3, #0
 800b312:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b316:	a912      	add	r1, sp, #72	; 0x48
 800b318:	a806      	add	r0, sp, #24
 800b31a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800b31e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800b322:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800b326:	f7fd fbf5 	bl	8008b14 <ucdr_init_buffer>
 800b32a:	a993      	add	r1, sp, #588	; 0x24c
 800b32c:	a806      	add	r0, sp, #24
 800b32e:	f002 f829 	bl	800d384 <uxr_serialize_OBJK_Publisher_Binary>
 800b332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b334:	9311      	str	r3, [sp, #68]	; 0x44
 800b336:	ac0e      	add	r4, sp, #56	; 0x38
 800b338:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b33c:	9700      	str	r7, [sp, #0]
 800b33e:	9401      	str	r4, [sp, #4]
 800b340:	b29b      	uxth	r3, r3
 800b342:	4628      	mov	r0, r5
 800b344:	f7ff ff40 	bl	800b1c8 <uxr_common_create_entity>
 800b348:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800b34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b34e:	bf00      	nop

0800b350 <uxr_buffer_create_subscriber_bin>:
 800b350:	b570      	push	{r4, r5, r6, lr}
 800b352:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 800b356:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b35a:	9105      	str	r1, [sp, #20]
 800b35c:	4605      	mov	r5, r0
 800b35e:	a992      	add	r1, sp, #584	; 0x248
 800b360:	4618      	mov	r0, r3
 800b362:	2304      	movs	r3, #4
 800b364:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 800b368:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800b36c:	f000 f930 	bl	800b5d0 <uxr_object_id_to_raw>
 800b370:	2300      	movs	r3, #0
 800b372:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b376:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800b37a:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800b37e:	a912      	add	r1, sp, #72	; 0x48
 800b380:	2303      	movs	r3, #3
 800b382:	a806      	add	r0, sp, #24
 800b384:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800b388:	f7fd fbc4 	bl	8008b14 <ucdr_init_buffer>
 800b38c:	a993      	add	r1, sp, #588	; 0x24c
 800b38e:	a806      	add	r0, sp, #24
 800b390:	f002 f8a8 	bl	800d4e4 <uxr_serialize_OBJK_Subscriber_Binary>
 800b394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b396:	9311      	str	r3, [sp, #68]	; 0x44
 800b398:	ac0e      	add	r4, sp, #56	; 0x38
 800b39a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b39e:	9600      	str	r6, [sp, #0]
 800b3a0:	9401      	str	r4, [sp, #4]
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	f7ff ff0f 	bl	800b1c8 <uxr_common_create_entity>
 800b3aa:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 800b3ae:	bd70      	pop	{r4, r5, r6, pc}

0800b3b0 <uxr_buffer_create_datawriter_bin>:
 800b3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b3b8:	ac1d      	add	r4, sp, #116	; 0x74
 800b3ba:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b3be:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800b3c2:	9105      	str	r1, [sp, #20]
 800b3c4:	4606      	mov	r6, r0
 800b3c6:	a9a1      	add	r1, sp, #644	; 0x284
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	2305      	movs	r3, #5
 800b3cc:	7123      	strb	r3, [r4, #4]
 800b3ce:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800b3d2:	2703      	movs	r7, #3
 800b3d4:	f000 f8fc 	bl	800b5d0 <uxr_object_id_to_raw>
 800b3d8:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800b3da:	7227      	strb	r7, [r4, #8]
 800b3dc:	a90e      	add	r1, sp, #56	; 0x38
 800b3de:	f000 f8f7 	bl	800b5d0 <uxr_object_id_to_raw>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800b3e8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800b3ec:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800b3f0:	3d00      	subs	r5, #0
 800b3f2:	bf18      	it	ne
 800b3f4:	2501      	movne	r5, #1
 800b3f6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800b3fa:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800b3fe:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800b402:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b406:	2301      	movs	r3, #1
 800b408:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800b40c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800b410:	bb8a      	cbnz	r2, 800b476 <uxr_buffer_create_datawriter_bin+0xc6>
 800b412:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b416:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800b41a:	f04f 0c13 	mov.w	ip, #19
 800b41e:	250b      	movs	r5, #11
 800b420:	2221      	movs	r2, #33	; 0x21
 800b422:	2111      	movs	r1, #17
 800b424:	2009      	movs	r0, #9
 800b426:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800b42a:	b923      	cbnz	r3, 800b436 <uxr_buffer_create_datawriter_bin+0x86>
 800b42c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800b430:	4672      	mov	r2, lr
 800b432:	4661      	mov	r1, ip
 800b434:	4628      	mov	r0, r5
 800b436:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d025      	beq.n	800b48a <uxr_buffer_create_datawriter_bin+0xda>
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d029      	beq.n	800b496 <uxr_buffer_create_datawriter_bin+0xe6>
 800b442:	b32b      	cbz	r3, 800b490 <uxr_buffer_create_datawriter_bin+0xe0>
 800b444:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b448:	a921      	add	r1, sp, #132	; 0x84
 800b44a:	a806      	add	r0, sp, #24
 800b44c:	f7fd fb62 	bl	8008b14 <ucdr_init_buffer>
 800b450:	a90e      	add	r1, sp, #56	; 0x38
 800b452:	a806      	add	r0, sp, #24
 800b454:	f002 f8f8 	bl	800d648 <uxr_serialize_OBJK_DataWriter_Binary>
 800b458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b45a:	f8cd 8000 	str.w	r8, [sp]
 800b45e:	9401      	str	r4, [sp, #4]
 800b460:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b464:	60e3      	str	r3, [r4, #12]
 800b466:	4630      	mov	r0, r6
 800b468:	b29b      	uxth	r3, r3
 800b46a:	f7ff fead 	bl	800b1c8 <uxr_common_create_entity>
 800b46e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b476:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800b47a:	f04f 0c12 	mov.w	ip, #18
 800b47e:	250a      	movs	r5, #10
 800b480:	2220      	movs	r2, #32
 800b482:	2110      	movs	r1, #16
 800b484:	2008      	movs	r0, #8
 800b486:	2702      	movs	r7, #2
 800b488:	e7cd      	b.n	800b426 <uxr_buffer_create_datawriter_bin+0x76>
 800b48a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800b48e:	e7d9      	b.n	800b444 <uxr_buffer_create_datawriter_bin+0x94>
 800b490:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800b494:	e7d6      	b.n	800b444 <uxr_buffer_create_datawriter_bin+0x94>
 800b496:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800b49a:	e7d3      	b.n	800b444 <uxr_buffer_create_datawriter_bin+0x94>

0800b49c <uxr_buffer_create_datareader_bin>:
 800b49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a0:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800b4a4:	ac1f      	add	r4, sp, #124	; 0x7c
 800b4a6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b4aa:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800b4ae:	9105      	str	r1, [sp, #20]
 800b4b0:	4606      	mov	r6, r0
 800b4b2:	a9a3      	add	r1, sp, #652	; 0x28c
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	2306      	movs	r3, #6
 800b4b8:	7123      	strb	r3, [r4, #4]
 800b4ba:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800b4be:	2703      	movs	r7, #3
 800b4c0:	f000 f886 	bl	800b5d0 <uxr_object_id_to_raw>
 800b4c4:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800b4c6:	7227      	strb	r7, [r4, #8]
 800b4c8:	a90e      	add	r1, sp, #56	; 0x38
 800b4ca:	f000 f881 	bl	800b5d0 <uxr_object_id_to_raw>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800b4d4:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 800b4d8:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800b4dc:	3d00      	subs	r5, #0
 800b4de:	bf18      	it	ne
 800b4e0:	2501      	movne	r5, #1
 800b4e2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800b4e6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800b4ea:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800b4ee:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800b4f2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800b4fc:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800b500:	bb8a      	cbnz	r2, 800b566 <uxr_buffer_create_datareader_bin+0xca>
 800b502:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b506:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800b50a:	f04f 0c13 	mov.w	ip, #19
 800b50e:	250b      	movs	r5, #11
 800b510:	2221      	movs	r2, #33	; 0x21
 800b512:	2111      	movs	r1, #17
 800b514:	2009      	movs	r0, #9
 800b516:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800b51a:	b923      	cbnz	r3, 800b526 <uxr_buffer_create_datareader_bin+0x8a>
 800b51c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800b520:	4672      	mov	r2, lr
 800b522:	4661      	mov	r1, ip
 800b524:	4628      	mov	r0, r5
 800b526:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d025      	beq.n	800b57a <uxr_buffer_create_datareader_bin+0xde>
 800b52e:	2b03      	cmp	r3, #3
 800b530:	d029      	beq.n	800b586 <uxr_buffer_create_datareader_bin+0xea>
 800b532:	b32b      	cbz	r3, 800b580 <uxr_buffer_create_datareader_bin+0xe4>
 800b534:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b538:	a923      	add	r1, sp, #140	; 0x8c
 800b53a:	a806      	add	r0, sp, #24
 800b53c:	f7fd faea 	bl	8008b14 <ucdr_init_buffer>
 800b540:	a90e      	add	r1, sp, #56	; 0x38
 800b542:	a806      	add	r0, sp, #24
 800b544:	f002 f844 	bl	800d5d0 <uxr_serialize_OBJK_DataReader_Binary>
 800b548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b54a:	f8cd 8000 	str.w	r8, [sp]
 800b54e:	9401      	str	r4, [sp, #4]
 800b550:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b554:	60e3      	str	r3, [r4, #12]
 800b556:	4630      	mov	r0, r6
 800b558:	b29b      	uxth	r3, r3
 800b55a:	f7ff fe35 	bl	800b1c8 <uxr_common_create_entity>
 800b55e:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800b562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b566:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800b56a:	f04f 0c12 	mov.w	ip, #18
 800b56e:	250a      	movs	r5, #10
 800b570:	2220      	movs	r2, #32
 800b572:	2110      	movs	r1, #16
 800b574:	2008      	movs	r0, #8
 800b576:	2702      	movs	r7, #2
 800b578:	e7cd      	b.n	800b516 <uxr_buffer_create_datareader_bin+0x7a>
 800b57a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800b57e:	e7d9      	b.n	800b534 <uxr_buffer_create_datareader_bin+0x98>
 800b580:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800b584:	e7d6      	b.n	800b534 <uxr_buffer_create_datareader_bin+0x98>
 800b586:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800b58a:	e7d3      	b.n	800b534 <uxr_buffer_create_datareader_bin+0x98>

0800b58c <uxr_object_id>:
 800b58c:	b082      	sub	sp, #8
 800b58e:	2300      	movs	r3, #0
 800b590:	f88d 1006 	strb.w	r1, [sp, #6]
 800b594:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b598:	f360 030f 	bfi	r3, r0, #0, #16
 800b59c:	f362 431f 	bfi	r3, r2, #16, #16
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	b002      	add	sp, #8
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop

0800b5a8 <uxr_object_id_from_raw>:
 800b5a8:	7843      	ldrb	r3, [r0, #1]
 800b5aa:	7801      	ldrb	r1, [r0, #0]
 800b5ac:	b082      	sub	sp, #8
 800b5ae:	f003 020f 	and.w	r2, r3, #15
 800b5b2:	f88d 2006 	strb.w	r2, [sp, #6]
 800b5b6:	091b      	lsrs	r3, r3, #4
 800b5b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b5bc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	f363 000f 	bfi	r0, r3, #0, #16
 800b5c6:	f362 401f 	bfi	r0, r2, #16, #16
 800b5ca:	b002      	add	sp, #8
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop

0800b5d0 <uxr_object_id_to_raw>:
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800b5dc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800b5e0:	f881 c000 	strb.w	ip, [r1]
 800b5e4:	7048      	strb	r0, [r1, #1]
 800b5e6:	b002      	add	sp, #8
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop

0800b5ec <on_get_fragmentation_info>:
 800b5ec:	b500      	push	{lr}
 800b5ee:	b08b      	sub	sp, #44	; 0x2c
 800b5f0:	4601      	mov	r1, r0
 800b5f2:	2204      	movs	r2, #4
 800b5f4:	a802      	add	r0, sp, #8
 800b5f6:	f7fd fa8d 	bl	8008b14 <ucdr_init_buffer>
 800b5fa:	f10d 0305 	add.w	r3, sp, #5
 800b5fe:	f10d 0206 	add.w	r2, sp, #6
 800b602:	a901      	add	r1, sp, #4
 800b604:	a802      	add	r0, sp, #8
 800b606:	f001 f9d5 	bl	800c9b4 <uxr_read_submessage_header>
 800b60a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b60e:	2b0d      	cmp	r3, #13
 800b610:	d003      	beq.n	800b61a <on_get_fragmentation_info+0x2e>
 800b612:	2000      	movs	r0, #0
 800b614:	b00b      	add	sp, #44	; 0x2c
 800b616:	f85d fb04 	ldr.w	pc, [sp], #4
 800b61a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b61e:	f013 0f02 	tst.w	r3, #2
 800b622:	bf14      	ite	ne
 800b624:	2002      	movne	r0, #2
 800b626:	2001      	moveq	r0, #1
 800b628:	b00b      	add	sp, #44	; 0x2c
 800b62a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b62e:	bf00      	nop

0800b630 <read_submessage_get_info>:
 800b630:	b570      	push	{r4, r5, r6, lr}
 800b632:	2500      	movs	r5, #0
 800b634:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800b638:	4604      	mov	r4, r0
 800b63a:	f44f 7224 	mov.w	r2, #656	; 0x290
 800b63e:	460e      	mov	r6, r1
 800b640:	a810      	add	r0, sp, #64	; 0x40
 800b642:	4629      	mov	r1, r5
 800b644:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800b648:	f00a f8c0 	bl	80157cc <memset>
 800b64c:	a903      	add	r1, sp, #12
 800b64e:	4630      	mov	r0, r6
 800b650:	f002 fa70 	bl	800db34 <uxr_deserialize_GET_INFO_Payload>
 800b654:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b658:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b65c:	4620      	mov	r0, r4
 800b65e:	f001 f81f 	bl	800c6a0 <uxr_session_header_offset>
 800b662:	462b      	mov	r3, r5
 800b664:	9000      	str	r0, [sp, #0]
 800b666:	220c      	movs	r2, #12
 800b668:	a905      	add	r1, sp, #20
 800b66a:	a808      	add	r0, sp, #32
 800b66c:	f7fd fa40 	bl	8008af0 <ucdr_init_buffer_origin_offset>
 800b670:	a910      	add	r1, sp, #64	; 0x40
 800b672:	a808      	add	r0, sp, #32
 800b674:	f002 fad0 	bl	800dc18 <uxr_serialize_INFO_Payload>
 800b678:	9b08      	ldr	r3, [sp, #32]
 800b67a:	462a      	mov	r2, r5
 800b67c:	4629      	mov	r1, r5
 800b67e:	4620      	mov	r0, r4
 800b680:	f000 ffb8 	bl	800c5f4 <uxr_stamp_session_header>
 800b684:	a808      	add	r0, sp, #32
 800b686:	f7fd fa71 	bl	8008b6c <ucdr_buffer_length>
 800b68a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b68c:	4602      	mov	r2, r0
 800b68e:	a905      	add	r1, sp, #20
 800b690:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b694:	47a0      	blx	r4
 800b696:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800b69a:	bd70      	pop	{r4, r5, r6, pc}

0800b69c <write_submessage_acknack.isra.0>:
 800b69c:	b570      	push	{r4, r5, r6, lr}
 800b69e:	b092      	sub	sp, #72	; 0x48
 800b6a0:	4605      	mov	r5, r0
 800b6a2:	460e      	mov	r6, r1
 800b6a4:	4614      	mov	r4, r2
 800b6a6:	f000 fffb 	bl	800c6a0 <uxr_session_header_offset>
 800b6aa:	a905      	add	r1, sp, #20
 800b6ac:	9000      	str	r0, [sp, #0]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	a80a      	add	r0, sp, #40	; 0x28
 800b6b2:	2211      	movs	r2, #17
 800b6b4:	f7fd fa1c 	bl	8008af0 <ucdr_init_buffer_origin_offset>
 800b6b8:	2218      	movs	r2, #24
 800b6ba:	fb02 5404 	mla	r4, r2, r4, r5
 800b6be:	2300      	movs	r3, #0
 800b6c0:	2205      	movs	r2, #5
 800b6c2:	3450      	adds	r4, #80	; 0x50
 800b6c4:	210a      	movs	r1, #10
 800b6c6:	a80a      	add	r0, sp, #40	; 0x28
 800b6c8:	f001 f95a 	bl	800c980 <uxr_buffer_submessage_header>
 800b6cc:	a903      	add	r1, sp, #12
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f007 fdc6 	bl	8013260 <uxr_compute_acknack>
 800b6d4:	ba40      	rev16	r0, r0
 800b6d6:	f8ad 000e 	strh.w	r0, [sp, #14]
 800b6da:	a903      	add	r1, sp, #12
 800b6dc:	a80a      	add	r0, sp, #40	; 0x28
 800b6de:	f88d 6010 	strb.w	r6, [sp, #16]
 800b6e2:	f002 fb09 	bl	800dcf8 <uxr_serialize_ACKNACK_Payload>
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ea:	4611      	mov	r1, r2
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	f000 ff81 	bl	800c5f4 <uxr_stamp_session_header>
 800b6f2:	a80a      	add	r0, sp, #40	; 0x28
 800b6f4:	f7fd fa3a 	bl	8008b6c <ucdr_buffer_length>
 800b6f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	a905      	add	r1, sp, #20
 800b6fe:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b702:	47a0      	blx	r4
 800b704:	b012      	add	sp, #72	; 0x48
 800b706:	bd70      	pop	{r4, r5, r6, pc}

0800b708 <uxr_init_session>:
 800b708:	b510      	push	{r4, lr}
 800b70a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800b740 <uxr_init_session+0x38>
 800b70e:	2300      	movs	r3, #0
 800b710:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800b714:	4604      	mov	r4, r0
 800b716:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800b71a:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800b71e:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800b722:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800b726:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800b72a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800b72e:	2181      	movs	r1, #129	; 0x81
 800b730:	f000 fecc 	bl	800c4cc <uxr_init_session_info>
 800b734:	f104 0008 	add.w	r0, r4, #8
 800b738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b73c:	f001 b83c 	b.w	800c7b8 <uxr_init_stream_storage>
	...

0800b748 <uxr_set_status_callback>:
 800b748:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop

0800b750 <uxr_set_topic_callback>:
 800b750:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop

0800b758 <uxr_set_request_callback>:
 800b758:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop

0800b760 <uxr_set_reply_callback>:
 800b760:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop

0800b768 <uxr_create_output_best_effort_stream>:
 800b768:	b510      	push	{r4, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	e9cd 2100 	strd	r2, r1, [sp]
 800b770:	4604      	mov	r4, r0
 800b772:	f000 ff95 	bl	800c6a0 <uxr_session_header_offset>
 800b776:	e9dd 2100 	ldrd	r2, r1, [sp]
 800b77a:	4603      	mov	r3, r0
 800b77c:	f104 0008 	add.w	r0, r4, #8
 800b780:	b004      	add	sp, #16
 800b782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b786:	f001 b861 	b.w	800c84c <uxr_add_output_best_effort_buffer>
 800b78a:	bf00      	nop

0800b78c <uxr_create_output_reliable_stream>:
 800b78c:	b510      	push	{r4, lr}
 800b78e:	b088      	sub	sp, #32
 800b790:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800b794:	4604      	mov	r4, r0
 800b796:	9303      	str	r3, [sp, #12]
 800b798:	f000 ff82 	bl	800c6a0 <uxr_session_header_offset>
 800b79c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b7a0:	9000      	str	r0, [sp, #0]
 800b7a2:	9905      	ldr	r1, [sp, #20]
 800b7a4:	f104 0008 	add.w	r0, r4, #8
 800b7a8:	f001 f864 	bl	800c874 <uxr_add_output_reliable_buffer>
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	b2c3      	uxtb	r3, r0
 800b7b0:	f363 0207 	bfi	r2, r3, #0, #8
 800b7b4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b7b8:	f363 220f 	bfi	r2, r3, #8, #8
 800b7bc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b7c0:	f363 4217 	bfi	r2, r3, #16, #8
 800b7c4:	0e03      	lsrs	r3, r0, #24
 800b7c6:	f363 621f 	bfi	r2, r3, #24, #8
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	b008      	add	sp, #32
 800b7ce:	bd10      	pop	{r4, pc}

0800b7d0 <uxr_create_input_best_effort_stream>:
 800b7d0:	b082      	sub	sp, #8
 800b7d2:	3008      	adds	r0, #8
 800b7d4:	b002      	add	sp, #8
 800b7d6:	f001 b867 	b.w	800c8a8 <uxr_add_input_best_effort_buffer>
 800b7da:	bf00      	nop

0800b7dc <uxr_create_input_reliable_stream>:
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	4c0b      	ldr	r4, [pc, #44]	; (800b810 <uxr_create_input_reliable_stream+0x34>)
 800b7e2:	9400      	str	r4, [sp, #0]
 800b7e4:	3008      	adds	r0, #8
 800b7e6:	f001 f875 	bl	800c8d4 <uxr_add_input_reliable_buffer>
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	b2c3      	uxtb	r3, r0
 800b7ee:	f363 0207 	bfi	r2, r3, #0, #8
 800b7f2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b7f6:	f363 220f 	bfi	r2, r3, #8, #8
 800b7fa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b7fe:	f363 4217 	bfi	r2, r3, #16, #8
 800b802:	0e03      	lsrs	r3, r0, #24
 800b804:	f363 621f 	bfi	r2, r3, #24, #8
 800b808:	4610      	mov	r0, r2
 800b80a:	b004      	add	sp, #16
 800b80c:	bd10      	pop	{r4, pc}
 800b80e:	bf00      	nop
 800b810:	0800b5ed 	.word	0x0800b5ed

0800b814 <uxr_epoch_nanos>:
 800b814:	b510      	push	{r4, lr}
 800b816:	4604      	mov	r4, r0
 800b818:	f001 f912 	bl	800ca40 <uxr_nanos>
 800b81c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800b820:	1ac0      	subs	r0, r0, r3
 800b822:	eb61 0102 	sbc.w	r1, r1, r2
 800b826:	bd10      	pop	{r4, pc}

0800b828 <uxr_flash_output_streams>:
 800b828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b82c:	7e03      	ldrb	r3, [r0, #24]
 800b82e:	b084      	sub	sp, #16
 800b830:	4604      	mov	r4, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d035      	beq.n	800b8a2 <uxr_flash_output_streams+0x7a>
 800b836:	f04f 0900 	mov.w	r9, #0
 800b83a:	4648      	mov	r0, r9
 800b83c:	f10d 0802 	add.w	r8, sp, #2
 800b840:	af03      	add	r7, sp, #12
 800b842:	ae02      	add	r6, sp, #8
 800b844:	e006      	b.n	800b854 <uxr_flash_output_streams+0x2c>
 800b846:	7e23      	ldrb	r3, [r4, #24]
 800b848:	f109 0901 	add.w	r9, r9, #1
 800b84c:	fa5f f089 	uxtb.w	r0, r9
 800b850:	4283      	cmp	r3, r0
 800b852:	d926      	bls.n	800b8a2 <uxr_flash_output_streams+0x7a>
 800b854:	2201      	movs	r2, #1
 800b856:	4611      	mov	r1, r2
 800b858:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800b85c:	f000 ff58 	bl	800c710 <uxr_stream_id>
 800b860:	3508      	adds	r5, #8
 800b862:	4684      	mov	ip, r0
 800b864:	4643      	mov	r3, r8
 800b866:	463a      	mov	r2, r7
 800b868:	4631      	mov	r1, r6
 800b86a:	4628      	mov	r0, r5
 800b86c:	f8cd c004 	str.w	ip, [sp, #4]
 800b870:	f007 fd7c 	bl	801336c <uxr_prepare_best_effort_buffer_to_send>
 800b874:	2800      	cmp	r0, #0
 800b876:	d0e6      	beq.n	800b846 <uxr_flash_output_streams+0x1e>
 800b878:	9b02      	ldr	r3, [sp, #8]
 800b87a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b87e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b882:	4620      	mov	r0, r4
 800b884:	f000 feb6 	bl	800c5f4 <uxr_stamp_session_header>
 800b888:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b88a:	9a03      	ldr	r2, [sp, #12]
 800b88c:	685d      	ldr	r5, [r3, #4]
 800b88e:	6818      	ldr	r0, [r3, #0]
 800b890:	9902      	ldr	r1, [sp, #8]
 800b892:	47a8      	blx	r5
 800b894:	f109 0901 	add.w	r9, r9, #1
 800b898:	7e23      	ldrb	r3, [r4, #24]
 800b89a:	fa5f f089 	uxtb.w	r0, r9
 800b89e:	4283      	cmp	r3, r0
 800b8a0:	d8d8      	bhi.n	800b854 <uxr_flash_output_streams+0x2c>
 800b8a2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800b8a6:	b38b      	cbz	r3, 800b90c <uxr_flash_output_streams+0xe4>
 800b8a8:	f04f 0900 	mov.w	r9, #0
 800b8ac:	f10d 0802 	add.w	r8, sp, #2
 800b8b0:	af03      	add	r7, sp, #12
 800b8b2:	ae02      	add	r6, sp, #8
 800b8b4:	4648      	mov	r0, r9
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	2102      	movs	r1, #2
 800b8ba:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800b8be:	f000 ff27 	bl	800c710 <uxr_stream_id>
 800b8c2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800b8c6:	3520      	adds	r5, #32
 800b8c8:	9001      	str	r0, [sp, #4]
 800b8ca:	e00d      	b.n	800b8e8 <uxr_flash_output_streams+0xc0>
 800b8cc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b8d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b8d4:	9b02      	ldr	r3, [sp, #8]
 800b8d6:	f000 fe8d 	bl	800c5f4 <uxr_stamp_session_header>
 800b8da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b8dc:	9a03      	ldr	r2, [sp, #12]
 800b8de:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800b8e2:	9902      	ldr	r1, [sp, #8]
 800b8e4:	6818      	ldr	r0, [r3, #0]
 800b8e6:	47d0      	blx	sl
 800b8e8:	4643      	mov	r3, r8
 800b8ea:	463a      	mov	r2, r7
 800b8ec:	4631      	mov	r1, r6
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f007 ff5a 	bl	80137a8 <uxr_prepare_next_reliable_buffer_to_send>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1e7      	bne.n	800b8cc <uxr_flash_output_streams+0xa4>
 800b8fc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800b900:	f109 0901 	add.w	r9, r9, #1
 800b904:	fa5f f089 	uxtb.w	r0, r9
 800b908:	4283      	cmp	r3, r0
 800b90a:	d8d4      	bhi.n	800b8b6 <uxr_flash_output_streams+0x8e>
 800b90c:	b004      	add	sp, #16
 800b90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b912:	bf00      	nop

0800b914 <read_submessage_info>:
 800b914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b918:	460d      	mov	r5, r1
 800b91a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800b91e:	4669      	mov	r1, sp
 800b920:	4607      	mov	r7, r0
 800b922:	4628      	mov	r0, r5
 800b924:	f002 f814 	bl	800d950 <uxr_deserialize_BaseObjectReply>
 800b928:	a902      	add	r1, sp, #8
 800b92a:	4604      	mov	r4, r0
 800b92c:	4628      	mov	r0, r5
 800b92e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800b932:	f7fb ff95 	bl	8007860 <ucdr_deserialize_bool>
 800b936:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b93a:	4004      	ands	r4, r0
 800b93c:	b2e4      	uxtb	r4, r4
 800b93e:	b95b      	cbnz	r3, 800b958 <read_submessage_info+0x44>
 800b940:	a987      	add	r1, sp, #540	; 0x21c
 800b942:	4628      	mov	r0, r5
 800b944:	f7fb ff8c 	bl	8007860 <ucdr_deserialize_bool>
 800b948:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800b94c:	4606      	mov	r6, r0
 800b94e:	b94b      	cbnz	r3, 800b964 <read_submessage_info+0x50>
 800b950:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800b954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b958:	a903      	add	r1, sp, #12
 800b95a:	4628      	mov	r0, r5
 800b95c:	f001 fea0 	bl	800d6a0 <uxr_deserialize_ObjectVariant>
 800b960:	4004      	ands	r4, r0
 800b962:	e7ed      	b.n	800b940 <read_submessage_info+0x2c>
 800b964:	a988      	add	r1, sp, #544	; 0x220
 800b966:	4628      	mov	r0, r5
 800b968:	f7fb ffa8 	bl	80078bc <ucdr_deserialize_uint8_t>
 800b96c:	4234      	tst	r4, r6
 800b96e:	d0ef      	beq.n	800b950 <read_submessage_info+0x3c>
 800b970:	2800      	cmp	r0, #0
 800b972:	d0ed      	beq.n	800b950 <read_submessage_info+0x3c>
 800b974:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800b978:	2b0d      	cmp	r3, #13
 800b97a:	d1e9      	bne.n	800b950 <read_submessage_info+0x3c>
 800b97c:	a98a      	add	r1, sp, #552	; 0x228
 800b97e:	4628      	mov	r0, r5
 800b980:	f7fc fd42 	bl	8008408 <ucdr_deserialize_int16_t>
 800b984:	b140      	cbz	r0, 800b998 <read_submessage_info+0x84>
 800b986:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	dd07      	ble.n	800b99e <read_submessage_info+0x8a>
 800b98e:	f1b8 0f00 	cmp.w	r8, #0
 800b992:	bf14      	ite	ne
 800b994:	2001      	movne	r0, #1
 800b996:	2002      	moveq	r0, #2
 800b998:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800b99c:	e7d8      	b.n	800b950 <read_submessage_info+0x3c>
 800b99e:	2000      	movs	r0, #0
 800b9a0:	e7fa      	b.n	800b998 <read_submessage_info+0x84>
 800b9a2:	bf00      	nop

0800b9a4 <read_submessage_list>:
 800b9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a8:	b097      	sub	sp, #92	; 0x5c
 800b9aa:	4ec1      	ldr	r6, [pc, #772]	; (800bcb0 <read_submessage_list+0x30c>)
 800b9ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	460d      	mov	r5, r1
 800b9b2:	f04f 0801 	mov.w	r8, #1
 800b9b6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800b9ba:	aa0c      	add	r2, sp, #48	; 0x30
 800b9bc:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	f000 fff7 	bl	800c9b4 <uxr_read_submessage_header>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	f000 813e 	beq.w	800bc48 <read_submessage_list+0x2a4>
 800b9cc:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800b9d0:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800b9d4:	3b02      	subs	r3, #2
 800b9d6:	2b0d      	cmp	r3, #13
 800b9d8:	d8ed      	bhi.n	800b9b6 <read_submessage_list+0x12>
 800b9da:	a101      	add	r1, pc, #4	; (adr r1, 800b9e0 <read_submessage_list+0x3c>)
 800b9dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9e0:	0800bc3f 	.word	0x0800bc3f
 800b9e4:	0800b9b7 	.word	0x0800b9b7
 800b9e8:	0800bc2f 	.word	0x0800bc2f
 800b9ec:	0800bbcd 	.word	0x0800bbcd
 800b9f0:	0800bbc3 	.word	0x0800bbc3
 800b9f4:	0800b9b7 	.word	0x0800b9b7
 800b9f8:	0800b9b7 	.word	0x0800b9b7
 800b9fc:	0800bb23 	.word	0x0800bb23
 800ba00:	0800bab3 	.word	0x0800bab3
 800ba04:	0800ba73 	.word	0x0800ba73
 800ba08:	0800b9b7 	.word	0x0800b9b7
 800ba0c:	0800b9b7 	.word	0x0800b9b7
 800ba10:	0800b9b7 	.word	0x0800b9b7
 800ba14:	0800ba19 	.word	0x0800ba19
 800ba18:	a910      	add	r1, sp, #64	; 0x40
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f002 f9bc 	bl	800dd98 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ba20:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800ba24:	f1b9 0f00 	cmp.w	r9, #0
 800ba28:	f000 8116 	beq.w	800bc58 <read_submessage_list+0x2b4>
 800ba2c:	f001 f808 	bl	800ca40 <uxr_nanos>
 800ba30:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ba38:	2100      	movs	r1, #0
 800ba3a:	468c      	mov	ip, r1
 800ba3c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ba40:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800ba44:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ba46:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800ba48:	468c      	mov	ip, r1
 800ba4a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ba4e:	46e2      	mov	sl, ip
 800ba50:	46bc      	mov	ip, r7
 800ba52:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800ba56:	fbc0 7106 	smlal	r7, r1, r0, r6
 800ba5a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800ba5e:	e9cd 7100 	strd	r7, r1, [sp]
 800ba62:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ba66:	9106      	str	r1, [sp, #24]
 800ba68:	4620      	mov	r0, r4
 800ba6a:	47c8      	blx	r9
 800ba6c:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800ba70:	e7a1      	b.n	800b9b6 <read_submessage_list+0x12>
 800ba72:	a910      	add	r1, sp, #64	; 0x40
 800ba74:	4628      	mov	r0, r5
 800ba76:	f002 f97d 	bl	800dd74 <uxr_deserialize_HEARTBEAT_Payload>
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800ba80:	f000 fe70 	bl	800c764 <uxr_stream_id_from_raw>
 800ba84:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ba88:	900f      	str	r0, [sp, #60]	; 0x3c
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	f104 0008 	add.w	r0, r4, #8
 800ba90:	f000 ff56 	bl	800c940 <uxr_get_input_reliable_stream>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d08e      	beq.n	800b9b6 <read_submessage_list+0x12>
 800ba98:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800ba9c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800baa0:	f007 fbd2 	bl	8013248 <uxr_process_heartbeat>
 800baa4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800baa8:	463a      	mov	r2, r7
 800baaa:	4620      	mov	r0, r4
 800baac:	f7ff fdf6 	bl	800b69c <write_submessage_acknack.isra.0>
 800bab0:	e781      	b.n	800b9b6 <read_submessage_list+0x12>
 800bab2:	a910      	add	r1, sp, #64	; 0x40
 800bab4:	4628      	mov	r0, r5
 800bab6:	f002 f935 	bl	800dd24 <uxr_deserialize_ACKNACK_Payload>
 800baba:	2100      	movs	r1, #0
 800babc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800bac0:	f000 fe50 	bl	800c764 <uxr_stream_id_from_raw>
 800bac4:	900d      	str	r0, [sp, #52]	; 0x34
 800bac6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800baca:	f104 0008 	add.w	r0, r4, #8
 800bace:	f000 ff23 	bl	800c918 <uxr_get_output_reliable_stream>
 800bad2:	4607      	mov	r7, r0
 800bad4:	2800      	cmp	r0, #0
 800bad6:	f43f af6e 	beq.w	800b9b6 <read_submessage_list+0x12>
 800bada:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800bade:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800bae2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800bae6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800baea:	b289      	uxth	r1, r1
 800baec:	f007 ff06 	bl	80138fc <uxr_process_acknack>
 800baf0:	4638      	mov	r0, r7
 800baf2:	f007 fec3 	bl	801387c <uxr_begin_output_nack_buffer_it>
 800baf6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800bafa:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800bafe:	e006      	b.n	800bb0e <read_submessage_list+0x16a>
 800bb00:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bb02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb04:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800bb08:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bb0a:	6818      	ldr	r0, [r3, #0]
 800bb0c:	47c8      	blx	r9
 800bb0e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800bb12:	aa0f      	add	r2, sp, #60	; 0x3c
 800bb14:	4651      	mov	r1, sl
 800bb16:	4638      	mov	r0, r7
 800bb18:	f007 feb2 	bl	8013880 <uxr_next_reliable_nack_buffer_to_send>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d1ef      	bne.n	800bb00 <read_submessage_list+0x15c>
 800bb20:	e749      	b.n	800b9b6 <read_submessage_list+0x12>
 800bb22:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800bb26:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800bb2a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800bb2e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800bb32:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800bb36:	4651      	mov	r1, sl
 800bb38:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bb3c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800bb40:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800bb44:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800bb48:	4628      	mov	r0, r5
 800bb4a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800bb4e:	f001 fe49 	bl	800d7e4 <uxr_deserialize_BaseObjectRequest>
 800bb52:	4650      	mov	r0, sl
 800bb54:	a90f      	add	r1, sp, #60	; 0x3c
 800bb56:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800bb5a:	f000 fdc7 	bl	800c6ec <uxr_parse_base_object_request>
 800bb5e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800bb62:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bb64:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800bb68:	9110      	str	r1, [sp, #64]	; 0x40
 800bb6a:	3f04      	subs	r7, #4
 800bb6c:	f009 090e 	and.w	r9, r9, #14
 800bb70:	b2bf      	uxth	r7, r7
 800bb72:	f1bb 0f00 	cmp.w	fp, #0
 800bb76:	d006      	beq.n	800bb86 <read_submessage_list+0x1e2>
 800bb78:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	4652      	mov	r2, sl
 800bb80:	2300      	movs	r3, #0
 800bb82:	4620      	mov	r0, r4
 800bb84:	47d8      	blx	fp
 800bb86:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800bb88:	b16a      	cbz	r2, 800bba6 <read_submessage_list+0x202>
 800bb8a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	3802      	subs	r0, #2
 800bb90:	e002      	b.n	800bb98 <read_submessage_list+0x1f4>
 800bb92:	3101      	adds	r1, #1
 800bb94:	4291      	cmp	r1, r2
 800bb96:	d006      	beq.n	800bba6 <read_submessage_list+0x202>
 800bb98:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800bb9c:	4553      	cmp	r3, sl
 800bb9e:	d1f8      	bne.n	800bb92 <read_submessage_list+0x1ee>
 800bba0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bba2:	2200      	movs	r2, #0
 800bba4:	545a      	strb	r2, [r3, r1]
 800bba6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800bbaa:	9102      	str	r1, [sp, #8]
 800bbac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bbae:	9101      	str	r1, [sp, #4]
 800bbb0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bbb2:	9100      	str	r1, [sp, #0]
 800bbb4:	464b      	mov	r3, r9
 800bbb6:	463a      	mov	r2, r7
 800bbb8:	4629      	mov	r1, r5
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f007 ff5c 	bl	8013a78 <read_submessage_format>
 800bbc0:	e6f9      	b.n	800b9b6 <read_submessage_list+0x12>
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f7ff fea5 	bl	800b914 <read_submessage_info>
 800bbca:	e6f4      	b.n	800b9b6 <read_submessage_list+0x12>
 800bbcc:	2a00      	cmp	r2, #0
 800bbce:	d03e      	beq.n	800bc4e <read_submessage_list+0x2aa>
 800bbd0:	a910      	add	r1, sp, #64	; 0x40
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f002 f802 	bl	800dbdc <uxr_deserialize_STATUS_Payload>
 800bbd8:	a90e      	add	r1, sp, #56	; 0x38
 800bbda:	aa0d      	add	r2, sp, #52	; 0x34
 800bbdc:	a810      	add	r0, sp, #64	; 0x40
 800bbde:	f000 fd85 	bl	800c6ec <uxr_parse_base_object_request>
 800bbe2:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800bbe6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bbe8:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800bbec:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800bbf0:	910f      	str	r1, [sp, #60]	; 0x3c
 800bbf2:	f1ba 0f00 	cmp.w	sl, #0
 800bbf6:	d006      	beq.n	800bc06 <read_submessage_list+0x262>
 800bbf8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	463a      	mov	r2, r7
 800bc00:	464b      	mov	r3, r9
 800bc02:	4620      	mov	r0, r4
 800bc04:	47d0      	blx	sl
 800bc06:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800bc08:	2a00      	cmp	r2, #0
 800bc0a:	f43f aed4 	beq.w	800b9b6 <read_submessage_list+0x12>
 800bc0e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800bc10:	2100      	movs	r1, #0
 800bc12:	3802      	subs	r0, #2
 800bc14:	e003      	b.n	800bc1e <read_submessage_list+0x27a>
 800bc16:	3101      	adds	r1, #1
 800bc18:	4291      	cmp	r1, r2
 800bc1a:	f43f aecc 	beq.w	800b9b6 <read_submessage_list+0x12>
 800bc1e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800bc22:	42bb      	cmp	r3, r7
 800bc24:	d1f7      	bne.n	800bc16 <read_submessage_list+0x272>
 800bc26:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bc28:	f803 9001 	strb.w	r9, [r3, r1]
 800bc2c:	e6c3      	b.n	800b9b6 <read_submessage_list+0x12>
 800bc2e:	2a00      	cmp	r2, #0
 800bc30:	f47f aec1 	bne.w	800b9b6 <read_submessage_list+0x12>
 800bc34:	4629      	mov	r1, r5
 800bc36:	4620      	mov	r0, r4
 800bc38:	f000 fc9e 	bl	800c578 <uxr_read_create_session_status>
 800bc3c:	e6bb      	b.n	800b9b6 <read_submessage_list+0x12>
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4620      	mov	r0, r4
 800bc42:	f7ff fcf5 	bl	800b630 <read_submessage_get_info>
 800bc46:	e6b6      	b.n	800b9b6 <read_submessage_list+0x12>
 800bc48:	b017      	add	sp, #92	; 0x5c
 800bc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4e:	4629      	mov	r1, r5
 800bc50:	4620      	mov	r0, r4
 800bc52:	f000 fc9d 	bl	800c590 <uxr_read_delete_session_status>
 800bc56:	e6ae      	b.n	800b9b6 <read_submessage_list+0x12>
 800bc58:	f000 fef2 	bl	800ca40 <uxr_nanos>
 800bc5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bc60:	464f      	mov	r7, r9
 800bc62:	fbc3 2706 	smlal	r2, r7, r3, r6
 800bc66:	1812      	adds	r2, r2, r0
 800bc68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc6a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800bc6c:	eb47 0101 	adc.w	r1, r7, r1
 800bc70:	464f      	mov	r7, r9
 800bc72:	fbc3 0706 	smlal	r0, r7, r3, r6
 800bc76:	463b      	mov	r3, r7
 800bc78:	4684      	mov	ip, r0
 800bc7a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800bc7e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800bc82:	eb1c 0c00 	adds.w	ip, ip, r0
 800bc86:	464f      	mov	r7, r9
 800bc88:	eb43 0307 	adc.w	r3, r3, r7
 800bc8c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800bc90:	eb61 0303 	sbc.w	r3, r1, r3
 800bc94:	0fda      	lsrs	r2, r3, #31
 800bc96:	eb12 020c 	adds.w	r2, r2, ip
 800bc9a:	f143 0300 	adc.w	r3, r3, #0
 800bc9e:	0852      	lsrs	r2, r2, #1
 800bca0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800bca4:	105b      	asrs	r3, r3, #1
 800bca6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800bcaa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800bcae:	e6dd      	b.n	800ba6c <read_submessage_list+0xc8>
 800bcb0:	3b9aca00 	.word	0x3b9aca00

0800bcb4 <listen_message_reliably>:
 800bcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb8:	1e0b      	subs	r3, r1, #0
 800bcba:	b09d      	sub	sp, #116	; 0x74
 800bcbc:	bfb8      	it	lt
 800bcbe:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800bcc2:	4680      	mov	r8, r0
 800bcc4:	9305      	str	r3, [sp, #20]
 800bcc6:	f000 fea1 	bl	800ca0c <uxr_millis>
 800bcca:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800bcce:	4681      	mov	r9, r0
 800bcd0:	2a00      	cmp	r2, #0
 800bcd2:	f000 80a1 	beq.w	800be18 <listen_message_reliably+0x164>
 800bcd6:	2600      	movs	r6, #0
 800bcd8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bcdc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800bce0:	9303      	str	r3, [sp, #12]
 800bce2:	4630      	mov	r0, r6
 800bce4:	460f      	mov	r7, r1
 800bce6:	e00f      	b.n	800bd08 <listen_message_reliably+0x54>
 800bce8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bcec:	9903      	ldr	r1, [sp, #12]
 800bcee:	455a      	cmp	r2, fp
 800bcf0:	f106 0601 	add.w	r6, r6, #1
 800bcf4:	eb73 0101 	sbcs.w	r1, r3, r1
 800bcf8:	b2f0      	uxtb	r0, r6
 800bcfa:	da01      	bge.n	800bd00 <listen_message_reliably+0x4c>
 800bcfc:	4693      	mov	fp, r2
 800bcfe:	9303      	str	r3, [sp, #12]
 800bd00:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800bd04:	4283      	cmp	r3, r0
 800bd06:	d960      	bls.n	800bdca <listen_message_reliably+0x116>
 800bd08:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800bd0c:	2102      	movs	r1, #2
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f000 fcfe 	bl	800c710 <uxr_stream_id>
 800bd14:	00e4      	lsls	r4, r4, #3
 800bd16:	f104 0520 	add.w	r5, r4, #32
 800bd1a:	4445      	add	r5, r8
 800bd1c:	4601      	mov	r1, r0
 800bd1e:	463b      	mov	r3, r7
 800bd20:	464a      	mov	r2, r9
 800bd22:	4628      	mov	r0, r5
 800bd24:	9109      	str	r1, [sp, #36]	; 0x24
 800bd26:	f007 fd7f 	bl	8013828 <uxr_update_output_stream_heartbeat_timestamp>
 800bd2a:	eb08 0304 	add.w	r3, r8, r4
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d0da      	beq.n	800bce8 <listen_message_reliably+0x34>
 800bd32:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bd36:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800bd3a:	9304      	str	r3, [sp, #16]
 800bd3c:	4640      	mov	r0, r8
 800bd3e:	f000 fcaf 	bl	800c6a0 <uxr_session_header_offset>
 800bd42:	3501      	adds	r5, #1
 800bd44:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800bd48:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800bd4c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800bd50:	2300      	movs	r3, #0
 800bd52:	2211      	movs	r2, #17
 800bd54:	9000      	str	r0, [sp, #0]
 800bd56:	a90c      	add	r1, sp, #48	; 0x30
 800bd58:	4650      	mov	r0, sl
 800bd5a:	f7fc fec9 	bl	8008af0 <ucdr_init_buffer_origin_offset>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	2205      	movs	r2, #5
 800bd62:	210b      	movs	r1, #11
 800bd64:	4650      	mov	r0, sl
 800bd66:	f000 fe0b 	bl	800c980 <uxr_buffer_submessage_header>
 800bd6a:	8968      	ldrh	r0, [r5, #10]
 800bd6c:	2101      	movs	r1, #1
 800bd6e:	f007 ff4d 	bl	8013c0c <uxr_seq_num_add>
 800bd72:	892b      	ldrh	r3, [r5, #8]
 800bd74:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800bd78:	4602      	mov	r2, r0
 800bd7a:	9b04      	ldr	r3, [sp, #16]
 800bd7c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800bd80:	a90a      	add	r1, sp, #40	; 0x28
 800bd82:	4650      	mov	r0, sl
 800bd84:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800bd88:	f001 ffe0 	bl	800dd4c <uxr_serialize_HEARTBEAT_Payload>
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	4611      	mov	r1, r2
 800bd90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd92:	4640      	mov	r0, r8
 800bd94:	f000 fc2e 	bl	800c5f4 <uxr_stamp_session_header>
 800bd98:	4650      	mov	r0, sl
 800bd9a:	f7fc fee7 	bl	8008b6c <ucdr_buffer_length>
 800bd9e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800bda2:	4602      	mov	r2, r0
 800bda4:	a90c      	add	r1, sp, #48	; 0x30
 800bda6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800bdaa:	4444      	add	r4, r8
 800bdac:	47a8      	blx	r5
 800bdae:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800bdb2:	9903      	ldr	r1, [sp, #12]
 800bdb4:	455a      	cmp	r2, fp
 800bdb6:	f106 0601 	add.w	r6, r6, #1
 800bdba:	eb73 0101 	sbcs.w	r1, r3, r1
 800bdbe:	b2f0      	uxtb	r0, r6
 800bdc0:	db9c      	blt.n	800bcfc <listen_message_reliably+0x48>
 800bdc2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800bdc6:	4283      	cmp	r3, r0
 800bdc8:	d89e      	bhi.n	800bd08 <listen_message_reliably+0x54>
 800bdca:	9a03      	ldr	r2, [sp, #12]
 800bdcc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	bf08      	it	eq
 800bdd4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800bdd8:	d01e      	beq.n	800be18 <listen_message_reliably+0x164>
 800bdda:	ebab 0309 	sub.w	r3, fp, r9
 800bdde:	9905      	ldr	r1, [sp, #20]
 800bde0:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	bf08      	it	eq
 800bde8:	2301      	moveq	r3, #1
 800bdea:	4299      	cmp	r1, r3
 800bdec:	bfa8      	it	ge
 800bdee:	4619      	movge	r1, r3
 800bdf0:	6894      	ldr	r4, [r2, #8]
 800bdf2:	6810      	ldr	r0, [r2, #0]
 800bdf4:	4689      	mov	r9, r1
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	aa08      	add	r2, sp, #32
 800bdfa:	a907      	add	r1, sp, #28
 800bdfc:	47a0      	blx	r4
 800bdfe:	b968      	cbnz	r0, 800be1c <listen_message_reliably+0x168>
 800be00:	9b05      	ldr	r3, [sp, #20]
 800be02:	eba3 0309 	sub.w	r3, r3, r9
 800be06:	2b00      	cmp	r3, #0
 800be08:	9305      	str	r3, [sp, #20]
 800be0a:	f73f af5c 	bgt.w	800bcc6 <listen_message_reliably+0x12>
 800be0e:	4604      	mov	r4, r0
 800be10:	4620      	mov	r0, r4
 800be12:	b01d      	add	sp, #116	; 0x74
 800be14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be18:	9b05      	ldr	r3, [sp, #20]
 800be1a:	e7e0      	b.n	800bdde <listen_message_reliably+0x12a>
 800be1c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800be20:	4604      	mov	r4, r0
 800be22:	a80c      	add	r0, sp, #48	; 0x30
 800be24:	f7fc fe76 	bl	8008b14 <ucdr_init_buffer>
 800be28:	2500      	movs	r5, #0
 800be2a:	f10d 031a 	add.w	r3, sp, #26
 800be2e:	aa06      	add	r2, sp, #24
 800be30:	a90c      	add	r1, sp, #48	; 0x30
 800be32:	4640      	mov	r0, r8
 800be34:	f88d 5018 	strb.w	r5, [sp, #24]
 800be38:	f000 fbf0 	bl	800c61c <uxr_read_session_header>
 800be3c:	b918      	cbnz	r0, 800be46 <listen_message_reliably+0x192>
 800be3e:	4620      	mov	r0, r4
 800be40:	b01d      	add	sp, #116	; 0x74
 800be42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be46:	4629      	mov	r1, r5
 800be48:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800be4c:	f000 fc8a 	bl	800c764 <uxr_stream_id_from_raw>
 800be50:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800be54:	2d01      	cmp	r5, #1
 800be56:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800be5a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800be5e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800be62:	d04b      	beq.n	800befc <listen_message_reliably+0x248>
 800be64:	2d02      	cmp	r5, #2
 800be66:	d00f      	beq.n	800be88 <listen_message_reliably+0x1d4>
 800be68:	2d00      	cmp	r5, #0
 800be6a:	d1e8      	bne.n	800be3e <listen_message_reliably+0x18a>
 800be6c:	4629      	mov	r1, r5
 800be6e:	4628      	mov	r0, r5
 800be70:	f000 fc78 	bl	800c764 <uxr_stream_id_from_raw>
 800be74:	a90c      	add	r1, sp, #48	; 0x30
 800be76:	4602      	mov	r2, r0
 800be78:	4640      	mov	r0, r8
 800be7a:	920a      	str	r2, [sp, #40]	; 0x28
 800be7c:	f7ff fd92 	bl	800b9a4 <read_submessage_list>
 800be80:	4620      	mov	r0, r4
 800be82:	b01d      	add	sp, #116	; 0x74
 800be84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be88:	4631      	mov	r1, r6
 800be8a:	f108 0008 	add.w	r0, r8, #8
 800be8e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800be92:	f000 fd55 	bl	800c940 <uxr_get_input_reliable_stream>
 800be96:	4607      	mov	r7, r0
 800be98:	b338      	cbz	r0, 800beea <listen_message_reliably+0x236>
 800be9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be9c:	9203      	str	r2, [sp, #12]
 800be9e:	a80c      	add	r0, sp, #48	; 0x30
 800bea0:	f7fc fe68 	bl	8008b74 <ucdr_buffer_remaining>
 800bea4:	4603      	mov	r3, r0
 800bea6:	f10d 0019 	add.w	r0, sp, #25
 800beaa:	9000      	str	r0, [sp, #0]
 800beac:	9a03      	ldr	r2, [sp, #12]
 800beae:	4651      	mov	r1, sl
 800beb0:	4638      	mov	r0, r7
 800beb2:	f007 f8cf 	bl	8013054 <uxr_receive_reliable_message>
 800beb6:	b1c0      	cbz	r0, 800beea <listen_message_reliably+0x236>
 800beb8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800bebc:	b393      	cbz	r3, 800bf24 <listen_message_reliably+0x270>
 800bebe:	ad14      	add	r5, sp, #80	; 0x50
 800bec0:	f04f 0a02 	mov.w	sl, #2
 800bec4:	e00a      	b.n	800bedc <listen_message_reliably+0x228>
 800bec6:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800beca:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800bece:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800bed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bed4:	4629      	mov	r1, r5
 800bed6:	4640      	mov	r0, r8
 800bed8:	f7ff fd64 	bl	800b9a4 <read_submessage_list>
 800bedc:	2204      	movs	r2, #4
 800bede:	4629      	mov	r1, r5
 800bee0:	4638      	mov	r0, r7
 800bee2:	f007 f937 	bl	8013154 <uxr_next_input_reliable_buffer_available>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d1ed      	bne.n	800bec6 <listen_message_reliably+0x212>
 800beea:	4640      	mov	r0, r8
 800beec:	4632      	mov	r2, r6
 800beee:	4649      	mov	r1, r9
 800bef0:	f7ff fbd4 	bl	800b69c <write_submessage_acknack.isra.0>
 800bef4:	4620      	mov	r0, r4
 800bef6:	b01d      	add	sp, #116	; 0x74
 800bef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800befc:	4631      	mov	r1, r6
 800befe:	f108 0008 	add.w	r0, r8, #8
 800bf02:	f000 fd13 	bl	800c92c <uxr_get_input_best_effort_stream>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d099      	beq.n	800be3e <listen_message_reliably+0x18a>
 800bf0a:	4651      	mov	r1, sl
 800bf0c:	f007 f80e 	bl	8012f2c <uxr_receive_best_effort_message>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d094      	beq.n	800be3e <listen_message_reliably+0x18a>
 800bf14:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800bf18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf1a:	a90c      	add	r1, sp, #48	; 0x30
 800bf1c:	4640      	mov	r0, r8
 800bf1e:	f7ff fd41 	bl	800b9a4 <read_submessage_list>
 800bf22:	e78c      	b.n	800be3e <listen_message_reliably+0x18a>
 800bf24:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800bf28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf2a:	a90c      	add	r1, sp, #48	; 0x30
 800bf2c:	4640      	mov	r0, r8
 800bf2e:	f7ff fd39 	bl	800b9a4 <read_submessage_list>
 800bf32:	e7c4      	b.n	800bebe <listen_message_reliably+0x20a>

0800bf34 <uxr_run_session_timeout>:
 800bf34:	b570      	push	{r4, r5, r6, lr}
 800bf36:	4604      	mov	r4, r0
 800bf38:	460d      	mov	r5, r1
 800bf3a:	f000 fd67 	bl	800ca0c <uxr_millis>
 800bf3e:	4606      	mov	r6, r0
 800bf40:	4620      	mov	r0, r4
 800bf42:	f7ff fc71 	bl	800b828 <uxr_flash_output_streams>
 800bf46:	4629      	mov	r1, r5
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f7ff feb3 	bl	800bcb4 <listen_message_reliably>
 800bf4e:	f000 fd5d 	bl	800ca0c <uxr_millis>
 800bf52:	1b83      	subs	r3, r0, r6
 800bf54:	1ae9      	subs	r1, r5, r3
 800bf56:	2900      	cmp	r1, #0
 800bf58:	dcf6      	bgt.n	800bf48 <uxr_run_session_timeout+0x14>
 800bf5a:	f104 0008 	add.w	r0, r4, #8
 800bf5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf62:	f000 bcf7 	b.w	800c954 <uxr_output_streams_confirmed>
 800bf66:	bf00      	nop

0800bf68 <uxr_run_session_until_data>:
 800bf68:	b570      	push	{r4, r5, r6, lr}
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	460d      	mov	r5, r1
 800bf6e:	f000 fd4d 	bl	800ca0c <uxr_millis>
 800bf72:	4606      	mov	r6, r0
 800bf74:	4620      	mov	r0, r4
 800bf76:	f7ff fc57 	bl	800b828 <uxr_flash_output_streams>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800bf80:	4629      	mov	r1, r5
 800bf82:	e005      	b.n	800bf90 <uxr_run_session_until_data+0x28>
 800bf84:	f000 fd42 	bl	800ca0c <uxr_millis>
 800bf88:	1b83      	subs	r3, r0, r6
 800bf8a:	1ae9      	subs	r1, r5, r3
 800bf8c:	2900      	cmp	r1, #0
 800bf8e:	dd07      	ble.n	800bfa0 <uxr_run_session_until_data+0x38>
 800bf90:	4620      	mov	r0, r4
 800bf92:	f7ff fe8f 	bl	800bcb4 <listen_message_reliably>
 800bf96:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d0f2      	beq.n	800bf84 <uxr_run_session_until_data+0x1c>
 800bf9e:	bd70      	pop	{r4, r5, r6, pc}
 800bfa0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800bfa4:	bd70      	pop	{r4, r5, r6, pc}
 800bfa6:	bf00      	nop

0800bfa8 <uxr_run_session_until_confirm_delivery>:
 800bfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfac:	4606      	mov	r6, r0
 800bfae:	460d      	mov	r5, r1
 800bfb0:	f000 fd2c 	bl	800ca0c <uxr_millis>
 800bfb4:	4607      	mov	r7, r0
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	f7ff fc36 	bl	800b828 <uxr_flash_output_streams>
 800bfbc:	2d00      	cmp	r5, #0
 800bfbe:	f106 0808 	add.w	r8, r6, #8
 800bfc2:	bfa8      	it	ge
 800bfc4:	462c      	movge	r4, r5
 800bfc6:	da07      	bge.n	800bfd8 <uxr_run_session_until_confirm_delivery+0x30>
 800bfc8:	e00e      	b.n	800bfe8 <uxr_run_session_until_confirm_delivery+0x40>
 800bfca:	f7ff fe73 	bl	800bcb4 <listen_message_reliably>
 800bfce:	f000 fd1d 	bl	800ca0c <uxr_millis>
 800bfd2:	1bc3      	subs	r3, r0, r7
 800bfd4:	1aec      	subs	r4, r5, r3
 800bfd6:	d407      	bmi.n	800bfe8 <uxr_run_session_until_confirm_delivery+0x40>
 800bfd8:	4640      	mov	r0, r8
 800bfda:	f000 fcbb 	bl	800c954 <uxr_output_streams_confirmed>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d0f0      	beq.n	800bfca <uxr_run_session_until_confirm_delivery+0x22>
 800bfe8:	4640      	mov	r0, r8
 800bfea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfee:	f000 bcb1 	b.w	800c954 <uxr_output_streams_confirmed>
 800bff2:	bf00      	nop

0800bff4 <uxr_run_session_until_all_status>:
 800bff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bff8:	9c08      	ldr	r4, [sp, #32]
 800bffa:	4606      	mov	r6, r0
 800bffc:	460f      	mov	r7, r1
 800bffe:	4691      	mov	r9, r2
 800c000:	461d      	mov	r5, r3
 800c002:	f7ff fc11 	bl	800b828 <uxr_flash_output_streams>
 800c006:	b124      	cbz	r4, 800c012 <uxr_run_session_until_all_status+0x1e>
 800c008:	4622      	mov	r2, r4
 800c00a:	21ff      	movs	r1, #255	; 0xff
 800c00c:	4628      	mov	r0, r5
 800c00e:	f009 fbdd 	bl	80157cc <memset>
 800c012:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800c016:	67f4      	str	r4, [r6, #124]	; 0x7c
 800c018:	f000 fcf8 	bl	800ca0c <uxr_millis>
 800c01c:	3d01      	subs	r5, #1
 800c01e:	f1a9 0902 	sub.w	r9, r9, #2
 800c022:	4680      	mov	r8, r0
 800c024:	4639      	mov	r1, r7
 800c026:	4630      	mov	r0, r6
 800c028:	f7ff fe44 	bl	800bcb4 <listen_message_reliably>
 800c02c:	f000 fcee 	bl	800ca0c <uxr_millis>
 800c030:	eba0 0008 	sub.w	r0, r0, r8
 800c034:	1a39      	subs	r1, r7, r0
 800c036:	b344      	cbz	r4, 800c08a <uxr_run_session_until_all_status+0x96>
 800c038:	4628      	mov	r0, r5
 800c03a:	46ac      	mov	ip, r5
 800c03c:	2301      	movs	r3, #1
 800c03e:	e002      	b.n	800c046 <uxr_run_session_until_all_status+0x52>
 800c040:	42a3      	cmp	r3, r4
 800c042:	d20d      	bcs.n	800c060 <uxr_run_session_until_all_status+0x6c>
 800c044:	3301      	adds	r3, #1
 800c046:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800c04a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800c04e:	d1f7      	bne.n	800c040 <uxr_run_session_until_all_status+0x4c>
 800c050:	42a3      	cmp	r3, r4
 800c052:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800c056:	d213      	bcs.n	800c080 <uxr_run_session_until_all_status+0x8c>
 800c058:	2a00      	cmp	r2, #0
 800c05a:	d0f3      	beq.n	800c044 <uxr_run_session_until_all_status+0x50>
 800c05c:	2900      	cmp	r1, #0
 800c05e:	dce2      	bgt.n	800c026 <uxr_run_session_until_all_status+0x32>
 800c060:	2300      	movs	r3, #0
 800c062:	67f3      	str	r3, [r6, #124]	; 0x7c
 800c064:	442c      	add	r4, r5
 800c066:	e001      	b.n	800c06c <uxr_run_session_until_all_status+0x78>
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d812      	bhi.n	800c092 <uxr_run_session_until_all_status+0x9e>
 800c06c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c070:	4284      	cmp	r4, r0
 800c072:	d1f9      	bne.n	800c068 <uxr_run_session_until_all_status+0x74>
 800c074:	2b01      	cmp	r3, #1
 800c076:	bf8c      	ite	hi
 800c078:	2000      	movhi	r0, #0
 800c07a:	2001      	movls	r0, #1
 800c07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c080:	2900      	cmp	r1, #0
 800c082:	dded      	ble.n	800c060 <uxr_run_session_until_all_status+0x6c>
 800c084:	2a00      	cmp	r2, #0
 800c086:	d1ce      	bne.n	800c026 <uxr_run_session_until_all_status+0x32>
 800c088:	e7ea      	b.n	800c060 <uxr_run_session_until_all_status+0x6c>
 800c08a:	67f4      	str	r4, [r6, #124]	; 0x7c
 800c08c:	2001      	movs	r0, #1
 800c08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c092:	2000      	movs	r0, #0
 800c094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c098 <wait_session_status>:
 800c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	4604      	mov	r4, r0
 800c09e:	b09d      	sub	sp, #116	; 0x74
 800c0a0:	20ff      	movs	r0, #255	; 0xff
 800c0a2:	7160      	strb	r0, [r4, #5]
 800c0a4:	9303      	str	r3, [sp, #12]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f000 80b6 	beq.w	800c218 <wait_session_status+0x180>
 800c0ac:	468a      	mov	sl, r1
 800c0ae:	4691      	mov	r9, r2
 800c0b0:	f04f 0b00 	mov.w	fp, #0
 800c0b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c0b6:	464a      	mov	r2, r9
 800c0b8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c0bc:	4651      	mov	r1, sl
 800c0be:	47a8      	blx	r5
 800c0c0:	f000 fca4 	bl	800ca0c <uxr_millis>
 800c0c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c0c8:	4605      	mov	r5, r0
 800c0ca:	e009      	b.n	800c0e0 <wait_session_status+0x48>
 800c0cc:	f000 fc9e 	bl	800ca0c <uxr_millis>
 800c0d0:	1b40      	subs	r0, r0, r5
 800c0d2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	dd40      	ble.n	800c15c <wait_session_status+0xc4>
 800c0da:	7960      	ldrb	r0, [r4, #5]
 800c0dc:	28ff      	cmp	r0, #255	; 0xff
 800c0de:	d145      	bne.n	800c16c <wait_session_status+0xd4>
 800c0e0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c0e2:	a908      	add	r1, sp, #32
 800c0e4:	6896      	ldr	r6, [r2, #8]
 800c0e6:	6810      	ldr	r0, [r2, #0]
 800c0e8:	aa09      	add	r2, sp, #36	; 0x24
 800c0ea:	47b0      	blx	r6
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d0ed      	beq.n	800c0cc <wait_session_status+0x34>
 800c0f0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800c0f4:	a80c      	add	r0, sp, #48	; 0x30
 800c0f6:	f7fc fd0d 	bl	8008b14 <ucdr_init_buffer>
 800c0fa:	2600      	movs	r6, #0
 800c0fc:	f10d 031e 	add.w	r3, sp, #30
 800c100:	aa07      	add	r2, sp, #28
 800c102:	a90c      	add	r1, sp, #48	; 0x30
 800c104:	4620      	mov	r0, r4
 800c106:	f88d 601c 	strb.w	r6, [sp, #28]
 800c10a:	f000 fa87 	bl	800c61c <uxr_read_session_header>
 800c10e:	2800      	cmp	r0, #0
 800c110:	d0dc      	beq.n	800c0cc <wait_session_status+0x34>
 800c112:	4631      	mov	r1, r6
 800c114:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800c118:	f000 fb24 	bl	800c764 <uxr_stream_id_from_raw>
 800c11c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800c120:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c124:	9302      	str	r3, [sp, #8]
 800c126:	2f01      	cmp	r7, #1
 800c128:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800c12c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800c130:	d05c      	beq.n	800c1ec <wait_session_status+0x154>
 800c132:	2f02      	cmp	r7, #2
 800c134:	d020      	beq.n	800c178 <wait_session_status+0xe0>
 800c136:	2f00      	cmp	r7, #0
 800c138:	d1c8      	bne.n	800c0cc <wait_session_status+0x34>
 800c13a:	4639      	mov	r1, r7
 800c13c:	4638      	mov	r0, r7
 800c13e:	f000 fb11 	bl	800c764 <uxr_stream_id_from_raw>
 800c142:	a90c      	add	r1, sp, #48	; 0x30
 800c144:	4602      	mov	r2, r0
 800c146:	900b      	str	r0, [sp, #44]	; 0x2c
 800c148:	4620      	mov	r0, r4
 800c14a:	f7ff fc2b 	bl	800b9a4 <read_submessage_list>
 800c14e:	f000 fc5d 	bl	800ca0c <uxr_millis>
 800c152:	1b40      	subs	r0, r0, r5
 800c154:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c158:	2b00      	cmp	r3, #0
 800c15a:	dcbe      	bgt.n	800c0da <wait_session_status+0x42>
 800c15c:	9b03      	ldr	r3, [sp, #12]
 800c15e:	7960      	ldrb	r0, [r4, #5]
 800c160:	f10b 0b01 	add.w	fp, fp, #1
 800c164:	455b      	cmp	r3, fp
 800c166:	d001      	beq.n	800c16c <wait_session_status+0xd4>
 800c168:	28ff      	cmp	r0, #255	; 0xff
 800c16a:	d0a3      	beq.n	800c0b4 <wait_session_status+0x1c>
 800c16c:	38ff      	subs	r0, #255	; 0xff
 800c16e:	bf18      	it	ne
 800c170:	2001      	movne	r0, #1
 800c172:	b01d      	add	sp, #116	; 0x74
 800c174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c178:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800c17c:	9304      	str	r3, [sp, #16]
 800c17e:	4631      	mov	r1, r6
 800c180:	f104 0008 	add.w	r0, r4, #8
 800c184:	f000 fbdc 	bl	800c940 <uxr_get_input_reliable_stream>
 800c188:	4680      	mov	r8, r0
 800c18a:	b348      	cbz	r0, 800c1e0 <wait_session_status+0x148>
 800c18c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c18e:	9205      	str	r2, [sp, #20]
 800c190:	a80c      	add	r0, sp, #48	; 0x30
 800c192:	f7fc fcef 	bl	8008b74 <ucdr_buffer_remaining>
 800c196:	4603      	mov	r3, r0
 800c198:	f10d 001d 	add.w	r0, sp, #29
 800c19c:	9000      	str	r0, [sp, #0]
 800c19e:	9a05      	ldr	r2, [sp, #20]
 800c1a0:	9902      	ldr	r1, [sp, #8]
 800c1a2:	4640      	mov	r0, r8
 800c1a4:	f006 ff56 	bl	8013054 <uxr_receive_reliable_message>
 800c1a8:	b1d0      	cbz	r0, 800c1e0 <wait_session_status+0x148>
 800c1aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d03a      	beq.n	800c228 <wait_session_status+0x190>
 800c1b2:	9f04      	ldr	r7, [sp, #16]
 800c1b4:	e00a      	b.n	800c1cc <wait_session_status+0x134>
 800c1b6:	f04f 0302 	mov.w	r3, #2
 800c1ba:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800c1be:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800c1c2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800c1c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c1c8:	f7ff fbec 	bl	800b9a4 <read_submessage_list>
 800c1cc:	a914      	add	r1, sp, #80	; 0x50
 800c1ce:	2204      	movs	r2, #4
 800c1d0:	4640      	mov	r0, r8
 800c1d2:	f006 ffbf 	bl	8013154 <uxr_next_input_reliable_buffer_available>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	a914      	add	r1, sp, #80	; 0x50
 800c1da:	4620      	mov	r0, r4
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1ea      	bne.n	800c1b6 <wait_session_status+0x11e>
 800c1e0:	9904      	ldr	r1, [sp, #16]
 800c1e2:	4632      	mov	r2, r6
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f7ff fa59 	bl	800b69c <write_submessage_acknack.isra.0>
 800c1ea:	e76f      	b.n	800c0cc <wait_session_status+0x34>
 800c1ec:	4631      	mov	r1, r6
 800c1ee:	f104 0008 	add.w	r0, r4, #8
 800c1f2:	f000 fb9b 	bl	800c92c <uxr_get_input_best_effort_stream>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	f43f af68 	beq.w	800c0cc <wait_session_status+0x34>
 800c1fc:	9902      	ldr	r1, [sp, #8]
 800c1fe:	f006 fe95 	bl	8012f2c <uxr_receive_best_effort_message>
 800c202:	2800      	cmp	r0, #0
 800c204:	f43f af62 	beq.w	800c0cc <wait_session_status+0x34>
 800c208:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800c20c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c20e:	a90c      	add	r1, sp, #48	; 0x30
 800c210:	4620      	mov	r0, r4
 800c212:	f7ff fbc7 	bl	800b9a4 <read_submessage_list>
 800c216:	e759      	b.n	800c0cc <wait_session_status+0x34>
 800c218:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c21a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c21e:	47a0      	blx	r4
 800c220:	2001      	movs	r0, #1
 800c222:	b01d      	add	sp, #116	; 0x74
 800c224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c228:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800c22c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c22e:	a90c      	add	r1, sp, #48	; 0x30
 800c230:	4620      	mov	r0, r4
 800c232:	f7ff fbb7 	bl	800b9a4 <read_submessage_list>
 800c236:	e7bc      	b.n	800c1b2 <wait_session_status+0x11a>

0800c238 <uxr_delete_session_retries>:
 800c238:	b530      	push	{r4, r5, lr}
 800c23a:	b08f      	sub	sp, #60	; 0x3c
 800c23c:	4604      	mov	r4, r0
 800c23e:	460d      	mov	r5, r1
 800c240:	f000 fa2e 	bl	800c6a0 <uxr_session_header_offset>
 800c244:	2300      	movs	r3, #0
 800c246:	2210      	movs	r2, #16
 800c248:	9000      	str	r0, [sp, #0]
 800c24a:	a902      	add	r1, sp, #8
 800c24c:	a806      	add	r0, sp, #24
 800c24e:	f7fc fc4f 	bl	8008af0 <ucdr_init_buffer_origin_offset>
 800c252:	a906      	add	r1, sp, #24
 800c254:	4620      	mov	r0, r4
 800c256:	f000 f973 	bl	800c540 <uxr_buffer_delete_session>
 800c25a:	2200      	movs	r2, #0
 800c25c:	4611      	mov	r1, r2
 800c25e:	9b06      	ldr	r3, [sp, #24]
 800c260:	4620      	mov	r0, r4
 800c262:	f000 f9c7 	bl	800c5f4 <uxr_stamp_session_header>
 800c266:	a806      	add	r0, sp, #24
 800c268:	f7fc fc80 	bl	8008b6c <ucdr_buffer_length>
 800c26c:	462b      	mov	r3, r5
 800c26e:	4602      	mov	r2, r0
 800c270:	a902      	add	r1, sp, #8
 800c272:	4620      	mov	r0, r4
 800c274:	f7ff ff10 	bl	800c098 <wait_session_status>
 800c278:	b118      	cbz	r0, 800c282 <uxr_delete_session_retries+0x4a>
 800c27a:	7960      	ldrb	r0, [r4, #5]
 800c27c:	fab0 f080 	clz	r0, r0
 800c280:	0940      	lsrs	r0, r0, #5
 800c282:	b00f      	add	sp, #60	; 0x3c
 800c284:	bd30      	pop	{r4, r5, pc}
 800c286:	bf00      	nop

0800c288 <uxr_create_session>:
 800c288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28c:	f100 0b08 	add.w	fp, r0, #8
 800c290:	b0ab      	sub	sp, #172	; 0xac
 800c292:	4604      	mov	r4, r0
 800c294:	4658      	mov	r0, fp
 800c296:	f000 fa99 	bl	800c7cc <uxr_reset_stream_storage>
 800c29a:	4620      	mov	r0, r4
 800c29c:	f000 fa00 	bl	800c6a0 <uxr_session_header_offset>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	9000      	str	r0, [sp, #0]
 800c2a4:	221c      	movs	r2, #28
 800c2a6:	a90b      	add	r1, sp, #44	; 0x2c
 800c2a8:	a812      	add	r0, sp, #72	; 0x48
 800c2aa:	f7fc fc21 	bl	8008af0 <ucdr_init_buffer_origin_offset>
 800c2ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c2b0:	8a1a      	ldrh	r2, [r3, #16]
 800c2b2:	3a04      	subs	r2, #4
 800c2b4:	b292      	uxth	r2, r2
 800c2b6:	a912      	add	r1, sp, #72	; 0x48
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f000 f917 	bl	800c4ec <uxr_buffer_create_session>
 800c2be:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 f983 	bl	800c5cc <uxr_stamp_create_session_header>
 800c2c6:	a812      	add	r0, sp, #72	; 0x48
 800c2c8:	f7fc fc50 	bl	8008b6c <ucdr_buffer_length>
 800c2cc:	23ff      	movs	r3, #255	; 0xff
 800c2ce:	7163      	strb	r3, [r4, #5]
 800c2d0:	230a      	movs	r3, #10
 800c2d2:	46da      	mov	sl, fp
 800c2d4:	9303      	str	r3, [sp, #12]
 800c2d6:	4683      	mov	fp, r0
 800c2d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c2da:	465a      	mov	r2, fp
 800c2dc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c2e0:	a90b      	add	r1, sp, #44	; 0x2c
 800c2e2:	47a8      	blx	r5
 800c2e4:	f000 fb92 	bl	800ca0c <uxr_millis>
 800c2e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c2ec:	4605      	mov	r5, r0
 800c2ee:	e009      	b.n	800c304 <uxr_create_session+0x7c>
 800c2f0:	f000 fb8c 	bl	800ca0c <uxr_millis>
 800c2f4:	1b40      	subs	r0, r0, r5
 800c2f6:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	7962      	ldrb	r2, [r4, #5]
 800c2fe:	dd38      	ble.n	800c372 <uxr_create_session+0xea>
 800c300:	2aff      	cmp	r2, #255	; 0xff
 800c302:	d13c      	bne.n	800c37e <uxr_create_session+0xf6>
 800c304:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c306:	a907      	add	r1, sp, #28
 800c308:	6896      	ldr	r6, [r2, #8]
 800c30a:	6810      	ldr	r0, [r2, #0]
 800c30c:	aa08      	add	r2, sp, #32
 800c30e:	47b0      	blx	r6
 800c310:	2800      	cmp	r0, #0
 800c312:	d0ed      	beq.n	800c2f0 <uxr_create_session+0x68>
 800c314:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c318:	a81a      	add	r0, sp, #104	; 0x68
 800c31a:	f7fc fbfb 	bl	8008b14 <ucdr_init_buffer>
 800c31e:	2600      	movs	r6, #0
 800c320:	f10d 031a 	add.w	r3, sp, #26
 800c324:	aa06      	add	r2, sp, #24
 800c326:	a91a      	add	r1, sp, #104	; 0x68
 800c328:	4620      	mov	r0, r4
 800c32a:	f88d 6018 	strb.w	r6, [sp, #24]
 800c32e:	f000 f975 	bl	800c61c <uxr_read_session_header>
 800c332:	2800      	cmp	r0, #0
 800c334:	d0dc      	beq.n	800c2f0 <uxr_create_session+0x68>
 800c336:	4631      	mov	r1, r6
 800c338:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c33c:	f000 fa12 	bl	800c764 <uxr_stream_id_from_raw>
 800c340:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800c344:	2e01      	cmp	r6, #1
 800c346:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800c34a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800c34e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800c352:	d053      	beq.n	800c3fc <uxr_create_session+0x174>
 800c354:	2e02      	cmp	r6, #2
 800c356:	d018      	beq.n	800c38a <uxr_create_session+0x102>
 800c358:	2e00      	cmp	r6, #0
 800c35a:	d1c9      	bne.n	800c2f0 <uxr_create_session+0x68>
 800c35c:	4631      	mov	r1, r6
 800c35e:	4630      	mov	r0, r6
 800c360:	f000 fa00 	bl	800c764 <uxr_stream_id_from_raw>
 800c364:	a91a      	add	r1, sp, #104	; 0x68
 800c366:	4602      	mov	r2, r0
 800c368:	900a      	str	r0, [sp, #40]	; 0x28
 800c36a:	4620      	mov	r0, r4
 800c36c:	f7ff fb1a 	bl	800b9a4 <read_submessage_list>
 800c370:	e7be      	b.n	800c2f0 <uxr_create_session+0x68>
 800c372:	9b03      	ldr	r3, [sp, #12]
 800c374:	3b01      	subs	r3, #1
 800c376:	9303      	str	r3, [sp, #12]
 800c378:	d001      	beq.n	800c37e <uxr_create_session+0xf6>
 800c37a:	2aff      	cmp	r2, #255	; 0xff
 800c37c:	d0ac      	beq.n	800c2d8 <uxr_create_session+0x50>
 800c37e:	2a00      	cmp	r2, #0
 800c380:	d051      	beq.n	800c426 <uxr_create_session+0x19e>
 800c382:	2000      	movs	r0, #0
 800c384:	b02b      	add	sp, #172	; 0xac
 800c386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c38e:	9304      	str	r3, [sp, #16]
 800c390:	4639      	mov	r1, r7
 800c392:	4650      	mov	r0, sl
 800c394:	f000 fad4 	bl	800c940 <uxr_get_input_reliable_stream>
 800c398:	4680      	mov	r8, r0
 800c39a:	b348      	cbz	r0, 800c3f0 <uxr_create_session+0x168>
 800c39c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c39e:	9205      	str	r2, [sp, #20]
 800c3a0:	a81a      	add	r0, sp, #104	; 0x68
 800c3a2:	f7fc fbe7 	bl	8008b74 <ucdr_buffer_remaining>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	f10d 0019 	add.w	r0, sp, #25
 800c3ac:	9000      	str	r0, [sp, #0]
 800c3ae:	9a05      	ldr	r2, [sp, #20]
 800c3b0:	4649      	mov	r1, r9
 800c3b2:	4640      	mov	r0, r8
 800c3b4:	f006 fe4e 	bl	8013054 <uxr_receive_reliable_message>
 800c3b8:	b1d0      	cbz	r0, 800c3f0 <uxr_create_session+0x168>
 800c3ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d038      	beq.n	800c434 <uxr_create_session+0x1ac>
 800c3c2:	9e04      	ldr	r6, [sp, #16]
 800c3c4:	e00a      	b.n	800c3dc <uxr_create_session+0x154>
 800c3c6:	f04f 0302 	mov.w	r3, #2
 800c3ca:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800c3ce:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800c3d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3d8:	f7ff fae4 	bl	800b9a4 <read_submessage_list>
 800c3dc:	a922      	add	r1, sp, #136	; 0x88
 800c3de:	2204      	movs	r2, #4
 800c3e0:	4640      	mov	r0, r8
 800c3e2:	f006 feb7 	bl	8013154 <uxr_next_input_reliable_buffer_available>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	a922      	add	r1, sp, #136	; 0x88
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1ea      	bne.n	800c3c6 <uxr_create_session+0x13e>
 800c3f0:	9904      	ldr	r1, [sp, #16]
 800c3f2:	463a      	mov	r2, r7
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f7ff f951 	bl	800b69c <write_submessage_acknack.isra.0>
 800c3fa:	e779      	b.n	800c2f0 <uxr_create_session+0x68>
 800c3fc:	4639      	mov	r1, r7
 800c3fe:	4650      	mov	r0, sl
 800c400:	f000 fa94 	bl	800c92c <uxr_get_input_best_effort_stream>
 800c404:	2800      	cmp	r0, #0
 800c406:	f43f af73 	beq.w	800c2f0 <uxr_create_session+0x68>
 800c40a:	4649      	mov	r1, r9
 800c40c:	f006 fd8e 	bl	8012f2c <uxr_receive_best_effort_message>
 800c410:	2800      	cmp	r0, #0
 800c412:	f43f af6d 	beq.w	800c2f0 <uxr_create_session+0x68>
 800c416:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800c41a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c41c:	a91a      	add	r1, sp, #104	; 0x68
 800c41e:	4620      	mov	r0, r4
 800c420:	f7ff fac0 	bl	800b9a4 <read_submessage_list>
 800c424:	e764      	b.n	800c2f0 <uxr_create_session+0x68>
 800c426:	4650      	mov	r0, sl
 800c428:	f000 f9d0 	bl	800c7cc <uxr_reset_stream_storage>
 800c42c:	2001      	movs	r0, #1
 800c42e:	b02b      	add	sp, #172	; 0xac
 800c430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c434:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800c438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c43a:	a91a      	add	r1, sp, #104	; 0x68
 800c43c:	4620      	mov	r0, r4
 800c43e:	f7ff fab1 	bl	800b9a4 <read_submessage_list>
 800c442:	e7be      	b.n	800c3c2 <uxr_create_session+0x13a>

0800c444 <uxr_prepare_stream_to_write_submessage>:
 800c444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c448:	b082      	sub	sp, #8
 800c44a:	4682      	mov	sl, r0
 800c44c:	4610      	mov	r0, r2
 800c44e:	4615      	mov	r5, r2
 800c450:	461e      	mov	r6, r3
 800c452:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800c456:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800c45a:	9101      	str	r1, [sp, #4]
 800c45c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800c460:	f000 face 	bl	800ca00 <uxr_submessage_padding>
 800c464:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c468:	f105 0904 	add.w	r9, r5, #4
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	4481      	add	r9, r0
 800c470:	d01d      	beq.n	800c4ae <uxr_prepare_stream_to_write_submessage+0x6a>
 800c472:	2b02      	cmp	r3, #2
 800c474:	d116      	bne.n	800c4a4 <uxr_prepare_stream_to_write_submessage+0x60>
 800c476:	4621      	mov	r1, r4
 800c478:	f10a 0008 	add.w	r0, sl, #8
 800c47c:	f000 fa4c 	bl	800c918 <uxr_get_output_reliable_stream>
 800c480:	4604      	mov	r4, r0
 800c482:	b158      	cbz	r0, 800c49c <uxr_prepare_stream_to_write_submessage+0x58>
 800c484:	4649      	mov	r1, r9
 800c486:	4632      	mov	r2, r6
 800c488:	f007 f820 	bl	80134cc <uxr_prepare_reliable_buffer_to_write>
 800c48c:	4604      	mov	r4, r0
 800c48e:	b12c      	cbz	r4, 800c49c <uxr_prepare_stream_to_write_submessage+0x58>
 800c490:	4643      	mov	r3, r8
 800c492:	b2aa      	uxth	r2, r5
 800c494:	4639      	mov	r1, r7
 800c496:	4630      	mov	r0, r6
 800c498:	f000 fa72 	bl	800c980 <uxr_buffer_submessage_header>
 800c49c:	4620      	mov	r0, r4
 800c49e:	b002      	add	sp, #8
 800c4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4a4:	2400      	movs	r4, #0
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	b002      	add	sp, #8
 800c4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	f10a 0008 	add.w	r0, sl, #8
 800c4b4:	f000 fa28 	bl	800c908 <uxr_get_output_best_effort_stream>
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d0ee      	beq.n	800c49c <uxr_prepare_stream_to_write_submessage+0x58>
 800c4be:	4649      	mov	r1, r9
 800c4c0:	4632      	mov	r2, r6
 800c4c2:	f006 ff33 	bl	801332c <uxr_prepare_best_effort_buffer_to_write>
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	e7e1      	b.n	800c48e <uxr_prepare_stream_to_write_submessage+0x4a>
 800c4ca:	bf00      	nop

0800c4cc <uxr_init_session_info>:
 800c4cc:	0e13      	lsrs	r3, r2, #24
 800c4ce:	7043      	strb	r3, [r0, #1]
 800c4d0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800c4d4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c4d8:	7001      	strb	r1, [r0, #0]
 800c4da:	70c3      	strb	r3, [r0, #3]
 800c4dc:	2109      	movs	r1, #9
 800c4de:	23ff      	movs	r3, #255	; 0xff
 800c4e0:	f880 c002 	strb.w	ip, [r0, #2]
 800c4e4:	7102      	strb	r2, [r0, #4]
 800c4e6:	80c1      	strh	r1, [r0, #6]
 800c4e8:	7143      	strb	r3, [r0, #5]
 800c4ea:	4770      	bx	lr

0800c4ec <uxr_buffer_create_session>:
 800c4ec:	b530      	push	{r4, r5, lr}
 800c4ee:	b089      	sub	sp, #36	; 0x24
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	4d12      	ldr	r5, [pc, #72]	; (800c53c <uxr_buffer_create_session+0x50>)
 800c4f4:	9307      	str	r3, [sp, #28]
 800c4f6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	9301      	str	r3, [sp, #4]
 800c4fe:	80c2      	strh	r2, [r0, #6]
 800c500:	f88d 2004 	strb.w	r2, [sp, #4]
 800c504:	682a      	ldr	r2, [r5, #0]
 800c506:	9200      	str	r2, [sp, #0]
 800c508:	88aa      	ldrh	r2, [r5, #4]
 800c50a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c50e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800c512:	9202      	str	r2, [sp, #8]
 800c514:	460c      	mov	r4, r1
 800c516:	7802      	ldrb	r2, [r0, #0]
 800c518:	9303      	str	r3, [sp, #12]
 800c51a:	4619      	mov	r1, r3
 800c51c:	f88d 200c 	strb.w	r2, [sp, #12]
 800c520:	4620      	mov	r0, r4
 800c522:	2210      	movs	r2, #16
 800c524:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c528:	9306      	str	r3, [sp, #24]
 800c52a:	f000 fa29 	bl	800c980 <uxr_buffer_submessage_header>
 800c52e:	4669      	mov	r1, sp
 800c530:	4620      	mov	r0, r4
 800c532:	f001 fa6d 	bl	800da10 <uxr_serialize_CREATE_CLIENT_Payload>
 800c536:	b009      	add	sp, #36	; 0x24
 800c538:	bd30      	pop	{r4, r5, pc}
 800c53a:	bf00      	nop
 800c53c:	080167ec 	.word	0x080167ec

0800c540 <uxr_buffer_delete_session>:
 800c540:	b510      	push	{r4, lr}
 800c542:	4b0c      	ldr	r3, [pc, #48]	; (800c574 <uxr_buffer_delete_session+0x34>)
 800c544:	b082      	sub	sp, #8
 800c546:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800c54a:	f8ad c006 	strh.w	ip, [sp, #6]
 800c54e:	460c      	mov	r4, r1
 800c550:	2202      	movs	r2, #2
 800c552:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c556:	80c2      	strh	r2, [r0, #6]
 800c558:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c55c:	2204      	movs	r2, #4
 800c55e:	2300      	movs	r3, #0
 800c560:	2103      	movs	r1, #3
 800c562:	4620      	mov	r0, r4
 800c564:	f000 fa0c 	bl	800c980 <uxr_buffer_submessage_header>
 800c568:	a901      	add	r1, sp, #4
 800c56a:	4620      	mov	r0, r4
 800c56c:	f001 faf6 	bl	800db5c <uxr_serialize_DELETE_Payload>
 800c570:	b002      	add	sp, #8
 800c572:	bd10      	pop	{r4, pc}
 800c574:	080167ec 	.word	0x080167ec

0800c578 <uxr_read_create_session_status>:
 800c578:	b510      	push	{r4, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	4604      	mov	r4, r0
 800c57e:	4608      	mov	r0, r1
 800c580:	a901      	add	r1, sp, #4
 800c582:	f001 fafb 	bl	800db7c <uxr_deserialize_STATUS_AGENT_Payload>
 800c586:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c58a:	7163      	strb	r3, [r4, #5]
 800c58c:	b008      	add	sp, #32
 800c58e:	bd10      	pop	{r4, pc}

0800c590 <uxr_read_delete_session_status>:
 800c590:	b510      	push	{r4, lr}
 800c592:	4604      	mov	r4, r0
 800c594:	b084      	sub	sp, #16
 800c596:	4608      	mov	r0, r1
 800c598:	a902      	add	r1, sp, #8
 800c59a:	f001 fb1f 	bl	800dbdc <uxr_deserialize_STATUS_Payload>
 800c59e:	88e3      	ldrh	r3, [r4, #6]
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d001      	beq.n	800c5a8 <uxr_read_delete_session_status+0x18>
 800c5a4:	b004      	add	sp, #16
 800c5a6:	bd10      	pop	{r4, pc}
 800c5a8:	f10d 000a 	add.w	r0, sp, #10
 800c5ac:	f7fe fffc 	bl	800b5a8 <uxr_object_id_from_raw>
 800c5b0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800c5b4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800c5b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	bf04      	itt	eq
 800c5c2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800c5c6:	7163      	strbeq	r3, [r4, #5]
 800c5c8:	b004      	add	sp, #16
 800c5ca:	bd10      	pop	{r4, pc}

0800c5cc <uxr_stamp_create_session_header>:
 800c5cc:	b510      	push	{r4, lr}
 800c5ce:	2208      	movs	r2, #8
 800c5d0:	b08a      	sub	sp, #40	; 0x28
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	eb0d 0002 	add.w	r0, sp, r2
 800c5d8:	f7fc fa9c 	bl	8008b14 <ucdr_init_buffer>
 800c5dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e0:	9400      	str	r4, [sp, #0]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800c5ea:	a802      	add	r0, sp, #8
 800c5ec:	f000 fbc2 	bl	800cd74 <uxr_serialize_message_header>
 800c5f0:	b00a      	add	sp, #40	; 0x28
 800c5f2:	bd10      	pop	{r4, pc}

0800c5f4 <uxr_stamp_session_header>:
 800c5f4:	b530      	push	{r4, r5, lr}
 800c5f6:	b08d      	sub	sp, #52	; 0x34
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	460d      	mov	r5, r1
 800c5fc:	9203      	str	r2, [sp, #12]
 800c5fe:	4619      	mov	r1, r3
 800c600:	a804      	add	r0, sp, #16
 800c602:	2208      	movs	r2, #8
 800c604:	f7fc fa86 	bl	8008b14 <ucdr_init_buffer>
 800c608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c60c:	9b03      	ldr	r3, [sp, #12]
 800c60e:	9400      	str	r4, [sp, #0]
 800c610:	462a      	mov	r2, r5
 800c612:	a804      	add	r0, sp, #16
 800c614:	f000 fbae 	bl	800cd74 <uxr_serialize_message_header>
 800c618:	b00d      	add	sp, #52	; 0x34
 800c61a:	bd30      	pop	{r4, r5, pc}

0800c61c <uxr_read_session_header>:
 800c61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c620:	4607      	mov	r7, r0
 800c622:	b084      	sub	sp, #16
 800c624:	4608      	mov	r0, r1
 800c626:	460c      	mov	r4, r1
 800c628:	4615      	mov	r5, r2
 800c62a:	461e      	mov	r6, r3
 800c62c:	f7fc faa2 	bl	8008b74 <ucdr_buffer_remaining>
 800c630:	2808      	cmp	r0, #8
 800c632:	d803      	bhi.n	800c63c <uxr_read_session_header+0x20>
 800c634:	2000      	movs	r0, #0
 800c636:	b004      	add	sp, #16
 800c638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c63c:	f10d 080c 	add.w	r8, sp, #12
 800c640:	4633      	mov	r3, r6
 800c642:	462a      	mov	r2, r5
 800c644:	f8cd 8000 	str.w	r8, [sp]
 800c648:	4620      	mov	r0, r4
 800c64a:	f10d 010b 	add.w	r1, sp, #11
 800c64e:	f000 fbaf 	bl	800cdb0 <uxr_deserialize_message_header>
 800c652:	783a      	ldrb	r2, [r7, #0]
 800c654:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800c658:	4293      	cmp	r3, r2
 800c65a:	d1eb      	bne.n	800c634 <uxr_read_session_header+0x18>
 800c65c:	061b      	lsls	r3, r3, #24
 800c65e:	d41c      	bmi.n	800c69a <uxr_read_session_header+0x7e>
 800c660:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c664:	787b      	ldrb	r3, [r7, #1]
 800c666:	429a      	cmp	r2, r3
 800c668:	d003      	beq.n	800c672 <uxr_read_session_header+0x56>
 800c66a:	2001      	movs	r0, #1
 800c66c:	f080 0001 	eor.w	r0, r0, #1
 800c670:	e7e1      	b.n	800c636 <uxr_read_session_header+0x1a>
 800c672:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800c676:	78bb      	ldrb	r3, [r7, #2]
 800c678:	429a      	cmp	r2, r3
 800c67a:	f107 0102 	add.w	r1, r7, #2
 800c67e:	d1f4      	bne.n	800c66a <uxr_read_session_header+0x4e>
 800c680:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800c684:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c688:	429a      	cmp	r2, r3
 800c68a:	d1ee      	bne.n	800c66a <uxr_read_session_header+0x4e>
 800c68c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c690:	784b      	ldrb	r3, [r1, #1]
 800c692:	429a      	cmp	r2, r3
 800c694:	d1e9      	bne.n	800c66a <uxr_read_session_header+0x4e>
 800c696:	2000      	movs	r0, #0
 800c698:	e7e8      	b.n	800c66c <uxr_read_session_header+0x50>
 800c69a:	2001      	movs	r0, #1
 800c69c:	e7cb      	b.n	800c636 <uxr_read_session_header+0x1a>
 800c69e:	bf00      	nop

0800c6a0 <uxr_session_header_offset>:
 800c6a0:	f990 3000 	ldrsb.w	r3, [r0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	bfac      	ite	ge
 800c6a8:	2008      	movge	r0, #8
 800c6aa:	2004      	movlt	r0, #4
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop

0800c6b0 <uxr_init_base_object_request>:
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	88c3      	ldrh	r3, [r0, #6]
 800c6b4:	b082      	sub	sp, #8
 800c6b6:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800c6ba:	9101      	str	r1, [sp, #4]
 800c6bc:	f1a3 010a 	sub.w	r1, r3, #10
 800c6c0:	b289      	uxth	r1, r1
 800c6c2:	42a1      	cmp	r1, r4
 800c6c4:	d80e      	bhi.n	800c6e4 <uxr_init_base_object_request+0x34>
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	b29c      	uxth	r4, r3
 800c6ca:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	80c4      	strh	r4, [r0, #6]
 800c6d2:	9801      	ldr	r0, [sp, #4]
 800c6d4:	7011      	strb	r1, [r2, #0]
 800c6d6:	7053      	strb	r3, [r2, #1]
 800c6d8:	1c91      	adds	r1, r2, #2
 800c6da:	f7fe ff79 	bl	800b5d0 <uxr_object_id_to_raw>
 800c6de:	4620      	mov	r0, r4
 800c6e0:	b002      	add	sp, #8
 800c6e2:	bd10      	pop	{r4, pc}
 800c6e4:	230a      	movs	r3, #10
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	461c      	mov	r4, r3
 800c6ea:	e7f1      	b.n	800c6d0 <uxr_init_base_object_request+0x20>

0800c6ec <uxr_parse_base_object_request>:
 800c6ec:	b570      	push	{r4, r5, r6, lr}
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	3002      	adds	r0, #2
 800c6f2:	460d      	mov	r5, r1
 800c6f4:	4616      	mov	r6, r2
 800c6f6:	f7fe ff57 	bl	800b5a8 <uxr_object_id_from_raw>
 800c6fa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800c6fe:	8028      	strh	r0, [r5, #0]
 800c700:	806b      	strh	r3, [r5, #2]
 800c702:	7822      	ldrb	r2, [r4, #0]
 800c704:	7863      	ldrb	r3, [r4, #1]
 800c706:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c70a:	8033      	strh	r3, [r6, #0]
 800c70c:	bd70      	pop	{r4, r5, r6, pc}
 800c70e:	bf00      	nop

0800c710 <uxr_stream_id>:
 800c710:	2901      	cmp	r1, #1
 800c712:	b082      	sub	sp, #8
 800c714:	d01d      	beq.n	800c752 <uxr_stream_id+0x42>
 800c716:	2902      	cmp	r1, #2
 800c718:	f04f 0c00 	mov.w	ip, #0
 800c71c:	d01e      	beq.n	800c75c <uxr_stream_id+0x4c>
 800c71e:	2300      	movs	r3, #0
 800c720:	f36c 0307 	bfi	r3, ip, #0, #8
 800c724:	f360 230f 	bfi	r3, r0, #8, #8
 800c728:	f361 4317 	bfi	r3, r1, #16, #8
 800c72c:	f362 631f 	bfi	r3, r2, #24, #8
 800c730:	b2da      	uxtb	r2, r3
 800c732:	2000      	movs	r0, #0
 800c734:	f362 0007 	bfi	r0, r2, #0, #8
 800c738:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c73c:	f362 200f 	bfi	r0, r2, #8, #8
 800c740:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c744:	f362 4017 	bfi	r0, r2, #16, #8
 800c748:	0e1b      	lsrs	r3, r3, #24
 800c74a:	f363 601f 	bfi	r0, r3, #24, #8
 800c74e:	b002      	add	sp, #8
 800c750:	4770      	bx	lr
 800c752:	f100 0c01 	add.w	ip, r0, #1
 800c756:	fa5f fc8c 	uxtb.w	ip, ip
 800c75a:	e7e0      	b.n	800c71e <uxr_stream_id+0xe>
 800c75c:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800c760:	e7dd      	b.n	800c71e <uxr_stream_id+0xe>
 800c762:	bf00      	nop

0800c764 <uxr_stream_id_from_raw>:
 800c764:	b082      	sub	sp, #8
 800c766:	b130      	cbz	r0, 800c776 <uxr_stream_id_from_raw+0x12>
 800c768:	0603      	lsls	r3, r0, #24
 800c76a:	d420      	bmi.n	800c7ae <uxr_stream_id_from_raw+0x4a>
 800c76c:	1e42      	subs	r2, r0, #1
 800c76e:	b2d2      	uxtb	r2, r2
 800c770:	f04f 0c01 	mov.w	ip, #1
 800c774:	e001      	b.n	800c77a <uxr_stream_id_from_raw+0x16>
 800c776:	4684      	mov	ip, r0
 800c778:	4602      	mov	r2, r0
 800c77a:	2300      	movs	r3, #0
 800c77c:	f360 0307 	bfi	r3, r0, #0, #8
 800c780:	f362 230f 	bfi	r3, r2, #8, #8
 800c784:	f36c 4317 	bfi	r3, ip, #16, #8
 800c788:	f361 631f 	bfi	r3, r1, #24, #8
 800c78c:	b2da      	uxtb	r2, r3
 800c78e:	2000      	movs	r0, #0
 800c790:	f362 0007 	bfi	r0, r2, #0, #8
 800c794:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c798:	f362 200f 	bfi	r0, r2, #8, #8
 800c79c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c7a0:	f362 4017 	bfi	r0, r2, #16, #8
 800c7a4:	0e1b      	lsrs	r3, r3, #24
 800c7a6:	f363 601f 	bfi	r0, r3, #24, #8
 800c7aa:	b002      	add	sp, #8
 800c7ac:	4770      	bx	lr
 800c7ae:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800c7b2:	f04f 0c02 	mov.w	ip, #2
 800c7b6:	e7e0      	b.n	800c77a <uxr_stream_id_from_raw+0x16>

0800c7b8 <uxr_init_stream_storage>:
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	7403      	strb	r3, [r0, #16]
 800c7bc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800c7c0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800c7c4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop

0800c7cc <uxr_reset_stream_storage>:
 800c7cc:	b570      	push	{r4, r5, r6, lr}
 800c7ce:	7c03      	ldrb	r3, [r0, #16]
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	b153      	cbz	r3, 800c7ea <uxr_reset_stream_storage+0x1e>
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	2500      	movs	r5, #0
 800c7d8:	4630      	mov	r0, r6
 800c7da:	f006 fda1 	bl	8013320 <uxr_reset_output_best_effort_stream>
 800c7de:	7c23      	ldrb	r3, [r4, #16]
 800c7e0:	3501      	adds	r5, #1
 800c7e2:	42ab      	cmp	r3, r5
 800c7e4:	f106 0610 	add.w	r6, r6, #16
 800c7e8:	d8f6      	bhi.n	800c7d8 <uxr_reset_stream_storage+0xc>
 800c7ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c7ee:	b163      	cbz	r3, 800c80a <uxr_reset_stream_storage+0x3e>
 800c7f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c7f4:	2500      	movs	r5, #0
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f006 fb94 	bl	8012f24 <uxr_reset_input_best_effort_stream>
 800c7fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c800:	3501      	adds	r5, #1
 800c802:	42ab      	cmp	r3, r5
 800c804:	f106 0602 	add.w	r6, r6, #2
 800c808:	d8f5      	bhi.n	800c7f6 <uxr_reset_stream_storage+0x2a>
 800c80a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c80e:	b163      	cbz	r3, 800c82a <uxr_reset_stream_storage+0x5e>
 800c810:	f104 0618 	add.w	r6, r4, #24
 800c814:	2500      	movs	r5, #0
 800c816:	4630      	mov	r0, r6
 800c818:	f006 fe2e 	bl	8013478 <uxr_reset_output_reliable_stream>
 800c81c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c820:	3501      	adds	r5, #1
 800c822:	42ab      	cmp	r3, r5
 800c824:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c828:	d8f5      	bhi.n	800c816 <uxr_reset_stream_storage+0x4a>
 800c82a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800c82e:	b163      	cbz	r3, 800c84a <uxr_reset_stream_storage+0x7e>
 800c830:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800c834:	2500      	movs	r5, #0
 800c836:	4630      	mov	r0, r6
 800c838:	f006 fbe8 	bl	801300c <uxr_reset_input_reliable_stream>
 800c83c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800c840:	3501      	adds	r5, #1
 800c842:	42ab      	cmp	r3, r5
 800c844:	f106 0618 	add.w	r6, r6, #24
 800c848:	d8f5      	bhi.n	800c836 <uxr_reset_stream_storage+0x6a>
 800c84a:	bd70      	pop	{r4, r5, r6, pc}

0800c84c <uxr_add_output_best_effort_buffer>:
 800c84c:	b510      	push	{r4, lr}
 800c84e:	7c04      	ldrb	r4, [r0, #16]
 800c850:	f104 0c01 	add.w	ip, r4, #1
 800c854:	b082      	sub	sp, #8
 800c856:	f880 c010 	strb.w	ip, [r0, #16]
 800c85a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800c85e:	f006 fd55 	bl	801330c <uxr_init_output_best_effort_stream>
 800c862:	2201      	movs	r2, #1
 800c864:	4611      	mov	r1, r2
 800c866:	4620      	mov	r0, r4
 800c868:	b002      	add	sp, #8
 800c86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c86e:	f7ff bf4f 	b.w	800c710 <uxr_stream_id>
 800c872:	bf00      	nop

0800c874 <uxr_add_output_reliable_buffer>:
 800c874:	b510      	push	{r4, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	4684      	mov	ip, r0
 800c87a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c87e:	9000      	str	r0, [sp, #0]
 800c880:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800c884:	2028      	movs	r0, #40	; 0x28
 800c886:	fb00 c004 	mla	r0, r0, r4, ip
 800c88a:	f104 0e01 	add.w	lr, r4, #1
 800c88e:	3018      	adds	r0, #24
 800c890:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800c894:	f006 fdb8 	bl	8013408 <uxr_init_output_reliable_stream>
 800c898:	2201      	movs	r2, #1
 800c89a:	2102      	movs	r1, #2
 800c89c:	4620      	mov	r0, r4
 800c89e:	b004      	add	sp, #16
 800c8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8a4:	f7ff bf34 	b.w	800c710 <uxr_stream_id>

0800c8a8 <uxr_add_input_best_effort_buffer>:
 800c8a8:	b510      	push	{r4, lr}
 800c8aa:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	1c62      	adds	r2, r4, #1
 800c8b2:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800c8bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8c0:	f006 fb2c 	bl	8012f1c <uxr_init_input_best_effort_stream>
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	2101      	movs	r1, #1
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	b002      	add	sp, #8
 800c8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8d0:	f7ff bf1e 	b.w	800c710 <uxr_stream_id>

0800c8d4 <uxr_add_input_reliable_buffer>:
 800c8d4:	b510      	push	{r4, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	4684      	mov	ip, r0
 800c8da:	9806      	ldr	r0, [sp, #24]
 800c8dc:	9000      	str	r0, [sp, #0]
 800c8de:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800c8e2:	2018      	movs	r0, #24
 800c8e4:	fb00 c004 	mla	r0, r0, r4, ip
 800c8e8:	f104 0e01 	add.w	lr, r4, #1
 800c8ec:	3048      	adds	r0, #72	; 0x48
 800c8ee:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800c8f2:	f006 fb5f 	bl	8012fb4 <uxr_init_input_reliable_stream>
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	2102      	movs	r1, #2
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	b004      	add	sp, #16
 800c8fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c902:	f7ff bf05 	b.w	800c710 <uxr_stream_id>
 800c906:	bf00      	nop

0800c908 <uxr_get_output_best_effort_stream>:
 800c908:	7c03      	ldrb	r3, [r0, #16]
 800c90a:	428b      	cmp	r3, r1
 800c90c:	bf8c      	ite	hi
 800c90e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800c912:	2000      	movls	r0, #0
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop

0800c918 <uxr_get_output_reliable_stream>:
 800c918:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c91c:	428b      	cmp	r3, r1
 800c91e:	bf83      	ittte	hi
 800c920:	2328      	movhi	r3, #40	; 0x28
 800c922:	fb03 0001 	mlahi	r0, r3, r1, r0
 800c926:	3018      	addhi	r0, #24
 800c928:	2000      	movls	r0, #0
 800c92a:	4770      	bx	lr

0800c92c <uxr_get_input_best_effort_stream>:
 800c92c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800c930:	428b      	cmp	r3, r1
 800c932:	bf86      	itte	hi
 800c934:	3121      	addhi	r1, #33	; 0x21
 800c936:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800c93a:	2000      	movls	r0, #0
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop

0800c940 <uxr_get_input_reliable_stream>:
 800c940:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800c944:	428b      	cmp	r3, r1
 800c946:	bf83      	ittte	hi
 800c948:	2318      	movhi	r3, #24
 800c94a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800c94e:	3048      	addhi	r0, #72	; 0x48
 800c950:	2000      	movls	r0, #0
 800c952:	4770      	bx	lr

0800c954 <uxr_output_streams_confirmed>:
 800c954:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c958:	b183      	cbz	r3, 800c97c <uxr_output_streams_confirmed+0x28>
 800c95a:	b570      	push	{r4, r5, r6, lr}
 800c95c:	4606      	mov	r6, r0
 800c95e:	f100 0518 	add.w	r5, r0, #24
 800c962:	2400      	movs	r4, #0
 800c964:	e001      	b.n	800c96a <uxr_output_streams_confirmed+0x16>
 800c966:	3528      	adds	r5, #40	; 0x28
 800c968:	b138      	cbz	r0, 800c97a <uxr_output_streams_confirmed+0x26>
 800c96a:	4628      	mov	r0, r5
 800c96c:	f006 fff4 	bl	8013958 <uxr_is_output_up_to_date>
 800c970:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800c974:	3401      	adds	r4, #1
 800c976:	42a3      	cmp	r3, r4
 800c978:	d8f5      	bhi.n	800c966 <uxr_output_streams_confirmed+0x12>
 800c97a:	bd70      	pop	{r4, r5, r6, pc}
 800c97c:	2001      	movs	r0, #1
 800c97e:	4770      	bx	lr

0800c980 <uxr_buffer_submessage_header>:
 800c980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c982:	4604      	mov	r4, r0
 800c984:	460e      	mov	r6, r1
 800c986:	2104      	movs	r1, #4
 800c988:	4615      	mov	r5, r2
 800c98a:	461f      	mov	r7, r3
 800c98c:	f7fc f8dc 	bl	8008b48 <ucdr_align_to>
 800c990:	2301      	movs	r3, #1
 800c992:	ea47 0203 	orr.w	r2, r7, r3
 800c996:	4631      	mov	r1, r6
 800c998:	7523      	strb	r3, [r4, #20]
 800c99a:	4620      	mov	r0, r4
 800c99c:	462b      	mov	r3, r5
 800c99e:	f000 fa27 	bl	800cdf0 <uxr_serialize_submessage_header>
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f7fc f8e6 	bl	8008b74 <ucdr_buffer_remaining>
 800c9a8:	42a8      	cmp	r0, r5
 800c9aa:	bf34      	ite	cc
 800c9ac:	2000      	movcc	r0, #0
 800c9ae:	2001      	movcs	r0, #1
 800c9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9b2:	bf00      	nop

0800c9b4 <uxr_read_submessage_header>:
 800c9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b8:	4604      	mov	r4, r0
 800c9ba:	460d      	mov	r5, r1
 800c9bc:	2104      	movs	r1, #4
 800c9be:	4616      	mov	r6, r2
 800c9c0:	4698      	mov	r8, r3
 800c9c2:	f7fc f8c1 	bl	8008b48 <ucdr_align_to>
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f7fc f8d4 	bl	8008b74 <ucdr_buffer_remaining>
 800c9cc:	2803      	cmp	r0, #3
 800c9ce:	bf8c      	ite	hi
 800c9d0:	2701      	movhi	r7, #1
 800c9d2:	2700      	movls	r7, #0
 800c9d4:	d802      	bhi.n	800c9dc <uxr_read_submessage_header+0x28>
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9dc:	4633      	mov	r3, r6
 800c9de:	4642      	mov	r2, r8
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	4629      	mov	r1, r5
 800c9e4:	f000 fa18 	bl	800ce18 <uxr_deserialize_submessage_header>
 800c9e8:	f898 3000 	ldrb.w	r3, [r8]
 800c9ec:	f003 0201 	and.w	r2, r3, #1
 800c9f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c9f4:	f888 3000 	strb.w	r3, [r8]
 800c9f8:	7522      	strb	r2, [r4, #20]
 800c9fa:	4638      	mov	r0, r7
 800c9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ca00 <uxr_submessage_padding>:
 800ca00:	f010 0003 	ands.w	r0, r0, #3
 800ca04:	bf18      	it	ne
 800ca06:	f1c0 0004 	rsbne	r0, r0, #4
 800ca0a:	4770      	bx	lr

0800ca0c <uxr_millis>:
 800ca0c:	b510      	push	{r4, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	4669      	mov	r1, sp
 800ca12:	2001      	movs	r0, #1
 800ca14:	f7f4 fcbc 	bl	8001390 <clock_gettime>
 800ca18:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800ca1c:	4906      	ldr	r1, [pc, #24]	; (800ca38 <uxr_millis+0x2c>)
 800ca1e:	fba0 0301 	umull	r0, r3, r0, r1
 800ca22:	1900      	adds	r0, r0, r4
 800ca24:	fb01 3102 	mla	r1, r1, r2, r3
 800ca28:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ca2c:	4a03      	ldr	r2, [pc, #12]	; (800ca3c <uxr_millis+0x30>)
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f7f3 fc3e 	bl	80002b0 <__aeabi_ldivmod>
 800ca34:	b004      	add	sp, #16
 800ca36:	bd10      	pop	{r4, pc}
 800ca38:	3b9aca00 	.word	0x3b9aca00
 800ca3c:	000f4240 	.word	0x000f4240

0800ca40 <uxr_nanos>:
 800ca40:	b510      	push	{r4, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	4669      	mov	r1, sp
 800ca46:	2001      	movs	r0, #1
 800ca48:	f7f4 fca2 	bl	8001390 <clock_gettime>
 800ca4c:	4a06      	ldr	r2, [pc, #24]	; (800ca68 <uxr_nanos+0x28>)
 800ca4e:	9800      	ldr	r0, [sp, #0]
 800ca50:	9902      	ldr	r1, [sp, #8]
 800ca52:	9c01      	ldr	r4, [sp, #4]
 800ca54:	fba0 0302 	umull	r0, r3, r0, r2
 800ca58:	1840      	adds	r0, r0, r1
 800ca5a:	fb02 3304 	mla	r3, r2, r4, r3
 800ca5e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800ca62:	b004      	add	sp, #16
 800ca64:	bd10      	pop	{r4, pc}
 800ca66:	bf00      	nop
 800ca68:	3b9aca00 	.word	0x3b9aca00

0800ca6c <on_full_output_buffer_fragmented>:
 800ca6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca70:	460c      	mov	r4, r1
 800ca72:	b08a      	sub	sp, #40	; 0x28
 800ca74:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800ca78:	4606      	mov	r6, r0
 800ca7a:	f104 0008 	add.w	r0, r4, #8
 800ca7e:	f7ff ff4b 	bl	800c918 <uxr_get_output_reliable_stream>
 800ca82:	4605      	mov	r5, r0
 800ca84:	f006 ff72 	bl	801396c <get_available_free_slots>
 800ca88:	b968      	cbnz	r0, 800caa6 <on_full_output_buffer_fragmented+0x3a>
 800ca8a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4798      	blx	r3
 800ca92:	b918      	cbnz	r0, 800ca9c <on_full_output_buffer_fragmented+0x30>
 800ca94:	2001      	movs	r0, #1
 800ca96:	b00a      	add	sp, #40	; 0x28
 800ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	f006 ff65 	bl	801396c <get_available_free_slots>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d0f6      	beq.n	800ca94 <on_full_output_buffer_fragmented+0x28>
 800caa6:	8929      	ldrh	r1, [r5, #8]
 800caa8:	89eb      	ldrh	r3, [r5, #14]
 800caaa:	7b28      	ldrb	r0, [r5, #12]
 800caac:	686a      	ldr	r2, [r5, #4]
 800caae:	fbb2 f8f1 	udiv	r8, r2, r1
 800cab2:	fbb3 f2f1 	udiv	r2, r3, r1
 800cab6:	fb01 3112 	mls	r1, r1, r2, r3
 800caba:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800cabe:	b289      	uxth	r1, r1
 800cac0:	fb08 f101 	mul.w	r1, r8, r1
 800cac4:	30fc      	adds	r0, #252	; 0xfc
 800cac6:	f1a8 0804 	sub.w	r8, r8, #4
 800caca:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800cace:	4440      	add	r0, r8
 800cad0:	b287      	uxth	r7, r0
 800cad2:	1bdb      	subs	r3, r3, r7
 800cad4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800cad8:	682b      	ldr	r3, [r5, #0]
 800cada:	3104      	adds	r1, #4
 800cadc:	4419      	add	r1, r3
 800cade:	4642      	mov	r2, r8
 800cae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	a802      	add	r0, sp, #8
 800cae8:	2300      	movs	r3, #0
 800caea:	f7fc f801 	bl	8008af0 <ucdr_init_buffer_origin_offset>
 800caee:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800caf2:	f102 0308 	add.w	r3, r2, #8
 800caf6:	4543      	cmp	r3, r8
 800caf8:	d928      	bls.n	800cb4c <on_full_output_buffer_fragmented+0xe0>
 800cafa:	463a      	mov	r2, r7
 800cafc:	2300      	movs	r3, #0
 800cafe:	210d      	movs	r1, #13
 800cb00:	a802      	add	r0, sp, #8
 800cb02:	f7ff ff3d 	bl	800c980 <uxr_buffer_submessage_header>
 800cb06:	8929      	ldrh	r1, [r5, #8]
 800cb08:	89eb      	ldrh	r3, [r5, #14]
 800cb0a:	fbb3 f2f1 	udiv	r2, r3, r1
 800cb0e:	fb01 3312 	mls	r3, r1, r2, r3
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	686a      	ldr	r2, [r5, #4]
 800cb16:	fbb2 f2f1 	udiv	r2, r2, r1
 800cb1a:	fb02 f303 	mul.w	r3, r2, r3
 800cb1e:	682a      	ldr	r2, [r5, #0]
 800cb20:	f842 8003 	str.w	r8, [r2, r3]
 800cb24:	89e8      	ldrh	r0, [r5, #14]
 800cb26:	2101      	movs	r1, #1
 800cb28:	f007 f870 	bl	8013c0c <uxr_seq_num_add>
 800cb2c:	9904      	ldr	r1, [sp, #16]
 800cb2e:	9a03      	ldr	r2, [sp, #12]
 800cb30:	81e8      	strh	r0, [r5, #14]
 800cb32:	1a52      	subs	r2, r2, r1
 800cb34:	4630      	mov	r0, r6
 800cb36:	f7fb ffed 	bl	8008b14 <ucdr_init_buffer>
 800cb3a:	4630      	mov	r0, r6
 800cb3c:	490f      	ldr	r1, [pc, #60]	; (800cb7c <on_full_output_buffer_fragmented+0x110>)
 800cb3e:	4622      	mov	r2, r4
 800cb40:	f7fb ffbc 	bl	8008abc <ucdr_set_on_full_buffer_callback>
 800cb44:	2000      	movs	r0, #0
 800cb46:	b00a      	add	sp, #40	; 0x28
 800cb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb4c:	b292      	uxth	r2, r2
 800cb4e:	2302      	movs	r3, #2
 800cb50:	210d      	movs	r1, #13
 800cb52:	a802      	add	r0, sp, #8
 800cb54:	f7ff ff14 	bl	800c980 <uxr_buffer_submessage_header>
 800cb58:	8928      	ldrh	r0, [r5, #8]
 800cb5a:	89eb      	ldrh	r3, [r5, #14]
 800cb5c:	fbb3 f1f0 	udiv	r1, r3, r0
 800cb60:	fb00 3311 	mls	r3, r0, r1, r3
 800cb64:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800cb68:	6869      	ldr	r1, [r5, #4]
 800cb6a:	fbb1 f1f0 	udiv	r1, r1, r0
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	fb01 f303 	mul.w	r3, r1, r3
 800cb74:	6829      	ldr	r1, [r5, #0]
 800cb76:	3208      	adds	r2, #8
 800cb78:	50ca      	str	r2, [r1, r3]
 800cb7a:	e7d3      	b.n	800cb24 <on_full_output_buffer_fragmented+0xb8>
 800cb7c:	0800ca6d 	.word	0x0800ca6d

0800cb80 <uxr_prepare_output_stream>:
 800cb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb82:	b087      	sub	sp, #28
 800cb84:	2707      	movs	r7, #7
 800cb86:	9202      	str	r2, [sp, #8]
 800cb88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb8a:	9103      	str	r1, [sp, #12]
 800cb8c:	2500      	movs	r5, #0
 800cb8e:	3204      	adds	r2, #4
 800cb90:	e9cd 7500 	strd	r7, r5, [sp]
 800cb94:	461c      	mov	r4, r3
 800cb96:	4606      	mov	r6, r0
 800cb98:	f7ff fc54 	bl	800c444 <uxr_prepare_stream_to_write_submessage>
 800cb9c:	f080 0201 	eor.w	r2, r0, #1
 800cba0:	b2d2      	uxtb	r2, r2
 800cba2:	75a2      	strb	r2, [r4, #22]
 800cba4:	b112      	cbz	r2, 800cbac <uxr_prepare_output_stream+0x2c>
 800cba6:	4628      	mov	r0, r5
 800cba8:	b007      	add	sp, #28
 800cbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbac:	aa05      	add	r2, sp, #20
 800cbae:	9902      	ldr	r1, [sp, #8]
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	f7ff fd7d 	bl	800c6b0 <uxr_init_base_object_request>
 800cbb6:	a905      	add	r1, sp, #20
 800cbb8:	4605      	mov	r5, r0
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f001 f88c 	bl	800dcd8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800cbc0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800cbc4:	69a6      	ldr	r6, [r4, #24]
 800cbc6:	69e7      	ldr	r7, [r4, #28]
 800cbc8:	1a52      	subs	r2, r2, r1
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f7fb ffa2 	bl	8008b14 <ucdr_init_buffer>
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	463a      	mov	r2, r7
 800cbd4:	4631      	mov	r1, r6
 800cbd6:	f7fb ff71 	bl	8008abc <ucdr_set_on_full_buffer_callback>
 800cbda:	4628      	mov	r0, r5
 800cbdc:	b007      	add	sp, #28
 800cbde:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbe0 <uxr_prepare_output_stream_fragmented>:
 800cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe4:	b091      	sub	sp, #68	; 0x44
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	9105      	str	r1, [sp, #20]
 800cbea:	3008      	adds	r0, #8
 800cbec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800cbf0:	461e      	mov	r6, r3
 800cbf2:	9204      	str	r2, [sp, #16]
 800cbf4:	f7ff fe90 	bl	800c918 <uxr_get_output_reliable_stream>
 800cbf8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	f000 8091 	beq.w	800cd24 <uxr_prepare_output_stream_fragmented+0x144>
 800cc02:	4604      	mov	r4, r0
 800cc04:	2800      	cmp	r0, #0
 800cc06:	f000 808d 	beq.w	800cd24 <uxr_prepare_output_stream_fragmented+0x144>
 800cc0a:	f006 feaf 	bl	801396c <get_available_free_slots>
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	f000 8083 	beq.w	800cd1a <uxr_prepare_output_stream_fragmented+0x13a>
 800cc14:	8922      	ldrh	r2, [r4, #8]
 800cc16:	89e7      	ldrh	r7, [r4, #14]
 800cc18:	fbb7 f9f2 	udiv	r9, r7, r2
 800cc1c:	fb02 7919 	mls	r9, r2, r9, r7
 800cc20:	fa1f f989 	uxth.w	r9, r9
 800cc24:	6863      	ldr	r3, [r4, #4]
 800cc26:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc2a:	6823      	ldr	r3, [r4, #0]
 800cc2c:	9203      	str	r2, [sp, #12]
 800cc2e:	fb02 f909 	mul.w	r9, r2, r9
 800cc32:	f109 0904 	add.w	r9, r9, #4
 800cc36:	4499      	add	r9, r3
 800cc38:	7b23      	ldrb	r3, [r4, #12]
 800cc3a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800cc3e:	4543      	cmp	r3, r8
 800cc40:	f1a2 0b04 	sub.w	fp, r2, #4
 800cc44:	d37a      	bcc.n	800cd3c <uxr_prepare_output_stream_fragmented+0x15c>
 800cc46:	f1ab 0a04 	sub.w	sl, fp, #4
 800cc4a:	ebaa 0a03 	sub.w	sl, sl, r3
 800cc4e:	465a      	mov	r2, fp
 800cc50:	2300      	movs	r3, #0
 800cc52:	4649      	mov	r1, r9
 800cc54:	a808      	add	r0, sp, #32
 800cc56:	f8cd 8000 	str.w	r8, [sp]
 800cc5a:	f7fb ff49 	bl	8008af0 <ucdr_init_buffer_origin_offset>
 800cc5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cc60:	fa1f fa8a 	uxth.w	sl, sl
 800cc64:	4652      	mov	r2, sl
 800cc66:	f103 0a08 	add.w	sl, r3, #8
 800cc6a:	45da      	cmp	sl, fp
 800cc6c:	bf34      	ite	cc
 800cc6e:	2302      	movcc	r3, #2
 800cc70:	2300      	movcs	r3, #0
 800cc72:	210d      	movs	r1, #13
 800cc74:	a808      	add	r0, sp, #32
 800cc76:	f7ff fe83 	bl	800c980 <uxr_buffer_submessage_header>
 800cc7a:	8921      	ldrh	r1, [r4, #8]
 800cc7c:	fbb7 f2f1 	udiv	r2, r7, r1
 800cc80:	fb01 7212 	mls	r2, r1, r2, r7
 800cc84:	b292      	uxth	r2, r2
 800cc86:	6863      	ldr	r3, [r4, #4]
 800cc88:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc8c:	fb02 f303 	mul.w	r3, r2, r3
 800cc90:	6822      	ldr	r2, [r4, #0]
 800cc92:	4638      	mov	r0, r7
 800cc94:	f842 b003 	str.w	fp, [r2, r3]
 800cc98:	2101      	movs	r1, #1
 800cc9a:	f006 ffb7 	bl	8013c0c <uxr_seq_num_add>
 800cc9e:	9b03      	ldr	r3, [sp, #12]
 800cca0:	f108 0104 	add.w	r1, r8, #4
 800cca4:	f1a3 0208 	sub.w	r2, r3, #8
 800cca8:	eba2 0208 	sub.w	r2, r2, r8
 800ccac:	4449      	add	r1, r9
 800ccae:	4607      	mov	r7, r0
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	f7fb ff2f 	bl	8008b14 <ucdr_init_buffer>
 800ccb6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ccb8:	81e7      	strh	r7, [r4, #14]
 800ccba:	1d1a      	adds	r2, r3, #4
 800ccbc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ccc0:	bf28      	it	cs
 800ccc2:	2200      	movcs	r2, #0
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	b292      	uxth	r2, r2
 800ccc8:	2107      	movs	r1, #7
 800ccca:	4630      	mov	r0, r6
 800cccc:	f7ff fe58 	bl	800c980 <uxr_buffer_submessage_header>
 800ccd0:	9904      	ldr	r1, [sp, #16]
 800ccd2:	aa07      	add	r2, sp, #28
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f7ff fceb 	bl	800c6b0 <uxr_init_base_object_request>
 800ccda:	4604      	mov	r4, r0
 800ccdc:	b318      	cbz	r0, 800cd26 <uxr_prepare_output_stream_fragmented+0x146>
 800ccde:	a907      	add	r1, sp, #28
 800cce0:	4630      	mov	r0, r6
 800cce2:	f000 fff9 	bl	800dcd8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800cce6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800ccea:	4630      	mov	r0, r6
 800ccec:	1a52      	subs	r2, r2, r1
 800ccee:	f7fb ff11 	bl	8008b14 <ucdr_init_buffer>
 800ccf2:	9b05      	ldr	r3, [sp, #20]
 800ccf4:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800ccf8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ccfa:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800ccfe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cd00:	491b      	ldr	r1, [pc, #108]	; (800cd70 <uxr_prepare_output_stream_fragmented+0x190>)
 800cd02:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800cd06:	4630      	mov	r0, r6
 800cd08:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800cd0c:	462a      	mov	r2, r5
 800cd0e:	f7fb fed5 	bl	8008abc <ucdr_set_on_full_buffer_callback>
 800cd12:	4620      	mov	r0, r4
 800cd14:	b011      	add	sp, #68	; 0x44
 800cd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd1e:	4628      	mov	r0, r5
 800cd20:	4798      	blx	r3
 800cd22:	b920      	cbnz	r0, 800cd2e <uxr_prepare_output_stream_fragmented+0x14e>
 800cd24:	2400      	movs	r4, #0
 800cd26:	4620      	mov	r0, r4
 800cd28:	b011      	add	sp, #68	; 0x44
 800cd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f006 fe1c 	bl	801396c <get_available_free_slots>
 800cd34:	2800      	cmp	r0, #0
 800cd36:	f47f af6d 	bne.w	800cc14 <uxr_prepare_output_stream_fragmented+0x34>
 800cd3a:	e7f3      	b.n	800cd24 <uxr_prepare_output_stream_fragmented+0x144>
 800cd3c:	4638      	mov	r0, r7
 800cd3e:	2101      	movs	r1, #1
 800cd40:	f006 ff64 	bl	8013c0c <uxr_seq_num_add>
 800cd44:	8921      	ldrh	r1, [r4, #8]
 800cd46:	fbb0 f2f1 	udiv	r2, r0, r1
 800cd4a:	fb01 0912 	mls	r9, r1, r2, r0
 800cd4e:	fa1f f289 	uxth.w	r2, r9
 800cd52:	6863      	ldr	r3, [r4, #4]
 800cd54:	fbb3 f9f1 	udiv	r9, r3, r1
 800cd58:	6823      	ldr	r3, [r4, #0]
 800cd5a:	fb02 f909 	mul.w	r9, r2, r9
 800cd5e:	f109 0904 	add.w	r9, r9, #4
 800cd62:	4499      	add	r9, r3
 800cd64:	4607      	mov	r7, r0
 800cd66:	7b23      	ldrb	r3, [r4, #12]
 800cd68:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800cd6c:	e76b      	b.n	800cc46 <uxr_prepare_output_stream_fragmented+0x66>
 800cd6e:	bf00      	nop
 800cd70:	0800ca6d 	.word	0x0800ca6d

0800cd74 <uxr_serialize_message_header>:
 800cd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd76:	b083      	sub	sp, #12
 800cd78:	4616      	mov	r6, r2
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	9301      	str	r3, [sp, #4]
 800cd7e:	460d      	mov	r5, r1
 800cd80:	9f08      	ldr	r7, [sp, #32]
 800cd82:	f7fa fd85 	bl	8007890 <ucdr_serialize_uint8_t>
 800cd86:	4631      	mov	r1, r6
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f7fa fd81 	bl	8007890 <ucdr_serialize_uint8_t>
 800cd8e:	9a01      	ldr	r2, [sp, #4]
 800cd90:	2101      	movs	r1, #1
 800cd92:	4620      	mov	r0, r4
 800cd94:	f7fa fe28 	bl	80079e8 <ucdr_serialize_endian_uint16_t>
 800cd98:	062b      	lsls	r3, r5, #24
 800cd9a:	d501      	bpl.n	800cda0 <uxr_serialize_message_header+0x2c>
 800cd9c:	b003      	add	sp, #12
 800cd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cda0:	2204      	movs	r2, #4
 800cda2:	4639      	mov	r1, r7
 800cda4:	4620      	mov	r0, r4
 800cda6:	b003      	add	sp, #12
 800cda8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cdac:	f005 bebc 	b.w	8012b28 <ucdr_serialize_array_uint8_t>

0800cdb0 <uxr_deserialize_message_header>:
 800cdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	4616      	mov	r6, r2
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	9301      	str	r3, [sp, #4]
 800cdba:	460d      	mov	r5, r1
 800cdbc:	9f08      	ldr	r7, [sp, #32]
 800cdbe:	f7fa fd7d 	bl	80078bc <ucdr_deserialize_uint8_t>
 800cdc2:	4631      	mov	r1, r6
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f7fa fd79 	bl	80078bc <ucdr_deserialize_uint8_t>
 800cdca:	9a01      	ldr	r2, [sp, #4]
 800cdcc:	2101      	movs	r1, #1
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f7fa fefe 	bl	8007bd0 <ucdr_deserialize_endian_uint16_t>
 800cdd4:	f995 3000 	ldrsb.w	r3, [r5]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	da01      	bge.n	800cde0 <uxr_deserialize_message_header+0x30>
 800cddc:	b003      	add	sp, #12
 800cdde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cde0:	2204      	movs	r2, #4
 800cde2:	4639      	mov	r1, r7
 800cde4:	4620      	mov	r0, r4
 800cde6:	b003      	add	sp, #12
 800cde8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cdec:	f005 bf00 	b.w	8012bf0 <ucdr_deserialize_array_uint8_t>

0800cdf0 <uxr_serialize_submessage_header>:
 800cdf0:	b530      	push	{r4, r5, lr}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	4615      	mov	r5, r2
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	9301      	str	r3, [sp, #4]
 800cdfa:	f7fa fd49 	bl	8007890 <ucdr_serialize_uint8_t>
 800cdfe:	4629      	mov	r1, r5
 800ce00:	4620      	mov	r0, r4
 800ce02:	f7fa fd45 	bl	8007890 <ucdr_serialize_uint8_t>
 800ce06:	9a01      	ldr	r2, [sp, #4]
 800ce08:	2101      	movs	r1, #1
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	b003      	add	sp, #12
 800ce0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce12:	f7fa bde9 	b.w	80079e8 <ucdr_serialize_endian_uint16_t>
 800ce16:	bf00      	nop

0800ce18 <uxr_deserialize_submessage_header>:
 800ce18:	b530      	push	{r4, r5, lr}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	4615      	mov	r5, r2
 800ce1e:	4604      	mov	r4, r0
 800ce20:	9301      	str	r3, [sp, #4]
 800ce22:	f7fa fd4b 	bl	80078bc <ucdr_deserialize_uint8_t>
 800ce26:	4629      	mov	r1, r5
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f7fa fd47 	bl	80078bc <ucdr_deserialize_uint8_t>
 800ce2e:	9a01      	ldr	r2, [sp, #4]
 800ce30:	2101      	movs	r1, #1
 800ce32:	4620      	mov	r0, r4
 800ce34:	b003      	add	sp, #12
 800ce36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce3a:	f7fa bec9 	b.w	8007bd0 <ucdr_deserialize_endian_uint16_t>
 800ce3e:	bf00      	nop

0800ce40 <uxr_serialize_CLIENT_Representation>:
 800ce40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce44:	2204      	movs	r2, #4
 800ce46:	460e      	mov	r6, r1
 800ce48:	4605      	mov	r5, r0
 800ce4a:	f005 fe6d 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800ce4e:	2202      	movs	r2, #2
 800ce50:	4607      	mov	r7, r0
 800ce52:	1d31      	adds	r1, r6, #4
 800ce54:	4628      	mov	r0, r5
 800ce56:	f005 fe67 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800ce5a:	4038      	ands	r0, r7
 800ce5c:	2202      	movs	r2, #2
 800ce5e:	1db1      	adds	r1, r6, #6
 800ce60:	b2c7      	uxtb	r7, r0
 800ce62:	4628      	mov	r0, r5
 800ce64:	f005 fe60 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800ce68:	2204      	movs	r2, #4
 800ce6a:	4007      	ands	r7, r0
 800ce6c:	f106 0108 	add.w	r1, r6, #8
 800ce70:	4628      	mov	r0, r5
 800ce72:	f005 fe59 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800ce76:	7b31      	ldrb	r1, [r6, #12]
 800ce78:	4007      	ands	r7, r0
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	f7fa fd08 	bl	8007890 <ucdr_serialize_uint8_t>
 800ce80:	7b71      	ldrb	r1, [r6, #13]
 800ce82:	4007      	ands	r7, r0
 800ce84:	4628      	mov	r0, r5
 800ce86:	f7fa fcd5 	bl	8007834 <ucdr_serialize_bool>
 800ce8a:	7b73      	ldrb	r3, [r6, #13]
 800ce8c:	ea07 0800 	and.w	r8, r7, r0
 800ce90:	b93b      	cbnz	r3, 800cea2 <uxr_serialize_CLIENT_Representation+0x62>
 800ce92:	8bb1      	ldrh	r1, [r6, #28]
 800ce94:	4628      	mov	r0, r5
 800ce96:	f7fa fd27 	bl	80078e8 <ucdr_serialize_uint16_t>
 800ce9a:	ea08 0000 	and.w	r0, r8, r0
 800ce9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cea2:	6931      	ldr	r1, [r6, #16]
 800cea4:	4628      	mov	r0, r5
 800cea6:	f7fa ff09 	bl	8007cbc <ucdr_serialize_uint32_t>
 800ceaa:	6933      	ldr	r3, [r6, #16]
 800ceac:	b1e3      	cbz	r3, 800cee8 <uxr_serialize_CLIENT_Representation+0xa8>
 800ceae:	b1c0      	cbz	r0, 800cee2 <uxr_serialize_CLIENT_Representation+0xa2>
 800ceb0:	4637      	mov	r7, r6
 800ceb2:	f04f 0900 	mov.w	r9, #0
 800ceb6:	e001      	b.n	800cebc <uxr_serialize_CLIENT_Representation+0x7c>
 800ceb8:	3708      	adds	r7, #8
 800ceba:	b194      	cbz	r4, 800cee2 <uxr_serialize_CLIENT_Representation+0xa2>
 800cebc:	6979      	ldr	r1, [r7, #20]
 800cebe:	4628      	mov	r0, r5
 800cec0:	f005 ff52 	bl	8012d68 <ucdr_serialize_string>
 800cec4:	69b9      	ldr	r1, [r7, #24]
 800cec6:	4604      	mov	r4, r0
 800cec8:	4628      	mov	r0, r5
 800ceca:	f005 ff4d 	bl	8012d68 <ucdr_serialize_string>
 800cece:	6933      	ldr	r3, [r6, #16]
 800ced0:	f109 0901 	add.w	r9, r9, #1
 800ced4:	4004      	ands	r4, r0
 800ced6:	4599      	cmp	r9, r3
 800ced8:	b2e4      	uxtb	r4, r4
 800ceda:	d3ed      	bcc.n	800ceb8 <uxr_serialize_CLIENT_Representation+0x78>
 800cedc:	ea08 0804 	and.w	r8, r8, r4
 800cee0:	e7d7      	b.n	800ce92 <uxr_serialize_CLIENT_Representation+0x52>
 800cee2:	f04f 0800 	mov.w	r8, #0
 800cee6:	e7d4      	b.n	800ce92 <uxr_serialize_CLIENT_Representation+0x52>
 800cee8:	ea08 0800 	and.w	r8, r8, r0
 800ceec:	e7d1      	b.n	800ce92 <uxr_serialize_CLIENT_Representation+0x52>
 800ceee:	bf00      	nop

0800cef0 <uxr_deserialize_CLIENT_Representation>:
 800cef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef4:	2204      	movs	r2, #4
 800cef6:	460c      	mov	r4, r1
 800cef8:	4605      	mov	r5, r0
 800cefa:	f005 fe79 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800cefe:	2202      	movs	r2, #2
 800cf00:	4607      	mov	r7, r0
 800cf02:	1d21      	adds	r1, r4, #4
 800cf04:	4628      	mov	r0, r5
 800cf06:	f005 fe73 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800cf0a:	4038      	ands	r0, r7
 800cf0c:	2202      	movs	r2, #2
 800cf0e:	1da1      	adds	r1, r4, #6
 800cf10:	b2c6      	uxtb	r6, r0
 800cf12:	4628      	mov	r0, r5
 800cf14:	f005 fe6c 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800cf18:	2204      	movs	r2, #4
 800cf1a:	4006      	ands	r6, r0
 800cf1c:	f104 0108 	add.w	r1, r4, #8
 800cf20:	4628      	mov	r0, r5
 800cf22:	f005 fe65 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800cf26:	f104 010c 	add.w	r1, r4, #12
 800cf2a:	4006      	ands	r6, r0
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	f7fa fcc5 	bl	80078bc <ucdr_deserialize_uint8_t>
 800cf32:	f104 010d 	add.w	r1, r4, #13
 800cf36:	ea06 0700 	and.w	r7, r6, r0
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	f7fa fc90 	bl	8007860 <ucdr_deserialize_bool>
 800cf40:	7b63      	ldrb	r3, [r4, #13]
 800cf42:	4007      	ands	r7, r0
 800cf44:	b93b      	cbnz	r3, 800cf56 <uxr_deserialize_CLIENT_Representation+0x66>
 800cf46:	f104 011c 	add.w	r1, r4, #28
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	f7fa fdcc 	bl	8007ae8 <ucdr_deserialize_uint16_t>
 800cf50:	4038      	ands	r0, r7
 800cf52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf56:	f104 0110 	add.w	r1, r4, #16
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	f7fa ffde 	bl	8007f1c <ucdr_deserialize_uint32_t>
 800cf60:	6923      	ldr	r3, [r4, #16]
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d903      	bls.n	800cf6e <uxr_deserialize_CLIENT_Representation+0x7e>
 800cf66:	2301      	movs	r3, #1
 800cf68:	75ab      	strb	r3, [r5, #22]
 800cf6a:	2700      	movs	r7, #0
 800cf6c:	e7eb      	b.n	800cf46 <uxr_deserialize_CLIENT_Representation+0x56>
 800cf6e:	b30b      	cbz	r3, 800cfb4 <uxr_deserialize_CLIENT_Representation+0xc4>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d0fa      	beq.n	800cf6a <uxr_deserialize_CLIENT_Representation+0x7a>
 800cf74:	46a0      	mov	r8, r4
 800cf76:	f04f 0900 	mov.w	r9, #0
 800cf7a:	e001      	b.n	800cf80 <uxr_deserialize_CLIENT_Representation+0x90>
 800cf7c:	2e00      	cmp	r6, #0
 800cf7e:	d0f4      	beq.n	800cf6a <uxr_deserialize_CLIENT_Representation+0x7a>
 800cf80:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800cf84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf88:	4628      	mov	r0, r5
 800cf8a:	f005 fefd 	bl	8012d88 <ucdr_deserialize_string>
 800cf8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf92:	4606      	mov	r6, r0
 800cf94:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800cf98:	4628      	mov	r0, r5
 800cf9a:	f005 fef5 	bl	8012d88 <ucdr_deserialize_string>
 800cf9e:	6923      	ldr	r3, [r4, #16]
 800cfa0:	f109 0901 	add.w	r9, r9, #1
 800cfa4:	4006      	ands	r6, r0
 800cfa6:	4599      	cmp	r9, r3
 800cfa8:	f108 0808 	add.w	r8, r8, #8
 800cfac:	b2f6      	uxtb	r6, r6
 800cfae:	d3e5      	bcc.n	800cf7c <uxr_deserialize_CLIENT_Representation+0x8c>
 800cfb0:	4037      	ands	r7, r6
 800cfb2:	e7c8      	b.n	800cf46 <uxr_deserialize_CLIENT_Representation+0x56>
 800cfb4:	4007      	ands	r7, r0
 800cfb6:	e7c6      	b.n	800cf46 <uxr_deserialize_CLIENT_Representation+0x56>

0800cfb8 <uxr_serialize_AGENT_Representation>:
 800cfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfbc:	2204      	movs	r2, #4
 800cfbe:	460f      	mov	r7, r1
 800cfc0:	4605      	mov	r5, r0
 800cfc2:	f005 fdb1 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800cfc6:	2202      	movs	r2, #2
 800cfc8:	4604      	mov	r4, r0
 800cfca:	1d39      	adds	r1, r7, #4
 800cfcc:	4628      	mov	r0, r5
 800cfce:	f005 fdab 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800cfd2:	4020      	ands	r0, r4
 800cfd4:	2202      	movs	r2, #2
 800cfd6:	1db9      	adds	r1, r7, #6
 800cfd8:	b2c4      	uxtb	r4, r0
 800cfda:	4628      	mov	r0, r5
 800cfdc:	f005 fda4 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800cfe0:	7a39      	ldrb	r1, [r7, #8]
 800cfe2:	4004      	ands	r4, r0
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	f7fa fc25 	bl	8007834 <ucdr_serialize_bool>
 800cfea:	7a3b      	ldrb	r3, [r7, #8]
 800cfec:	ea00 0804 	and.w	r8, r0, r4
 800cff0:	b913      	cbnz	r3, 800cff8 <uxr_serialize_AGENT_Representation+0x40>
 800cff2:	4640      	mov	r0, r8
 800cff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cff8:	68f9      	ldr	r1, [r7, #12]
 800cffa:	4628      	mov	r0, r5
 800cffc:	f7fa fe5e 	bl	8007cbc <ucdr_serialize_uint32_t>
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	b303      	cbz	r3, 800d046 <uxr_serialize_AGENT_Representation+0x8e>
 800d004:	b1d0      	cbz	r0, 800d03c <uxr_serialize_AGENT_Representation+0x84>
 800d006:	463e      	mov	r6, r7
 800d008:	f04f 0900 	mov.w	r9, #0
 800d00c:	e001      	b.n	800d012 <uxr_serialize_AGENT_Representation+0x5a>
 800d00e:	3608      	adds	r6, #8
 800d010:	b1a4      	cbz	r4, 800d03c <uxr_serialize_AGENT_Representation+0x84>
 800d012:	6931      	ldr	r1, [r6, #16]
 800d014:	4628      	mov	r0, r5
 800d016:	f005 fea7 	bl	8012d68 <ucdr_serialize_string>
 800d01a:	6971      	ldr	r1, [r6, #20]
 800d01c:	4604      	mov	r4, r0
 800d01e:	4628      	mov	r0, r5
 800d020:	f005 fea2 	bl	8012d68 <ucdr_serialize_string>
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f109 0901 	add.w	r9, r9, #1
 800d02a:	4004      	ands	r4, r0
 800d02c:	4599      	cmp	r9, r3
 800d02e:	b2e4      	uxtb	r4, r4
 800d030:	d3ed      	bcc.n	800d00e <uxr_serialize_AGENT_Representation+0x56>
 800d032:	ea08 0804 	and.w	r8, r8, r4
 800d036:	4640      	mov	r0, r8
 800d038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d03c:	f04f 0800 	mov.w	r8, #0
 800d040:	4640      	mov	r0, r8
 800d042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d046:	ea08 0800 	and.w	r8, r8, r0
 800d04a:	e7d2      	b.n	800cff2 <uxr_serialize_AGENT_Representation+0x3a>

0800d04c <uxr_serialize_DATAWRITER_Representation>:
 800d04c:	b570      	push	{r4, r5, r6, lr}
 800d04e:	460d      	mov	r5, r1
 800d050:	7809      	ldrb	r1, [r1, #0]
 800d052:	4606      	mov	r6, r0
 800d054:	f7fa fc1c 	bl	8007890 <ucdr_serialize_uint8_t>
 800d058:	4604      	mov	r4, r0
 800d05a:	b130      	cbz	r0, 800d06a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d05c:	782b      	ldrb	r3, [r5, #0]
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d00c      	beq.n	800d07c <uxr_serialize_DATAWRITER_Representation+0x30>
 800d062:	2b03      	cmp	r3, #3
 800d064:	d010      	beq.n	800d088 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800d066:	2b01      	cmp	r3, #1
 800d068:	d008      	beq.n	800d07c <uxr_serialize_DATAWRITER_Representation+0x30>
 800d06a:	2202      	movs	r2, #2
 800d06c:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800d070:	4630      	mov	r0, r6
 800d072:	f005 fd59 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800d076:	4020      	ands	r0, r4
 800d078:	b2c0      	uxtb	r0, r0
 800d07a:	bd70      	pop	{r4, r5, r6, pc}
 800d07c:	6869      	ldr	r1, [r5, #4]
 800d07e:	4630      	mov	r0, r6
 800d080:	f005 fe72 	bl	8012d68 <ucdr_serialize_string>
 800d084:	4604      	mov	r4, r0
 800d086:	e7f0      	b.n	800d06a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d088:	4629      	mov	r1, r5
 800d08a:	4630      	mov	r0, r6
 800d08c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800d090:	3104      	adds	r1, #4
 800d092:	f005 fe3d 	bl	8012d10 <ucdr_serialize_sequence_uint8_t>
 800d096:	4604      	mov	r4, r0
 800d098:	e7e7      	b.n	800d06a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d09a:	bf00      	nop

0800d09c <uxr_serialize_ObjectVariant.part.0>:
 800d09c:	b570      	push	{r4, r5, r6, lr}
 800d09e:	780b      	ldrb	r3, [r1, #0]
 800d0a0:	3b01      	subs	r3, #1
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	4605      	mov	r5, r0
 800d0a6:	2b0d      	cmp	r3, #13
 800d0a8:	d854      	bhi.n	800d154 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d0aa:	e8df f003 	tbb	[pc, r3]
 800d0ae:	0730      	.short	0x0730
 800d0b0:	07071b1b 	.word	0x07071b1b
 800d0b4:	0c530707 	.word	0x0c530707
 800d0b8:	494e0c0c 	.word	0x494e0c0c
 800d0bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0c0:	3104      	adds	r1, #4
 800d0c2:	f7ff bfc3 	b.w	800d04c <uxr_serialize_DATAWRITER_Representation>
 800d0c6:	7909      	ldrb	r1, [r1, #4]
 800d0c8:	f7fa fbe2 	bl	8007890 <ucdr_serialize_uint8_t>
 800d0cc:	b1e8      	cbz	r0, 800d10a <uxr_serialize_ObjectVariant.part.0+0x6e>
 800d0ce:	7923      	ldrb	r3, [r4, #4]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d001      	beq.n	800d0d8 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	d13d      	bne.n	800d154 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d0d8:	68a1      	ldr	r1, [r4, #8]
 800d0da:	4628      	mov	r0, r5
 800d0dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0e0:	f005 be42 	b.w	8012d68 <ucdr_serialize_string>
 800d0e4:	7909      	ldrb	r1, [r1, #4]
 800d0e6:	f7fa fbd3 	bl	8007890 <ucdr_serialize_uint8_t>
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	b120      	cbz	r0, 800d0f8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d0ee:	7923      	ldrb	r3, [r4, #4]
 800d0f0:	2b02      	cmp	r3, #2
 800d0f2:	d039      	beq.n	800d168 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800d0f4:	2b03      	cmp	r3, #3
 800d0f6:	d02f      	beq.n	800d158 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800d0f8:	2202      	movs	r2, #2
 800d0fa:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800d0fe:	4628      	mov	r0, r5
 800d100:	f005 fd12 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800d104:	4030      	ands	r0, r6
 800d106:	b2c0      	uxtb	r0, r0
 800d108:	bd70      	pop	{r4, r5, r6, pc}
 800d10a:	2000      	movs	r0, #0
 800d10c:	bd70      	pop	{r4, r5, r6, pc}
 800d10e:	7909      	ldrb	r1, [r1, #4]
 800d110:	f7fa fbbe 	bl	8007890 <ucdr_serialize_uint8_t>
 800d114:	4606      	mov	r6, r0
 800d116:	b158      	cbz	r0, 800d130 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d118:	7923      	ldrb	r3, [r4, #4]
 800d11a:	2b02      	cmp	r3, #2
 800d11c:	d003      	beq.n	800d126 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800d11e:	2b03      	cmp	r3, #3
 800d120:	d028      	beq.n	800d174 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800d122:	2b01      	cmp	r3, #1
 800d124:	d104      	bne.n	800d130 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d126:	68a1      	ldr	r1, [r4, #8]
 800d128:	4628      	mov	r0, r5
 800d12a:	f005 fe1d 	bl	8012d68 <ucdr_serialize_string>
 800d12e:	4606      	mov	r6, r0
 800d130:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800d134:	4628      	mov	r0, r5
 800d136:	f7fb f8e7 	bl	8008308 <ucdr_serialize_int16_t>
 800d13a:	4030      	ands	r0, r6
 800d13c:	b2c0      	uxtb	r0, r0
 800d13e:	bd70      	pop	{r4, r5, r6, pc}
 800d140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d144:	3104      	adds	r1, #4
 800d146:	f7ff be7b 	b.w	800ce40 <uxr_serialize_CLIENT_Representation>
 800d14a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d14e:	3104      	adds	r1, #4
 800d150:	f7ff bf32 	b.w	800cfb8 <uxr_serialize_AGENT_Representation>
 800d154:	2001      	movs	r0, #1
 800d156:	bd70      	pop	{r4, r5, r6, pc}
 800d158:	68a2      	ldr	r2, [r4, #8]
 800d15a:	f104 010c 	add.w	r1, r4, #12
 800d15e:	4628      	mov	r0, r5
 800d160:	f005 fdd6 	bl	8012d10 <ucdr_serialize_sequence_uint8_t>
 800d164:	4606      	mov	r6, r0
 800d166:	e7c7      	b.n	800d0f8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d168:	68a1      	ldr	r1, [r4, #8]
 800d16a:	4628      	mov	r0, r5
 800d16c:	f005 fdfc 	bl	8012d68 <ucdr_serialize_string>
 800d170:	4606      	mov	r6, r0
 800d172:	e7c1      	b.n	800d0f8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d174:	68a2      	ldr	r2, [r4, #8]
 800d176:	f104 010c 	add.w	r1, r4, #12
 800d17a:	4628      	mov	r0, r5
 800d17c:	f005 fdc8 	bl	8012d10 <ucdr_serialize_sequence_uint8_t>
 800d180:	4606      	mov	r6, r0
 800d182:	e7d5      	b.n	800d130 <uxr_serialize_ObjectVariant.part.0+0x94>

0800d184 <uxr_deserialize_DATAWRITER_Representation>:
 800d184:	b570      	push	{r4, r5, r6, lr}
 800d186:	4606      	mov	r6, r0
 800d188:	460d      	mov	r5, r1
 800d18a:	f7fa fb97 	bl	80078bc <ucdr_deserialize_uint8_t>
 800d18e:	4604      	mov	r4, r0
 800d190:	b130      	cbz	r0, 800d1a0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d192:	782b      	ldrb	r3, [r5, #0]
 800d194:	2b02      	cmp	r3, #2
 800d196:	d00c      	beq.n	800d1b2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d198:	2b03      	cmp	r3, #3
 800d19a:	d012      	beq.n	800d1c2 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d008      	beq.n	800d1b2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d1a0:	2202      	movs	r2, #2
 800d1a2:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	f005 fd22 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800d1ac:	4020      	ands	r0, r4
 800d1ae:	b2c0      	uxtb	r0, r0
 800d1b0:	bd70      	pop	{r4, r5, r6, pc}
 800d1b2:	6869      	ldr	r1, [r5, #4]
 800d1b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f005 fde5 	bl	8012d88 <ucdr_deserialize_string>
 800d1be:	4604      	mov	r4, r0
 800d1c0:	e7ee      	b.n	800d1a0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d1c2:	1d2b      	adds	r3, r5, #4
 800d1c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1c8:	f105 0108 	add.w	r1, r5, #8
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	f005 fdb1 	bl	8012d34 <ucdr_deserialize_sequence_uint8_t>
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	e7e4      	b.n	800d1a0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d1d6:	bf00      	nop

0800d1d8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800d1d8:	b570      	push	{r4, r5, r6, lr}
 800d1da:	460d      	mov	r5, r1
 800d1dc:	7809      	ldrb	r1, [r1, #0]
 800d1de:	4606      	mov	r6, r0
 800d1e0:	f7fa fb28 	bl	8007834 <ucdr_serialize_bool>
 800d1e4:	782b      	ldrb	r3, [r5, #0]
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	b94b      	cbnz	r3, 800d1fe <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800d1ea:	7a29      	ldrb	r1, [r5, #8]
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	f7fa fb21 	bl	8007834 <ucdr_serialize_bool>
 800d1f2:	7a2b      	ldrb	r3, [r5, #8]
 800d1f4:	4004      	ands	r4, r0
 800d1f6:	b2e4      	uxtb	r4, r4
 800d1f8:	b943      	cbnz	r3, 800d20c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	bd70      	pop	{r4, r5, r6, pc}
 800d1fe:	6869      	ldr	r1, [r5, #4]
 800d200:	4630      	mov	r0, r6
 800d202:	f005 fdb1 	bl	8012d68 <ucdr_serialize_string>
 800d206:	4004      	ands	r4, r0
 800d208:	b2e4      	uxtb	r4, r4
 800d20a:	e7ee      	b.n	800d1ea <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800d20c:	68e9      	ldr	r1, [r5, #12]
 800d20e:	4630      	mov	r0, r6
 800d210:	f005 fdaa 	bl	8012d68 <ucdr_serialize_string>
 800d214:	4004      	ands	r4, r0
 800d216:	4620      	mov	r0, r4
 800d218:	bd70      	pop	{r4, r5, r6, pc}
 800d21a:	bf00      	nop

0800d21c <uxr_serialize_OBJK_Topic_Binary>:
 800d21c:	b570      	push	{r4, r5, r6, lr}
 800d21e:	460d      	mov	r5, r1
 800d220:	6809      	ldr	r1, [r1, #0]
 800d222:	4606      	mov	r6, r0
 800d224:	f005 fda0 	bl	8012d68 <ucdr_serialize_string>
 800d228:	7929      	ldrb	r1, [r5, #4]
 800d22a:	4604      	mov	r4, r0
 800d22c:	4630      	mov	r0, r6
 800d22e:	f7fa fb01 	bl	8007834 <ucdr_serialize_bool>
 800d232:	792b      	ldrb	r3, [r5, #4]
 800d234:	4004      	ands	r4, r0
 800d236:	b2e4      	uxtb	r4, r4
 800d238:	b943      	cbnz	r3, 800d24c <uxr_serialize_OBJK_Topic_Binary+0x30>
 800d23a:	7b29      	ldrb	r1, [r5, #12]
 800d23c:	4630      	mov	r0, r6
 800d23e:	f7fa faf9 	bl	8007834 <ucdr_serialize_bool>
 800d242:	7b2b      	ldrb	r3, [r5, #12]
 800d244:	4004      	ands	r4, r0
 800d246:	b93b      	cbnz	r3, 800d258 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800d248:	4620      	mov	r0, r4
 800d24a:	bd70      	pop	{r4, r5, r6, pc}
 800d24c:	68a9      	ldr	r1, [r5, #8]
 800d24e:	4630      	mov	r0, r6
 800d250:	f005 fd8a 	bl	8012d68 <ucdr_serialize_string>
 800d254:	4004      	ands	r4, r0
 800d256:	e7f0      	b.n	800d23a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800d258:	6929      	ldr	r1, [r5, #16]
 800d25a:	4630      	mov	r0, r6
 800d25c:	f005 fd84 	bl	8012d68 <ucdr_serialize_string>
 800d260:	4004      	ands	r4, r0
 800d262:	b2e4      	uxtb	r4, r4
 800d264:	4620      	mov	r0, r4
 800d266:	bd70      	pop	{r4, r5, r6, pc}

0800d268 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800d268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d26c:	460c      	mov	r4, r1
 800d26e:	7809      	ldrb	r1, [r1, #0]
 800d270:	4606      	mov	r6, r0
 800d272:	f7fa fadf 	bl	8007834 <ucdr_serialize_bool>
 800d276:	7823      	ldrb	r3, [r4, #0]
 800d278:	4605      	mov	r5, r0
 800d27a:	b96b      	cbnz	r3, 800d298 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800d27c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800d280:	4630      	mov	r0, r6
 800d282:	f7fa fad7 	bl	8007834 <ucdr_serialize_bool>
 800d286:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d28a:	4005      	ands	r5, r0
 800d28c:	b2ed      	uxtb	r5, r5
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d169      	bne.n	800d366 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800d292:	4628      	mov	r0, r5
 800d294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d298:	6861      	ldr	r1, [r4, #4]
 800d29a:	4630      	mov	r0, r6
 800d29c:	f7fa fd0e 	bl	8007cbc <ucdr_serialize_uint32_t>
 800d2a0:	6863      	ldr	r3, [r4, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d06b      	beq.n	800d37e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d067      	beq.n	800d37a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d2aa:	68a1      	ldr	r1, [r4, #8]
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f005 fd5b 	bl	8012d68 <ucdr_serialize_string>
 800d2b2:	6863      	ldr	r3, [r4, #4]
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d953      	bls.n	800d360 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d05e      	beq.n	800d37a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d2bc:	68e1      	ldr	r1, [r4, #12]
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f005 fd52 	bl	8012d68 <ucdr_serialize_string>
 800d2c4:	6863      	ldr	r3, [r4, #4]
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d94a      	bls.n	800d360 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d055      	beq.n	800d37a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d2ce:	6921      	ldr	r1, [r4, #16]
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	f005 fd49 	bl	8012d68 <ucdr_serialize_string>
 800d2d6:	6863      	ldr	r3, [r4, #4]
 800d2d8:	2b03      	cmp	r3, #3
 800d2da:	d941      	bls.n	800d360 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	d04c      	beq.n	800d37a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d2e0:	6961      	ldr	r1, [r4, #20]
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	f005 fd40 	bl	8012d68 <ucdr_serialize_string>
 800d2e8:	6863      	ldr	r3, [r4, #4]
 800d2ea:	2b04      	cmp	r3, #4
 800d2ec:	d938      	bls.n	800d360 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d043      	beq.n	800d37a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d2f2:	69a1      	ldr	r1, [r4, #24]
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f005 fd37 	bl	8012d68 <ucdr_serialize_string>
 800d2fa:	6863      	ldr	r3, [r4, #4]
 800d2fc:	2b05      	cmp	r3, #5
 800d2fe:	d92f      	bls.n	800d360 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d300:	2800      	cmp	r0, #0
 800d302:	d03a      	beq.n	800d37a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d304:	69e1      	ldr	r1, [r4, #28]
 800d306:	4630      	mov	r0, r6
 800d308:	f005 fd2e 	bl	8012d68 <ucdr_serialize_string>
 800d30c:	6863      	ldr	r3, [r4, #4]
 800d30e:	2b06      	cmp	r3, #6
 800d310:	d926      	bls.n	800d360 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d312:	b390      	cbz	r0, 800d37a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d314:	6a21      	ldr	r1, [r4, #32]
 800d316:	4630      	mov	r0, r6
 800d318:	f005 fd26 	bl	8012d68 <ucdr_serialize_string>
 800d31c:	6863      	ldr	r3, [r4, #4]
 800d31e:	2b07      	cmp	r3, #7
 800d320:	d91e      	bls.n	800d360 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d322:	b350      	cbz	r0, 800d37a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d324:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d326:	4630      	mov	r0, r6
 800d328:	f005 fd1e 	bl	8012d68 <ucdr_serialize_string>
 800d32c:	6863      	ldr	r3, [r4, #4]
 800d32e:	2b08      	cmp	r3, #8
 800d330:	d916      	bls.n	800d360 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d332:	b310      	cbz	r0, 800d37a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d334:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d336:	4630      	mov	r0, r6
 800d338:	f005 fd16 	bl	8012d68 <ucdr_serialize_string>
 800d33c:	6863      	ldr	r3, [r4, #4]
 800d33e:	2b09      	cmp	r3, #9
 800d340:	d90e      	bls.n	800d360 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d342:	b1d0      	cbz	r0, 800d37a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d344:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800d348:	2709      	movs	r7, #9
 800d34a:	e000      	b.n	800d34e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800d34c:	b1a8      	cbz	r0, 800d37a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d34e:	f858 1b04 	ldr.w	r1, [r8], #4
 800d352:	4630      	mov	r0, r6
 800d354:	f005 fd08 	bl	8012d68 <ucdr_serialize_string>
 800d358:	6862      	ldr	r2, [r4, #4]
 800d35a:	3701      	adds	r7, #1
 800d35c:	4297      	cmp	r7, r2
 800d35e:	d3f5      	bcc.n	800d34c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800d360:	4005      	ands	r5, r0
 800d362:	b2ed      	uxtb	r5, r5
 800d364:	e78a      	b.n	800d27c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d366:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d368:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d36c:	4630      	mov	r0, r6
 800d36e:	f005 fccf 	bl	8012d10 <ucdr_serialize_sequence_uint8_t>
 800d372:	4005      	ands	r5, r0
 800d374:	4628      	mov	r0, r5
 800d376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d37a:	2500      	movs	r5, #0
 800d37c:	e77e      	b.n	800d27c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d37e:	4028      	ands	r0, r5
 800d380:	b2c5      	uxtb	r5, r0
 800d382:	e77b      	b.n	800d27c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800d384 <uxr_serialize_OBJK_Publisher_Binary>:
 800d384:	b570      	push	{r4, r5, r6, lr}
 800d386:	460d      	mov	r5, r1
 800d388:	7809      	ldrb	r1, [r1, #0]
 800d38a:	4606      	mov	r6, r0
 800d38c:	f7fa fa52 	bl	8007834 <ucdr_serialize_bool>
 800d390:	782b      	ldrb	r3, [r5, #0]
 800d392:	4604      	mov	r4, r0
 800d394:	b94b      	cbnz	r3, 800d3aa <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800d396:	7a29      	ldrb	r1, [r5, #8]
 800d398:	4630      	mov	r0, r6
 800d39a:	f7fa fa4b 	bl	8007834 <ucdr_serialize_bool>
 800d39e:	7a2b      	ldrb	r3, [r5, #8]
 800d3a0:	4004      	ands	r4, r0
 800d3a2:	b2e4      	uxtb	r4, r4
 800d3a4:	b943      	cbnz	r3, 800d3b8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	bd70      	pop	{r4, r5, r6, pc}
 800d3aa:	6869      	ldr	r1, [r5, #4]
 800d3ac:	4630      	mov	r0, r6
 800d3ae:	f005 fcdb 	bl	8012d68 <ucdr_serialize_string>
 800d3b2:	4004      	ands	r4, r0
 800d3b4:	b2e4      	uxtb	r4, r4
 800d3b6:	e7ee      	b.n	800d396 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800d3b8:	f105 010c 	add.w	r1, r5, #12
 800d3bc:	4630      	mov	r0, r6
 800d3be:	f7ff ff53 	bl	800d268 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800d3c2:	4004      	ands	r4, r0
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	bd70      	pop	{r4, r5, r6, pc}

0800d3c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800d3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3cc:	460c      	mov	r4, r1
 800d3ce:	7809      	ldrb	r1, [r1, #0]
 800d3d0:	4606      	mov	r6, r0
 800d3d2:	f7fa fa2f 	bl	8007834 <ucdr_serialize_bool>
 800d3d6:	7823      	ldrb	r3, [r4, #0]
 800d3d8:	4605      	mov	r5, r0
 800d3da:	b96b      	cbnz	r3, 800d3f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800d3dc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	f7fa fa27 	bl	8007834 <ucdr_serialize_bool>
 800d3e6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d3ea:	4005      	ands	r5, r0
 800d3ec:	b2ed      	uxtb	r5, r5
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d169      	bne.n	800d4c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f8:	6861      	ldr	r1, [r4, #4]
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	f7fa fc5e 	bl	8007cbc <ucdr_serialize_uint32_t>
 800d400:	6863      	ldr	r3, [r4, #4]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d06b      	beq.n	800d4de <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800d406:	2800      	cmp	r0, #0
 800d408:	d067      	beq.n	800d4da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d40a:	68a1      	ldr	r1, [r4, #8]
 800d40c:	4630      	mov	r0, r6
 800d40e:	f005 fcab 	bl	8012d68 <ucdr_serialize_string>
 800d412:	6863      	ldr	r3, [r4, #4]
 800d414:	2b01      	cmp	r3, #1
 800d416:	d953      	bls.n	800d4c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d418:	2800      	cmp	r0, #0
 800d41a:	d05e      	beq.n	800d4da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d41c:	68e1      	ldr	r1, [r4, #12]
 800d41e:	4630      	mov	r0, r6
 800d420:	f005 fca2 	bl	8012d68 <ucdr_serialize_string>
 800d424:	6863      	ldr	r3, [r4, #4]
 800d426:	2b02      	cmp	r3, #2
 800d428:	d94a      	bls.n	800d4c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d055      	beq.n	800d4da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d42e:	6921      	ldr	r1, [r4, #16]
 800d430:	4630      	mov	r0, r6
 800d432:	f005 fc99 	bl	8012d68 <ucdr_serialize_string>
 800d436:	6863      	ldr	r3, [r4, #4]
 800d438:	2b03      	cmp	r3, #3
 800d43a:	d941      	bls.n	800d4c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	d04c      	beq.n	800d4da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d440:	6961      	ldr	r1, [r4, #20]
 800d442:	4630      	mov	r0, r6
 800d444:	f005 fc90 	bl	8012d68 <ucdr_serialize_string>
 800d448:	6863      	ldr	r3, [r4, #4]
 800d44a:	2b04      	cmp	r3, #4
 800d44c:	d938      	bls.n	800d4c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d44e:	2800      	cmp	r0, #0
 800d450:	d043      	beq.n	800d4da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d452:	69a1      	ldr	r1, [r4, #24]
 800d454:	4630      	mov	r0, r6
 800d456:	f005 fc87 	bl	8012d68 <ucdr_serialize_string>
 800d45a:	6863      	ldr	r3, [r4, #4]
 800d45c:	2b05      	cmp	r3, #5
 800d45e:	d92f      	bls.n	800d4c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d460:	2800      	cmp	r0, #0
 800d462:	d03a      	beq.n	800d4da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d464:	69e1      	ldr	r1, [r4, #28]
 800d466:	4630      	mov	r0, r6
 800d468:	f005 fc7e 	bl	8012d68 <ucdr_serialize_string>
 800d46c:	6863      	ldr	r3, [r4, #4]
 800d46e:	2b06      	cmp	r3, #6
 800d470:	d926      	bls.n	800d4c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d472:	b390      	cbz	r0, 800d4da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d474:	6a21      	ldr	r1, [r4, #32]
 800d476:	4630      	mov	r0, r6
 800d478:	f005 fc76 	bl	8012d68 <ucdr_serialize_string>
 800d47c:	6863      	ldr	r3, [r4, #4]
 800d47e:	2b07      	cmp	r3, #7
 800d480:	d91e      	bls.n	800d4c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d482:	b350      	cbz	r0, 800d4da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d484:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d486:	4630      	mov	r0, r6
 800d488:	f005 fc6e 	bl	8012d68 <ucdr_serialize_string>
 800d48c:	6863      	ldr	r3, [r4, #4]
 800d48e:	2b08      	cmp	r3, #8
 800d490:	d916      	bls.n	800d4c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d492:	b310      	cbz	r0, 800d4da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d494:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d496:	4630      	mov	r0, r6
 800d498:	f005 fc66 	bl	8012d68 <ucdr_serialize_string>
 800d49c:	6863      	ldr	r3, [r4, #4]
 800d49e:	2b09      	cmp	r3, #9
 800d4a0:	d90e      	bls.n	800d4c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d4a2:	b1d0      	cbz	r0, 800d4da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d4a4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800d4a8:	2709      	movs	r7, #9
 800d4aa:	e000      	b.n	800d4ae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800d4ac:	b1a8      	cbz	r0, 800d4da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d4ae:	f858 1b04 	ldr.w	r1, [r8], #4
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f005 fc58 	bl	8012d68 <ucdr_serialize_string>
 800d4b8:	6862      	ldr	r2, [r4, #4]
 800d4ba:	3701      	adds	r7, #1
 800d4bc:	4297      	cmp	r7, r2
 800d4be:	d3f5      	bcc.n	800d4ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800d4c0:	4005      	ands	r5, r0
 800d4c2:	b2ed      	uxtb	r5, r5
 800d4c4:	e78a      	b.n	800d3dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800d4c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d4c8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	f005 fc1f 	bl	8012d10 <ucdr_serialize_sequence_uint8_t>
 800d4d2:	4005      	ands	r5, r0
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4da:	2500      	movs	r5, #0
 800d4dc:	e77e      	b.n	800d3dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800d4de:	4028      	ands	r0, r5
 800d4e0:	b2c5      	uxtb	r5, r0
 800d4e2:	e77b      	b.n	800d3dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800d4e4 <uxr_serialize_OBJK_Subscriber_Binary>:
 800d4e4:	b570      	push	{r4, r5, r6, lr}
 800d4e6:	460d      	mov	r5, r1
 800d4e8:	7809      	ldrb	r1, [r1, #0]
 800d4ea:	4606      	mov	r6, r0
 800d4ec:	f7fa f9a2 	bl	8007834 <ucdr_serialize_bool>
 800d4f0:	782b      	ldrb	r3, [r5, #0]
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	b94b      	cbnz	r3, 800d50a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800d4f6:	7a29      	ldrb	r1, [r5, #8]
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	f7fa f99b 	bl	8007834 <ucdr_serialize_bool>
 800d4fe:	7a2b      	ldrb	r3, [r5, #8]
 800d500:	4004      	ands	r4, r0
 800d502:	b2e4      	uxtb	r4, r4
 800d504:	b943      	cbnz	r3, 800d518 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800d506:	4620      	mov	r0, r4
 800d508:	bd70      	pop	{r4, r5, r6, pc}
 800d50a:	6869      	ldr	r1, [r5, #4]
 800d50c:	4630      	mov	r0, r6
 800d50e:	f005 fc2b 	bl	8012d68 <ucdr_serialize_string>
 800d512:	4004      	ands	r4, r0
 800d514:	b2e4      	uxtb	r4, r4
 800d516:	e7ee      	b.n	800d4f6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800d518:	f105 010c 	add.w	r1, r5, #12
 800d51c:	4630      	mov	r0, r6
 800d51e:	f7ff ff53 	bl	800d3c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800d522:	4004      	ands	r4, r0
 800d524:	4620      	mov	r0, r4
 800d526:	bd70      	pop	{r4, r5, r6, pc}

0800d528 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800d528:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800d52c:	4688      	mov	r8, r1
 800d52e:	8809      	ldrh	r1, [r1, #0]
 800d530:	4681      	mov	r9, r0
 800d532:	f7fa f9d9 	bl	80078e8 <ucdr_serialize_uint16_t>
 800d536:	f898 1002 	ldrb.w	r1, [r8, #2]
 800d53a:	4606      	mov	r6, r0
 800d53c:	4648      	mov	r0, r9
 800d53e:	f7fa f979 	bl	8007834 <ucdr_serialize_bool>
 800d542:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d546:	4006      	ands	r6, r0
 800d548:	b2f5      	uxtb	r5, r6
 800d54a:	b9eb      	cbnz	r3, 800d588 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800d54c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800d550:	4648      	mov	r0, r9
 800d552:	f7fa f96f 	bl	8007834 <ucdr_serialize_bool>
 800d556:	f898 3006 	ldrb.w	r3, [r8, #6]
 800d55a:	4005      	ands	r5, r0
 800d55c:	bb7b      	cbnz	r3, 800d5be <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800d55e:	f898 100c 	ldrb.w	r1, [r8, #12]
 800d562:	4648      	mov	r0, r9
 800d564:	f7fa f966 	bl	8007834 <ucdr_serialize_bool>
 800d568:	f898 300c 	ldrb.w	r3, [r8, #12]
 800d56c:	4005      	ands	r5, r0
 800d56e:	b9f3      	cbnz	r3, 800d5ae <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800d570:	f898 1014 	ldrb.w	r1, [r8, #20]
 800d574:	4648      	mov	r0, r9
 800d576:	f7fa f95d 	bl	8007834 <ucdr_serialize_bool>
 800d57a:	f898 3014 	ldrb.w	r3, [r8, #20]
 800d57e:	4005      	ands	r5, r0
 800d580:	b94b      	cbnz	r3, 800d596 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800d582:	4628      	mov	r0, r5
 800d584:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d588:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800d58c:	4648      	mov	r0, r9
 800d58e:	f7fa f9ab 	bl	80078e8 <ucdr_serialize_uint16_t>
 800d592:	4005      	ands	r5, r0
 800d594:	e7da      	b.n	800d54c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800d596:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800d59a:	f108 011c 	add.w	r1, r8, #28
 800d59e:	4648      	mov	r0, r9
 800d5a0:	f005 fbb6 	bl	8012d10 <ucdr_serialize_sequence_uint8_t>
 800d5a4:	4028      	ands	r0, r5
 800d5a6:	b2c5      	uxtb	r5, r0
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d5ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d5b2:	4648      	mov	r0, r9
 800d5b4:	f7fa fb82 	bl	8007cbc <ucdr_serialize_uint32_t>
 800d5b8:	4028      	ands	r0, r5
 800d5ba:	b2c5      	uxtb	r5, r0
 800d5bc:	e7d8      	b.n	800d570 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800d5be:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800d5c2:	4648      	mov	r0, r9
 800d5c4:	f7fa fb7a 	bl	8007cbc <ucdr_serialize_uint32_t>
 800d5c8:	4028      	ands	r0, r5
 800d5ca:	b2c5      	uxtb	r5, r0
 800d5cc:	e7c7      	b.n	800d55e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800d5ce:	bf00      	nop

0800d5d0 <uxr_serialize_OBJK_DataReader_Binary>:
 800d5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5d2:	2202      	movs	r2, #2
 800d5d4:	460c      	mov	r4, r1
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	f005 faa6 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800d5dc:	78a1      	ldrb	r1, [r4, #2]
 800d5de:	4605      	mov	r5, r0
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7fa f927 	bl	8007834 <ucdr_serialize_bool>
 800d5e6:	78a3      	ldrb	r3, [r4, #2]
 800d5e8:	4005      	ands	r5, r0
 800d5ea:	b2ed      	uxtb	r5, r5
 800d5ec:	b90b      	cbnz	r3, 800d5f2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5f2:	f104 0108 	add.w	r1, r4, #8
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	f7ff ff96 	bl	800d528 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800d5fc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800d600:	4607      	mov	r7, r0
 800d602:	4630      	mov	r0, r6
 800d604:	f7fa f916 	bl	8007834 <ucdr_serialize_bool>
 800d608:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800d60c:	4038      	ands	r0, r7
 800d60e:	b2c7      	uxtb	r7, r0
 800d610:	b95b      	cbnz	r3, 800d62a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800d612:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800d616:	4630      	mov	r0, r6
 800d618:	f7fa f90c 	bl	8007834 <ucdr_serialize_bool>
 800d61c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800d620:	4007      	ands	r7, r0
 800d622:	b94b      	cbnz	r3, 800d638 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800d624:	403d      	ands	r5, r7
 800d626:	4628      	mov	r0, r5
 800d628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d62a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800d62e:	4630      	mov	r0, r6
 800d630:	f7fa fd9a 	bl	8008168 <ucdr_serialize_uint64_t>
 800d634:	4007      	ands	r7, r0
 800d636:	e7ec      	b.n	800d612 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800d638:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d63a:	4630      	mov	r0, r6
 800d63c:	f005 fb94 	bl	8012d68 <ucdr_serialize_string>
 800d640:	4007      	ands	r7, r0
 800d642:	b2ff      	uxtb	r7, r7
 800d644:	e7ee      	b.n	800d624 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800d646:	bf00      	nop

0800d648 <uxr_serialize_OBJK_DataWriter_Binary>:
 800d648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64a:	2202      	movs	r2, #2
 800d64c:	460d      	mov	r5, r1
 800d64e:	4606      	mov	r6, r0
 800d650:	f005 fa6a 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800d654:	78a9      	ldrb	r1, [r5, #2]
 800d656:	4604      	mov	r4, r0
 800d658:	4630      	mov	r0, r6
 800d65a:	f7fa f8eb 	bl	8007834 <ucdr_serialize_bool>
 800d65e:	78ab      	ldrb	r3, [r5, #2]
 800d660:	4004      	ands	r4, r0
 800d662:	b2e4      	uxtb	r4, r4
 800d664:	b90b      	cbnz	r3, 800d66a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800d666:	4620      	mov	r0, r4
 800d668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d66a:	f105 0108 	add.w	r1, r5, #8
 800d66e:	4630      	mov	r0, r6
 800d670:	f7ff ff5a 	bl	800d528 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800d674:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800d678:	4607      	mov	r7, r0
 800d67a:	4630      	mov	r0, r6
 800d67c:	f7fa f8da 	bl	8007834 <ucdr_serialize_bool>
 800d680:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800d684:	4038      	ands	r0, r7
 800d686:	b2c7      	uxtb	r7, r0
 800d688:	b913      	cbnz	r3, 800d690 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800d68a:	403c      	ands	r4, r7
 800d68c:	4620      	mov	r0, r4
 800d68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d690:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800d694:	4630      	mov	r0, r6
 800d696:	f7fa fd67 	bl	8008168 <ucdr_serialize_uint64_t>
 800d69a:	4007      	ands	r7, r0
 800d69c:	e7f5      	b.n	800d68a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800d69e:	bf00      	nop

0800d6a0 <uxr_deserialize_ObjectVariant>:
 800d6a0:	b570      	push	{r4, r5, r6, lr}
 800d6a2:	4605      	mov	r5, r0
 800d6a4:	460e      	mov	r6, r1
 800d6a6:	f7fa f909 	bl	80078bc <ucdr_deserialize_uint8_t>
 800d6aa:	b168      	cbz	r0, 800d6c8 <uxr_deserialize_ObjectVariant+0x28>
 800d6ac:	7833      	ldrb	r3, [r6, #0]
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	2b0d      	cmp	r3, #13
 800d6b4:	d809      	bhi.n	800d6ca <uxr_deserialize_ObjectVariant+0x2a>
 800d6b6:	e8df f003 	tbb	[pc, r3]
 800d6ba:	0a41      	.short	0x0a41
 800d6bc:	0a0a2323 	.word	0x0a0a2323
 800d6c0:	10080a0a 	.word	0x10080a0a
 800d6c4:	565c1010 	.word	0x565c1010
 800d6c8:	2400      	movs	r4, #0
 800d6ca:	4620      	mov	r0, r4
 800d6cc:	bd70      	pop	{r4, r5, r6, pc}
 800d6ce:	1d31      	adds	r1, r6, #4
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d6d6:	f7ff bd55 	b.w	800d184 <uxr_deserialize_DATAWRITER_Representation>
 800d6da:	1d31      	adds	r1, r6, #4
 800d6dc:	4628      	mov	r0, r5
 800d6de:	f7fa f8ed 	bl	80078bc <ucdr_deserialize_uint8_t>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d0f0      	beq.n	800d6c8 <uxr_deserialize_ObjectVariant+0x28>
 800d6e6:	7933      	ldrb	r3, [r6, #4]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d001      	beq.n	800d6f0 <uxr_deserialize_ObjectVariant+0x50>
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	d1ec      	bne.n	800d6ca <uxr_deserialize_ObjectVariant+0x2a>
 800d6f0:	68b1      	ldr	r1, [r6, #8]
 800d6f2:	4628      	mov	r0, r5
 800d6f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d6fc:	f005 bb44 	b.w	8012d88 <ucdr_deserialize_string>
 800d700:	1d31      	adds	r1, r6, #4
 800d702:	4628      	mov	r0, r5
 800d704:	f7fa f8da 	bl	80078bc <ucdr_deserialize_uint8_t>
 800d708:	4604      	mov	r4, r0
 800d70a:	b170      	cbz	r0, 800d72a <uxr_deserialize_ObjectVariant+0x8a>
 800d70c:	7933      	ldrb	r3, [r6, #4]
 800d70e:	2b02      	cmp	r3, #2
 800d710:	d04c      	beq.n	800d7ac <uxr_deserialize_ObjectVariant+0x10c>
 800d712:	2b03      	cmp	r3, #3
 800d714:	d109      	bne.n	800d72a <uxr_deserialize_ObjectVariant+0x8a>
 800d716:	f106 0308 	add.w	r3, r6, #8
 800d71a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d71e:	f106 010c 	add.w	r1, r6, #12
 800d722:	4628      	mov	r0, r5
 800d724:	f005 fb06 	bl	8012d34 <ucdr_deserialize_sequence_uint8_t>
 800d728:	4604      	mov	r4, r0
 800d72a:	2202      	movs	r2, #2
 800d72c:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800d730:	4628      	mov	r0, r5
 800d732:	f005 fa5d 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800d736:	4020      	ands	r0, r4
 800d738:	b2c4      	uxtb	r4, r0
 800d73a:	e7c6      	b.n	800d6ca <uxr_deserialize_ObjectVariant+0x2a>
 800d73c:	1d31      	adds	r1, r6, #4
 800d73e:	4628      	mov	r0, r5
 800d740:	f7fa f8bc 	bl	80078bc <ucdr_deserialize_uint8_t>
 800d744:	4604      	mov	r4, r0
 800d746:	b130      	cbz	r0, 800d756 <uxr_deserialize_ObjectVariant+0xb6>
 800d748:	7933      	ldrb	r3, [r6, #4]
 800d74a:	2b02      	cmp	r3, #2
 800d74c:	d036      	beq.n	800d7bc <uxr_deserialize_ObjectVariant+0x11c>
 800d74e:	2b03      	cmp	r3, #3
 800d750:	d03c      	beq.n	800d7cc <uxr_deserialize_ObjectVariant+0x12c>
 800d752:	2b01      	cmp	r3, #1
 800d754:	d032      	beq.n	800d7bc <uxr_deserialize_ObjectVariant+0x11c>
 800d756:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800d75a:	4628      	mov	r0, r5
 800d75c:	f7fa fe54 	bl	8008408 <ucdr_deserialize_int16_t>
 800d760:	4020      	ands	r0, r4
 800d762:	b2c4      	uxtb	r4, r0
 800d764:	e7b1      	b.n	800d6ca <uxr_deserialize_ObjectVariant+0x2a>
 800d766:	1d31      	adds	r1, r6, #4
 800d768:	4628      	mov	r0, r5
 800d76a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d76e:	f7ff bbbf 	b.w	800cef0 <uxr_deserialize_CLIENT_Representation>
 800d772:	2204      	movs	r2, #4
 800d774:	18b1      	adds	r1, r6, r2
 800d776:	4628      	mov	r0, r5
 800d778:	f005 fa3a 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800d77c:	2202      	movs	r2, #2
 800d77e:	f106 0108 	add.w	r1, r6, #8
 800d782:	4604      	mov	r4, r0
 800d784:	4628      	mov	r0, r5
 800d786:	f005 fa33 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800d78a:	2202      	movs	r2, #2
 800d78c:	4004      	ands	r4, r0
 800d78e:	f106 010a 	add.w	r1, r6, #10
 800d792:	4628      	mov	r0, r5
 800d794:	f005 fa2c 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800d798:	b2e4      	uxtb	r4, r4
 800d79a:	4603      	mov	r3, r0
 800d79c:	f106 010c 	add.w	r1, r6, #12
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	401c      	ands	r4, r3
 800d7a4:	f7fa f85c 	bl	8007860 <ucdr_deserialize_bool>
 800d7a8:	4004      	ands	r4, r0
 800d7aa:	e78e      	b.n	800d6ca <uxr_deserialize_ObjectVariant+0x2a>
 800d7ac:	68b1      	ldr	r1, [r6, #8]
 800d7ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	f005 fae8 	bl	8012d88 <ucdr_deserialize_string>
 800d7b8:	4604      	mov	r4, r0
 800d7ba:	e7b6      	b.n	800d72a <uxr_deserialize_ObjectVariant+0x8a>
 800d7bc:	68b1      	ldr	r1, [r6, #8]
 800d7be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	f005 fae0 	bl	8012d88 <ucdr_deserialize_string>
 800d7c8:	4604      	mov	r4, r0
 800d7ca:	e7c4      	b.n	800d756 <uxr_deserialize_ObjectVariant+0xb6>
 800d7cc:	f106 0308 	add.w	r3, r6, #8
 800d7d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7d4:	f106 010c 	add.w	r1, r6, #12
 800d7d8:	4628      	mov	r0, r5
 800d7da:	f005 faab 	bl	8012d34 <ucdr_deserialize_sequence_uint8_t>
 800d7de:	4604      	mov	r4, r0
 800d7e0:	e7b9      	b.n	800d756 <uxr_deserialize_ObjectVariant+0xb6>
 800d7e2:	bf00      	nop

0800d7e4 <uxr_deserialize_BaseObjectRequest>:
 800d7e4:	b570      	push	{r4, r5, r6, lr}
 800d7e6:	2202      	movs	r2, #2
 800d7e8:	4605      	mov	r5, r0
 800d7ea:	460e      	mov	r6, r1
 800d7ec:	f005 fa00 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800d7f0:	2202      	movs	r2, #2
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	18b1      	adds	r1, r6, r2
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f005 f9fa 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800d7fc:	4020      	ands	r0, r4
 800d7fe:	b2c0      	uxtb	r0, r0
 800d800:	bd70      	pop	{r4, r5, r6, pc}
 800d802:	bf00      	nop

0800d804 <uxr_serialize_ActivityInfoVariant>:
 800d804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d808:	460d      	mov	r5, r1
 800d80a:	7809      	ldrb	r1, [r1, #0]
 800d80c:	4607      	mov	r7, r0
 800d80e:	f7fa f83f 	bl	8007890 <ucdr_serialize_uint8_t>
 800d812:	4681      	mov	r9, r0
 800d814:	b138      	cbz	r0, 800d826 <uxr_serialize_ActivityInfoVariant+0x22>
 800d816:	782b      	ldrb	r3, [r5, #0]
 800d818:	2b06      	cmp	r3, #6
 800d81a:	f000 8082 	beq.w	800d922 <uxr_serialize_ActivityInfoVariant+0x11e>
 800d81e:	2b0d      	cmp	r3, #13
 800d820:	d016      	beq.n	800d850 <uxr_serialize_ActivityInfoVariant+0x4c>
 800d822:	2b05      	cmp	r3, #5
 800d824:	d002      	beq.n	800d82c <uxr_serialize_ActivityInfoVariant+0x28>
 800d826:	4648      	mov	r0, r9
 800d828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d82c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d830:	4638      	mov	r0, r7
 800d832:	f7fa fd69 	bl	8008308 <ucdr_serialize_int16_t>
 800d836:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800d83a:	4681      	mov	r9, r0
 800d83c:	4638      	mov	r0, r7
 800d83e:	f7fa fc93 	bl	8008168 <ucdr_serialize_uint64_t>
 800d842:	ea09 0000 	and.w	r0, r9, r0
 800d846:	fa5f f980 	uxtb.w	r9, r0
 800d84a:	4648      	mov	r0, r9
 800d84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d850:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d854:	4638      	mov	r0, r7
 800d856:	f7fa fd57 	bl	8008308 <ucdr_serialize_int16_t>
 800d85a:	68e9      	ldr	r1, [r5, #12]
 800d85c:	4681      	mov	r9, r0
 800d85e:	4638      	mov	r0, r7
 800d860:	f7fa fa2c 	bl	8007cbc <ucdr_serialize_uint32_t>
 800d864:	68eb      	ldr	r3, [r5, #12]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d0eb      	beq.n	800d842 <uxr_serialize_ActivityInfoVariant+0x3e>
 800d86a:	b320      	cbz	r0, 800d8b6 <uxr_serialize_ActivityInfoVariant+0xb2>
 800d86c:	f105 080c 	add.w	r8, r5, #12
 800d870:	2600      	movs	r6, #0
 800d872:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800d876:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800d87a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800d87e:	4638      	mov	r0, r7
 800d880:	f7fa f806 	bl	8007890 <ucdr_serialize_uint8_t>
 800d884:	2800      	cmp	r0, #0
 800d886:	d053      	beq.n	800d930 <uxr_serialize_ActivityInfoVariant+0x12c>
 800d888:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800d88c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800d890:	0074      	lsls	r4, r6, #1
 800d892:	00c9      	lsls	r1, r1, #3
 800d894:	2b03      	cmp	r3, #3
 800d896:	d854      	bhi.n	800d942 <uxr_serialize_ActivityInfoVariant+0x13e>
 800d898:	e8df f003 	tbb	[pc, r3]
 800d89c:	02102132 	.word	0x02102132
 800d8a0:	4441      	add	r1, r8
 800d8a2:	4638      	mov	r0, r7
 800d8a4:	6889      	ldr	r1, [r1, #8]
 800d8a6:	f005 fa5f 	bl	8012d68 <ucdr_serialize_string>
 800d8aa:	68ea      	ldr	r2, [r5, #12]
 800d8ac:	3601      	adds	r6, #1
 800d8ae:	4296      	cmp	r6, r2
 800d8b0:	d242      	bcs.n	800d938 <uxr_serialize_ActivityInfoVariant+0x134>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d1dd      	bne.n	800d872 <uxr_serialize_ActivityInfoVariant+0x6e>
 800d8b6:	f04f 0900 	mov.w	r9, #0
 800d8ba:	e7b4      	b.n	800d826 <uxr_serialize_ActivityInfoVariant+0x22>
 800d8bc:	3108      	adds	r1, #8
 800d8be:	4441      	add	r1, r8
 800d8c0:	2210      	movs	r2, #16
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	f005 f930 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800d8c8:	4434      	add	r4, r6
 800d8ca:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	f7fa f9f2 	bl	8007cbc <ucdr_serialize_uint32_t>
 800d8d8:	4020      	ands	r0, r4
 800d8da:	b2c0      	uxtb	r0, r0
 800d8dc:	e7e5      	b.n	800d8aa <uxr_serialize_ActivityInfoVariant+0xa6>
 800d8de:	3108      	adds	r1, #8
 800d8e0:	4441      	add	r1, r8
 800d8e2:	2204      	movs	r2, #4
 800d8e4:	4638      	mov	r0, r7
 800d8e6:	f005 f91f 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800d8ea:	4434      	add	r4, r6
 800d8ec:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800d8f0:	4604      	mov	r4, r0
 800d8f2:	8b19      	ldrh	r1, [r3, #24]
 800d8f4:	4638      	mov	r0, r7
 800d8f6:	f7f9 fff7 	bl	80078e8 <ucdr_serialize_uint16_t>
 800d8fa:	4020      	ands	r0, r4
 800d8fc:	b2c0      	uxtb	r0, r0
 800d8fe:	e7d4      	b.n	800d8aa <uxr_serialize_ActivityInfoVariant+0xa6>
 800d900:	3108      	adds	r1, #8
 800d902:	4441      	add	r1, r8
 800d904:	2202      	movs	r2, #2
 800d906:	4638      	mov	r0, r7
 800d908:	f005 f90e 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800d90c:	4434      	add	r4, r6
 800d90e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800d912:	4604      	mov	r4, r0
 800d914:	7d99      	ldrb	r1, [r3, #22]
 800d916:	4638      	mov	r0, r7
 800d918:	f7f9 ffba 	bl	8007890 <ucdr_serialize_uint8_t>
 800d91c:	4020      	ands	r0, r4
 800d91e:	b2c0      	uxtb	r0, r0
 800d920:	e7c3      	b.n	800d8aa <uxr_serialize_ActivityInfoVariant+0xa6>
 800d922:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d926:	4638      	mov	r0, r7
 800d928:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d92c:	f7fa bcec 	b.w	8008308 <ucdr_serialize_int16_t>
 800d930:	68ea      	ldr	r2, [r5, #12]
 800d932:	3601      	adds	r6, #1
 800d934:	42b2      	cmp	r2, r6
 800d936:	d8be      	bhi.n	800d8b6 <uxr_serialize_ActivityInfoVariant+0xb2>
 800d938:	ea09 0900 	and.w	r9, r9, r0
 800d93c:	fa5f f989 	uxtb.w	r9, r9
 800d940:	e771      	b.n	800d826 <uxr_serialize_ActivityInfoVariant+0x22>
 800d942:	68eb      	ldr	r3, [r5, #12]
 800d944:	3601      	adds	r6, #1
 800d946:	429e      	cmp	r6, r3
 800d948:	f10a 0a18 	add.w	sl, sl, #24
 800d94c:	d395      	bcc.n	800d87a <uxr_serialize_ActivityInfoVariant+0x76>
 800d94e:	e76a      	b.n	800d826 <uxr_serialize_ActivityInfoVariant+0x22>

0800d950 <uxr_deserialize_BaseObjectReply>:
 800d950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d954:	2202      	movs	r2, #2
 800d956:	4606      	mov	r6, r0
 800d958:	460f      	mov	r7, r1
 800d95a:	f005 f949 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800d95e:	2202      	movs	r2, #2
 800d960:	18b9      	adds	r1, r7, r2
 800d962:	4605      	mov	r5, r0
 800d964:	4630      	mov	r0, r6
 800d966:	f005 f943 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800d96a:	1d39      	adds	r1, r7, #4
 800d96c:	4680      	mov	r8, r0
 800d96e:	4630      	mov	r0, r6
 800d970:	f7f9 ffa4 	bl	80078bc <ucdr_deserialize_uint8_t>
 800d974:	1d79      	adds	r1, r7, #5
 800d976:	4604      	mov	r4, r0
 800d978:	4630      	mov	r0, r6
 800d97a:	f7f9 ff9f 	bl	80078bc <ucdr_deserialize_uint8_t>
 800d97e:	ea05 0508 	and.w	r5, r5, r8
 800d982:	402c      	ands	r4, r5
 800d984:	4020      	ands	r0, r4
 800d986:	b2c0      	uxtb	r0, r0
 800d988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d98c <uxr_serialize_ReadSpecification>:
 800d98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d990:	460e      	mov	r6, r1
 800d992:	7809      	ldrb	r1, [r1, #0]
 800d994:	4607      	mov	r7, r0
 800d996:	f7f9 ff7b 	bl	8007890 <ucdr_serialize_uint8_t>
 800d99a:	7871      	ldrb	r1, [r6, #1]
 800d99c:	4604      	mov	r4, r0
 800d99e:	4638      	mov	r0, r7
 800d9a0:	f7f9 ff76 	bl	8007890 <ucdr_serialize_uint8_t>
 800d9a4:	78b1      	ldrb	r1, [r6, #2]
 800d9a6:	4004      	ands	r4, r0
 800d9a8:	4638      	mov	r0, r7
 800d9aa:	f7f9 ff43 	bl	8007834 <ucdr_serialize_bool>
 800d9ae:	78b3      	ldrb	r3, [r6, #2]
 800d9b0:	b2e4      	uxtb	r4, r4
 800d9b2:	4004      	ands	r4, r0
 800d9b4:	b94b      	cbnz	r3, 800d9ca <uxr_serialize_ReadSpecification+0x3e>
 800d9b6:	7a31      	ldrb	r1, [r6, #8]
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	f7f9 ff3b 	bl	8007834 <ucdr_serialize_bool>
 800d9be:	7a33      	ldrb	r3, [r6, #8]
 800d9c0:	4004      	ands	r4, r0
 800d9c2:	b943      	cbnz	r3, 800d9d6 <uxr_serialize_ReadSpecification+0x4a>
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ca:	6871      	ldr	r1, [r6, #4]
 800d9cc:	4638      	mov	r0, r7
 800d9ce:	f005 f9cb 	bl	8012d68 <ucdr_serialize_string>
 800d9d2:	4004      	ands	r4, r0
 800d9d4:	e7ef      	b.n	800d9b6 <uxr_serialize_ReadSpecification+0x2a>
 800d9d6:	8971      	ldrh	r1, [r6, #10]
 800d9d8:	4638      	mov	r0, r7
 800d9da:	f7f9 ff85 	bl	80078e8 <ucdr_serialize_uint16_t>
 800d9de:	89b1      	ldrh	r1, [r6, #12]
 800d9e0:	4605      	mov	r5, r0
 800d9e2:	4638      	mov	r0, r7
 800d9e4:	f7f9 ff80 	bl	80078e8 <ucdr_serialize_uint16_t>
 800d9e8:	89f1      	ldrh	r1, [r6, #14]
 800d9ea:	4005      	ands	r5, r0
 800d9ec:	4638      	mov	r0, r7
 800d9ee:	f7f9 ff7b 	bl	80078e8 <ucdr_serialize_uint16_t>
 800d9f2:	8a31      	ldrh	r1, [r6, #16]
 800d9f4:	4680      	mov	r8, r0
 800d9f6:	4638      	mov	r0, r7
 800d9f8:	f7f9 ff76 	bl	80078e8 <ucdr_serialize_uint16_t>
 800d9fc:	b2ed      	uxtb	r5, r5
 800d9fe:	4025      	ands	r5, r4
 800da00:	ea08 0505 	and.w	r5, r8, r5
 800da04:	ea00 0405 	and.w	r4, r0, r5
 800da08:	4620      	mov	r0, r4
 800da0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da0e:	bf00      	nop

0800da10 <uxr_serialize_CREATE_CLIENT_Payload>:
 800da10:	f7ff ba16 	b.w	800ce40 <uxr_serialize_CLIENT_Representation>

0800da14 <uxr_serialize_CREATE_Payload>:
 800da14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da16:	2202      	movs	r2, #2
 800da18:	4607      	mov	r7, r0
 800da1a:	460e      	mov	r6, r1
 800da1c:	f005 f884 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800da20:	2202      	movs	r2, #2
 800da22:	18b1      	adds	r1, r6, r2
 800da24:	4605      	mov	r5, r0
 800da26:	4638      	mov	r0, r7
 800da28:	f005 f87e 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800da2c:	7931      	ldrb	r1, [r6, #4]
 800da2e:	4604      	mov	r4, r0
 800da30:	4638      	mov	r0, r7
 800da32:	f7f9 ff2d 	bl	8007890 <ucdr_serialize_uint8_t>
 800da36:	b170      	cbz	r0, 800da56 <uxr_serialize_CREATE_Payload+0x42>
 800da38:	7933      	ldrb	r3, [r6, #4]
 800da3a:	402c      	ands	r4, r5
 800da3c:	3b01      	subs	r3, #1
 800da3e:	b2e4      	uxtb	r4, r4
 800da40:	2b0d      	cmp	r3, #13
 800da42:	d809      	bhi.n	800da58 <uxr_serialize_CREATE_Payload+0x44>
 800da44:	e8df f003 	tbb	[pc, r3]
 800da48:	23230a4c 	.word	0x23230a4c
 800da4c:	0a0a0a0a 	.word	0x0a0a0a0a
 800da50:	12121208 	.word	0x12121208
 800da54:	3e45      	.short	0x3e45
 800da56:	2400      	movs	r4, #0
 800da58:	4620      	mov	r0, r4
 800da5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da5c:	f106 0108 	add.w	r1, r6, #8
 800da60:	4638      	mov	r0, r7
 800da62:	f7ff faf3 	bl	800d04c <uxr_serialize_DATAWRITER_Representation>
 800da66:	4004      	ands	r4, r0
 800da68:	4620      	mov	r0, r4
 800da6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da6c:	7a31      	ldrb	r1, [r6, #8]
 800da6e:	4638      	mov	r0, r7
 800da70:	f7f9 ff0e 	bl	8007890 <ucdr_serialize_uint8_t>
 800da74:	2800      	cmp	r0, #0
 800da76:	d0ee      	beq.n	800da56 <uxr_serialize_CREATE_Payload+0x42>
 800da78:	7a33      	ldrb	r3, [r6, #8]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d001      	beq.n	800da82 <uxr_serialize_CREATE_Payload+0x6e>
 800da7e:	2b02      	cmp	r3, #2
 800da80:	d1ea      	bne.n	800da58 <uxr_serialize_CREATE_Payload+0x44>
 800da82:	68f1      	ldr	r1, [r6, #12]
 800da84:	4638      	mov	r0, r7
 800da86:	f005 f96f 	bl	8012d68 <ucdr_serialize_string>
 800da8a:	4004      	ands	r4, r0
 800da8c:	e7e4      	b.n	800da58 <uxr_serialize_CREATE_Payload+0x44>
 800da8e:	7a31      	ldrb	r1, [r6, #8]
 800da90:	4638      	mov	r0, r7
 800da92:	f7f9 fefd 	bl	8007890 <ucdr_serialize_uint8_t>
 800da96:	4605      	mov	r5, r0
 800da98:	b158      	cbz	r0, 800dab2 <uxr_serialize_CREATE_Payload+0x9e>
 800da9a:	7a33      	ldrb	r3, [r6, #8]
 800da9c:	2b02      	cmp	r3, #2
 800da9e:	d034      	beq.n	800db0a <uxr_serialize_CREATE_Payload+0xf6>
 800daa0:	2b03      	cmp	r3, #3
 800daa2:	d106      	bne.n	800dab2 <uxr_serialize_CREATE_Payload+0x9e>
 800daa4:	68f2      	ldr	r2, [r6, #12]
 800daa6:	f106 0110 	add.w	r1, r6, #16
 800daaa:	4638      	mov	r0, r7
 800daac:	f005 f930 	bl	8012d10 <ucdr_serialize_sequence_uint8_t>
 800dab0:	4605      	mov	r5, r0
 800dab2:	2202      	movs	r2, #2
 800dab4:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800dab8:	4638      	mov	r0, r7
 800daba:	f005 f835 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800dabe:	4028      	ands	r0, r5
 800dac0:	4004      	ands	r4, r0
 800dac2:	e7c9      	b.n	800da58 <uxr_serialize_CREATE_Payload+0x44>
 800dac4:	f106 0108 	add.w	r1, r6, #8
 800dac8:	4638      	mov	r0, r7
 800daca:	f7ff f9b9 	bl	800ce40 <uxr_serialize_CLIENT_Representation>
 800dace:	4004      	ands	r4, r0
 800dad0:	e7c2      	b.n	800da58 <uxr_serialize_CREATE_Payload+0x44>
 800dad2:	f106 0108 	add.w	r1, r6, #8
 800dad6:	4638      	mov	r0, r7
 800dad8:	f7ff fa6e 	bl	800cfb8 <uxr_serialize_AGENT_Representation>
 800dadc:	4004      	ands	r4, r0
 800dade:	e7bb      	b.n	800da58 <uxr_serialize_CREATE_Payload+0x44>
 800dae0:	7a31      	ldrb	r1, [r6, #8]
 800dae2:	4638      	mov	r0, r7
 800dae4:	f7f9 fed4 	bl	8007890 <ucdr_serialize_uint8_t>
 800dae8:	4605      	mov	r5, r0
 800daea:	b130      	cbz	r0, 800dafa <uxr_serialize_CREATE_Payload+0xe6>
 800daec:	7a33      	ldrb	r3, [r6, #8]
 800daee:	2b02      	cmp	r3, #2
 800daf0:	d011      	beq.n	800db16 <uxr_serialize_CREATE_Payload+0x102>
 800daf2:	2b03      	cmp	r3, #3
 800daf4:	d015      	beq.n	800db22 <uxr_serialize_CREATE_Payload+0x10e>
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d00d      	beq.n	800db16 <uxr_serialize_CREATE_Payload+0x102>
 800dafa:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800dafe:	4638      	mov	r0, r7
 800db00:	f7fa fc02 	bl	8008308 <ucdr_serialize_int16_t>
 800db04:	4028      	ands	r0, r5
 800db06:	4004      	ands	r4, r0
 800db08:	e7a6      	b.n	800da58 <uxr_serialize_CREATE_Payload+0x44>
 800db0a:	68f1      	ldr	r1, [r6, #12]
 800db0c:	4638      	mov	r0, r7
 800db0e:	f005 f92b 	bl	8012d68 <ucdr_serialize_string>
 800db12:	4605      	mov	r5, r0
 800db14:	e7cd      	b.n	800dab2 <uxr_serialize_CREATE_Payload+0x9e>
 800db16:	68f1      	ldr	r1, [r6, #12]
 800db18:	4638      	mov	r0, r7
 800db1a:	f005 f925 	bl	8012d68 <ucdr_serialize_string>
 800db1e:	4605      	mov	r5, r0
 800db20:	e7eb      	b.n	800dafa <uxr_serialize_CREATE_Payload+0xe6>
 800db22:	68f2      	ldr	r2, [r6, #12]
 800db24:	f106 0110 	add.w	r1, r6, #16
 800db28:	4638      	mov	r0, r7
 800db2a:	f005 f8f1 	bl	8012d10 <ucdr_serialize_sequence_uint8_t>
 800db2e:	4605      	mov	r5, r0
 800db30:	e7e3      	b.n	800dafa <uxr_serialize_CREATE_Payload+0xe6>
 800db32:	bf00      	nop

0800db34 <uxr_deserialize_GET_INFO_Payload>:
 800db34:	b570      	push	{r4, r5, r6, lr}
 800db36:	2202      	movs	r2, #2
 800db38:	4605      	mov	r5, r0
 800db3a:	460e      	mov	r6, r1
 800db3c:	f005 f858 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800db40:	2202      	movs	r2, #2
 800db42:	18b1      	adds	r1, r6, r2
 800db44:	4604      	mov	r4, r0
 800db46:	4628      	mov	r0, r5
 800db48:	f005 f852 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800db4c:	1d31      	adds	r1, r6, #4
 800db4e:	4004      	ands	r4, r0
 800db50:	4628      	mov	r0, r5
 800db52:	f7fa f9e3 	bl	8007f1c <ucdr_deserialize_uint32_t>
 800db56:	b2e4      	uxtb	r4, r4
 800db58:	4020      	ands	r0, r4
 800db5a:	bd70      	pop	{r4, r5, r6, pc}

0800db5c <uxr_serialize_DELETE_Payload>:
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	2202      	movs	r2, #2
 800db60:	4605      	mov	r5, r0
 800db62:	460e      	mov	r6, r1
 800db64:	f004 ffe0 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800db68:	2202      	movs	r2, #2
 800db6a:	4604      	mov	r4, r0
 800db6c:	18b1      	adds	r1, r6, r2
 800db6e:	4628      	mov	r0, r5
 800db70:	f004 ffda 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800db74:	4020      	ands	r0, r4
 800db76:	b2c0      	uxtb	r0, r0
 800db78:	bd70      	pop	{r4, r5, r6, pc}
 800db7a:	bf00      	nop

0800db7c <uxr_deserialize_STATUS_AGENT_Payload>:
 800db7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db80:	4605      	mov	r5, r0
 800db82:	460e      	mov	r6, r1
 800db84:	f7f9 fe9a 	bl	80078bc <ucdr_deserialize_uint8_t>
 800db88:	1c71      	adds	r1, r6, #1
 800db8a:	4604      	mov	r4, r0
 800db8c:	4628      	mov	r0, r5
 800db8e:	f7f9 fe95 	bl	80078bc <ucdr_deserialize_uint8_t>
 800db92:	2204      	movs	r2, #4
 800db94:	18b1      	adds	r1, r6, r2
 800db96:	4680      	mov	r8, r0
 800db98:	4628      	mov	r0, r5
 800db9a:	f005 f829 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800db9e:	f106 0108 	add.w	r1, r6, #8
 800dba2:	4607      	mov	r7, r0
 800dba4:	2202      	movs	r2, #2
 800dba6:	4628      	mov	r0, r5
 800dba8:	f005 f822 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800dbac:	ea04 0308 	and.w	r3, r4, r8
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	ea03 0407 	and.w	r4, r3, r7
 800dbb6:	2202      	movs	r2, #2
 800dbb8:	4607      	mov	r7, r0
 800dbba:	f106 010a 	add.w	r1, r6, #10
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	f005 f816 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800dbc4:	f106 010c 	add.w	r1, r6, #12
 800dbc8:	4603      	mov	r3, r0
 800dbca:	4628      	mov	r0, r5
 800dbcc:	461d      	mov	r5, r3
 800dbce:	f7f9 fe47 	bl	8007860 <ucdr_deserialize_bool>
 800dbd2:	403c      	ands	r4, r7
 800dbd4:	4025      	ands	r5, r4
 800dbd6:	4028      	ands	r0, r5
 800dbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbdc <uxr_deserialize_STATUS_Payload>:
 800dbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	4606      	mov	r6, r0
 800dbe4:	460f      	mov	r7, r1
 800dbe6:	f005 f803 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800dbea:	2202      	movs	r2, #2
 800dbec:	18b9      	adds	r1, r7, r2
 800dbee:	4605      	mov	r5, r0
 800dbf0:	4630      	mov	r0, r6
 800dbf2:	f004 fffd 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800dbf6:	1d39      	adds	r1, r7, #4
 800dbf8:	4680      	mov	r8, r0
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	f7f9 fe5e 	bl	80078bc <ucdr_deserialize_uint8_t>
 800dc00:	1d79      	adds	r1, r7, #5
 800dc02:	4604      	mov	r4, r0
 800dc04:	4630      	mov	r0, r6
 800dc06:	f7f9 fe59 	bl	80078bc <ucdr_deserialize_uint8_t>
 800dc0a:	ea05 0508 	and.w	r5, r5, r8
 800dc0e:	402c      	ands	r4, r5
 800dc10:	4020      	ands	r0, r4
 800dc12:	b2c0      	uxtb	r0, r0
 800dc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc18 <uxr_serialize_INFO_Payload>:
 800dc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc1c:	2202      	movs	r2, #2
 800dc1e:	460c      	mov	r4, r1
 800dc20:	4605      	mov	r5, r0
 800dc22:	f004 ff81 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800dc26:	2202      	movs	r2, #2
 800dc28:	18a1      	adds	r1, r4, r2
 800dc2a:	4680      	mov	r8, r0
 800dc2c:	4628      	mov	r0, r5
 800dc2e:	f004 ff7b 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800dc32:	7921      	ldrb	r1, [r4, #4]
 800dc34:	4607      	mov	r7, r0
 800dc36:	4628      	mov	r0, r5
 800dc38:	f7f9 fe2a 	bl	8007890 <ucdr_serialize_uint8_t>
 800dc3c:	7961      	ldrb	r1, [r4, #5]
 800dc3e:	4606      	mov	r6, r0
 800dc40:	4628      	mov	r0, r5
 800dc42:	f7f9 fe25 	bl	8007890 <ucdr_serialize_uint8_t>
 800dc46:	ea08 0807 	and.w	r8, r8, r7
 800dc4a:	ea06 0608 	and.w	r6, r6, r8
 800dc4e:	4006      	ands	r6, r0
 800dc50:	7a21      	ldrb	r1, [r4, #8]
 800dc52:	4628      	mov	r0, r5
 800dc54:	f7f9 fdee 	bl	8007834 <ucdr_serialize_bool>
 800dc58:	7a23      	ldrb	r3, [r4, #8]
 800dc5a:	b2f7      	uxtb	r7, r6
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	b96b      	cbnz	r3, 800dc7c <uxr_serialize_INFO_Payload+0x64>
 800dc60:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800dc64:	4628      	mov	r0, r5
 800dc66:	f7f9 fde5 	bl	8007834 <ucdr_serialize_bool>
 800dc6a:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800dc6e:	4030      	ands	r0, r6
 800dc70:	b2c6      	uxtb	r6, r0
 800dc72:	b983      	cbnz	r3, 800dc96 <uxr_serialize_INFO_Payload+0x7e>
 800dc74:	ea06 0007 	and.w	r0, r6, r7
 800dc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc7c:	7b21      	ldrb	r1, [r4, #12]
 800dc7e:	4628      	mov	r0, r5
 800dc80:	f7f9 fe06 	bl	8007890 <ucdr_serialize_uint8_t>
 800dc84:	b188      	cbz	r0, 800dcaa <uxr_serialize_INFO_Payload+0x92>
 800dc86:	f104 010c 	add.w	r1, r4, #12
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	f7ff fa06 	bl	800d09c <uxr_serialize_ObjectVariant.part.0>
 800dc90:	4030      	ands	r0, r6
 800dc92:	b2c6      	uxtb	r6, r0
 800dc94:	e7e4      	b.n	800dc60 <uxr_serialize_INFO_Payload+0x48>
 800dc96:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	f7ff fdb2 	bl	800d804 <uxr_serialize_ActivityInfoVariant>
 800dca0:	4006      	ands	r6, r0
 800dca2:	ea06 0007 	and.w	r0, r6, r7
 800dca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcaa:	4606      	mov	r6, r0
 800dcac:	e7d8      	b.n	800dc60 <uxr_serialize_INFO_Payload+0x48>
 800dcae:	bf00      	nop

0800dcb0 <uxr_serialize_READ_DATA_Payload>:
 800dcb0:	b570      	push	{r4, r5, r6, lr}
 800dcb2:	2202      	movs	r2, #2
 800dcb4:	4605      	mov	r5, r0
 800dcb6:	460e      	mov	r6, r1
 800dcb8:	f004 ff36 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800dcbc:	2202      	movs	r2, #2
 800dcbe:	18b1      	adds	r1, r6, r2
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	f004 ff30 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800dcc8:	1d31      	adds	r1, r6, #4
 800dcca:	4004      	ands	r4, r0
 800dccc:	4628      	mov	r0, r5
 800dcce:	f7ff fe5d 	bl	800d98c <uxr_serialize_ReadSpecification>
 800dcd2:	b2e4      	uxtb	r4, r4
 800dcd4:	4020      	ands	r0, r4
 800dcd6:	bd70      	pop	{r4, r5, r6, pc}

0800dcd8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800dcd8:	b570      	push	{r4, r5, r6, lr}
 800dcda:	2202      	movs	r2, #2
 800dcdc:	4605      	mov	r5, r0
 800dcde:	460e      	mov	r6, r1
 800dce0:	f004 ff22 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800dce4:	2202      	movs	r2, #2
 800dce6:	4604      	mov	r4, r0
 800dce8:	18b1      	adds	r1, r6, r2
 800dcea:	4628      	mov	r0, r5
 800dcec:	f004 ff1c 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800dcf0:	4020      	ands	r0, r4
 800dcf2:	b2c0      	uxtb	r0, r0
 800dcf4:	bd70      	pop	{r4, r5, r6, pc}
 800dcf6:	bf00      	nop

0800dcf8 <uxr_serialize_ACKNACK_Payload>:
 800dcf8:	b570      	push	{r4, r5, r6, lr}
 800dcfa:	460c      	mov	r4, r1
 800dcfc:	460e      	mov	r6, r1
 800dcfe:	f834 1b02 	ldrh.w	r1, [r4], #2
 800dd02:	4605      	mov	r5, r0
 800dd04:	f7f9 fdf0 	bl	80078e8 <ucdr_serialize_uint16_t>
 800dd08:	2202      	movs	r2, #2
 800dd0a:	4621      	mov	r1, r4
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	4628      	mov	r0, r5
 800dd10:	f004 ff0a 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800dd14:	7931      	ldrb	r1, [r6, #4]
 800dd16:	4004      	ands	r4, r0
 800dd18:	4628      	mov	r0, r5
 800dd1a:	f7f9 fdb9 	bl	8007890 <ucdr_serialize_uint8_t>
 800dd1e:	b2e4      	uxtb	r4, r4
 800dd20:	4020      	ands	r0, r4
 800dd22:	bd70      	pop	{r4, r5, r6, pc}

0800dd24 <uxr_deserialize_ACKNACK_Payload>:
 800dd24:	b570      	push	{r4, r5, r6, lr}
 800dd26:	4605      	mov	r5, r0
 800dd28:	460e      	mov	r6, r1
 800dd2a:	f7f9 fedd 	bl	8007ae8 <ucdr_deserialize_uint16_t>
 800dd2e:	2202      	movs	r2, #2
 800dd30:	18b1      	adds	r1, r6, r2
 800dd32:	4604      	mov	r4, r0
 800dd34:	4628      	mov	r0, r5
 800dd36:	f004 ff5b 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800dd3a:	1d31      	adds	r1, r6, #4
 800dd3c:	4004      	ands	r4, r0
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f7f9 fdbc 	bl	80078bc <ucdr_deserialize_uint8_t>
 800dd44:	b2e4      	uxtb	r4, r4
 800dd46:	4020      	ands	r0, r4
 800dd48:	bd70      	pop	{r4, r5, r6, pc}
 800dd4a:	bf00      	nop

0800dd4c <uxr_serialize_HEARTBEAT_Payload>:
 800dd4c:	b570      	push	{r4, r5, r6, lr}
 800dd4e:	460d      	mov	r5, r1
 800dd50:	8809      	ldrh	r1, [r1, #0]
 800dd52:	4606      	mov	r6, r0
 800dd54:	f7f9 fdc8 	bl	80078e8 <ucdr_serialize_uint16_t>
 800dd58:	8869      	ldrh	r1, [r5, #2]
 800dd5a:	4604      	mov	r4, r0
 800dd5c:	4630      	mov	r0, r6
 800dd5e:	f7f9 fdc3 	bl	80078e8 <ucdr_serialize_uint16_t>
 800dd62:	7929      	ldrb	r1, [r5, #4]
 800dd64:	4004      	ands	r4, r0
 800dd66:	4630      	mov	r0, r6
 800dd68:	f7f9 fd92 	bl	8007890 <ucdr_serialize_uint8_t>
 800dd6c:	b2e4      	uxtb	r4, r4
 800dd6e:	4020      	ands	r0, r4
 800dd70:	bd70      	pop	{r4, r5, r6, pc}
 800dd72:	bf00      	nop

0800dd74 <uxr_deserialize_HEARTBEAT_Payload>:
 800dd74:	b570      	push	{r4, r5, r6, lr}
 800dd76:	4605      	mov	r5, r0
 800dd78:	460e      	mov	r6, r1
 800dd7a:	f7f9 feb5 	bl	8007ae8 <ucdr_deserialize_uint16_t>
 800dd7e:	1cb1      	adds	r1, r6, #2
 800dd80:	4604      	mov	r4, r0
 800dd82:	4628      	mov	r0, r5
 800dd84:	f7f9 feb0 	bl	8007ae8 <ucdr_deserialize_uint16_t>
 800dd88:	1d31      	adds	r1, r6, #4
 800dd8a:	4004      	ands	r4, r0
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	f7f9 fd95 	bl	80078bc <ucdr_deserialize_uint8_t>
 800dd92:	b2e4      	uxtb	r4, r4
 800dd94:	4020      	ands	r0, r4
 800dd96:	bd70      	pop	{r4, r5, r6, pc}

0800dd98 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800dd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd9c:	4605      	mov	r5, r0
 800dd9e:	460e      	mov	r6, r1
 800dda0:	f7fa fc3e 	bl	8008620 <ucdr_deserialize_int32_t>
 800dda4:	1d31      	adds	r1, r6, #4
 800dda6:	4607      	mov	r7, r0
 800dda8:	4628      	mov	r0, r5
 800ddaa:	f7fa f8b7 	bl	8007f1c <ucdr_deserialize_uint32_t>
 800ddae:	f106 0108 	add.w	r1, r6, #8
 800ddb2:	4680      	mov	r8, r0
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	f7fa fc33 	bl	8008620 <ucdr_deserialize_int32_t>
 800ddba:	f106 010c 	add.w	r1, r6, #12
 800ddbe:	4604      	mov	r4, r0
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	f7fa f8ab 	bl	8007f1c <ucdr_deserialize_uint32_t>
 800ddc6:	ea07 0708 	and.w	r7, r7, r8
 800ddca:	403c      	ands	r4, r7
 800ddcc:	f106 0110 	add.w	r1, r6, #16
 800ddd0:	4004      	ands	r4, r0
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f7fa fc24 	bl	8008620 <ucdr_deserialize_int32_t>
 800ddd8:	f106 0114 	add.w	r1, r6, #20
 800dddc:	4607      	mov	r7, r0
 800ddde:	4628      	mov	r0, r5
 800dde0:	f7fa f89c 	bl	8007f1c <ucdr_deserialize_uint32_t>
 800dde4:	b2e4      	uxtb	r4, r4
 800dde6:	403c      	ands	r4, r7
 800dde8:	4020      	ands	r0, r4
 800ddea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddee:	bf00      	nop

0800ddf0 <uxr_serialize_SampleIdentity>:
 800ddf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf4:	220c      	movs	r2, #12
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	460d      	mov	r5, r1
 800ddfa:	f004 fe95 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800ddfe:	2203      	movs	r2, #3
 800de00:	f105 010c 	add.w	r1, r5, #12
 800de04:	4607      	mov	r7, r0
 800de06:	4620      	mov	r0, r4
 800de08:	f004 fe8e 	bl	8012b28 <ucdr_serialize_array_uint8_t>
 800de0c:	7be9      	ldrb	r1, [r5, #15]
 800de0e:	4680      	mov	r8, r0
 800de10:	4620      	mov	r0, r4
 800de12:	f7f9 fd3d 	bl	8007890 <ucdr_serialize_uint8_t>
 800de16:	6929      	ldr	r1, [r5, #16]
 800de18:	4606      	mov	r6, r0
 800de1a:	4620      	mov	r0, r4
 800de1c:	f7fa fb68 	bl	80084f0 <ucdr_serialize_int32_t>
 800de20:	6969      	ldr	r1, [r5, #20]
 800de22:	4603      	mov	r3, r0
 800de24:	4620      	mov	r0, r4
 800de26:	ea07 0708 	and.w	r7, r7, r8
 800de2a:	461c      	mov	r4, r3
 800de2c:	f7f9 ff46 	bl	8007cbc <ucdr_serialize_uint32_t>
 800de30:	403e      	ands	r6, r7
 800de32:	4034      	ands	r4, r6
 800de34:	4020      	ands	r0, r4
 800de36:	b2c0      	uxtb	r0, r0
 800de38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de3c <uxr_deserialize_SampleIdentity>:
 800de3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de40:	220c      	movs	r2, #12
 800de42:	4604      	mov	r4, r0
 800de44:	460d      	mov	r5, r1
 800de46:	f004 fed3 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800de4a:	2203      	movs	r2, #3
 800de4c:	f105 010c 	add.w	r1, r5, #12
 800de50:	4607      	mov	r7, r0
 800de52:	4620      	mov	r0, r4
 800de54:	f004 fecc 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 800de58:	f105 010f 	add.w	r1, r5, #15
 800de5c:	4680      	mov	r8, r0
 800de5e:	4620      	mov	r0, r4
 800de60:	f7f9 fd2c 	bl	80078bc <ucdr_deserialize_uint8_t>
 800de64:	f105 0110 	add.w	r1, r5, #16
 800de68:	4606      	mov	r6, r0
 800de6a:	4620      	mov	r0, r4
 800de6c:	f7fa fbd8 	bl	8008620 <ucdr_deserialize_int32_t>
 800de70:	f105 0114 	add.w	r1, r5, #20
 800de74:	4603      	mov	r3, r0
 800de76:	4620      	mov	r0, r4
 800de78:	ea07 0708 	and.w	r7, r7, r8
 800de7c:	461c      	mov	r4, r3
 800de7e:	f7fa f84d 	bl	8007f1c <ucdr_deserialize_uint32_t>
 800de82:	403e      	ands	r6, r7
 800de84:	4034      	ands	r4, r6
 800de86:	4020      	ands	r0, r4
 800de88:	b2c0      	uxtb	r0, r0
 800de8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de8e:	bf00      	nop

0800de90 <rcl_client_get_rmw_handle>:
 800de90:	b118      	cbz	r0, 800de9a <rcl_client_get_rmw_handle+0xa>
 800de92:	6800      	ldr	r0, [r0, #0]
 800de94:	b108      	cbz	r0, 800de9a <rcl_client_get_rmw_handle+0xa>
 800de96:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800de9a:	4770      	bx	lr

0800de9c <rcl_send_request>:
 800de9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de9e:	b08b      	sub	sp, #44	; 0x2c
 800dea0:	b1e8      	cbz	r0, 800dede <rcl_send_request+0x42>
 800dea2:	4604      	mov	r4, r0
 800dea4:	6800      	ldr	r0, [r0, #0]
 800dea6:	b1d0      	cbz	r0, 800dede <rcl_send_request+0x42>
 800dea8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800deac:	b1bb      	cbz	r3, 800dede <rcl_send_request+0x42>
 800deae:	460f      	mov	r7, r1
 800deb0:	b1d1      	cbz	r1, 800dee8 <rcl_send_request+0x4c>
 800deb2:	4616      	mov	r6, r2
 800deb4:	b1c2      	cbz	r2, 800dee8 <rcl_send_request+0x4c>
 800deb6:	2105      	movs	r1, #5
 800deb8:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800debc:	f7fc f9da 	bl	800a274 <__atomic_load_8>
 800dec0:	6823      	ldr	r3, [r4, #0]
 800dec2:	e9c6 0100 	strd	r0, r1, [r6]
 800dec6:	4632      	mov	r2, r6
 800dec8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800decc:	4639      	mov	r1, r7
 800dece:	f004 f88d 	bl	8011fec <rmw_send_request>
 800ded2:	4605      	mov	r5, r0
 800ded4:	b160      	cbz	r0, 800def0 <rcl_send_request+0x54>
 800ded6:	2501      	movs	r5, #1
 800ded8:	4628      	mov	r0, r5
 800deda:	b00b      	add	sp, #44	; 0x2c
 800dedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dede:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800dee2:	4628      	mov	r0, r5
 800dee4:	b00b      	add	sp, #44	; 0x2c
 800dee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dee8:	250b      	movs	r5, #11
 800deea:	4628      	mov	r0, r5
 800deec:	b00b      	add	sp, #44	; 0x2c
 800deee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800def0:	6820      	ldr	r0, [r4, #0]
 800def2:	2305      	movs	r3, #5
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800defa:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800defe:	f7fc fa25 	bl	800a34c <__atomic_exchange_8>
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800df08:	2a00      	cmp	r2, #0
 800df0a:	d0e5      	beq.n	800ded8 <rcl_send_request+0x3c>
 800df0c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800df10:	a905      	add	r1, sp, #20
 800df12:	f003 fc5f 	bl	80117d4 <rmw_get_gid_for_client>
 800df16:	b970      	cbnz	r0, 800df36 <rcl_send_request+0x9a>
 800df18:	6822      	ldr	r2, [r4, #0]
 800df1a:	ab06      	add	r3, sp, #24
 800df1c:	f8d2 0118 	ldr.w	r0, [r2, #280]	; 0x118
 800df20:	9302      	str	r3, [sp, #8]
 800df22:	4629      	mov	r1, r5
 800df24:	e9d6 4500 	ldrd	r4, r5, [r6]
 800df28:	463a      	mov	r2, r7
 800df2a:	e9cd 4500 	strd	r4, r5, [sp]
 800df2e:	f001 f843 	bl	800efb8 <rcl_send_service_event_message>
 800df32:	4605      	mov	r5, r0
 800df34:	e7d0      	b.n	800ded8 <rcl_send_request+0x3c>
 800df36:	f000 f875 	bl	800e024 <rcl_convert_rmw_ret_to_rcl_ret>
 800df3a:	4605      	mov	r5, r0
 800df3c:	e7cc      	b.n	800ded8 <rcl_send_request+0x3c>
 800df3e:	bf00      	nop

0800df40 <rcl_take_response>:
 800df40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df42:	468e      	mov	lr, r1
 800df44:	460c      	mov	r4, r1
 800df46:	4616      	mov	r6, r2
 800df48:	4605      	mov	r5, r0
 800df4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800df4e:	b095      	sub	sp, #84	; 0x54
 800df50:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 800df54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800df58:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800df5c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800df60:	2d00      	cmp	r5, #0
 800df62:	d042      	beq.n	800dfea <rcl_take_response+0xaa>
 800df64:	682b      	ldr	r3, [r5, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d03f      	beq.n	800dfea <rcl_take_response+0xaa>
 800df6a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800df6e:	2800      	cmp	r0, #0
 800df70:	d03b      	beq.n	800dfea <rcl_take_response+0xaa>
 800df72:	2e00      	cmp	r6, #0
 800df74:	d03c      	beq.n	800dff0 <rcl_take_response+0xb0>
 800df76:	ed9f 7b24 	vldr	d7, [pc, #144]	; 800e008 <rcl_take_response+0xc8>
 800df7a:	2300      	movs	r3, #0
 800df7c:	f88d 3013 	strb.w	r3, [sp, #19]
 800df80:	4632      	mov	r2, r6
 800df82:	f10d 0313 	add.w	r3, sp, #19
 800df86:	a90a      	add	r1, sp, #40	; 0x28
 800df88:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800df8c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800df90:	f004 f934 	bl	80121fc <rmw_take_response>
 800df94:	4607      	mov	r7, r0
 800df96:	bb68      	cbnz	r0, 800dff4 <rcl_take_response+0xb4>
 800df98:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800df9c:	b363      	cbz	r3, 800dff8 <rcl_take_response+0xb8>
 800df9e:	682b      	ldr	r3, [r5, #0]
 800dfa0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800dfa4:	b19a      	cbz	r2, 800dfce <rcl_take_response+0x8e>
 800dfa6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800dfaa:	a905      	add	r1, sp, #20
 800dfac:	f003 fc12 	bl	80117d4 <rmw_get_gid_for_client>
 800dfb0:	bb28      	cbnz	r0, 800dffe <rcl_take_response+0xbe>
 800dfb2:	682a      	ldr	r2, [r5, #0]
 800dfb4:	f8d2 0118 	ldr.w	r0, [r2, #280]	; 0x118
 800dfb8:	4632      	mov	r2, r6
 800dfba:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800dfbe:	ab06      	add	r3, sp, #24
 800dfc0:	e9cd 6700 	strd	r6, r7, [sp]
 800dfc4:	9302      	str	r3, [sp, #8]
 800dfc6:	2103      	movs	r1, #3
 800dfc8:	f000 fff6 	bl	800efb8 <rcl_send_service_event_message>
 800dfcc:	4607      	mov	r7, r0
 800dfce:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 800dfd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dfd6:	46a4      	mov	ip, r4
 800dfd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dfdc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800dfe0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800dfe4:	4638      	mov	r0, r7
 800dfe6:	b015      	add	sp, #84	; 0x54
 800dfe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfea:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800dfee:	e7ee      	b.n	800dfce <rcl_take_response+0x8e>
 800dff0:	270b      	movs	r7, #11
 800dff2:	e7ec      	b.n	800dfce <rcl_take_response+0x8e>
 800dff4:	2701      	movs	r7, #1
 800dff6:	e7ea      	b.n	800dfce <rcl_take_response+0x8e>
 800dff8:	f240 17f5 	movw	r7, #501	; 0x1f5
 800dffc:	e7e7      	b.n	800dfce <rcl_take_response+0x8e>
 800dffe:	f000 f811 	bl	800e024 <rcl_convert_rmw_ret_to_rcl_ret>
 800e002:	4607      	mov	r7, r0
 800e004:	e7e3      	b.n	800dfce <rcl_take_response+0x8e>
 800e006:	bf00      	nop
	...

0800e010 <rcl_client_is_valid>:
 800e010:	b130      	cbz	r0, 800e020 <rcl_client_is_valid+0x10>
 800e012:	6800      	ldr	r0, [r0, #0]
 800e014:	b120      	cbz	r0, 800e020 <rcl_client_is_valid+0x10>
 800e016:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800e01a:	3800      	subs	r0, #0
 800e01c:	bf18      	it	ne
 800e01e:	2001      	movne	r0, #1
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop

0800e024 <rcl_convert_rmw_ret_to_rcl_ret>:
 800e024:	280b      	cmp	r0, #11
 800e026:	dc0d      	bgt.n	800e044 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800e028:	2800      	cmp	r0, #0
 800e02a:	db09      	blt.n	800e040 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e02c:	280b      	cmp	r0, #11
 800e02e:	d807      	bhi.n	800e040 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e030:	e8df f000 	tbb	[pc, r0]
 800e034:	07060607 	.word	0x07060607
 800e038:	06060606 	.word	0x06060606
 800e03c:	07070606 	.word	0x07070606
 800e040:	2001      	movs	r0, #1
 800e042:	4770      	bx	lr
 800e044:	28cb      	cmp	r0, #203	; 0xcb
 800e046:	bf18      	it	ne
 800e048:	2001      	movne	r0, #1
 800e04a:	4770      	bx	lr

0800e04c <rcl_get_zero_initialized_context>:
 800e04c:	4a03      	ldr	r2, [pc, #12]	; (800e05c <rcl_get_zero_initialized_context+0x10>)
 800e04e:	4603      	mov	r3, r0
 800e050:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e054:	e883 0003 	stmia.w	r3, {r0, r1}
 800e058:	4618      	mov	r0, r3
 800e05a:	4770      	bx	lr
 800e05c:	08016dc4 	.word	0x08016dc4

0800e060 <rcl_context_is_valid>:
 800e060:	b118      	cbz	r0, 800e06a <rcl_context_is_valid+0xa>
 800e062:	6840      	ldr	r0, [r0, #4]
 800e064:	3800      	subs	r0, #0
 800e066:	bf18      	it	ne
 800e068:	2001      	movne	r0, #1
 800e06a:	4770      	bx	lr

0800e06c <__cleanup_context>:
 800e06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e070:	4606      	mov	r6, r0
 800e072:	6800      	ldr	r0, [r0, #0]
 800e074:	2300      	movs	r3, #0
 800e076:	6073      	str	r3, [r6, #4]
 800e078:	2800      	cmp	r0, #0
 800e07a:	d049      	beq.n	800e110 <__cleanup_context+0xa4>
 800e07c:	6947      	ldr	r7, [r0, #20]
 800e07e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e082:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e086:	b137      	cbz	r7, 800e096 <__cleanup_context+0x2a>
 800e088:	3014      	adds	r0, #20
 800e08a:	f000 faf1 	bl	800e670 <rcl_init_options_fini>
 800e08e:	4607      	mov	r7, r0
 800e090:	2800      	cmp	r0, #0
 800e092:	d144      	bne.n	800e11e <__cleanup_context+0xb2>
 800e094:	6830      	ldr	r0, [r6, #0]
 800e096:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e098:	b143      	cbz	r3, 800e0ac <__cleanup_context+0x40>
 800e09a:	3028      	adds	r0, #40	; 0x28
 800e09c:	f003 fdee 	bl	8011c7c <rmw_context_fini>
 800e0a0:	b118      	cbz	r0, 800e0aa <__cleanup_context+0x3e>
 800e0a2:	2f00      	cmp	r7, #0
 800e0a4:	d03e      	beq.n	800e124 <__cleanup_context+0xb8>
 800e0a6:	f7fc f99f 	bl	800a3e8 <rcutils_reset_error>
 800e0aa:	6830      	ldr	r0, [r6, #0]
 800e0ac:	6a03      	ldr	r3, [r0, #32]
 800e0ae:	b1db      	cbz	r3, 800e0e8 <__cleanup_context+0x7c>
 800e0b0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800e0b4:	2a01      	cmp	r2, #1
 800e0b6:	f17c 0100 	sbcs.w	r1, ip, #0
 800e0ba:	db11      	blt.n	800e0e0 <__cleanup_context+0x74>
 800e0bc:	2400      	movs	r4, #0
 800e0be:	4625      	mov	r5, r4
 800e0c0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e0c4:	4649      	mov	r1, r9
 800e0c6:	b1b8      	cbz	r0, 800e0f8 <__cleanup_context+0x8c>
 800e0c8:	47c0      	blx	r8
 800e0ca:	6833      	ldr	r3, [r6, #0]
 800e0cc:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800e0d0:	3401      	adds	r4, #1
 800e0d2:	f145 0500 	adc.w	r5, r5, #0
 800e0d6:	4294      	cmp	r4, r2
 800e0d8:	eb75 010c 	sbcs.w	r1, r5, ip
 800e0dc:	6a1b      	ldr	r3, [r3, #32]
 800e0de:	dbef      	blt.n	800e0c0 <__cleanup_context+0x54>
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	4649      	mov	r1, r9
 800e0e4:	47c0      	blx	r8
 800e0e6:	6830      	ldr	r0, [r6, #0]
 800e0e8:	4649      	mov	r1, r9
 800e0ea:	47c0      	blx	r8
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	e9c6 3300 	strd	r3, r3, [r6]
 800e0f2:	4638      	mov	r0, r7
 800e0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0f8:	3401      	adds	r4, #1
 800e0fa:	f145 0500 	adc.w	r5, r5, #0
 800e0fe:	4294      	cmp	r4, r2
 800e100:	eb75 010c 	sbcs.w	r1, r5, ip
 800e104:	dbdc      	blt.n	800e0c0 <__cleanup_context+0x54>
 800e106:	4618      	mov	r0, r3
 800e108:	4649      	mov	r1, r9
 800e10a:	47c0      	blx	r8
 800e10c:	6830      	ldr	r0, [r6, #0]
 800e10e:	e7eb      	b.n	800e0e8 <__cleanup_context+0x7c>
 800e110:	4607      	mov	r7, r0
 800e112:	2300      	movs	r3, #0
 800e114:	e9c6 3300 	strd	r3, r3, [r6]
 800e118:	4638      	mov	r0, r7
 800e11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e11e:	f7fc f963 	bl	800a3e8 <rcutils_reset_error>
 800e122:	e7b7      	b.n	800e094 <__cleanup_context+0x28>
 800e124:	f7ff ff7e 	bl	800e024 <rcl_convert_rmw_ret_to_rcl_ret>
 800e128:	4607      	mov	r7, r0
 800e12a:	e7bc      	b.n	800e0a6 <__cleanup_context+0x3a>

0800e12c <rcl_get_zero_initialized_guard_condition>:
 800e12c:	4a03      	ldr	r2, [pc, #12]	; (800e13c <rcl_get_zero_initialized_guard_condition+0x10>)
 800e12e:	4603      	mov	r3, r0
 800e130:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e134:	e883 0003 	stmia.w	r3, {r0, r1}
 800e138:	4618      	mov	r0, r3
 800e13a:	4770      	bx	lr
 800e13c:	08016dcc 	.word	0x08016dcc

0800e140 <rcl_guard_condition_init>:
 800e140:	b082      	sub	sp, #8
 800e142:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e144:	b087      	sub	sp, #28
 800e146:	ac0c      	add	r4, sp, #48	; 0x30
 800e148:	e884 000c 	stmia.w	r4, {r2, r3}
 800e14c:	46a6      	mov	lr, r4
 800e14e:	460d      	mov	r5, r1
 800e150:	4604      	mov	r4, r0
 800e152:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e156:	f10d 0c04 	add.w	ip, sp, #4
 800e15a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e15e:	f8de 3000 	ldr.w	r3, [lr]
 800e162:	f8cc 3000 	str.w	r3, [ip]
 800e166:	a801      	add	r0, sp, #4
 800e168:	f7fc f876 	bl	800a258 <rcutils_allocator_is_valid>
 800e16c:	b338      	cbz	r0, 800e1be <rcl_guard_condition_init+0x7e>
 800e16e:	b334      	cbz	r4, 800e1be <rcl_guard_condition_init+0x7e>
 800e170:	6866      	ldr	r6, [r4, #4]
 800e172:	b9ee      	cbnz	r6, 800e1b0 <rcl_guard_condition_init+0x70>
 800e174:	b31d      	cbz	r5, 800e1be <rcl_guard_condition_init+0x7e>
 800e176:	4628      	mov	r0, r5
 800e178:	f7ff ff72 	bl	800e060 <rcl_context_is_valid>
 800e17c:	b308      	cbz	r0, 800e1c2 <rcl_guard_condition_init+0x82>
 800e17e:	9b01      	ldr	r3, [sp, #4]
 800e180:	9905      	ldr	r1, [sp, #20]
 800e182:	201c      	movs	r0, #28
 800e184:	4798      	blx	r3
 800e186:	4607      	mov	r7, r0
 800e188:	6060      	str	r0, [r4, #4]
 800e18a:	b310      	cbz	r0, 800e1d2 <rcl_guard_condition_init+0x92>
 800e18c:	6828      	ldr	r0, [r5, #0]
 800e18e:	3028      	adds	r0, #40	; 0x28
 800e190:	f003 fb44 	bl	801181c <rmw_create_guard_condition>
 800e194:	6038      	str	r0, [r7, #0]
 800e196:	6860      	ldr	r0, [r4, #4]
 800e198:	6805      	ldr	r5, [r0, #0]
 800e19a:	b1a5      	cbz	r5, 800e1c6 <rcl_guard_condition_init+0x86>
 800e19c:	2301      	movs	r3, #1
 800e19e:	ac01      	add	r4, sp, #4
 800e1a0:	7103      	strb	r3, [r0, #4]
 800e1a2:	f100 0708 	add.w	r7, r0, #8
 800e1a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1a8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e1aa:	6823      	ldr	r3, [r4, #0]
 800e1ac:	603b      	str	r3, [r7, #0]
 800e1ae:	e000      	b.n	800e1b2 <rcl_guard_condition_init+0x72>
 800e1b0:	2664      	movs	r6, #100	; 0x64
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	b007      	add	sp, #28
 800e1b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e1ba:	b002      	add	sp, #8
 800e1bc:	4770      	bx	lr
 800e1be:	260b      	movs	r6, #11
 800e1c0:	e7f7      	b.n	800e1b2 <rcl_guard_condition_init+0x72>
 800e1c2:	2665      	movs	r6, #101	; 0x65
 800e1c4:	e7f5      	b.n	800e1b2 <rcl_guard_condition_init+0x72>
 800e1c6:	9b02      	ldr	r3, [sp, #8]
 800e1c8:	9905      	ldr	r1, [sp, #20]
 800e1ca:	4798      	blx	r3
 800e1cc:	2601      	movs	r6, #1
 800e1ce:	6065      	str	r5, [r4, #4]
 800e1d0:	e7ef      	b.n	800e1b2 <rcl_guard_condition_init+0x72>
 800e1d2:	260a      	movs	r6, #10
 800e1d4:	e7ed      	b.n	800e1b2 <rcl_guard_condition_init+0x72>
 800e1d6:	bf00      	nop

0800e1d8 <rcl_guard_condition_init_from_rmw>:
 800e1d8:	b082      	sub	sp, #8
 800e1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1de:	b086      	sub	sp, #24
 800e1e0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800e1e4:	4604      	mov	r4, r0
 800e1e6:	f84c 3f04 	str.w	r3, [ip, #4]!
 800e1ea:	460e      	mov	r6, r1
 800e1ec:	4617      	mov	r7, r2
 800e1ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e1f2:	f10d 0e04 	add.w	lr, sp, #4
 800e1f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e1fa:	f8dc 3000 	ldr.w	r3, [ip]
 800e1fe:	f8ce 3000 	str.w	r3, [lr]
 800e202:	a801      	add	r0, sp, #4
 800e204:	f7fc f828 	bl	800a258 <rcutils_allocator_is_valid>
 800e208:	b350      	cbz	r0, 800e260 <rcl_guard_condition_init_from_rmw+0x88>
 800e20a:	b34c      	cbz	r4, 800e260 <rcl_guard_condition_init_from_rmw+0x88>
 800e20c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e210:	f1b8 0f00 	cmp.w	r8, #0
 800e214:	d11e      	bne.n	800e254 <rcl_guard_condition_init_from_rmw+0x7c>
 800e216:	b31f      	cbz	r7, 800e260 <rcl_guard_condition_init_from_rmw+0x88>
 800e218:	4638      	mov	r0, r7
 800e21a:	f7ff ff21 	bl	800e060 <rcl_context_is_valid>
 800e21e:	b328      	cbz	r0, 800e26c <rcl_guard_condition_init_from_rmw+0x94>
 800e220:	9b01      	ldr	r3, [sp, #4]
 800e222:	9905      	ldr	r1, [sp, #20]
 800e224:	201c      	movs	r0, #28
 800e226:	4798      	blx	r3
 800e228:	4605      	mov	r5, r0
 800e22a:	6060      	str	r0, [r4, #4]
 800e22c:	b358      	cbz	r0, 800e286 <rcl_guard_condition_init_from_rmw+0xae>
 800e22e:	b1fe      	cbz	r6, 800e270 <rcl_guard_condition_init_from_rmw+0x98>
 800e230:	6006      	str	r6, [r0, #0]
 800e232:	f880 8004 	strb.w	r8, [r0, #4]
 800e236:	ac01      	add	r4, sp, #4
 800e238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e23a:	f105 0c08 	add.w	ip, r5, #8
 800e23e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e242:	6823      	ldr	r3, [r4, #0]
 800e244:	f8cc 3000 	str.w	r3, [ip]
 800e248:	2000      	movs	r0, #0
 800e24a:	b006      	add	sp, #24
 800e24c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e250:	b002      	add	sp, #8
 800e252:	4770      	bx	lr
 800e254:	2064      	movs	r0, #100	; 0x64
 800e256:	b006      	add	sp, #24
 800e258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e25c:	b002      	add	sp, #8
 800e25e:	4770      	bx	lr
 800e260:	200b      	movs	r0, #11
 800e262:	b006      	add	sp, #24
 800e264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e268:	b002      	add	sp, #8
 800e26a:	4770      	bx	lr
 800e26c:	2065      	movs	r0, #101	; 0x65
 800e26e:	e7f2      	b.n	800e256 <rcl_guard_condition_init_from_rmw+0x7e>
 800e270:	6838      	ldr	r0, [r7, #0]
 800e272:	3028      	adds	r0, #40	; 0x28
 800e274:	f003 fad2 	bl	801181c <rmw_create_guard_condition>
 800e278:	6028      	str	r0, [r5, #0]
 800e27a:	6865      	ldr	r5, [r4, #4]
 800e27c:	682e      	ldr	r6, [r5, #0]
 800e27e:	b126      	cbz	r6, 800e28a <rcl_guard_condition_init_from_rmw+0xb2>
 800e280:	2301      	movs	r3, #1
 800e282:	712b      	strb	r3, [r5, #4]
 800e284:	e7d7      	b.n	800e236 <rcl_guard_condition_init_from_rmw+0x5e>
 800e286:	200a      	movs	r0, #10
 800e288:	e7e5      	b.n	800e256 <rcl_guard_condition_init_from_rmw+0x7e>
 800e28a:	4628      	mov	r0, r5
 800e28c:	9b02      	ldr	r3, [sp, #8]
 800e28e:	9905      	ldr	r1, [sp, #20]
 800e290:	4798      	blx	r3
 800e292:	6066      	str	r6, [r4, #4]
 800e294:	2001      	movs	r0, #1
 800e296:	e7de      	b.n	800e256 <rcl_guard_condition_init_from_rmw+0x7e>

0800e298 <rcl_guard_condition_fini>:
 800e298:	b570      	push	{r4, r5, r6, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	b1f0      	cbz	r0, 800e2dc <rcl_guard_condition_fini+0x44>
 800e29e:	6843      	ldr	r3, [r0, #4]
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	b163      	cbz	r3, 800e2be <rcl_guard_condition_fini+0x26>
 800e2a4:	6818      	ldr	r0, [r3, #0]
 800e2a6:	68de      	ldr	r6, [r3, #12]
 800e2a8:	6999      	ldr	r1, [r3, #24]
 800e2aa:	b160      	cbz	r0, 800e2c6 <rcl_guard_condition_fini+0x2e>
 800e2ac:	791d      	ldrb	r5, [r3, #4]
 800e2ae:	b965      	cbnz	r5, 800e2ca <rcl_guard_condition_fini+0x32>
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	47b0      	blx	r6
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	6063      	str	r3, [r4, #4]
 800e2ba:	b002      	add	sp, #8
 800e2bc:	bd70      	pop	{r4, r5, r6, pc}
 800e2be:	461d      	mov	r5, r3
 800e2c0:	4628      	mov	r0, r5
 800e2c2:	b002      	add	sp, #8
 800e2c4:	bd70      	pop	{r4, r5, r6, pc}
 800e2c6:	4605      	mov	r5, r0
 800e2c8:	e7f2      	b.n	800e2b0 <rcl_guard_condition_fini+0x18>
 800e2ca:	9101      	str	r1, [sp, #4]
 800e2cc:	f003 faba 	bl	8011844 <rmw_destroy_guard_condition>
 800e2d0:	1e05      	subs	r5, r0, #0
 800e2d2:	6863      	ldr	r3, [r4, #4]
 800e2d4:	9901      	ldr	r1, [sp, #4]
 800e2d6:	bf18      	it	ne
 800e2d8:	2501      	movne	r5, #1
 800e2da:	e7e9      	b.n	800e2b0 <rcl_guard_condition_fini+0x18>
 800e2dc:	250b      	movs	r5, #11
 800e2de:	4628      	mov	r0, r5
 800e2e0:	b002      	add	sp, #8
 800e2e2:	bd70      	pop	{r4, r5, r6, pc}

0800e2e4 <rcl_guard_condition_get_default_options>:
 800e2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2e6:	b087      	sub	sp, #28
 800e2e8:	4606      	mov	r6, r0
 800e2ea:	4668      	mov	r0, sp
 800e2ec:	f7fb ffa6 	bl	800a23c <rcutils_get_default_allocator>
 800e2f0:	4b09      	ldr	r3, [pc, #36]	; (800e318 <rcl_guard_condition_get_default_options+0x34>)
 800e2f2:	46ee      	mov	lr, sp
 800e2f4:	469c      	mov	ip, r3
 800e2f6:	461d      	mov	r5, r3
 800e2f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e2fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e302:	4634      	mov	r4, r6
 800e304:	f8de 7000 	ldr.w	r7, [lr]
 800e308:	f8cc 7000 	str.w	r7, [ip]
 800e30c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e30e:	4630      	mov	r0, r6
 800e310:	6027      	str	r7, [r4, #0]
 800e312:	b007      	add	sp, #28
 800e314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e316:	bf00      	nop
 800e318:	20011108 	.word	0x20011108

0800e31c <rcl_trigger_guard_condition>:
 800e31c:	b148      	cbz	r0, 800e332 <rcl_trigger_guard_condition+0x16>
 800e31e:	b508      	push	{r3, lr}
 800e320:	6843      	ldr	r3, [r0, #4]
 800e322:	b143      	cbz	r3, 800e336 <rcl_trigger_guard_condition+0x1a>
 800e324:	6818      	ldr	r0, [r3, #0]
 800e326:	f004 f99d 	bl	8012664 <rmw_trigger_guard_condition>
 800e32a:	3800      	subs	r0, #0
 800e32c:	bf18      	it	ne
 800e32e:	2001      	movne	r0, #1
 800e330:	bd08      	pop	{r3, pc}
 800e332:	200b      	movs	r0, #11
 800e334:	4770      	bx	lr
 800e336:	200b      	movs	r0, #11
 800e338:	bd08      	pop	{r3, pc}
 800e33a:	bf00      	nop

0800e33c <rcl_guard_condition_get_rmw_handle>:
 800e33c:	b110      	cbz	r0, 800e344 <rcl_guard_condition_get_rmw_handle+0x8>
 800e33e:	6840      	ldr	r0, [r0, #4]
 800e340:	b100      	cbz	r0, 800e344 <rcl_guard_condition_get_rmw_handle+0x8>
 800e342:	6800      	ldr	r0, [r0, #0]
 800e344:	4770      	bx	lr
 800e346:	bf00      	nop

0800e348 <rcl_init>:
 800e348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34c:	1e05      	subs	r5, r0, #0
 800e34e:	b0a7      	sub	sp, #156	; 0x9c
 800e350:	460e      	mov	r6, r1
 800e352:	4690      	mov	r8, r2
 800e354:	461f      	mov	r7, r3
 800e356:	f340 809d 	ble.w	800e494 <rcl_init+0x14c>
 800e35a:	2900      	cmp	r1, #0
 800e35c:	f000 809d 	beq.w	800e49a <rcl_init+0x152>
 800e360:	f1a1 0e04 	sub.w	lr, r1, #4
 800e364:	f04f 0c00 	mov.w	ip, #0
 800e368:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800e36c:	f10c 0c01 	add.w	ip, ip, #1
 800e370:	2c00      	cmp	r4, #0
 800e372:	f000 8092 	beq.w	800e49a <rcl_init+0x152>
 800e376:	4565      	cmp	r5, ip
 800e378:	d1f6      	bne.n	800e368 <rcl_init+0x20>
 800e37a:	f1b8 0f00 	cmp.w	r8, #0
 800e37e:	f000 808c 	beq.w	800e49a <rcl_init+0x152>
 800e382:	f8d8 4000 	ldr.w	r4, [r8]
 800e386:	2c00      	cmp	r4, #0
 800e388:	f000 8087 	beq.w	800e49a <rcl_init+0x152>
 800e38c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e38e:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800e392:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e396:	6823      	ldr	r3, [r4, #0]
 800e398:	f8cc 3000 	str.w	r3, [ip]
 800e39c:	a821      	add	r0, sp, #132	; 0x84
 800e39e:	f7fb ff5b 	bl	800a258 <rcutils_allocator_is_valid>
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	d079      	beq.n	800e49a <rcl_init+0x152>
 800e3a6:	2f00      	cmp	r7, #0
 800e3a8:	d077      	beq.n	800e49a <rcl_init+0x152>
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d179      	bne.n	800e4a4 <rcl_init+0x15c>
 800e3b0:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800e3b4:	2198      	movs	r1, #152	; 0x98
 800e3b6:	2001      	movs	r0, #1
 800e3b8:	4798      	blx	r3
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	6038      	str	r0, [r7, #0]
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	f000 80cd 	beq.w	800e55e <rcl_init+0x216>
 800e3c4:	a802      	add	r0, sp, #8
 800e3c6:	f002 ff89 	bl	80112dc <rmw_get_zero_initialized_context>
 800e3ca:	a902      	add	r1, sp, #8
 800e3cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e3d0:	2270      	movs	r2, #112	; 0x70
 800e3d2:	f007 fad6 	bl	8015982 <memcpy>
 800e3d6:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800e3da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e3de:	f8d7 e000 	ldr.w	lr, [r7]
 800e3e2:	4674      	mov	r4, lr
 800e3e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3e6:	f8dc 3000 	ldr.w	r3, [ip]
 800e3ea:	6023      	str	r3, [r4, #0]
 800e3ec:	f10e 0114 	add.w	r1, lr, #20
 800e3f0:	4640      	mov	r0, r8
 800e3f2:	f000 f967 	bl	800e6c4 <rcl_init_options_copy>
 800e3f6:	4604      	mov	r4, r0
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	d144      	bne.n	800e486 <rcl_init+0x13e>
 800e3fc:	f8d7 9000 	ldr.w	r9, [r7]
 800e400:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800e404:	f8c9 0020 	str.w	r0, [r9, #32]
 800e408:	f8c9 5018 	str.w	r5, [r9, #24]
 800e40c:	f8c9 a01c 	str.w	sl, [r9, #28]
 800e410:	2d00      	cmp	r5, #0
 800e412:	d04e      	beq.n	800e4b2 <rcl_init+0x16a>
 800e414:	2e00      	cmp	r6, #0
 800e416:	d04c      	beq.n	800e4b2 <rcl_init+0x16a>
 800e418:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800e41c:	2104      	movs	r1, #4
 800e41e:	4628      	mov	r0, r5
 800e420:	4798      	blx	r3
 800e422:	f8c9 0020 	str.w	r0, [r9, #32]
 800e426:	f8d7 9000 	ldr.w	r9, [r7]
 800e42a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800e42e:	46cb      	mov	fp, r9
 800e430:	b343      	cbz	r3, 800e484 <rcl_init+0x13c>
 800e432:	2d01      	cmp	r5, #1
 800e434:	f17a 0300 	sbcs.w	r3, sl, #0
 800e438:	db3b      	blt.n	800e4b2 <rcl_init+0x16a>
 800e43a:	2400      	movs	r4, #0
 800e43c:	3e04      	subs	r6, #4
 800e43e:	46a1      	mov	r9, r4
 800e440:	e00b      	b.n	800e45a <rcl_init+0x112>
 800e442:	6831      	ldr	r1, [r6, #0]
 800e444:	f007 fa9d 	bl	8015982 <memcpy>
 800e448:	3401      	adds	r4, #1
 800e44a:	f149 0900 	adc.w	r9, r9, #0
 800e44e:	45ca      	cmp	sl, r9
 800e450:	bf08      	it	eq
 800e452:	42a5      	cmpeq	r5, r4
 800e454:	d02b      	beq.n	800e4ae <rcl_init+0x166>
 800e456:	f8d7 b000 	ldr.w	fp, [r7]
 800e45a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800e45e:	f7f1 ff1f 	bl	80002a0 <strlen>
 800e462:	1c42      	adds	r2, r0, #1
 800e464:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e466:	9925      	ldr	r1, [sp, #148]	; 0x94
 800e468:	f8db b020 	ldr.w	fp, [fp, #32]
 800e46c:	9201      	str	r2, [sp, #4]
 800e46e:	4610      	mov	r0, r2
 800e470:	4798      	blx	r3
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 800e478:	6a1b      	ldr	r3, [r3, #32]
 800e47a:	9a01      	ldr	r2, [sp, #4]
 800e47c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e480:	2800      	cmp	r0, #0
 800e482:	d1de      	bne.n	800e442 <rcl_init+0xfa>
 800e484:	240a      	movs	r4, #10
 800e486:	4638      	mov	r0, r7
 800e488:	f7ff fdf0 	bl	800e06c <__cleanup_context>
 800e48c:	4620      	mov	r0, r4
 800e48e:	b027      	add	sp, #156	; 0x9c
 800e490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e494:	2900      	cmp	r1, #0
 800e496:	f43f af70 	beq.w	800e37a <rcl_init+0x32>
 800e49a:	240b      	movs	r4, #11
 800e49c:	4620      	mov	r0, r4
 800e49e:	b027      	add	sp, #156	; 0x9c
 800e4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4a4:	2464      	movs	r4, #100	; 0x64
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	b027      	add	sp, #156	; 0x9c
 800e4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ae:	f8d7 9000 	ldr.w	r9, [r7]
 800e4b2:	493f      	ldr	r1, [pc, #252]	; (800e5b0 <rcl_init+0x268>)
 800e4b4:	680b      	ldr	r3, [r1, #0]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	d04c      	beq.n	800e554 <rcl_init+0x20c>
 800e4ba:	600b      	str	r3, [r1, #0]
 800e4bc:	461a      	mov	r2, r3
 800e4be:	2000      	movs	r0, #0
 800e4c0:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800e4c4:	607b      	str	r3, [r7, #4]
 800e4c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	e9c5 2006 	strd	r2, r0, [r5, #24]
 800e4ce:	d05c      	beq.n	800e58a <rcl_init+0x242>
 800e4d0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d044      	beq.n	800e562 <rcl_init+0x21a>
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d04e      	beq.n	800e57a <rcl_init+0x232>
 800e4dc:	f8d8 3000 	ldr.w	r3, [r8]
 800e4e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e4e4:	f105 0634 	add.w	r6, r5, #52	; 0x34
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d059      	beq.n	800e5a0 <rcl_init+0x258>
 800e4ec:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800e4ee:	b953      	cbnz	r3, 800e506 <rcl_init+0x1be>
 800e4f0:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800e4f4:	2801      	cmp	r0, #1
 800e4f6:	d008      	beq.n	800e50a <rcl_init+0x1c2>
 800e4f8:	a921      	add	r1, sp, #132	; 0x84
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	f006 f884 	bl	8014608 <rcl_get_discovery_static_peers>
 800e500:	4604      	mov	r4, r0
 800e502:	2800      	cmp	r0, #0
 800e504:	d1bf      	bne.n	800e486 <rcl_init+0x13e>
 800e506:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800e50a:	f006 f873 	bl	80145f4 <rcl_automatic_discovery_range_to_string>
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	695b      	ldr	r3, [r3, #20]
 800e512:	aa20      	add	r2, sp, #128	; 0x80
 800e514:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e516:	a91f      	add	r1, sp, #124	; 0x7c
 800e518:	f001 f8ec 	bl	800f6f4 <rcl_validate_enclave_name>
 800e51c:	4604      	mov	r4, r0
 800e51e:	2800      	cmp	r0, #0
 800e520:	d1b1      	bne.n	800e486 <rcl_init+0x13e>
 800e522:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e524:	bb7b      	cbnz	r3, 800e586 <rcl_init+0x23e>
 800e526:	6839      	ldr	r1, [r7, #0]
 800e528:	694b      	ldr	r3, [r1, #20]
 800e52a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e52c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800e530:	f000 fc60 	bl	800edf4 <rcl_get_security_options_from_environment>
 800e534:	4604      	mov	r4, r0
 800e536:	2800      	cmp	r0, #0
 800e538:	d1a5      	bne.n	800e486 <rcl_init+0x13e>
 800e53a:	6839      	ldr	r1, [r7, #0]
 800e53c:	6948      	ldr	r0, [r1, #20]
 800e53e:	3128      	adds	r1, #40	; 0x28
 800e540:	3018      	adds	r0, #24
 800e542:	f003 fa65 	bl	8011a10 <rmw_init>
 800e546:	4604      	mov	r4, r0
 800e548:	2800      	cmp	r0, #0
 800e54a:	d0a7      	beq.n	800e49c <rcl_init+0x154>
 800e54c:	f7ff fd6a 	bl	800e024 <rcl_convert_rmw_ret_to_rcl_ret>
 800e550:	4604      	mov	r4, r0
 800e552:	e798      	b.n	800e486 <rcl_init+0x13e>
 800e554:	2201      	movs	r2, #1
 800e556:	4618      	mov	r0, r3
 800e558:	600a      	str	r2, [r1, #0]
 800e55a:	4613      	mov	r3, r2
 800e55c:	e7b0      	b.n	800e4c0 <rcl_init+0x178>
 800e55e:	240a      	movs	r4, #10
 800e560:	e79c      	b.n	800e49c <rcl_init+0x154>
 800e562:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800e566:	f000 f909 	bl	800e77c <rcl_get_localhost_only>
 800e56a:	4604      	mov	r4, r0
 800e56c:	2800      	cmp	r0, #0
 800e56e:	d18a      	bne.n	800e486 <rcl_init+0x13e>
 800e570:	683a      	ldr	r2, [r7, #0]
 800e572:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800e576:	6955      	ldr	r5, [r2, #20]
 800e578:	e7ae      	b.n	800e4d8 <rcl_init+0x190>
 800e57a:	2002      	movs	r0, #2
 800e57c:	2300      	movs	r3, #0
 800e57e:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
 800e582:	63eb      	str	r3, [r5, #60]	; 0x3c
 800e584:	e7c1      	b.n	800e50a <rcl_init+0x1c2>
 800e586:	2401      	movs	r4, #1
 800e588:	e77d      	b.n	800e486 <rcl_init+0x13e>
 800e58a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800e58e:	f006 f8a1 	bl	80146d4 <rcl_get_default_domain_id>
 800e592:	4604      	mov	r4, r0
 800e594:	2800      	cmp	r0, #0
 800e596:	f47f af76 	bne.w	800e486 <rcl_init+0x13e>
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	695d      	ldr	r5, [r3, #20]
 800e59e:	e797      	b.n	800e4d0 <rcl_init+0x188>
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	f005 ffe5 	bl	8014570 <rcl_get_automatic_discovery_range>
 800e5a6:	4604      	mov	r4, r0
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	d09f      	beq.n	800e4ec <rcl_init+0x1a4>
 800e5ac:	e76b      	b.n	800e486 <rcl_init+0x13e>
 800e5ae:	bf00      	nop
 800e5b0:	2001111c 	.word	0x2001111c

0800e5b4 <rcl_get_zero_initialized_init_options>:
 800e5b4:	2000      	movs	r0, #0
 800e5b6:	4770      	bx	lr

0800e5b8 <rcl_init_options_init>:
 800e5b8:	b084      	sub	sp, #16
 800e5ba:	b570      	push	{r4, r5, r6, lr}
 800e5bc:	b09e      	sub	sp, #120	; 0x78
 800e5be:	ad23      	add	r5, sp, #140	; 0x8c
 800e5c0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	d046      	beq.n	800e656 <rcl_init_options_init+0x9e>
 800e5c8:	6803      	ldr	r3, [r0, #0]
 800e5ca:	4604      	mov	r4, r0
 800e5cc:	b133      	cbz	r3, 800e5dc <rcl_init_options_init+0x24>
 800e5ce:	2564      	movs	r5, #100	; 0x64
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	b01e      	add	sp, #120	; 0x78
 800e5d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5d8:	b004      	add	sp, #16
 800e5da:	4770      	bx	lr
 800e5dc:	4628      	mov	r0, r5
 800e5de:	f7fb fe3b 	bl	800a258 <rcutils_allocator_is_valid>
 800e5e2:	2800      	cmp	r0, #0
 800e5e4:	d037      	beq.n	800e656 <rcl_init_options_init+0x9e>
 800e5e6:	46ae      	mov	lr, r5
 800e5e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5ec:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800e5f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5f4:	f8de 3000 	ldr.w	r3, [lr]
 800e5f8:	f8cc 3000 	str.w	r3, [ip]
 800e5fc:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800e5fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e600:	2070      	movs	r0, #112	; 0x70
 800e602:	4798      	blx	r3
 800e604:	4606      	mov	r6, r0
 800e606:	6020      	str	r0, [r4, #0]
 800e608:	b338      	cbz	r0, 800e65a <rcl_init_options_init+0xa2>
 800e60a:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800e60e:	4686      	mov	lr, r0
 800e610:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e614:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e618:	f8dc 3000 	ldr.w	r3, [ip]
 800e61c:	f8ce 3000 	str.w	r3, [lr]
 800e620:	a802      	add	r0, sp, #8
 800e622:	f002 fe6b 	bl	80112fc <rmw_get_zero_initialized_init_options>
 800e626:	2258      	movs	r2, #88	; 0x58
 800e628:	a902      	add	r1, sp, #8
 800e62a:	f106 0018 	add.w	r0, r6, #24
 800e62e:	f007 f9a8 	bl	8015982 <memcpy>
 800e632:	ab26      	add	r3, sp, #152	; 0x98
 800e634:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e638:	6826      	ldr	r6, [r4, #0]
 800e63a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e63e:	f106 0018 	add.w	r0, r6, #24
 800e642:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800e646:	f003 f911 	bl	801186c <rmw_init_options_init>
 800e64a:	4605      	mov	r5, r0
 800e64c:	b938      	cbnz	r0, 800e65e <rcl_init_options_init+0xa6>
 800e64e:	6823      	ldr	r3, [r4, #0]
 800e650:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 800e654:	e7bc      	b.n	800e5d0 <rcl_init_options_init+0x18>
 800e656:	250b      	movs	r5, #11
 800e658:	e7ba      	b.n	800e5d0 <rcl_init_options_init+0x18>
 800e65a:	250a      	movs	r5, #10
 800e65c:	e7b8      	b.n	800e5d0 <rcl_init_options_init+0x18>
 800e65e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800e660:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e662:	6820      	ldr	r0, [r4, #0]
 800e664:	4798      	blx	r3
 800e666:	4628      	mov	r0, r5
 800e668:	f7ff fcdc 	bl	800e024 <rcl_convert_rmw_ret_to_rcl_ret>
 800e66c:	4605      	mov	r5, r0
 800e66e:	e7af      	b.n	800e5d0 <rcl_init_options_init+0x18>

0800e670 <rcl_init_options_fini>:
 800e670:	b530      	push	{r4, r5, lr}
 800e672:	b087      	sub	sp, #28
 800e674:	b1f0      	cbz	r0, 800e6b4 <rcl_init_options_fini+0x44>
 800e676:	6803      	ldr	r3, [r0, #0]
 800e678:	4604      	mov	r4, r0
 800e67a:	b1db      	cbz	r3, 800e6b4 <rcl_init_options_fini+0x44>
 800e67c:	469c      	mov	ip, r3
 800e67e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e682:	f10d 0e04 	add.w	lr, sp, #4
 800e686:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e68a:	f8dc 3000 	ldr.w	r3, [ip]
 800e68e:	f8ce 3000 	str.w	r3, [lr]
 800e692:	a801      	add	r0, sp, #4
 800e694:	f7fb fde0 	bl	800a258 <rcutils_allocator_is_valid>
 800e698:	b160      	cbz	r0, 800e6b4 <rcl_init_options_fini+0x44>
 800e69a:	6820      	ldr	r0, [r4, #0]
 800e69c:	3018      	adds	r0, #24
 800e69e:	f003 f981 	bl	80119a4 <rmw_init_options_fini>
 800e6a2:	4605      	mov	r5, r0
 800e6a4:	b950      	cbnz	r0, 800e6bc <rcl_init_options_fini+0x4c>
 800e6a6:	6820      	ldr	r0, [r4, #0]
 800e6a8:	9b02      	ldr	r3, [sp, #8]
 800e6aa:	9905      	ldr	r1, [sp, #20]
 800e6ac:	4798      	blx	r3
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	b007      	add	sp, #28
 800e6b2:	bd30      	pop	{r4, r5, pc}
 800e6b4:	250b      	movs	r5, #11
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	b007      	add	sp, #28
 800e6ba:	bd30      	pop	{r4, r5, pc}
 800e6bc:	f7ff fcb2 	bl	800e024 <rcl_convert_rmw_ret_to_rcl_ret>
 800e6c0:	4605      	mov	r5, r0
 800e6c2:	e7f8      	b.n	800e6b6 <rcl_init_options_fini+0x46>

0800e6c4 <rcl_init_options_copy>:
 800e6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6c6:	b09d      	sub	sp, #116	; 0x74
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	d04a      	beq.n	800e762 <rcl_init_options_copy+0x9e>
 800e6cc:	4604      	mov	r4, r0
 800e6ce:	6800      	ldr	r0, [r0, #0]
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	d046      	beq.n	800e762 <rcl_init_options_copy+0x9e>
 800e6d4:	460d      	mov	r5, r1
 800e6d6:	f7fb fdbf 	bl	800a258 <rcutils_allocator_is_valid>
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	d041      	beq.n	800e762 <rcl_init_options_copy+0x9e>
 800e6de:	2d00      	cmp	r5, #0
 800e6e0:	d03f      	beq.n	800e762 <rcl_init_options_copy+0x9e>
 800e6e2:	682b      	ldr	r3, [r5, #0]
 800e6e4:	b11b      	cbz	r3, 800e6ee <rcl_init_options_copy+0x2a>
 800e6e6:	2464      	movs	r4, #100	; 0x64
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	b01d      	add	sp, #116	; 0x74
 800e6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6ee:	6826      	ldr	r6, [r4, #0]
 800e6f0:	46b6      	mov	lr, r6
 800e6f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e6f6:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800e6fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6fe:	f8de 3000 	ldr.w	r3, [lr]
 800e702:	6837      	ldr	r7, [r6, #0]
 800e704:	f8cc 3000 	str.w	r3, [ip]
 800e708:	4619      	mov	r1, r3
 800e70a:	2070      	movs	r0, #112	; 0x70
 800e70c:	47b8      	blx	r7
 800e70e:	4606      	mov	r6, r0
 800e710:	6028      	str	r0, [r5, #0]
 800e712:	b350      	cbz	r0, 800e76a <rcl_init_options_copy+0xa6>
 800e714:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800e718:	4686      	mov	lr, r0
 800e71a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e71e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e722:	f8dc 3000 	ldr.w	r3, [ip]
 800e726:	f8ce 3000 	str.w	r3, [lr]
 800e72a:	4668      	mov	r0, sp
 800e72c:	f002 fde6 	bl	80112fc <rmw_get_zero_initialized_init_options>
 800e730:	2258      	movs	r2, #88	; 0x58
 800e732:	4669      	mov	r1, sp
 800e734:	f106 0018 	add.w	r0, r6, #24
 800e738:	f007 f923 	bl	8015982 <memcpy>
 800e73c:	6820      	ldr	r0, [r4, #0]
 800e73e:	6829      	ldr	r1, [r5, #0]
 800e740:	3018      	adds	r0, #24
 800e742:	3118      	adds	r1, #24
 800e744:	f003 f8fa 	bl	801193c <rmw_init_options_copy>
 800e748:	4604      	mov	r4, r0
 800e74a:	2800      	cmp	r0, #0
 800e74c:	d0cc      	beq.n	800e6e8 <rcl_init_options_copy+0x24>
 800e74e:	f7fb fe35 	bl	800a3bc <rcutils_get_error_string>
 800e752:	f7fb fe49 	bl	800a3e8 <rcutils_reset_error>
 800e756:	4628      	mov	r0, r5
 800e758:	f7ff ff8a 	bl	800e670 <rcl_init_options_fini>
 800e75c:	b138      	cbz	r0, 800e76e <rcl_init_options_copy+0xaa>
 800e75e:	4604      	mov	r4, r0
 800e760:	e7c2      	b.n	800e6e8 <rcl_init_options_copy+0x24>
 800e762:	240b      	movs	r4, #11
 800e764:	4620      	mov	r0, r4
 800e766:	b01d      	add	sp, #116	; 0x74
 800e768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e76a:	240a      	movs	r4, #10
 800e76c:	e7bc      	b.n	800e6e8 <rcl_init_options_copy+0x24>
 800e76e:	4620      	mov	r0, r4
 800e770:	b01d      	add	sp, #116	; 0x74
 800e772:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e776:	f7ff bc55 	b.w	800e024 <rcl_convert_rmw_ret_to_rcl_ret>
 800e77a:	bf00      	nop

0800e77c <rcl_get_localhost_only>:
 800e77c:	b510      	push	{r4, lr}
 800e77e:	b082      	sub	sp, #8
 800e780:	2300      	movs	r3, #0
 800e782:	9301      	str	r3, [sp, #4]
 800e784:	b1c0      	cbz	r0, 800e7b8 <rcl_get_localhost_only+0x3c>
 800e786:	4604      	mov	r4, r0
 800e788:	a901      	add	r1, sp, #4
 800e78a:	480d      	ldr	r0, [pc, #52]	; (800e7c0 <rcl_get_localhost_only+0x44>)
 800e78c:	f002 fb18 	bl	8010dc0 <rcutils_get_env>
 800e790:	b110      	cbz	r0, 800e798 <rcl_get_localhost_only+0x1c>
 800e792:	2001      	movs	r0, #1
 800e794:	b002      	add	sp, #8
 800e796:	bd10      	pop	{r4, pc}
 800e798:	9b01      	ldr	r3, [sp, #4]
 800e79a:	b10b      	cbz	r3, 800e7a0 <rcl_get_localhost_only+0x24>
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	b923      	cbnz	r3, 800e7aa <rcl_get_localhost_only+0x2e>
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	7023      	strb	r3, [r4, #0]
 800e7a6:	b002      	add	sp, #8
 800e7a8:	bd10      	pop	{r4, pc}
 800e7aa:	2b31      	cmp	r3, #49	; 0x31
 800e7ac:	bf0c      	ite	eq
 800e7ae:	2301      	moveq	r3, #1
 800e7b0:	2302      	movne	r3, #2
 800e7b2:	7023      	strb	r3, [r4, #0]
 800e7b4:	b002      	add	sp, #8
 800e7b6:	bd10      	pop	{r4, pc}
 800e7b8:	200b      	movs	r0, #11
 800e7ba:	b002      	add	sp, #8
 800e7bc:	bd10      	pop	{r4, pc}
 800e7be:	bf00      	nop
 800e7c0:	08016dd4 	.word	0x08016dd4

0800e7c4 <rcl_get_zero_initialized_node>:
 800e7c4:	4a03      	ldr	r2, [pc, #12]	; (800e7d4 <rcl_get_zero_initialized_node+0x10>)
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e7cc:	e883 0003 	stmia.w	r3, {r0, r1}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	4770      	bx	lr
 800e7d4:	08016e18 	.word	0x08016e18

0800e7d8 <rcl_node_init>:
 800e7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7dc:	b0ab      	sub	sp, #172	; 0xac
 800e7de:	4604      	mov	r4, r0
 800e7e0:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 800e7e4:	a825      	add	r0, sp, #148	; 0x94
 800e7e6:	460e      	mov	r6, r1
 800e7e8:	4615      	mov	r5, r2
 800e7ea:	461f      	mov	r7, r3
 800e7ec:	f7ff fd7a 	bl	800e2e4 <rcl_guard_condition_get_default_options>
 800e7f0:	f1b8 0f00 	cmp.w	r8, #0
 800e7f4:	f000 80e6 	beq.w	800e9c4 <rcl_node_init+0x1ec>
 800e7f8:	4640      	mov	r0, r8
 800e7fa:	f7fb fd2d 	bl	800a258 <rcutils_allocator_is_valid>
 800e7fe:	2800      	cmp	r0, #0
 800e800:	f000 80e0 	beq.w	800e9c4 <rcl_node_init+0x1ec>
 800e804:	2e00      	cmp	r6, #0
 800e806:	f000 80dd 	beq.w	800e9c4 <rcl_node_init+0x1ec>
 800e80a:	2d00      	cmp	r5, #0
 800e80c:	f000 80da 	beq.w	800e9c4 <rcl_node_init+0x1ec>
 800e810:	2c00      	cmp	r4, #0
 800e812:	f000 80d7 	beq.w	800e9c4 <rcl_node_init+0x1ec>
 800e816:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e81a:	f1b9 0f00 	cmp.w	r9, #0
 800e81e:	f040 80fd 	bne.w	800ea1c <rcl_node_init+0x244>
 800e822:	2f00      	cmp	r7, #0
 800e824:	f000 80ce 	beq.w	800e9c4 <rcl_node_init+0x1ec>
 800e828:	4638      	mov	r0, r7
 800e82a:	f7ff fc19 	bl	800e060 <rcl_context_is_valid>
 800e82e:	4682      	mov	sl, r0
 800e830:	2800      	cmp	r0, #0
 800e832:	f000 80cd 	beq.w	800e9d0 <rcl_node_init+0x1f8>
 800e836:	464a      	mov	r2, r9
 800e838:	a924      	add	r1, sp, #144	; 0x90
 800e83a:	4630      	mov	r0, r6
 800e83c:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
 800e840:	f002 ff02 	bl	8011648 <rmw_validate_node_name>
 800e844:	4681      	mov	r9, r0
 800e846:	2800      	cmp	r0, #0
 800e848:	f040 80be 	bne.w	800e9c8 <rcl_node_init+0x1f0>
 800e84c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800e84e:	2800      	cmp	r0, #0
 800e850:	f040 80f0 	bne.w	800ea34 <rcl_node_init+0x25c>
 800e854:	4628      	mov	r0, r5
 800e856:	f7f1 fd23 	bl	80002a0 <strlen>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	f040 80bb 	bne.w	800e9d6 <rcl_node_init+0x1fe>
 800e860:	4d7c      	ldr	r5, [pc, #496]	; (800ea54 <rcl_node_init+0x27c>)
 800e862:	a924      	add	r1, sp, #144	; 0x90
 800e864:	2200      	movs	r2, #0
 800e866:	4628      	mov	r0, r5
 800e868:	f002 fed0 	bl	801160c <rmw_validate_namespace>
 800e86c:	4681      	mov	r9, r0
 800e86e:	2800      	cmp	r0, #0
 800e870:	f040 80aa 	bne.w	800e9c8 <rcl_node_init+0x1f0>
 800e874:	4682      	mov	sl, r0
 800e876:	9824      	ldr	r0, [sp, #144]	; 0x90
 800e878:	2800      	cmp	r0, #0
 800e87a:	f040 80e0 	bne.w	800ea3e <rcl_node_init+0x266>
 800e87e:	f8d8 3000 	ldr.w	r3, [r8]
 800e882:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e886:	2080      	movs	r0, #128	; 0x80
 800e888:	4798      	blx	r3
 800e88a:	4681      	mov	r9, r0
 800e88c:	6060      	str	r0, [r4, #4]
 800e88e:	2800      	cmp	r0, #0
 800e890:	f000 80ca 	beq.w	800ea28 <rcl_node_init+0x250>
 800e894:	2200      	movs	r2, #0
 800e896:	2300      	movs	r3, #0
 800e898:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 800e89c:	e9c9 231e 	strd	r2, r3, [r9, #120]	; 0x78
 800e8a0:	a808      	add	r0, sp, #32
 800e8a2:	f000 f927 	bl	800eaf4 <rcl_node_get_default_options>
 800e8a6:	a908      	add	r1, sp, #32
 800e8a8:	4648      	mov	r0, r9
 800e8aa:	2270      	movs	r2, #112	; 0x70
 800e8ac:	f007 f869 	bl	8015982 <memcpy>
 800e8b0:	6861      	ldr	r1, [r4, #4]
 800e8b2:	6027      	str	r7, [r4, #0]
 800e8b4:	4640      	mov	r0, r8
 800e8b6:	f000 f92b 	bl	800eb10 <rcl_node_options_copy>
 800e8ba:	2800      	cmp	r0, #0
 800e8bc:	d158      	bne.n	800e970 <rcl_node_init+0x198>
 800e8be:	4628      	mov	r0, r5
 800e8c0:	f7f1 fcee 	bl	80002a0 <strlen>
 800e8c4:	4428      	add	r0, r5
 800e8c6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800e8ca:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800e8ce:	2b2f      	cmp	r3, #47	; 0x2f
 800e8d0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e8d4:	9300      	str	r3, [sp, #0]
 800e8d6:	bf0c      	ite	eq
 800e8d8:	4b5f      	ldreq	r3, [pc, #380]	; (800ea58 <rcl_node_init+0x280>)
 800e8da:	4b60      	ldrne	r3, [pc, #384]	; (800ea5c <rcl_node_init+0x284>)
 800e8dc:	9302      	str	r3, [sp, #8]
 800e8de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e8e2:	9301      	str	r3, [sp, #4]
 800e8e4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e8e8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e8ec:	f002 fa90 	bl	8010e10 <rcutils_format_string_limit>
 800e8f0:	6823      	ldr	r3, [r4, #0]
 800e8f2:	f8c9 007c 	str.w	r0, [r9, #124]	; 0x7c
 800e8f6:	6818      	ldr	r0, [r3, #0]
 800e8f8:	4631      	mov	r1, r6
 800e8fa:	3028      	adds	r0, #40	; 0x28
 800e8fc:	462a      	mov	r2, r5
 800e8fe:	6866      	ldr	r6, [r4, #4]
 800e900:	f003 fada 	bl	8011eb8 <rmw_create_node>
 800e904:	6863      	ldr	r3, [r4, #4]
 800e906:	6730      	str	r0, [r6, #112]	; 0x70
 800e908:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800e90a:	2800      	cmp	r0, #0
 800e90c:	d032      	beq.n	800e974 <rcl_node_init+0x19c>
 800e90e:	f003 fb67 	bl	8011fe0 <rmw_node_get_graph_guard_condition>
 800e912:	4681      	mov	r9, r0
 800e914:	b360      	cbz	r0, 800e970 <rcl_node_init+0x198>
 800e916:	f8d8 3000 	ldr.w	r3, [r8]
 800e91a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e91e:	6866      	ldr	r6, [r4, #4]
 800e920:	2008      	movs	r0, #8
 800e922:	4798      	blx	r3
 800e924:	6863      	ldr	r3, [r4, #4]
 800e926:	6770      	str	r0, [r6, #116]	; 0x74
 800e928:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 800e92c:	f1bb 0f00 	cmp.w	fp, #0
 800e930:	d020      	beq.n	800e974 <rcl_node_init+0x19c>
 800e932:	a806      	add	r0, sp, #24
 800e934:	f7ff fbfa 	bl	800e12c <rcl_get_zero_initialized_guard_condition>
 800e938:	a806      	add	r0, sp, #24
 800e93a:	c803      	ldmia	r0, {r0, r1}
 800e93c:	6863      	ldr	r3, [r4, #4]
 800e93e:	46c4      	mov	ip, r8
 800e940:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 800e944:	e88b 0003 	stmia.w	fp, {r0, r1}
 800e948:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e94c:	ae25      	add	r6, sp, #148	; 0x94
 800e94e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e950:	f8dc 3000 	ldr.w	r3, [ip]
 800e954:	6033      	str	r3, [r6, #0]
 800e956:	ab2a      	add	r3, sp, #168	; 0xa8
 800e958:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800e95c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e960:	4649      	mov	r1, r9
 800e962:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800e964:	463a      	mov	r2, r7
 800e966:	4670      	mov	r0, lr
 800e968:	f7ff fc36 	bl	800e1d8 <rcl_guard_condition_init_from_rmw>
 800e96c:	4681      	mov	r9, r0
 800e96e:	b328      	cbz	r0, 800e9bc <rcl_node_init+0x1e4>
 800e970:	6863      	ldr	r3, [r4, #4]
 800e972:	b1f3      	cbz	r3, 800e9b2 <rcl_node_init+0x1da>
 800e974:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e976:	b128      	cbz	r0, 800e984 <rcl_node_init+0x1ac>
 800e978:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e97c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e980:	4798      	blx	r3
 800e982:	6863      	ldr	r3, [r4, #4]
 800e984:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800e986:	b110      	cbz	r0, 800e98e <rcl_node_init+0x1b6>
 800e988:	f003 faae 	bl	8011ee8 <rmw_destroy_node>
 800e98c:	6863      	ldr	r3, [r4, #4]
 800e98e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800e990:	b148      	cbz	r0, 800e9a6 <rcl_node_init+0x1ce>
 800e992:	f7ff fc81 	bl	800e298 <rcl_guard_condition_fini>
 800e996:	6863      	ldr	r3, [r4, #4]
 800e998:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e99c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800e99e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e9a2:	4798      	blx	r3
 800e9a4:	6863      	ldr	r3, [r4, #4]
 800e9a6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e9b0:	4798      	blx	r3
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	e9c4 3300 	strd	r3, r3, [r4]
 800e9b8:	f04f 0901 	mov.w	r9, #1
 800e9bc:	f1ba 0f00 	cmp.w	sl, #0
 800e9c0:	d125      	bne.n	800ea0e <rcl_node_init+0x236>
 800e9c2:	e001      	b.n	800e9c8 <rcl_node_init+0x1f0>
 800e9c4:	f04f 090b 	mov.w	r9, #11
 800e9c8:	4648      	mov	r0, r9
 800e9ca:	b02b      	add	sp, #172	; 0xac
 800e9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d0:	f04f 0965 	mov.w	r9, #101	; 0x65
 800e9d4:	e7f8      	b.n	800e9c8 <rcl_node_init+0x1f0>
 800e9d6:	782b      	ldrb	r3, [r5, #0]
 800e9d8:	2b2f      	cmp	r3, #47	; 0x2f
 800e9da:	f43f af42 	beq.w	800e862 <rcl_node_init+0x8a>
 800e9de:	9503      	str	r5, [sp, #12]
 800e9e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	4b1e      	ldr	r3, [pc, #120]	; (800ea60 <rcl_node_init+0x288>)
 800e9e8:	9302      	str	r3, [sp, #8]
 800e9ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e9ee:	9301      	str	r3, [sp, #4]
 800e9f0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e9f4:	f002 fa0c 	bl	8010e10 <rcutils_format_string_limit>
 800e9f8:	4605      	mov	r5, r0
 800e9fa:	b340      	cbz	r0, 800ea4e <rcl_node_init+0x276>
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	a924      	add	r1, sp, #144	; 0x90
 800ea00:	9224      	str	r2, [sp, #144]	; 0x90
 800ea02:	f002 fe03 	bl	801160c <rmw_validate_namespace>
 800ea06:	4681      	mov	r9, r0
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	f43f af34 	beq.w	800e876 <rcl_node_init+0x9e>
 800ea0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ea12:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ea16:	4628      	mov	r0, r5
 800ea18:	4798      	blx	r3
 800ea1a:	e7d5      	b.n	800e9c8 <rcl_node_init+0x1f0>
 800ea1c:	f04f 0964 	mov.w	r9, #100	; 0x64
 800ea20:	4648      	mov	r0, r9
 800ea22:	b02b      	add	sp, #172	; 0xac
 800ea24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea28:	f04f 090a 	mov.w	r9, #10
 800ea2c:	f1ba 0f00 	cmp.w	sl, #0
 800ea30:	d1ed      	bne.n	800ea0e <rcl_node_init+0x236>
 800ea32:	e7c9      	b.n	800e9c8 <rcl_node_init+0x1f0>
 800ea34:	f002 fe5a 	bl	80116ec <rmw_node_name_validation_result_string>
 800ea38:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800ea3c:	e7c4      	b.n	800e9c8 <rcl_node_init+0x1f0>
 800ea3e:	f002 fdf7 	bl	8011630 <rmw_namespace_validation_result_string>
 800ea42:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800ea46:	f1ba 0f00 	cmp.w	sl, #0
 800ea4a:	d1e0      	bne.n	800ea0e <rcl_node_init+0x236>
 800ea4c:	e7bc      	b.n	800e9c8 <rcl_node_init+0x1f0>
 800ea4e:	f04f 090a 	mov.w	r9, #10
 800ea52:	e7b9      	b.n	800e9c8 <rcl_node_init+0x1f0>
 800ea54:	08016dec 	.word	0x08016dec
 800ea58:	08016bcc 	.word	0x08016bcc
 800ea5c:	08016df4 	.word	0x08016df4
 800ea60:	08016df0 	.word	0x08016df0

0800ea64 <rcl_node_is_valid>:
 800ea64:	b130      	cbz	r0, 800ea74 <rcl_node_is_valid+0x10>
 800ea66:	6843      	ldr	r3, [r0, #4]
 800ea68:	b123      	cbz	r3, 800ea74 <rcl_node_is_valid+0x10>
 800ea6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea6c:	b113      	cbz	r3, 800ea74 <rcl_node_is_valid+0x10>
 800ea6e:	6800      	ldr	r0, [r0, #0]
 800ea70:	f7ff baf6 	b.w	800e060 <rcl_context_is_valid>
 800ea74:	2000      	movs	r0, #0
 800ea76:	4770      	bx	lr

0800ea78 <rcl_node_get_name>:
 800ea78:	b120      	cbz	r0, 800ea84 <rcl_node_get_name+0xc>
 800ea7a:	6840      	ldr	r0, [r0, #4]
 800ea7c:	b110      	cbz	r0, 800ea84 <rcl_node_get_name+0xc>
 800ea7e:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800ea80:	b100      	cbz	r0, 800ea84 <rcl_node_get_name+0xc>
 800ea82:	6880      	ldr	r0, [r0, #8]
 800ea84:	4770      	bx	lr
 800ea86:	bf00      	nop

0800ea88 <rcl_node_get_namespace>:
 800ea88:	b120      	cbz	r0, 800ea94 <rcl_node_get_namespace+0xc>
 800ea8a:	6840      	ldr	r0, [r0, #4]
 800ea8c:	b110      	cbz	r0, 800ea94 <rcl_node_get_namespace+0xc>
 800ea8e:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800ea90:	b100      	cbz	r0, 800ea94 <rcl_node_get_namespace+0xc>
 800ea92:	68c0      	ldr	r0, [r0, #12]
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop

0800ea98 <rcl_node_get_options>:
 800ea98:	b128      	cbz	r0, 800eaa6 <rcl_node_get_options+0xe>
 800ea9a:	6840      	ldr	r0, [r0, #4]
 800ea9c:	b118      	cbz	r0, 800eaa6 <rcl_node_get_options+0xe>
 800ea9e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	bf08      	it	eq
 800eaa4:	2000      	moveq	r0, #0
 800eaa6:	4770      	bx	lr

0800eaa8 <rcl_node_get_rmw_handle>:
 800eaa8:	b110      	cbz	r0, 800eab0 <rcl_node_get_rmw_handle+0x8>
 800eaaa:	6840      	ldr	r0, [r0, #4]
 800eaac:	b100      	cbz	r0, 800eab0 <rcl_node_get_rmw_handle+0x8>
 800eaae:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800eab0:	4770      	bx	lr
 800eab2:	bf00      	nop

0800eab4 <rcl_get_disable_loaned_message>:
 800eab4:	b510      	push	{r4, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	2300      	movs	r3, #0
 800eaba:	9301      	str	r3, [sp, #4]
 800eabc:	b1a0      	cbz	r0, 800eae8 <rcl_get_disable_loaned_message+0x34>
 800eabe:	4604      	mov	r4, r0
 800eac0:	a901      	add	r1, sp, #4
 800eac2:	480b      	ldr	r0, [pc, #44]	; (800eaf0 <rcl_get_disable_loaned_message+0x3c>)
 800eac4:	f002 f97c 	bl	8010dc0 <rcutils_get_env>
 800eac8:	b110      	cbz	r0, 800ead0 <rcl_get_disable_loaned_message+0x1c>
 800eaca:	2001      	movs	r0, #1
 800eacc:	b002      	add	sp, #8
 800eace:	bd10      	pop	{r4, pc}
 800ead0:	9a01      	ldr	r2, [sp, #4]
 800ead2:	7813      	ldrb	r3, [r2, #0]
 800ead4:	3b31      	subs	r3, #49	; 0x31
 800ead6:	bf08      	it	eq
 800ead8:	7853      	ldrbeq	r3, [r2, #1]
 800eada:	fab3 f383 	clz	r3, r3
 800eade:	095b      	lsrs	r3, r3, #5
 800eae0:	2000      	movs	r0, #0
 800eae2:	7023      	strb	r3, [r4, #0]
 800eae4:	b002      	add	sp, #8
 800eae6:	bd10      	pop	{r4, pc}
 800eae8:	200b      	movs	r0, #11
 800eaea:	b002      	add	sp, #8
 800eaec:	bd10      	pop	{r4, pc}
 800eaee:	bf00      	nop
 800eaf0:	08016dfc 	.word	0x08016dfc

0800eaf4 <rcl_node_get_default_options>:
 800eaf4:	b510      	push	{r4, lr}
 800eaf6:	2270      	movs	r2, #112	; 0x70
 800eaf8:	4604      	mov	r4, r0
 800eafa:	2100      	movs	r1, #0
 800eafc:	f006 fe66 	bl	80157cc <memset>
 800eb00:	4620      	mov	r0, r4
 800eb02:	f7fb fb9b 	bl	800a23c <rcutils_get_default_allocator>
 800eb06:	2301      	movs	r3, #1
 800eb08:	7523      	strb	r3, [r4, #20]
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	bd10      	pop	{r4, pc}
 800eb0e:	bf00      	nop

0800eb10 <rcl_node_options_copy>:
 800eb10:	b1d0      	cbz	r0, 800eb48 <rcl_node_options_copy+0x38>
 800eb12:	b570      	push	{r4, r5, r6, lr}
 800eb14:	460c      	mov	r4, r1
 800eb16:	b1a9      	cbz	r1, 800eb44 <rcl_node_options_copy+0x34>
 800eb18:	4288      	cmp	r0, r1
 800eb1a:	4684      	mov	ip, r0
 800eb1c:	d012      	beq.n	800eb44 <rcl_node_options_copy+0x34>
 800eb1e:	4605      	mov	r5, r0
 800eb20:	8a86      	ldrh	r6, [r0, #20]
 800eb22:	468e      	mov	lr, r1
 800eb24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb26:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eb2a:	682b      	ldr	r3, [r5, #0]
 800eb2c:	f8ce 3000 	str.w	r3, [lr]
 800eb30:	f10c 0118 	add.w	r1, ip, #24
 800eb34:	2250      	movs	r2, #80	; 0x50
 800eb36:	82a6      	strh	r6, [r4, #20]
 800eb38:	f104 0018 	add.w	r0, r4, #24
 800eb3c:	f006 ff21 	bl	8015982 <memcpy>
 800eb40:	2000      	movs	r0, #0
 800eb42:	bd70      	pop	{r4, r5, r6, pc}
 800eb44:	200b      	movs	r0, #11
 800eb46:	bd70      	pop	{r4, r5, r6, pc}
 800eb48:	200b      	movs	r0, #11
 800eb4a:	4770      	bx	lr

0800eb4c <rcl_node_resolve_name>:
 800eb4c:	b082      	sub	sp, #8
 800eb4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb52:	b091      	sub	sp, #68	; 0x44
 800eb54:	ac1a      	add	r4, sp, #104	; 0x68
 800eb56:	e884 000c 	stmia.w	r4, {r2, r3}
 800eb5a:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d03b      	beq.n	800ebda <rcl_node_resolve_name+0x8e>
 800eb62:	460c      	mov	r4, r1
 800eb64:	4605      	mov	r5, r0
 800eb66:	f7ff ff97 	bl	800ea98 <rcl_node_get_options>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d037      	beq.n	800ebde <rcl_node_resolve_name+0x92>
 800eb6e:	4628      	mov	r0, r5
 800eb70:	f7ff ff82 	bl	800ea78 <rcl_node_get_name>
 800eb74:	4606      	mov	r6, r0
 800eb76:	4628      	mov	r0, r5
 800eb78:	f7ff ff86 	bl	800ea88 <rcl_node_get_namespace>
 800eb7c:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800eb80:	4681      	mov	r9, r0
 800eb82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb86:	ad0b      	add	r5, sp, #44	; 0x2c
 800eb88:	46ac      	mov	ip, r5
 800eb8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb8e:	f8de 3000 	ldr.w	r3, [lr]
 800eb92:	f8cc 3000 	str.w	r3, [ip]
 800eb96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb98:	b1fb      	cbz	r3, 800ebda <rcl_node_resolve_name+0x8e>
 800eb9a:	468a      	mov	sl, r1
 800eb9c:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800eba0:	f002 fa98 	bl	80110d4 <rcutils_get_zero_initialized_string_map>
 800eba4:	ab10      	add	r3, sp, #64	; 0x40
 800eba6:	9008      	str	r0, [sp, #32]
 800eba8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ebac:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	e895 000c 	ldmia.w	r5, {r2, r3}
 800ebb6:	a808      	add	r0, sp, #32
 800ebb8:	f002 fade 	bl	8011178 <rcutils_string_map_init>
 800ebbc:	4607      	mov	r7, r0
 800ebbe:	b180      	cbz	r0, 800ebe2 <rcl_node_resolve_name+0x96>
 800ebc0:	f7fb fbfc 	bl	800a3bc <rcutils_get_error_string>
 800ebc4:	f7fb fc10 	bl	800a3e8 <rcutils_reset_error>
 800ebc8:	2f0a      	cmp	r7, #10
 800ebca:	bf18      	it	ne
 800ebcc:	2701      	movne	r7, #1
 800ebce:	4638      	mov	r0, r7
 800ebd0:	b011      	add	sp, #68	; 0x44
 800ebd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd6:	b002      	add	sp, #8
 800ebd8:	4770      	bx	lr
 800ebda:	270b      	movs	r7, #11
 800ebdc:	e7f7      	b.n	800ebce <rcl_node_resolve_name+0x82>
 800ebde:	2701      	movs	r7, #1
 800ebe0:	e7f5      	b.n	800ebce <rcl_node_resolve_name+0x82>
 800ebe2:	9009      	str	r0, [sp, #36]	; 0x24
 800ebe4:	9007      	str	r0, [sp, #28]
 800ebe6:	a808      	add	r0, sp, #32
 800ebe8:	f005 ff06 	bl	80149f8 <rcl_get_default_topic_name_substitutions>
 800ebec:	4607      	mov	r7, r0
 800ebee:	b1a8      	cbz	r0, 800ec1c <rcl_node_resolve_name+0xd0>
 800ebf0:	280a      	cmp	r0, #10
 800ebf2:	9c07      	ldr	r4, [sp, #28]
 800ebf4:	d000      	beq.n	800ebf8 <rcl_node_resolve_name+0xac>
 800ebf6:	2701      	movs	r7, #1
 800ebf8:	a808      	add	r0, sp, #32
 800ebfa:	f002 fafb 	bl	80111f4 <rcutils_string_map_fini>
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	d13d      	bne.n	800ec7e <rcl_node_resolve_name+0x132>
 800ec02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec04:	4659      	mov	r1, fp
 800ec06:	47d0      	blx	sl
 800ec08:	4659      	mov	r1, fp
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	47d0      	blx	sl
 800ec0e:	f1b8 0f00 	cmp.w	r8, #0
 800ec12:	d0dc      	beq.n	800ebce <rcl_node_resolve_name+0x82>
 800ec14:	2f67      	cmp	r7, #103	; 0x67
 800ec16:	bf08      	it	eq
 800ec18:	2768      	moveq	r7, #104	; 0x68
 800ec1a:	e7d8      	b.n	800ebce <rcl_node_resolve_name+0x82>
 800ec1c:	ab09      	add	r3, sp, #36	; 0x24
 800ec1e:	9305      	str	r3, [sp, #20]
 800ec20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec22:	46ec      	mov	ip, sp
 800ec24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec28:	682b      	ldr	r3, [r5, #0]
 800ec2a:	f8cc 3000 	str.w	r3, [ip]
 800ec2e:	464a      	mov	r2, r9
 800ec30:	4631      	mov	r1, r6
 800ec32:	4620      	mov	r0, r4
 800ec34:	ab08      	add	r3, sp, #32
 800ec36:	f005 fd81 	bl	801473c <rcl_expand_topic_name>
 800ec3a:	4607      	mov	r7, r0
 800ec3c:	b9b8      	cbnz	r0, 800ec6e <rcl_node_resolve_name+0x122>
 800ec3e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ec40:	9009      	str	r0, [sp, #36]	; 0x24
 800ec42:	4602      	mov	r2, r0
 800ec44:	a90a      	add	r1, sp, #40	; 0x28
 800ec46:	4620      	mov	r0, r4
 800ec48:	f002 fc1c 	bl	8011484 <rmw_validate_full_topic_name>
 800ec4c:	b988      	cbnz	r0, 800ec72 <rcl_node_resolve_name+0x126>
 800ec4e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ec50:	b9d5      	cbnz	r5, 800ec88 <rcl_node_resolve_name+0x13c>
 800ec52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec54:	a808      	add	r0, sp, #32
 800ec56:	601c      	str	r4, [r3, #0]
 800ec58:	f002 facc 	bl	80111f4 <rcutils_string_map_fini>
 800ec5c:	4607      	mov	r7, r0
 800ec5e:	b1a8      	cbz	r0, 800ec8c <rcl_node_resolve_name+0x140>
 800ec60:	f7fb fbac 	bl	800a3bc <rcutils_get_error_string>
 800ec64:	462c      	mov	r4, r5
 800ec66:	f7fb fbbf 	bl	800a3e8 <rcutils_reset_error>
 800ec6a:	2701      	movs	r7, #1
 800ec6c:	e7c9      	b.n	800ec02 <rcl_node_resolve_name+0xb6>
 800ec6e:	9c07      	ldr	r4, [sp, #28]
 800ec70:	e7c2      	b.n	800ebf8 <rcl_node_resolve_name+0xac>
 800ec72:	f7fb fba3 	bl	800a3bc <rcutils_get_error_string>
 800ec76:	2701      	movs	r7, #1
 800ec78:	f7fb fbb6 	bl	800a3e8 <rcutils_reset_error>
 800ec7c:	e7bc      	b.n	800ebf8 <rcl_node_resolve_name+0xac>
 800ec7e:	f7fb fb9d 	bl	800a3bc <rcutils_get_error_string>
 800ec82:	f7fb fbb1 	bl	800a3e8 <rcutils_reset_error>
 800ec86:	e7bc      	b.n	800ec02 <rcl_node_resolve_name+0xb6>
 800ec88:	2767      	movs	r7, #103	; 0x67
 800ec8a:	e7b5      	b.n	800ebf8 <rcl_node_resolve_name+0xac>
 800ec8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec8e:	4659      	mov	r1, fp
 800ec90:	47d0      	blx	sl
 800ec92:	4659      	mov	r1, fp
 800ec94:	4638      	mov	r0, r7
 800ec96:	47d0      	blx	sl
 800ec98:	e799      	b.n	800ebce <rcl_node_resolve_name+0x82>
 800ec9a:	bf00      	nop

0800ec9c <exact_match_lookup>:
 800ec9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec9e:	f102 0708 	add.w	r7, r2, #8
 800eca2:	460b      	mov	r3, r1
 800eca4:	4614      	mov	r4, r2
 800eca6:	4606      	mov	r6, r0
 800eca8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ecac:	b085      	sub	sp, #20
 800ecae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	4919      	ldr	r1, [pc, #100]	; (800ed1c <exact_match_lookup+0x80>)
 800ecb6:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ecba:	f002 f89b 	bl	8010df4 <rcutils_join_path>
 800ecbe:	7833      	ldrb	r3, [r6, #0]
 800ecc0:	2b2f      	cmp	r3, #47	; 0x2f
 800ecc2:	4605      	mov	r5, r0
 800ecc4:	d023      	beq.n	800ed0e <exact_match_lookup+0x72>
 800ecc6:	f104 030c 	add.w	r3, r4, #12
 800ecca:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ecce:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ecd2:	1c70      	adds	r0, r6, #1
 800ecd4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ecd8:	f002 f892 	bl	8010e00 <rcutils_to_native_path>
 800ecdc:	4606      	mov	r6, r0
 800ecde:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ece2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ece6:	4631      	mov	r1, r6
 800ece8:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ecec:	4628      	mov	r0, r5
 800ecee:	f002 f881 	bl	8010df4 <rcutils_join_path>
 800ecf2:	6862      	ldr	r2, [r4, #4]
 800ecf4:	6921      	ldr	r1, [r4, #16]
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	461e      	mov	r6, r3
 800ecfc:	4790      	blx	r2
 800ecfe:	4628      	mov	r0, r5
 800ed00:	6863      	ldr	r3, [r4, #4]
 800ed02:	6921      	ldr	r1, [r4, #16]
 800ed04:	4798      	blx	r3
 800ed06:	4635      	mov	r5, r6
 800ed08:	4628      	mov	r0, r5
 800ed0a:	b005      	add	sp, #20
 800ed0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed0e:	7873      	ldrb	r3, [r6, #1]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1d8      	bne.n	800ecc6 <exact_match_lookup+0x2a>
 800ed14:	4628      	mov	r0, r5
 800ed16:	b005      	add	sp, #20
 800ed18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	08016e5c 	.word	0x08016e5c

0800ed20 <rcl_get_secure_root>:
 800ed20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed24:	b085      	sub	sp, #20
 800ed26:	b168      	cbz	r0, 800ed44 <rcl_get_secure_root+0x24>
 800ed28:	4607      	mov	r7, r0
 800ed2a:	4608      	mov	r0, r1
 800ed2c:	460c      	mov	r4, r1
 800ed2e:	f7fb fa93 	bl	800a258 <rcutils_allocator_is_valid>
 800ed32:	b138      	cbz	r0, 800ed44 <rcl_get_secure_root+0x24>
 800ed34:	2300      	movs	r3, #0
 800ed36:	482d      	ldr	r0, [pc, #180]	; (800edec <rcl_get_secure_root+0xcc>)
 800ed38:	9303      	str	r3, [sp, #12]
 800ed3a:	a903      	add	r1, sp, #12
 800ed3c:	f002 f840 	bl	8010dc0 <rcutils_get_env>
 800ed40:	4605      	mov	r5, r0
 800ed42:	b120      	cbz	r0, 800ed4e <rcl_get_secure_root+0x2e>
 800ed44:	2500      	movs	r5, #0
 800ed46:	4628      	mov	r0, r5
 800ed48:	b005      	add	sp, #20
 800ed4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed4e:	9b03      	ldr	r3, [sp, #12]
 800ed50:	781a      	ldrb	r2, [r3, #0]
 800ed52:	2a00      	cmp	r2, #0
 800ed54:	d0f6      	beq.n	800ed44 <rcl_get_secure_root+0x24>
 800ed56:	f104 090c 	add.w	r9, r4, #12
 800ed5a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ed5e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ed62:	4618      	mov	r0, r3
 800ed64:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ed68:	f002 f96c 	bl	8011044 <rcutils_strdup>
 800ed6c:	4680      	mov	r8, r0
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d0e8      	beq.n	800ed44 <rcl_get_secure_root+0x24>
 800ed72:	481f      	ldr	r0, [pc, #124]	; (800edf0 <rcl_get_secure_root+0xd0>)
 800ed74:	9503      	str	r5, [sp, #12]
 800ed76:	a903      	add	r1, sp, #12
 800ed78:	f002 f822 	bl	8010dc0 <rcutils_get_env>
 800ed7c:	b160      	cbz	r0, 800ed98 <rcl_get_secure_root+0x78>
 800ed7e:	2600      	movs	r6, #0
 800ed80:	6863      	ldr	r3, [r4, #4]
 800ed82:	6921      	ldr	r1, [r4, #16]
 800ed84:	4630      	mov	r0, r6
 800ed86:	4798      	blx	r3
 800ed88:	4640      	mov	r0, r8
 800ed8a:	6863      	ldr	r3, [r4, #4]
 800ed8c:	6921      	ldr	r1, [r4, #16]
 800ed8e:	4798      	blx	r3
 800ed90:	4628      	mov	r0, r5
 800ed92:	b005      	add	sp, #20
 800ed94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed98:	9b03      	ldr	r3, [sp, #12]
 800ed9a:	781e      	ldrb	r6, [r3, #0]
 800ed9c:	b1f6      	cbz	r6, 800eddc <rcl_get_secure_root+0xbc>
 800ed9e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800eda2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eda6:	4618      	mov	r0, r3
 800eda8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800edac:	f002 f94a 	bl	8011044 <rcutils_strdup>
 800edb0:	4606      	mov	r6, r0
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d0e3      	beq.n	800ed7e <rcl_get_secure_root+0x5e>
 800edb6:	4622      	mov	r2, r4
 800edb8:	4641      	mov	r1, r8
 800edba:	f7ff ff6f 	bl	800ec9c <exact_match_lookup>
 800edbe:	4605      	mov	r5, r0
 800edc0:	2d00      	cmp	r5, #0
 800edc2:	d0dd      	beq.n	800ed80 <rcl_get_secure_root+0x60>
 800edc4:	4628      	mov	r0, r5
 800edc6:	f002 f813 	bl	8010df0 <rcutils_is_directory>
 800edca:	4603      	mov	r3, r0
 800edcc:	2800      	cmp	r0, #0
 800edce:	d1d7      	bne.n	800ed80 <rcl_get_secure_root+0x60>
 800edd0:	4628      	mov	r0, r5
 800edd2:	6921      	ldr	r1, [r4, #16]
 800edd4:	461d      	mov	r5, r3
 800edd6:	6863      	ldr	r3, [r4, #4]
 800edd8:	4798      	blx	r3
 800edda:	e7d1      	b.n	800ed80 <rcl_get_secure_root+0x60>
 800eddc:	4622      	mov	r2, r4
 800edde:	4638      	mov	r0, r7
 800ede0:	4641      	mov	r1, r8
 800ede2:	f7ff ff5b 	bl	800ec9c <exact_match_lookup>
 800ede6:	4605      	mov	r5, r0
 800ede8:	e7ea      	b.n	800edc0 <rcl_get_secure_root+0xa0>
 800edea:	bf00      	nop
 800edec:	08016e68 	.word	0x08016e68
 800edf0:	08016e80 	.word	0x08016e80

0800edf4 <rcl_get_security_options_from_environment>:
 800edf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf8:	b082      	sub	sp, #8
 800edfa:	2300      	movs	r3, #0
 800edfc:	4606      	mov	r6, r0
 800edfe:	460f      	mov	r7, r1
 800ee00:	4820      	ldr	r0, [pc, #128]	; (800ee84 <rcl_get_security_options_from_environment+0x90>)
 800ee02:	9301      	str	r3, [sp, #4]
 800ee04:	a901      	add	r1, sp, #4
 800ee06:	4690      	mov	r8, r2
 800ee08:	f001 ffda 	bl	8010dc0 <rcutils_get_env>
 800ee0c:	b120      	cbz	r0, 800ee18 <rcl_get_security_options_from_environment+0x24>
 800ee0e:	2501      	movs	r5, #1
 800ee10:	4628      	mov	r0, r5
 800ee12:	b002      	add	sp, #8
 800ee14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee18:	491b      	ldr	r1, [pc, #108]	; (800ee88 <rcl_get_security_options_from_environment+0x94>)
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	9801      	ldr	r0, [sp, #4]
 800ee1e:	f7f1 f9df 	bl	80001e0 <strcmp>
 800ee22:	4605      	mov	r5, r0
 800ee24:	b9e8      	cbnz	r0, 800ee62 <rcl_get_security_options_from_environment+0x6e>
 800ee26:	9001      	str	r0, [sp, #4]
 800ee28:	f1b8 0f00 	cmp.w	r8, #0
 800ee2c:	d020      	beq.n	800ee70 <rcl_get_security_options_from_environment+0x7c>
 800ee2e:	4817      	ldr	r0, [pc, #92]	; (800ee8c <rcl_get_security_options_from_environment+0x98>)
 800ee30:	a901      	add	r1, sp, #4
 800ee32:	f001 ffc5 	bl	8010dc0 <rcutils_get_env>
 800ee36:	2800      	cmp	r0, #0
 800ee38:	d1e9      	bne.n	800ee0e <rcl_get_security_options_from_environment+0x1a>
 800ee3a:	4915      	ldr	r1, [pc, #84]	; (800ee90 <rcl_get_security_options_from_environment+0x9c>)
 800ee3c:	9801      	ldr	r0, [sp, #4]
 800ee3e:	f7f1 f9cf 	bl	80001e0 <strcmp>
 800ee42:	fab0 f080 	clz	r0, r0
 800ee46:	0940      	lsrs	r0, r0, #5
 800ee48:	f888 0000 	strb.w	r0, [r8]
 800ee4c:	4639      	mov	r1, r7
 800ee4e:	4630      	mov	r0, r6
 800ee50:	f7ff ff66 	bl	800ed20 <rcl_get_secure_root>
 800ee54:	b170      	cbz	r0, 800ee74 <rcl_get_security_options_from_environment+0x80>
 800ee56:	f8c8 0004 	str.w	r0, [r8, #4]
 800ee5a:	4628      	mov	r0, r5
 800ee5c:	b002      	add	sp, #8
 800ee5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee62:	4625      	mov	r5, r4
 800ee64:	4628      	mov	r0, r5
 800ee66:	f888 4000 	strb.w	r4, [r8]
 800ee6a:	b002      	add	sp, #8
 800ee6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee70:	250b      	movs	r5, #11
 800ee72:	e7cd      	b.n	800ee10 <rcl_get_security_options_from_environment+0x1c>
 800ee74:	f898 5000 	ldrb.w	r5, [r8]
 800ee78:	f1a5 0501 	sub.w	r5, r5, #1
 800ee7c:	fab5 f585 	clz	r5, r5
 800ee80:	096d      	lsrs	r5, r5, #5
 800ee82:	e7c5      	b.n	800ee10 <rcl_get_security_options_from_environment+0x1c>
 800ee84:	08016e20 	.word	0x08016e20
 800ee88:	08016e34 	.word	0x08016e34
 800ee8c:	08016e3c 	.word	0x08016e3c
 800ee90:	08016e54 	.word	0x08016e54

0800ee94 <rcl_service_get_rmw_handle>:
 800ee94:	b118      	cbz	r0, 800ee9e <rcl_service_get_rmw_handle+0xa>
 800ee96:	6800      	ldr	r0, [r0, #0]
 800ee98:	b108      	cbz	r0, 800ee9e <rcl_service_get_rmw_handle+0xa>
 800ee9a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800ee9e:	4770      	bx	lr

0800eea0 <rcl_take_request>:
 800eea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eea2:	468e      	mov	lr, r1
 800eea4:	460c      	mov	r4, r1
 800eea6:	4617      	mov	r7, r2
 800eea8:	4605      	mov	r5, r0
 800eeaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eeae:	b091      	sub	sp, #68	; 0x44
 800eeb0:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800eeb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eeb8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800eebc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800eec0:	b30d      	cbz	r5, 800ef06 <rcl_take_request+0x66>
 800eec2:	682b      	ldr	r3, [r5, #0]
 800eec4:	b1fb      	cbz	r3, 800ef06 <rcl_take_request+0x66>
 800eec6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800eeca:	b1e0      	cbz	r0, 800ef06 <rcl_take_request+0x66>
 800eecc:	b397      	cbz	r7, 800ef34 <rcl_take_request+0x94>
 800eece:	2300      	movs	r3, #0
 800eed0:	f88d 3017 	strb.w	r3, [sp, #23]
 800eed4:	463a      	mov	r2, r7
 800eed6:	f10d 0317 	add.w	r3, sp, #23
 800eeda:	a906      	add	r1, sp, #24
 800eedc:	f003 f8d4 	bl	8012088 <rmw_take_request>
 800eee0:	4606      	mov	r6, r0
 800eee2:	b198      	cbz	r0, 800ef0c <rcl_take_request+0x6c>
 800eee4:	280a      	cmp	r0, #10
 800eee6:	bf18      	it	ne
 800eee8:	2601      	movne	r6, #1
 800eeea:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800eeee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eef2:	46a6      	mov	lr, r4
 800eef4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eef8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800eefc:	e88e 0003 	stmia.w	lr, {r0, r1}
 800ef00:	4630      	mov	r0, r6
 800ef02:	b011      	add	sp, #68	; 0x44
 800ef04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef06:	f44f 7616 	mov.w	r6, #600	; 0x258
 800ef0a:	e7ee      	b.n	800eeea <rcl_take_request+0x4a>
 800ef0c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800ef10:	b193      	cbz	r3, 800ef38 <rcl_take_request+0x98>
 800ef12:	682b      	ldr	r3, [r5, #0]
 800ef14:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d0e6      	beq.n	800eeea <rcl_take_request+0x4a>
 800ef1c:	463a      	mov	r2, r7
 800ef1e:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800ef22:	ab0a      	add	r3, sp, #40	; 0x28
 800ef24:	e9cd 6700 	strd	r6, r7, [sp]
 800ef28:	9302      	str	r3, [sp, #8]
 800ef2a:	2101      	movs	r1, #1
 800ef2c:	f000 f844 	bl	800efb8 <rcl_send_service_event_message>
 800ef30:	4606      	mov	r6, r0
 800ef32:	e7da      	b.n	800eeea <rcl_take_request+0x4a>
 800ef34:	260b      	movs	r6, #11
 800ef36:	e7d8      	b.n	800eeea <rcl_take_request+0x4a>
 800ef38:	f240 2659 	movw	r6, #601	; 0x259
 800ef3c:	e7d5      	b.n	800eeea <rcl_take_request+0x4a>
 800ef3e:	bf00      	nop

0800ef40 <rcl_send_response>:
 800ef40:	b350      	cbz	r0, 800ef98 <rcl_send_response+0x58>
 800ef42:	b570      	push	{r4, r5, r6, lr}
 800ef44:	6803      	ldr	r3, [r0, #0]
 800ef46:	b084      	sub	sp, #16
 800ef48:	4604      	mov	r4, r0
 800ef4a:	b1cb      	cbz	r3, 800ef80 <rcl_send_response+0x40>
 800ef4c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800ef50:	b1b0      	cbz	r0, 800ef80 <rcl_send_response+0x40>
 800ef52:	460e      	mov	r6, r1
 800ef54:	b1e9      	cbz	r1, 800ef92 <rcl_send_response+0x52>
 800ef56:	4615      	mov	r5, r2
 800ef58:	b1da      	cbz	r2, 800ef92 <rcl_send_response+0x52>
 800ef5a:	f003 f8f3 	bl	8012144 <rmw_send_response>
 800ef5e:	b998      	cbnz	r0, 800ef88 <rcl_send_response+0x48>
 800ef60:	6823      	ldr	r3, [r4, #0]
 800ef62:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ef66:	b16b      	cbz	r3, 800ef84 <rcl_send_response+0x44>
 800ef68:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 800ef6c:	462a      	mov	r2, r5
 800ef6e:	e9cd 0100 	strd	r0, r1, [sp]
 800ef72:	9602      	str	r6, [sp, #8]
 800ef74:	2102      	movs	r1, #2
 800ef76:	4618      	mov	r0, r3
 800ef78:	f000 f81e 	bl	800efb8 <rcl_send_service_event_message>
 800ef7c:	b004      	add	sp, #16
 800ef7e:	bd70      	pop	{r4, r5, r6, pc}
 800ef80:	f44f 7016 	mov.w	r0, #600	; 0x258
 800ef84:	b004      	add	sp, #16
 800ef86:	bd70      	pop	{r4, r5, r6, pc}
 800ef88:	2802      	cmp	r0, #2
 800ef8a:	bf18      	it	ne
 800ef8c:	2001      	movne	r0, #1
 800ef8e:	b004      	add	sp, #16
 800ef90:	bd70      	pop	{r4, r5, r6, pc}
 800ef92:	200b      	movs	r0, #11
 800ef94:	b004      	add	sp, #16
 800ef96:	bd70      	pop	{r4, r5, r6, pc}
 800ef98:	f44f 7016 	mov.w	r0, #600	; 0x258
 800ef9c:	4770      	bx	lr
 800ef9e:	bf00      	nop

0800efa0 <rcl_service_is_valid>:
 800efa0:	b130      	cbz	r0, 800efb0 <rcl_service_is_valid+0x10>
 800efa2:	6800      	ldr	r0, [r0, #0]
 800efa4:	b120      	cbz	r0, 800efb0 <rcl_service_is_valid+0x10>
 800efa6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800efaa:	3800      	subs	r0, #0
 800efac:	bf18      	it	ne
 800efae:	2001      	movne	r0, #1
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop
 800efb4:	0000      	movs	r0, r0
	...

0800efb8 <rcl_send_service_event_message>:
 800efb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efbc:	b093      	sub	sp, #76	; 0x4c
 800efbe:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800efc0:	b192      	cbz	r2, 800efe8 <rcl_send_service_event_message+0x30>
 800efc2:	b18e      	cbz	r6, 800efe8 <rcl_send_service_event_message+0x30>
 800efc4:	4604      	mov	r4, r0
 800efc6:	b150      	cbz	r0, 800efde <rcl_send_service_event_message+0x26>
 800efc8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800efcc:	b13b      	cbz	r3, 800efde <rcl_send_service_event_message+0x26>
 800efce:	68c0      	ldr	r0, [r0, #12]
 800efd0:	460f      	mov	r7, r1
 800efd2:	4615      	mov	r5, r2
 800efd4:	f000 f9e8 	bl	800f3a8 <rcl_clock_valid>
 800efd8:	b108      	cbz	r0, 800efde <rcl_send_service_event_message+0x26>
 800efda:	7a23      	ldrb	r3, [r4, #8]
 800efdc:	b94b      	cbnz	r3, 800eff2 <rcl_send_service_event_message+0x3a>
 800efde:	2401      	movs	r4, #1
 800efe0:	4620      	mov	r0, r4
 800efe2:	b013      	add	sp, #76	; 0x4c
 800efe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efe8:	240b      	movs	r4, #11
 800efea:	4620      	mov	r0, r4
 800efec:	b013      	add	sp, #76	; 0x4c
 800efee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eff2:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 800eff6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800effa:	f10d 0c0c 	add.w	ip, sp, #12
 800effe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f002:	f8de 3000 	ldr.w	r3, [lr]
 800f006:	f8cc 3000 	str.w	r3, [ip]
 800f00a:	a803      	add	r0, sp, #12
 800f00c:	f7fb f924 	bl	800a258 <rcutils_allocator_is_valid>
 800f010:	2800      	cmp	r0, #0
 800f012:	d0e9      	beq.n	800efe8 <rcl_send_service_event_message+0x30>
 800f014:	6820      	ldr	r0, [r4, #0]
 800f016:	f7f9 feef 	bl	8008df8 <rcl_publisher_is_valid>
 800f01a:	2800      	cmp	r0, #0
 800f01c:	d05b      	beq.n	800f0d6 <rcl_send_service_event_message+0x11e>
 800f01e:	4669      	mov	r1, sp
 800f020:	68e0      	ldr	r0, [r4, #12]
 800f022:	f000 fa43 	bl	800f4ac <rcl_clock_get_now>
 800f026:	4601      	mov	r1, r0
 800f028:	2800      	cmp	r0, #0
 800f02a:	d144      	bne.n	800f0b6 <rcl_send_service_event_message+0xfe>
 800f02c:	2220      	movs	r2, #32
 800f02e:	eb0d 0002 	add.w	r0, sp, r2
 800f032:	f006 fbcb 	bl	80157cc <memset>
 800f036:	e9dd 8900 	ldrd	r8, r9, [sp]
 800f03a:	a329      	add	r3, pc, #164	; (adr r3, 800f0e0 <rcl_send_service_event_message+0x128>)
 800f03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f040:	4640      	mov	r0, r8
 800f042:	4649      	mov	r1, r9
 800f044:	f88d 7020 	strb.w	r7, [sp, #32]
 800f048:	f7f1 f932 	bl	80002b0 <__aeabi_ldivmod>
 800f04c:	a324      	add	r3, pc, #144	; (adr r3, 800f0e0 <rcl_send_service_event_message+0x128>)
 800f04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f052:	9009      	str	r0, [sp, #36]	; 0x24
 800f054:	4649      	mov	r1, r9
 800f056:	4640      	mov	r0, r8
 800f058:	f7f1 f92a 	bl	80002b0 <__aeabi_ldivmod>
 800f05c:	920a      	str	r2, [sp, #40]	; 0x28
 800f05e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800f062:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800f066:	7a23      	ldrb	r3, [r4, #8]
 800f068:	6830      	ldr	r0, [r6, #0]
 800f06a:	6871      	ldr	r1, [r6, #4]
 800f06c:	68b2      	ldr	r2, [r6, #8]
 800f06e:	2b01      	cmp	r3, #1
 800f070:	68f3      	ldr	r3, [r6, #12]
 800f072:	bf08      	it	eq
 800f074:	2500      	moveq	r5, #0
 800f076:	ae0b      	add	r6, sp, #44	; 0x2c
 800f078:	2f01      	cmp	r7, #1
 800f07a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f07c:	d81e      	bhi.n	800f0bc <rcl_send_service_event_message+0x104>
 800f07e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f082:	462a      	mov	r2, r5
 800f084:	a808      	add	r0, sp, #32
 800f086:	699d      	ldr	r5, [r3, #24]
 800f088:	a903      	add	r1, sp, #12
 800f08a:	2300      	movs	r3, #0
 800f08c:	47a8      	blx	r5
 800f08e:	4605      	mov	r5, r0
 800f090:	2d00      	cmp	r5, #0
 800f092:	d0a4      	beq.n	800efde <rcl_send_service_event_message+0x26>
 800f094:	6820      	ldr	r0, [r4, #0]
 800f096:	4629      	mov	r1, r5
 800f098:	2200      	movs	r2, #0
 800f09a:	f7f9 fe89 	bl	8008db0 <rcl_publish>
 800f09e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f0a2:	a903      	add	r1, sp, #12
 800f0a4:	4604      	mov	r4, r0
 800f0a6:	69db      	ldr	r3, [r3, #28]
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	4798      	blx	r3
 800f0ac:	2c00      	cmp	r4, #0
 800f0ae:	d097      	beq.n	800efe0 <rcl_send_service_event_message+0x28>
 800f0b0:	f7fb f99a 	bl	800a3e8 <rcutils_reset_error>
 800f0b4:	e794      	b.n	800efe0 <rcl_send_service_event_message+0x28>
 800f0b6:	f7fb f997 	bl	800a3e8 <rcutils_reset_error>
 800f0ba:	e790      	b.n	800efde <rcl_send_service_event_message+0x26>
 800f0bc:	1eb9      	subs	r1, r7, #2
 800f0be:	2901      	cmp	r1, #1
 800f0c0:	d8f9      	bhi.n	800f0b6 <rcl_send_service_event_message+0xfe>
 800f0c2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800f0c6:	462b      	mov	r3, r5
 800f0c8:	a808      	add	r0, sp, #32
 800f0ca:	6995      	ldr	r5, [r2, #24]
 800f0cc:	a903      	add	r1, sp, #12
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	47a8      	blx	r5
 800f0d2:	4605      	mov	r5, r0
 800f0d4:	e7dc      	b.n	800f090 <rcl_send_service_event_message+0xd8>
 800f0d6:	f44f 7496 	mov.w	r4, #300	; 0x12c
 800f0da:	e781      	b.n	800efe0 <rcl_send_service_event_message+0x28>
 800f0dc:	f3af 8000 	nop.w
 800f0e0:	3b9aca00 	.word	0x3b9aca00
 800f0e4:	00000000 	.word	0x00000000

0800f0e8 <rcl_get_zero_initialized_subscription>:
 800f0e8:	4b01      	ldr	r3, [pc, #4]	; (800f0f0 <rcl_get_zero_initialized_subscription+0x8>)
 800f0ea:	6818      	ldr	r0, [r3, #0]
 800f0ec:	4770      	bx	lr
 800f0ee:	bf00      	nop
 800f0f0:	08016ea0 	.word	0x08016ea0

0800f0f4 <rcl_subscription_init>:
 800f0f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0f8:	b089      	sub	sp, #36	; 0x24
 800f0fa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f0fc:	b1d6      	cbz	r6, 800f134 <rcl_subscription_init+0x40>
 800f0fe:	f106 0950 	add.w	r9, r6, #80	; 0x50
 800f102:	4604      	mov	r4, r0
 800f104:	4648      	mov	r0, r9
 800f106:	460d      	mov	r5, r1
 800f108:	4690      	mov	r8, r2
 800f10a:	461f      	mov	r7, r3
 800f10c:	f7fb f8a4 	bl	800a258 <rcutils_allocator_is_valid>
 800f110:	b180      	cbz	r0, 800f134 <rcl_subscription_init+0x40>
 800f112:	b17c      	cbz	r4, 800f134 <rcl_subscription_init+0x40>
 800f114:	4628      	mov	r0, r5
 800f116:	f7ff fca5 	bl	800ea64 <rcl_node_is_valid>
 800f11a:	2800      	cmp	r0, #0
 800f11c:	d054      	beq.n	800f1c8 <rcl_subscription_init+0xd4>
 800f11e:	f1b8 0f00 	cmp.w	r8, #0
 800f122:	d007      	beq.n	800f134 <rcl_subscription_init+0x40>
 800f124:	b137      	cbz	r7, 800f134 <rcl_subscription_init+0x40>
 800f126:	6823      	ldr	r3, [r4, #0]
 800f128:	b14b      	cbz	r3, 800f13e <rcl_subscription_init+0x4a>
 800f12a:	2764      	movs	r7, #100	; 0x64
 800f12c:	4638      	mov	r0, r7
 800f12e:	b009      	add	sp, #36	; 0x24
 800f130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f134:	270b      	movs	r7, #11
 800f136:	4638      	mov	r0, r7
 800f138:	b009      	add	sp, #36	; 0x24
 800f13a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f13e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800f142:	aa07      	add	r2, sp, #28
 800f144:	9205      	str	r2, [sp, #20]
 800f146:	9307      	str	r3, [sp, #28]
 800f148:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800f14c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f150:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f154:	4639      	mov	r1, r7
 800f156:	e899 000c 	ldmia.w	r9, {r2, r3}
 800f15a:	4628      	mov	r0, r5
 800f15c:	f7ff fcf6 	bl	800eb4c <rcl_node_resolve_name>
 800f160:	4607      	mov	r7, r0
 800f162:	2800      	cmp	r0, #0
 800f164:	d15f      	bne.n	800f226 <rcl_subscription_init+0x132>
 800f166:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 800f16a:	21d0      	movs	r1, #208	; 0xd0
 800f16c:	2001      	movs	r0, #1
 800f16e:	4798      	blx	r3
 800f170:	6020      	str	r0, [r4, #0]
 800f172:	2800      	cmp	r0, #0
 800f174:	d05d      	beq.n	800f232 <rcl_subscription_init+0x13e>
 800f176:	4628      	mov	r0, r5
 800f178:	f7ff fc96 	bl	800eaa8 <rcl_node_get_rmw_handle>
 800f17c:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800f180:	9300      	str	r3, [sp, #0]
 800f182:	9a07      	ldr	r2, [sp, #28]
 800f184:	6827      	ldr	r7, [r4, #0]
 800f186:	4641      	mov	r1, r8
 800f188:	4633      	mov	r3, r6
 800f18a:	f003 f8c5 	bl	8012318 <rmw_create_subscription>
 800f18e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 800f192:	6827      	ldr	r7, [r4, #0]
 800f194:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800f198:	b348      	cbz	r0, 800f1ee <rcl_subscription_init+0xfa>
 800f19a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800f19e:	f003 f99d 	bl	80124dc <rmw_subscription_get_actual_qos>
 800f1a2:	4607      	mov	r7, r0
 800f1a4:	b9a8      	cbnz	r0, 800f1d2 <rcl_subscription_init+0xde>
 800f1a6:	6820      	ldr	r0, [r4, #0]
 800f1a8:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 800f1ac:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
 800f1b0:	2278      	movs	r2, #120	; 0x78
 800f1b2:	4631      	mov	r1, r6
 800f1b4:	f006 fbe5 	bl	8015982 <memcpy>
 800f1b8:	9807      	ldr	r0, [sp, #28]
 800f1ba:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800f1bc:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800f1be:	4798      	blx	r3
 800f1c0:	4638      	mov	r0, r7
 800f1c2:	b009      	add	sp, #36	; 0x24
 800f1c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1c8:	27c8      	movs	r7, #200	; 0xc8
 800f1ca:	4638      	mov	r0, r7
 800f1cc:	b009      	add	sp, #36	; 0x24
 800f1ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1d2:	6827      	ldr	r7, [r4, #0]
 800f1d4:	b32f      	cbz	r7, 800f222 <rcl_subscription_init+0x12e>
 800f1d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f1da:	b14b      	cbz	r3, 800f1f0 <rcl_subscription_init+0xfc>
 800f1dc:	4628      	mov	r0, r5
 800f1de:	f7ff fc63 	bl	800eaa8 <rcl_node_get_rmw_handle>
 800f1e2:	6823      	ldr	r3, [r4, #0]
 800f1e4:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 800f1e8:	f003 f988 	bl	80124fc <rmw_destroy_subscription>
 800f1ec:	6827      	ldr	r7, [r4, #0]
 800f1ee:	b197      	cbz	r7, 800f216 <rcl_subscription_init+0x122>
 800f1f0:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	f7fb f82f 	bl	800a258 <rcutils_allocator_is_valid>
 800f1fa:	b158      	cbz	r0, 800f214 <rcl_subscription_init+0x120>
 800f1fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f1fe:	b148      	cbz	r0, 800f214 <rcl_subscription_init+0x120>
 800f200:	4629      	mov	r1, r5
 800f202:	f002 f893 	bl	801132c <rmw_subscription_content_filter_options_fini>
 800f206:	4605      	mov	r5, r0
 800f208:	b9b8      	cbnz	r0, 800f23a <rcl_subscription_init+0x146>
 800f20a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f20c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f20e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f210:	4798      	blx	r3
 800f212:	66fd      	str	r5, [r7, #108]	; 0x6c
 800f214:	6827      	ldr	r7, [r4, #0]
 800f216:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800f218:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800f21a:	4638      	mov	r0, r7
 800f21c:	4798      	blx	r3
 800f21e:	2300      	movs	r3, #0
 800f220:	6023      	str	r3, [r4, #0]
 800f222:	2701      	movs	r7, #1
 800f224:	e7c8      	b.n	800f1b8 <rcl_subscription_init+0xc4>
 800f226:	2867      	cmp	r0, #103	; 0x67
 800f228:	d0c6      	beq.n	800f1b8 <rcl_subscription_init+0xc4>
 800f22a:	2869      	cmp	r0, #105	; 0x69
 800f22c:	d003      	beq.n	800f236 <rcl_subscription_init+0x142>
 800f22e:	280a      	cmp	r0, #10
 800f230:	d1f7      	bne.n	800f222 <rcl_subscription_init+0x12e>
 800f232:	270a      	movs	r7, #10
 800f234:	e7c0      	b.n	800f1b8 <rcl_subscription_init+0xc4>
 800f236:	2767      	movs	r7, #103	; 0x67
 800f238:	e7be      	b.n	800f1b8 <rcl_subscription_init+0xc4>
 800f23a:	f7fe fef3 	bl	800e024 <rcl_convert_rmw_ret_to_rcl_ret>
 800f23e:	6827      	ldr	r7, [r4, #0]
 800f240:	e7e9      	b.n	800f216 <rcl_subscription_init+0x122>
 800f242:	bf00      	nop

0800f244 <rcl_subscription_get_default_options>:
 800f244:	b570      	push	{r4, r5, r6, lr}
 800f246:	4c16      	ldr	r4, [pc, #88]	; (800f2a0 <rcl_subscription_get_default_options+0x5c>)
 800f248:	4916      	ldr	r1, [pc, #88]	; (800f2a4 <rcl_subscription_get_default_options+0x60>)
 800f24a:	b08a      	sub	sp, #40	; 0x28
 800f24c:	4605      	mov	r5, r0
 800f24e:	2250      	movs	r2, #80	; 0x50
 800f250:	4620      	mov	r0, r4
 800f252:	f006 fb96 	bl	8015982 <memcpy>
 800f256:	a804      	add	r0, sp, #16
 800f258:	f7fa fff0 	bl	800a23c <rcutils_get_default_allocator>
 800f25c:	f10d 0c10 	add.w	ip, sp, #16
 800f260:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f264:	f104 0e50 	add.w	lr, r4, #80	; 0x50
 800f268:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f26c:	466e      	mov	r6, sp
 800f26e:	f8dc 3000 	ldr.w	r3, [ip]
 800f272:	f8ce 3000 	str.w	r3, [lr]
 800f276:	4630      	mov	r0, r6
 800f278:	f002 f872 	bl	8011360 <rmw_get_default_subscription_options>
 800f27c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f280:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800f284:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f288:	2301      	movs	r3, #1
 800f28a:	2278      	movs	r2, #120	; 0x78
 800f28c:	4621      	mov	r1, r4
 800f28e:	4628      	mov	r0, r5
 800f290:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800f294:	f006 fb75 	bl	8015982 <memcpy>
 800f298:	4628      	mov	r0, r5
 800f29a:	b00a      	add	sp, #40	; 0x28
 800f29c:	bd70      	pop	{r4, r5, r6, pc}
 800f29e:	bf00      	nop
 800f2a0:	20011120 	.word	0x20011120
 800f2a4:	08016ea8 	.word	0x08016ea8

0800f2a8 <rcl_take>:
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d04b      	beq.n	800f344 <rcl_take+0x9c>
 800f2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b0:	4615      	mov	r5, r2
 800f2b2:	6802      	ldr	r2, [r0, #0]
 800f2b4:	b0a0      	sub	sp, #128	; 0x80
 800f2b6:	4604      	mov	r4, r0
 800f2b8:	2a00      	cmp	r2, #0
 800f2ba:	d03b      	beq.n	800f334 <rcl_take+0x8c>
 800f2bc:	461f      	mov	r7, r3
 800f2be:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d036      	beq.n	800f334 <rcl_take+0x8c>
 800f2c6:	460e      	mov	r6, r1
 800f2c8:	2900      	cmp	r1, #0
 800f2ca:	d039      	beq.n	800f340 <rcl_take+0x98>
 800f2cc:	2d00      	cmp	r5, #0
 800f2ce:	d03d      	beq.n	800f34c <rcl_take+0xa4>
 800f2d0:	a802      	add	r0, sp, #8
 800f2d2:	f002 f8cf 	bl	8011474 <rmw_get_zero_initialized_message_info>
 800f2d6:	6823      	ldr	r3, [r4, #0]
 800f2d8:	f10d 0c08 	add.w	ip, sp, #8
 800f2dc:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
 800f2e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2e4:	46ae      	mov	lr, r5
 800f2e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2fa:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f2fe:	462b      	mov	r3, r5
 800f300:	e88e 0003 	stmia.w	lr, {r0, r1}
 800f304:	f04f 0800 	mov.w	r8, #0
 800f308:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 800f30c:	4631      	mov	r1, r6
 800f30e:	4620      	mov	r0, r4
 800f310:	f88d 8047 	strb.w	r8, [sp, #71]	; 0x47
 800f314:	9700      	str	r7, [sp, #0]
 800f316:	f003 f951 	bl	80125bc <rmw_take_with_info>
 800f31a:	4603      	mov	r3, r0
 800f31c:	b9c0      	cbnz	r0, 800f350 <rcl_take+0xa8>
 800f31e:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 800f322:	f240 1291 	movw	r2, #401	; 0x191
 800f326:	2900      	cmp	r1, #0
 800f328:	bf08      	it	eq
 800f32a:	4613      	moveq	r3, r2
 800f32c:	4618      	mov	r0, r3
 800f32e:	b020      	add	sp, #128	; 0x80
 800f330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f334:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f338:	4618      	mov	r0, r3
 800f33a:	b020      	add	sp, #128	; 0x80
 800f33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f340:	230b      	movs	r3, #11
 800f342:	e7f3      	b.n	800f32c <rcl_take+0x84>
 800f344:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f348:	4618      	mov	r0, r3
 800f34a:	4770      	bx	lr
 800f34c:	ad12      	add	r5, sp, #72	; 0x48
 800f34e:	e7bf      	b.n	800f2d0 <rcl_take+0x28>
 800f350:	f7fe fe68 	bl	800e024 <rcl_convert_rmw_ret_to_rcl_ret>
 800f354:	4603      	mov	r3, r0
 800f356:	e7e9      	b.n	800f32c <rcl_take+0x84>

0800f358 <rcl_subscription_get_rmw_handle>:
 800f358:	b118      	cbz	r0, 800f362 <rcl_subscription_get_rmw_handle+0xa>
 800f35a:	6800      	ldr	r0, [r0, #0]
 800f35c:	b108      	cbz	r0, 800f362 <rcl_subscription_get_rmw_handle+0xa>
 800f35e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 800f362:	4770      	bx	lr

0800f364 <rcl_subscription_is_valid>:
 800f364:	b130      	cbz	r0, 800f374 <rcl_subscription_is_valid+0x10>
 800f366:	6800      	ldr	r0, [r0, #0]
 800f368:	b120      	cbz	r0, 800f374 <rcl_subscription_is_valid+0x10>
 800f36a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 800f36e:	3800      	subs	r0, #0
 800f370:	bf18      	it	ne
 800f372:	2001      	movne	r0, #1
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop

0800f378 <rcl_get_system_time>:
 800f378:	4608      	mov	r0, r1
 800f37a:	f7fb b851 	b.w	800a420 <rcutils_system_time_now>
 800f37e:	bf00      	nop

0800f380 <rcl_get_steady_time>:
 800f380:	4608      	mov	r0, r1
 800f382:	f7fb b877 	b.w	800a474 <rcutils_steady_time_now>
 800f386:	bf00      	nop

0800f388 <rcl_get_ros_time>:
 800f388:	7a03      	ldrb	r3, [r0, #8]
 800f38a:	b510      	push	{r4, lr}
 800f38c:	460c      	mov	r4, r1
 800f38e:	b133      	cbz	r3, 800f39e <rcl_get_ros_time+0x16>
 800f390:	2105      	movs	r1, #5
 800f392:	f7fa ff6f 	bl	800a274 <__atomic_load_8>
 800f396:	e9c4 0100 	strd	r0, r1, [r4]
 800f39a:	2000      	movs	r0, #0
 800f39c:	bd10      	pop	{r4, pc}
 800f39e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3a2:	4608      	mov	r0, r1
 800f3a4:	f7fb b83c 	b.w	800a420 <rcutils_system_time_now>

0800f3a8 <rcl_clock_valid>:
 800f3a8:	b138      	cbz	r0, 800f3ba <rcl_clock_valid+0x12>
 800f3aa:	7803      	ldrb	r3, [r0, #0]
 800f3ac:	b123      	cbz	r3, 800f3b8 <rcl_clock_valid+0x10>
 800f3ae:	68c0      	ldr	r0, [r0, #12]
 800f3b0:	3800      	subs	r0, #0
 800f3b2:	bf18      	it	ne
 800f3b4:	2001      	movne	r0, #1
 800f3b6:	4770      	bx	lr
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	4770      	bx	lr

0800f3bc <rcl_clock_init>:
 800f3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3be:	4605      	mov	r5, r0
 800f3c0:	4610      	mov	r0, r2
 800f3c2:	4614      	mov	r4, r2
 800f3c4:	460e      	mov	r6, r1
 800f3c6:	f7fa ff47 	bl	800a258 <rcutils_allocator_is_valid>
 800f3ca:	b128      	cbz	r0, 800f3d8 <rcl_clock_init+0x1c>
 800f3cc:	2d03      	cmp	r5, #3
 800f3ce:	d803      	bhi.n	800f3d8 <rcl_clock_init+0x1c>
 800f3d0:	e8df f005 	tbb	[pc, r5]
 800f3d4:	06532e1d 	.word	0x06532e1d
 800f3d8:	f04f 0c0b 	mov.w	ip, #11
 800f3dc:	4660      	mov	r0, ip
 800f3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3e0:	2e00      	cmp	r6, #0
 800f3e2:	d0f9      	beq.n	800f3d8 <rcl_clock_init+0x1c>
 800f3e4:	2c00      	cmp	r4, #0
 800f3e6:	d0f7      	beq.n	800f3d8 <rcl_clock_init+0x1c>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f3ee:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800f4a4 <rcl_clock_init+0xe8>
 800f3f2:	6133      	str	r3, [r6, #16]
 800f3f4:	f106 0514 	add.w	r5, r6, #20
 800f3f8:	469c      	mov	ip, r3
 800f3fa:	2703      	movs	r7, #3
 800f3fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f3fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f400:	6823      	ldr	r3, [r4, #0]
 800f402:	602b      	str	r3, [r5, #0]
 800f404:	7037      	strb	r7, [r6, #0]
 800f406:	f8c6 e00c 	str.w	lr, [r6, #12]
 800f40a:	4660      	mov	r0, ip
 800f40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f40e:	2e00      	cmp	r6, #0
 800f410:	d0e2      	beq.n	800f3d8 <rcl_clock_init+0x1c>
 800f412:	2300      	movs	r3, #0
 800f414:	7033      	strb	r3, [r6, #0]
 800f416:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f41a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800f41e:	469c      	mov	ip, r3
 800f420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f422:	f106 0514 	add.w	r5, r6, #20
 800f426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f428:	6823      	ldr	r3, [r4, #0]
 800f42a:	602b      	str	r3, [r5, #0]
 800f42c:	4660      	mov	r0, ip
 800f42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f430:	2e00      	cmp	r6, #0
 800f432:	d0d1      	beq.n	800f3d8 <rcl_clock_init+0x1c>
 800f434:	2c00      	cmp	r4, #0
 800f436:	d0cf      	beq.n	800f3d8 <rcl_clock_init+0x1c>
 800f438:	2700      	movs	r7, #0
 800f43a:	7037      	strb	r7, [r6, #0]
 800f43c:	46a4      	mov	ip, r4
 800f43e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f442:	f106 0514 	add.w	r5, r6, #20
 800f446:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800f44a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800f44e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f450:	f8dc 3000 	ldr.w	r3, [ip]
 800f454:	602b      	str	r3, [r5, #0]
 800f456:	6921      	ldr	r1, [r4, #16]
 800f458:	6823      	ldr	r3, [r4, #0]
 800f45a:	2010      	movs	r0, #16
 800f45c:	4798      	blx	r3
 800f45e:	6130      	str	r0, [r6, #16]
 800f460:	b1d0      	cbz	r0, 800f498 <rcl_clock_init+0xdc>
 800f462:	2200      	movs	r2, #0
 800f464:	2300      	movs	r3, #0
 800f466:	e9c0 2300 	strd	r2, r3, [r0]
 800f46a:	2301      	movs	r3, #1
 800f46c:	7207      	strb	r7, [r0, #8]
 800f46e:	4a0c      	ldr	r2, [pc, #48]	; (800f4a0 <rcl_clock_init+0xe4>)
 800f470:	7033      	strb	r3, [r6, #0]
 800f472:	46bc      	mov	ip, r7
 800f474:	60f2      	str	r2, [r6, #12]
 800f476:	4660      	mov	r0, ip
 800f478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f47a:	2e00      	cmp	r6, #0
 800f47c:	d0ac      	beq.n	800f3d8 <rcl_clock_init+0x1c>
 800f47e:	2c00      	cmp	r4, #0
 800f480:	d0aa      	beq.n	800f3d8 <rcl_clock_init+0x1c>
 800f482:	2300      	movs	r3, #0
 800f484:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f488:	f8df e01c 	ldr.w	lr, [pc, #28]	; 800f4a8 <rcl_clock_init+0xec>
 800f48c:	6133      	str	r3, [r6, #16]
 800f48e:	f106 0514 	add.w	r5, r6, #20
 800f492:	469c      	mov	ip, r3
 800f494:	2702      	movs	r7, #2
 800f496:	e7b1      	b.n	800f3fc <rcl_clock_init+0x40>
 800f498:	f04f 0c0a 	mov.w	ip, #10
 800f49c:	e79e      	b.n	800f3dc <rcl_clock_init+0x20>
 800f49e:	bf00      	nop
 800f4a0:	0800f389 	.word	0x0800f389
 800f4a4:	0800f381 	.word	0x0800f381
 800f4a8:	0800f379 	.word	0x0800f379

0800f4ac <rcl_clock_get_now>:
 800f4ac:	b140      	cbz	r0, 800f4c0 <rcl_clock_get_now+0x14>
 800f4ae:	b139      	cbz	r1, 800f4c0 <rcl_clock_get_now+0x14>
 800f4b0:	7803      	ldrb	r3, [r0, #0]
 800f4b2:	b11b      	cbz	r3, 800f4bc <rcl_clock_get_now+0x10>
 800f4b4:	68c3      	ldr	r3, [r0, #12]
 800f4b6:	b10b      	cbz	r3, 800f4bc <rcl_clock_get_now+0x10>
 800f4b8:	6900      	ldr	r0, [r0, #16]
 800f4ba:	4718      	bx	r3
 800f4bc:	2001      	movs	r0, #1
 800f4be:	4770      	bx	lr
 800f4c0:	200b      	movs	r0, #11
 800f4c2:	4770      	bx	lr

0800f4c4 <rcl_clock_add_jump_callback>:
 800f4c4:	b082      	sub	sp, #8
 800f4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ca:	a906      	add	r1, sp, #24
 800f4cc:	e881 000c 	stmia.w	r1, {r2, r3}
 800f4d0:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 800f4d4:	b320      	cbz	r0, 800f520 <rcl_clock_add_jump_callback+0x5c>
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	3014      	adds	r0, #20
 800f4da:	f7fa febd 	bl	800a258 <rcutils_allocator_is_valid>
 800f4de:	b1f8      	cbz	r0, 800f520 <rcl_clock_add_jump_callback+0x5c>
 800f4e0:	b1f6      	cbz	r6, 800f520 <rcl_clock_add_jump_callback+0x5c>
 800f4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	db1b      	blt.n	800f520 <rcl_clock_add_jump_callback+0x5c>
 800f4e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f4ec:	2a01      	cmp	r2, #1
 800f4ee:	f173 0300 	sbcs.w	r3, r3, #0
 800f4f2:	da15      	bge.n	800f520 <rcl_clock_add_jump_callback+0x5c>
 800f4f4:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 800f4f8:	2f00      	cmp	r7, #0
 800f4fa:	d042      	beq.n	800f582 <rcl_clock_add_jump_callback+0xbe>
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	4602      	mov	r2, r0
 800f500:	e003      	b.n	800f50a <rcl_clock_add_jump_callback+0x46>
 800f502:	42bb      	cmp	r3, r7
 800f504:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800f508:	d011      	beq.n	800f52e <rcl_clock_add_jump_callback+0x6a>
 800f50a:	6811      	ldr	r1, [r2, #0]
 800f50c:	42b1      	cmp	r1, r6
 800f50e:	f103 0301 	add.w	r3, r3, #1
 800f512:	d1f6      	bne.n	800f502 <rcl_clock_add_jump_callback+0x3e>
 800f514:	6a11      	ldr	r1, [r2, #32]
 800f516:	42a9      	cmp	r1, r5
 800f518:	d1f3      	bne.n	800f502 <rcl_clock_add_jump_callback+0x3e>
 800f51a:	f04f 0e01 	mov.w	lr, #1
 800f51e:	e001      	b.n	800f524 <rcl_clock_add_jump_callback+0x60>
 800f520:	f04f 0e0b 	mov.w	lr, #11
 800f524:	4670      	mov	r0, lr
 800f526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f52a:	b002      	add	sp, #8
 800f52c:	4770      	bx	lr
 800f52e:	3301      	adds	r3, #1
 800f530:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f534:	00d9      	lsls	r1, r3, #3
 800f536:	69e3      	ldr	r3, [r4, #28]
 800f538:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f53a:	4798      	blx	r3
 800f53c:	b1f0      	cbz	r0, 800f57c <rcl_clock_add_jump_callback+0xb8>
 800f53e:	68a3      	ldr	r3, [r4, #8]
 800f540:	6060      	str	r0, [r4, #4]
 800f542:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800f546:	f10d 0c18 	add.w	ip, sp, #24
 800f54a:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 800f54e:	f103 0801 	add.w	r8, r3, #1
 800f552:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800f556:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f55a:	f106 0708 	add.w	r7, r6, #8
 800f55e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f560:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f564:	f04f 0e00 	mov.w	lr, #0
 800f568:	e887 0003 	stmia.w	r7, {r0, r1}
 800f56c:	6235      	str	r5, [r6, #32]
 800f56e:	4670      	mov	r0, lr
 800f570:	f8c4 8008 	str.w	r8, [r4, #8]
 800f574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f578:	b002      	add	sp, #8
 800f57a:	4770      	bx	lr
 800f57c:	f04f 0e0a 	mov.w	lr, #10
 800f580:	e7d0      	b.n	800f524 <rcl_clock_add_jump_callback+0x60>
 800f582:	2128      	movs	r1, #40	; 0x28
 800f584:	e7d7      	b.n	800f536 <rcl_clock_add_jump_callback+0x72>
 800f586:	bf00      	nop

0800f588 <rcl_clock_remove_jump_callback>:
 800f588:	2800      	cmp	r0, #0
 800f58a:	d057      	beq.n	800f63c <rcl_clock_remove_jump_callback+0xb4>
 800f58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f590:	4605      	mov	r5, r0
 800f592:	3014      	adds	r0, #20
 800f594:	4688      	mov	r8, r1
 800f596:	4692      	mov	sl, r2
 800f598:	f7fa fe5e 	bl	800a258 <rcutils_allocator_is_valid>
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d03b      	beq.n	800f618 <rcl_clock_remove_jump_callback+0x90>
 800f5a0:	f1b8 0f00 	cmp.w	r8, #0
 800f5a4:	d038      	beq.n	800f618 <rcl_clock_remove_jump_callback+0x90>
 800f5a6:	68ae      	ldr	r6, [r5, #8]
 800f5a8:	b166      	cbz	r6, 800f5c4 <rcl_clock_remove_jump_callback+0x3c>
 800f5aa:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800f5ae:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 800f5b2:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 800f5b6:	464c      	mov	r4, r9
 800f5b8:	6823      	ldr	r3, [r4, #0]
 800f5ba:	4543      	cmp	r3, r8
 800f5bc:	d005      	beq.n	800f5ca <rcl_clock_remove_jump_callback+0x42>
 800f5be:	3428      	adds	r4, #40	; 0x28
 800f5c0:	42a7      	cmp	r7, r4
 800f5c2:	d1f9      	bne.n	800f5b8 <rcl_clock_remove_jump_callback+0x30>
 800f5c4:	2001      	movs	r0, #1
 800f5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ca:	6a23      	ldr	r3, [r4, #32]
 800f5cc:	3428      	adds	r4, #40	; 0x28
 800f5ce:	42bc      	cmp	r4, r7
 800f5d0:	d02d      	beq.n	800f62e <rcl_clock_remove_jump_callback+0xa6>
 800f5d2:	4553      	cmp	r3, sl
 800f5d4:	d1f0      	bne.n	800f5b8 <rcl_clock_remove_jump_callback+0x30>
 800f5d6:	46a6      	mov	lr, r4
 800f5d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f5dc:	f1a4 0c28 	sub.w	ip, r4, #40	; 0x28
 800f5e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f5e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f5e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f5ec:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f5f0:	3428      	adds	r4, #40	; 0x28
 800f5f2:	42a7      	cmp	r7, r4
 800f5f4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f5f8:	d1ed      	bne.n	800f5d6 <rcl_clock_remove_jump_callback+0x4e>
 800f5fa:	3e01      	subs	r6, #1
 800f5fc:	60ae      	str	r6, [r5, #8]
 800f5fe:	b176      	cbz	r6, 800f61e <rcl_clock_remove_jump_callback+0x96>
 800f600:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800f604:	69eb      	ldr	r3, [r5, #28]
 800f606:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800f608:	00f1      	lsls	r1, r6, #3
 800f60a:	4648      	mov	r0, r9
 800f60c:	4798      	blx	r3
 800f60e:	b1b8      	cbz	r0, 800f640 <rcl_clock_remove_jump_callback+0xb8>
 800f610:	6068      	str	r0, [r5, #4]
 800f612:	2000      	movs	r0, #0
 800f614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f618:	200b      	movs	r0, #11
 800f61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f61e:	4648      	mov	r0, r9
 800f620:	69ab      	ldr	r3, [r5, #24]
 800f622:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800f624:	4798      	blx	r3
 800f626:	606e      	str	r6, [r5, #4]
 800f628:	4630      	mov	r0, r6
 800f62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f62e:	4553      	cmp	r3, sl
 800f630:	d1c8      	bne.n	800f5c4 <rcl_clock_remove_jump_callback+0x3c>
 800f632:	3e01      	subs	r6, #1
 800f634:	60ae      	str	r6, [r5, #8]
 800f636:	2e00      	cmp	r6, #0
 800f638:	d1e2      	bne.n	800f600 <rcl_clock_remove_jump_callback+0x78>
 800f63a:	e7f0      	b.n	800f61e <rcl_clock_remove_jump_callback+0x96>
 800f63c:	200b      	movs	r0, #11
 800f63e:	4770      	bx	lr
 800f640:	200a      	movs	r0, #10
 800f642:	e7ea      	b.n	800f61a <rcl_clock_remove_jump_callback+0x92>

0800f644 <rcl_validate_enclave_name_with_size>:
 800f644:	b378      	cbz	r0, 800f6a6 <rcl_validate_enclave_name_with_size+0x62>
 800f646:	b570      	push	{r4, r5, r6, lr}
 800f648:	4615      	mov	r5, r2
 800f64a:	b0c2      	sub	sp, #264	; 0x108
 800f64c:	b302      	cbz	r2, 800f690 <rcl_validate_enclave_name_with_size+0x4c>
 800f64e:	461e      	mov	r6, r3
 800f650:	466a      	mov	r2, sp
 800f652:	ab01      	add	r3, sp, #4
 800f654:	460c      	mov	r4, r1
 800f656:	f001 ff8b 	bl	8011570 <rmw_validate_namespace_with_size>
 800f65a:	4684      	mov	ip, r0
 800f65c:	b9e8      	cbnz	r0, 800f69a <rcl_validate_enclave_name_with_size+0x56>
 800f65e:	9b00      	ldr	r3, [sp, #0]
 800f660:	b923      	cbnz	r3, 800f66c <rcl_validate_enclave_name_with_size+0x28>
 800f662:	2300      	movs	r3, #0
 800f664:	602b      	str	r3, [r5, #0]
 800f666:	4660      	mov	r0, ip
 800f668:	b042      	add	sp, #264	; 0x108
 800f66a:	bd70      	pop	{r4, r5, r6, pc}
 800f66c:	2b07      	cmp	r3, #7
 800f66e:	d007      	beq.n	800f680 <rcl_validate_enclave_name_with_size+0x3c>
 800f670:	1e5a      	subs	r2, r3, #1
 800f672:	2a05      	cmp	r2, #5
 800f674:	d833      	bhi.n	800f6de <rcl_validate_enclave_name_with_size+0x9a>
 800f676:	e8df f002 	tbb	[pc, r2]
 800f67a:	2c2f      	.short	0x2c2f
 800f67c:	1a232629 	.word	0x1a232629
 800f680:	2cff      	cmp	r4, #255	; 0xff
 800f682:	d9ee      	bls.n	800f662 <rcl_validate_enclave_name_with_size+0x1e>
 800f684:	602b      	str	r3, [r5, #0]
 800f686:	2e00      	cmp	r6, #0
 800f688:	d0ed      	beq.n	800f666 <rcl_validate_enclave_name_with_size+0x22>
 800f68a:	23fe      	movs	r3, #254	; 0xfe
 800f68c:	6033      	str	r3, [r6, #0]
 800f68e:	e7ea      	b.n	800f666 <rcl_validate_enclave_name_with_size+0x22>
 800f690:	f04f 0c0b 	mov.w	ip, #11
 800f694:	4660      	mov	r0, ip
 800f696:	b042      	add	sp, #264	; 0x108
 800f698:	bd70      	pop	{r4, r5, r6, pc}
 800f69a:	f7fe fcc3 	bl	800e024 <rcl_convert_rmw_ret_to_rcl_ret>
 800f69e:	4684      	mov	ip, r0
 800f6a0:	4660      	mov	r0, ip
 800f6a2:	b042      	add	sp, #264	; 0x108
 800f6a4:	bd70      	pop	{r4, r5, r6, pc}
 800f6a6:	f04f 0c0b 	mov.w	ip, #11
 800f6aa:	4660      	mov	r0, ip
 800f6ac:	4770      	bx	lr
 800f6ae:	2306      	movs	r3, #6
 800f6b0:	602b      	str	r3, [r5, #0]
 800f6b2:	2e00      	cmp	r6, #0
 800f6b4:	d0d7      	beq.n	800f666 <rcl_validate_enclave_name_with_size+0x22>
 800f6b6:	9b01      	ldr	r3, [sp, #4]
 800f6b8:	6033      	str	r3, [r6, #0]
 800f6ba:	4660      	mov	r0, ip
 800f6bc:	b042      	add	sp, #264	; 0x108
 800f6be:	bd70      	pop	{r4, r5, r6, pc}
 800f6c0:	2305      	movs	r3, #5
 800f6c2:	602b      	str	r3, [r5, #0]
 800f6c4:	e7f5      	b.n	800f6b2 <rcl_validate_enclave_name_with_size+0x6e>
 800f6c6:	2304      	movs	r3, #4
 800f6c8:	602b      	str	r3, [r5, #0]
 800f6ca:	e7f2      	b.n	800f6b2 <rcl_validate_enclave_name_with_size+0x6e>
 800f6cc:	2303      	movs	r3, #3
 800f6ce:	602b      	str	r3, [r5, #0]
 800f6d0:	e7ef      	b.n	800f6b2 <rcl_validate_enclave_name_with_size+0x6e>
 800f6d2:	2302      	movs	r3, #2
 800f6d4:	602b      	str	r3, [r5, #0]
 800f6d6:	e7ec      	b.n	800f6b2 <rcl_validate_enclave_name_with_size+0x6e>
 800f6d8:	2301      	movs	r3, #1
 800f6da:	602b      	str	r3, [r5, #0]
 800f6dc:	e7e9      	b.n	800f6b2 <rcl_validate_enclave_name_with_size+0x6e>
 800f6de:	4a04      	ldr	r2, [pc, #16]	; (800f6f0 <rcl_validate_enclave_name_with_size+0xac>)
 800f6e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f6e4:	a802      	add	r0, sp, #8
 800f6e6:	f001 fc81 	bl	8010fec <rcutils_snprintf>
 800f6ea:	f04f 0c01 	mov.w	ip, #1
 800f6ee:	e7ba      	b.n	800f666 <rcl_validate_enclave_name_with_size+0x22>
 800f6f0:	08016ef8 	.word	0x08016ef8

0800f6f4 <rcl_validate_enclave_name>:
 800f6f4:	b168      	cbz	r0, 800f712 <rcl_validate_enclave_name+0x1e>
 800f6f6:	b570      	push	{r4, r5, r6, lr}
 800f6f8:	460d      	mov	r5, r1
 800f6fa:	4616      	mov	r6, r2
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	f7f0 fdcf 	bl	80002a0 <strlen>
 800f702:	4633      	mov	r3, r6
 800f704:	4601      	mov	r1, r0
 800f706:	462a      	mov	r2, r5
 800f708:	4620      	mov	r0, r4
 800f70a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f70e:	f7ff bf99 	b.w	800f644 <rcl_validate_enclave_name_with_size>
 800f712:	200b      	movs	r0, #11
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop

0800f718 <rcl_get_zero_initialized_wait_set>:
 800f718:	b510      	push	{r4, lr}
 800f71a:	4c08      	ldr	r4, [pc, #32]	; (800f73c <rcl_get_zero_initialized_wait_set+0x24>)
 800f71c:	4686      	mov	lr, r0
 800f71e:	4684      	mov	ip, r0
 800f720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f722:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f728:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f72c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f72e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f732:	6823      	ldr	r3, [r4, #0]
 800f734:	f8cc 3000 	str.w	r3, [ip]
 800f738:	4670      	mov	r0, lr
 800f73a:	bd10      	pop	{r4, pc}
 800f73c:	08016f58 	.word	0x08016f58

0800f740 <rcl_wait_set_is_valid>:
 800f740:	b118      	cbz	r0, 800f74a <rcl_wait_set_is_valid+0xa>
 800f742:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800f744:	3800      	subs	r0, #0
 800f746:	bf18      	it	ne
 800f748:	2001      	movne	r0, #1
 800f74a:	4770      	bx	lr

0800f74c <rcl_wait_set_fini>:
 800f74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f750:	b082      	sub	sp, #8
 800f752:	2800      	cmp	r0, #0
 800f754:	f000 8095 	beq.w	800f882 <rcl_wait_set_fini+0x136>
 800f758:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800f75a:	4604      	mov	r4, r0
 800f75c:	2e00      	cmp	r6, #0
 800f75e:	f000 808c 	beq.w	800f87a <rcl_wait_set_fini+0x12e>
 800f762:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800f764:	f003 f928 	bl	80129b8 <rmw_destroy_wait_set>
 800f768:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f76a:	1e06      	subs	r6, r0, #0
 800f76c:	bf18      	it	ne
 800f76e:	f44f 7661 	movne.w	r6, #900	; 0x384
 800f772:	2d00      	cmp	r5, #0
 800f774:	f000 8081 	beq.w	800f87a <rcl_wait_set_fini+0x12e>
 800f778:	6820      	ldr	r0, [r4, #0]
 800f77a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f77e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f780:	2700      	movs	r7, #0
 800f782:	6067      	str	r7, [r4, #4]
 800f784:	602f      	str	r7, [r5, #0]
 800f786:	b120      	cbz	r0, 800f792 <rcl_wait_set_fini+0x46>
 800f788:	9101      	str	r1, [sp, #4]
 800f78a:	47c0      	blx	r8
 800f78c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f78e:	9901      	ldr	r1, [sp, #4]
 800f790:	6027      	str	r7, [r4, #0]
 800f792:	68a8      	ldr	r0, [r5, #8]
 800f794:	b120      	cbz	r0, 800f7a0 <rcl_wait_set_fini+0x54>
 800f796:	47c0      	blx	r8
 800f798:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f79a:	2300      	movs	r3, #0
 800f79c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800f7a0:	68a0      	ldr	r0, [r4, #8]
 800f7a2:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f7a4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f7a6:	f04f 0800 	mov.w	r8, #0
 800f7aa:	f8c4 800c 	str.w	r8, [r4, #12]
 800f7ae:	f8c5 800c 	str.w	r8, [r5, #12]
 800f7b2:	b128      	cbz	r0, 800f7c0 <rcl_wait_set_fini+0x74>
 800f7b4:	47b8      	blx	r7
 800f7b6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f7b8:	f8c4 8008 	str.w	r8, [r4, #8]
 800f7bc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f7be:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f7c0:	6968      	ldr	r0, [r5, #20]
 800f7c2:	f04f 0800 	mov.w	r8, #0
 800f7c6:	f8c5 8010 	str.w	r8, [r5, #16]
 800f7ca:	b128      	cbz	r0, 800f7d8 <rcl_wait_set_fini+0x8c>
 800f7cc:	47b8      	blx	r7
 800f7ce:	f8c5 8014 	str.w	r8, [r5, #20]
 800f7d2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f7d4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f7d6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f7d8:	6920      	ldr	r0, [r4, #16]
 800f7da:	f04f 0800 	mov.w	r8, #0
 800f7de:	f8c4 8014 	str.w	r8, [r4, #20]
 800f7e2:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 800f7e6:	b128      	cbz	r0, 800f7f4 <rcl_wait_set_fini+0xa8>
 800f7e8:	47b8      	blx	r7
 800f7ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f7ec:	f8c4 8010 	str.w	r8, [r4, #16]
 800f7f0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f7f2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f7f4:	69a0      	ldr	r0, [r4, #24]
 800f7f6:	f04f 0800 	mov.w	r8, #0
 800f7fa:	f8c4 801c 	str.w	r8, [r4, #28]
 800f7fe:	f8c5 8018 	str.w	r8, [r5, #24]
 800f802:	b128      	cbz	r0, 800f810 <rcl_wait_set_fini+0xc4>
 800f804:	9101      	str	r1, [sp, #4]
 800f806:	47b8      	blx	r7
 800f808:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f80a:	9901      	ldr	r1, [sp, #4]
 800f80c:	f8c4 8018 	str.w	r8, [r4, #24]
 800f810:	6a28      	ldr	r0, [r5, #32]
 800f812:	b120      	cbz	r0, 800f81e <rcl_wait_set_fini+0xd2>
 800f814:	47b8      	blx	r7
 800f816:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f818:	2300      	movs	r3, #0
 800f81a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800f81e:	6a20      	ldr	r0, [r4, #32]
 800f820:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f824:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f826:	2700      	movs	r7, #0
 800f828:	6267      	str	r7, [r4, #36]	; 0x24
 800f82a:	626f      	str	r7, [r5, #36]	; 0x24
 800f82c:	b120      	cbz	r0, 800f838 <rcl_wait_set_fini+0xec>
 800f82e:	9101      	str	r1, [sp, #4]
 800f830:	47c0      	blx	r8
 800f832:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f834:	9901      	ldr	r1, [sp, #4]
 800f836:	6227      	str	r7, [r4, #32]
 800f838:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800f83a:	b120      	cbz	r0, 800f846 <rcl_wait_set_fini+0xfa>
 800f83c:	47c0      	blx	r8
 800f83e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f840:	2300      	movs	r3, #0
 800f842:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800f846:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f848:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f84c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f84e:	2700      	movs	r7, #0
 800f850:	62e7      	str	r7, [r4, #44]	; 0x2c
 800f852:	632f      	str	r7, [r5, #48]	; 0x30
 800f854:	b120      	cbz	r0, 800f860 <rcl_wait_set_fini+0x114>
 800f856:	9101      	str	r1, [sp, #4]
 800f858:	47c0      	blx	r8
 800f85a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f85c:	9901      	ldr	r1, [sp, #4]
 800f85e:	62a7      	str	r7, [r4, #40]	; 0x28
 800f860:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800f862:	b120      	cbz	r0, 800f86e <rcl_wait_set_fini+0x122>
 800f864:	47c0      	blx	r8
 800f866:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f868:	2300      	movs	r3, #0
 800f86a:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 800f86e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f870:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f872:	4628      	mov	r0, r5
 800f874:	4798      	blx	r3
 800f876:	2300      	movs	r3, #0
 800f878:	6323      	str	r3, [r4, #48]	; 0x30
 800f87a:	4630      	mov	r0, r6
 800f87c:	b002      	add	sp, #8
 800f87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f882:	260b      	movs	r6, #11
 800f884:	4630      	mov	r0, r6
 800f886:	b002      	add	sp, #8
 800f888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f88c <rcl_wait_set_add_subscription>:
 800f88c:	b318      	cbz	r0, 800f8d6 <rcl_wait_set_add_subscription+0x4a>
 800f88e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f890:	b570      	push	{r4, r5, r6, lr}
 800f892:	4604      	mov	r4, r0
 800f894:	b30b      	cbz	r3, 800f8da <rcl_wait_set_add_subscription+0x4e>
 800f896:	b319      	cbz	r1, 800f8e0 <rcl_wait_set_add_subscription+0x54>
 800f898:	681d      	ldr	r5, [r3, #0]
 800f89a:	6840      	ldr	r0, [r0, #4]
 800f89c:	4285      	cmp	r5, r0
 800f89e:	d217      	bcs.n	800f8d0 <rcl_wait_set_add_subscription+0x44>
 800f8a0:	6820      	ldr	r0, [r4, #0]
 800f8a2:	1c6e      	adds	r6, r5, #1
 800f8a4:	601e      	str	r6, [r3, #0]
 800f8a6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f8aa:	b102      	cbz	r2, 800f8ae <rcl_wait_set_add_subscription+0x22>
 800f8ac:	6015      	str	r5, [r2, #0]
 800f8ae:	4608      	mov	r0, r1
 800f8b0:	f7ff fd52 	bl	800f358 <rcl_subscription_get_rmw_handle>
 800f8b4:	b150      	cbz	r0, 800f8cc <rcl_wait_set_add_subscription+0x40>
 800f8b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f8b8:	6842      	ldr	r2, [r0, #4]
 800f8ba:	689b      	ldr	r3, [r3, #8]
 800f8bc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f8c2:	6853      	ldr	r3, [r2, #4]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	2000      	movs	r0, #0
 800f8c8:	6053      	str	r3, [r2, #4]
 800f8ca:	bd70      	pop	{r4, r5, r6, pc}
 800f8cc:	2001      	movs	r0, #1
 800f8ce:	bd70      	pop	{r4, r5, r6, pc}
 800f8d0:	f240 3086 	movw	r0, #902	; 0x386
 800f8d4:	bd70      	pop	{r4, r5, r6, pc}
 800f8d6:	200b      	movs	r0, #11
 800f8d8:	4770      	bx	lr
 800f8da:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f8de:	bd70      	pop	{r4, r5, r6, pc}
 800f8e0:	200b      	movs	r0, #11
 800f8e2:	bd70      	pop	{r4, r5, r6, pc}

0800f8e4 <rcl_wait_set_clear>:
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	d073      	beq.n	800f9d0 <rcl_wait_set_clear+0xec>
 800f8e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f8ea:	b510      	push	{r4, lr}
 800f8ec:	4604      	mov	r4, r0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d070      	beq.n	800f9d4 <rcl_wait_set_clear+0xf0>
 800f8f2:	6800      	ldr	r0, [r0, #0]
 800f8f4:	b138      	cbz	r0, 800f906 <rcl_wait_set_clear+0x22>
 800f8f6:	6862      	ldr	r2, [r4, #4]
 800f8f8:	2100      	movs	r1, #0
 800f8fa:	0092      	lsls	r2, r2, #2
 800f8fc:	f005 ff66 	bl	80157cc <memset>
 800f900:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f902:	2200      	movs	r2, #0
 800f904:	601a      	str	r2, [r3, #0]
 800f906:	68a0      	ldr	r0, [r4, #8]
 800f908:	b138      	cbz	r0, 800f91a <rcl_wait_set_clear+0x36>
 800f90a:	68e2      	ldr	r2, [r4, #12]
 800f90c:	2100      	movs	r1, #0
 800f90e:	0092      	lsls	r2, r2, #2
 800f910:	f005 ff5c 	bl	80157cc <memset>
 800f914:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f916:	2200      	movs	r2, #0
 800f918:	60da      	str	r2, [r3, #12]
 800f91a:	69a0      	ldr	r0, [r4, #24]
 800f91c:	b138      	cbz	r0, 800f92e <rcl_wait_set_clear+0x4a>
 800f91e:	69e2      	ldr	r2, [r4, #28]
 800f920:	2100      	movs	r1, #0
 800f922:	0092      	lsls	r2, r2, #2
 800f924:	f005 ff52 	bl	80157cc <memset>
 800f928:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f92a:	2200      	movs	r2, #0
 800f92c:	619a      	str	r2, [r3, #24]
 800f92e:	6a20      	ldr	r0, [r4, #32]
 800f930:	b138      	cbz	r0, 800f942 <rcl_wait_set_clear+0x5e>
 800f932:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f934:	2100      	movs	r1, #0
 800f936:	0092      	lsls	r2, r2, #2
 800f938:	f005 ff48 	bl	80157cc <memset>
 800f93c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f93e:	2200      	movs	r2, #0
 800f940:	625a      	str	r2, [r3, #36]	; 0x24
 800f942:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f944:	b138      	cbz	r0, 800f956 <rcl_wait_set_clear+0x72>
 800f946:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f948:	2100      	movs	r1, #0
 800f94a:	0092      	lsls	r2, r2, #2
 800f94c:	f005 ff3e 	bl	80157cc <memset>
 800f950:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f952:	2200      	movs	r2, #0
 800f954:	631a      	str	r2, [r3, #48]	; 0x30
 800f956:	6920      	ldr	r0, [r4, #16]
 800f958:	b138      	cbz	r0, 800f96a <rcl_wait_set_clear+0x86>
 800f95a:	6962      	ldr	r2, [r4, #20]
 800f95c:	2100      	movs	r1, #0
 800f95e:	0092      	lsls	r2, r2, #2
 800f960:	f005 ff34 	bl	80157cc <memset>
 800f964:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f966:	2200      	movs	r2, #0
 800f968:	641a      	str	r2, [r3, #64]	; 0x40
 800f96a:	6898      	ldr	r0, [r3, #8]
 800f96c:	b138      	cbz	r0, 800f97e <rcl_wait_set_clear+0x9a>
 800f96e:	685a      	ldr	r2, [r3, #4]
 800f970:	2100      	movs	r1, #0
 800f972:	0092      	lsls	r2, r2, #2
 800f974:	f005 ff2a 	bl	80157cc <memset>
 800f978:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f97a:	2200      	movs	r2, #0
 800f97c:	605a      	str	r2, [r3, #4]
 800f97e:	6958      	ldr	r0, [r3, #20]
 800f980:	b138      	cbz	r0, 800f992 <rcl_wait_set_clear+0xae>
 800f982:	691a      	ldr	r2, [r3, #16]
 800f984:	2100      	movs	r1, #0
 800f986:	0092      	lsls	r2, r2, #2
 800f988:	f005 ff20 	bl	80157cc <memset>
 800f98c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f98e:	2200      	movs	r2, #0
 800f990:	611a      	str	r2, [r3, #16]
 800f992:	6a18      	ldr	r0, [r3, #32]
 800f994:	b138      	cbz	r0, 800f9a6 <rcl_wait_set_clear+0xc2>
 800f996:	69da      	ldr	r2, [r3, #28]
 800f998:	2100      	movs	r1, #0
 800f99a:	0092      	lsls	r2, r2, #2
 800f99c:	f005 ff16 	bl	80157cc <memset>
 800f9a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	61da      	str	r2, [r3, #28]
 800f9a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f9a8:	b138      	cbz	r0, 800f9ba <rcl_wait_set_clear+0xd6>
 800f9aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	0092      	lsls	r2, r2, #2
 800f9b0:	f005 ff0c 	bl	80157cc <memset>
 800f9b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	629a      	str	r2, [r3, #40]	; 0x28
 800f9ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f9bc:	b138      	cbz	r0, 800f9ce <rcl_wait_set_clear+0xea>
 800f9be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	0092      	lsls	r2, r2, #2
 800f9c4:	f005 ff02 	bl	80157cc <memset>
 800f9c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f9ca:	2000      	movs	r0, #0
 800f9cc:	6358      	str	r0, [r3, #52]	; 0x34
 800f9ce:	bd10      	pop	{r4, pc}
 800f9d0:	200b      	movs	r0, #11
 800f9d2:	4770      	bx	lr
 800f9d4:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f9d8:	bd10      	pop	{r4, pc}
 800f9da:	bf00      	nop

0800f9dc <rcl_wait_set_resize>:
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	f000 8185 	beq.w	800fcec <rcl_wait_set_resize+0x310>
 800f9e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9e6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800f9e8:	b083      	sub	sp, #12
 800f9ea:	4605      	mov	r5, r0
 800f9ec:	2c00      	cmp	r4, #0
 800f9ee:	f000 817f 	beq.w	800fcf0 <rcl_wait_set_resize+0x314>
 800f9f2:	f04f 0900 	mov.w	r9, #0
 800f9f6:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f9fa:	461f      	mov	r7, r3
 800f9fc:	4688      	mov	r8, r1
 800f9fe:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 800fa02:	4616      	mov	r6, r2
 800fa04:	f8c0 9004 	str.w	r9, [r0, #4]
 800fa08:	f8c4 9000 	str.w	r9, [r4]
 800fa0c:	2900      	cmp	r1, #0
 800fa0e:	f000 80bd 	beq.w	800fb8c <rcl_wait_set_resize+0x1b0>
 800fa12:	008c      	lsls	r4, r1, #2
 800fa14:	6800      	ldr	r0, [r0, #0]
 800fa16:	9301      	str	r3, [sp, #4]
 800fa18:	4652      	mov	r2, sl
 800fa1a:	4621      	mov	r1, r4
 800fa1c:	4798      	blx	r3
 800fa1e:	9b01      	ldr	r3, [sp, #4]
 800fa20:	6028      	str	r0, [r5, #0]
 800fa22:	2800      	cmp	r0, #0
 800fa24:	f000 80cb 	beq.w	800fbbe <rcl_wait_set_resize+0x1e2>
 800fa28:	4622      	mov	r2, r4
 800fa2a:	4649      	mov	r1, r9
 800fa2c:	9301      	str	r3, [sp, #4]
 800fa2e:	f005 fecd 	bl	80157cc <memset>
 800fa32:	f8c5 8004 	str.w	r8, [r5, #4]
 800fa36:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800fa3a:	9b01      	ldr	r3, [sp, #4]
 800fa3c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800fa40:	f8c8 9004 	str.w	r9, [r8, #4]
 800fa44:	4652      	mov	r2, sl
 800fa46:	4621      	mov	r1, r4
 800fa48:	4798      	blx	r3
 800fa4a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fa4c:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	f000 80ac 	beq.w	800fbb0 <rcl_wait_set_resize+0x1d4>
 800fa58:	4622      	mov	r2, r4
 800fa5a:	4649      	mov	r1, r9
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f005 feb5 	bl	80157cc <memset>
 800fa62:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fa64:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800fa68:	f04f 0800 	mov.w	r8, #0
 800fa6c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 800fa70:	f8c5 800c 	str.w	r8, [r5, #12]
 800fa74:	f8c4 800c 	str.w	r8, [r4, #12]
 800fa78:	2e00      	cmp	r6, #0
 800fa7a:	f040 80a4 	bne.w	800fbc6 <rcl_wait_set_resize+0x1ea>
 800fa7e:	68a8      	ldr	r0, [r5, #8]
 800fa80:	b128      	cbz	r0, 800fa8e <rcl_wait_set_resize+0xb2>
 800fa82:	4649      	mov	r1, r9
 800fa84:	4790      	blx	r2
 800fa86:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fa88:	60ae      	str	r6, [r5, #8]
 800fa8a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800fa8e:	f04f 0800 	mov.w	r8, #0
 800fa92:	19f6      	adds	r6, r6, r7
 800fa94:	f8c4 8010 	str.w	r8, [r4, #16]
 800fa98:	f040 80ac 	bne.w	800fbf4 <rcl_wait_set_resize+0x218>
 800fa9c:	6960      	ldr	r0, [r4, #20]
 800fa9e:	b130      	cbz	r0, 800faae <rcl_wait_set_resize+0xd2>
 800faa0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800faa2:	4649      	mov	r1, r9
 800faa4:	4798      	blx	r3
 800faa6:	6166      	str	r6, [r4, #20]
 800faa8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800faaa:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800faae:	2600      	movs	r6, #0
 800fab0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 800fab4:	616e      	str	r6, [r5, #20]
 800fab6:	6426      	str	r6, [r4, #64]	; 0x40
 800fab8:	2f00      	cmp	r7, #0
 800faba:	f040 80ad 	bne.w	800fc18 <rcl_wait_set_resize+0x23c>
 800fabe:	6928      	ldr	r0, [r5, #16]
 800fac0:	b138      	cbz	r0, 800fad2 <rcl_wait_set_resize+0xf6>
 800fac2:	4649      	mov	r1, r9
 800fac4:	47d0      	blx	sl
 800fac6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fac8:	612f      	str	r7, [r5, #16]
 800faca:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 800face:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800fad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fad4:	2600      	movs	r6, #0
 800fad6:	61ee      	str	r6, [r5, #28]
 800fad8:	61a6      	str	r6, [r4, #24]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f040 80af 	bne.w	800fc3e <rcl_wait_set_resize+0x262>
 800fae0:	69a8      	ldr	r0, [r5, #24]
 800fae2:	b120      	cbz	r0, 800faee <rcl_wait_set_resize+0x112>
 800fae4:	4649      	mov	r1, r9
 800fae6:	47d0      	blx	sl
 800fae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800faea:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800faec:	61ab      	str	r3, [r5, #24]
 800faee:	6a20      	ldr	r0, [r4, #32]
 800faf0:	b128      	cbz	r0, 800fafe <rcl_wait_set_resize+0x122>
 800faf2:	4649      	mov	r1, r9
 800faf4:	47d0      	blx	sl
 800faf6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800faf8:	2300      	movs	r3, #0
 800fafa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800fafe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb00:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800fb02:	2600      	movs	r6, #0
 800fb04:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 800fb08:	626e      	str	r6, [r5, #36]	; 0x24
 800fb0a:	6266      	str	r6, [r4, #36]	; 0x24
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f000 80b6 	beq.w	800fc7e <rcl_wait_set_resize+0x2a2>
 800fb12:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800fb16:	6a28      	ldr	r0, [r5, #32]
 800fb18:	463a      	mov	r2, r7
 800fb1a:	4651      	mov	r1, sl
 800fb1c:	47c8      	blx	r9
 800fb1e:	6228      	str	r0, [r5, #32]
 800fb20:	2800      	cmp	r0, #0
 800fb22:	d04c      	beq.n	800fbbe <rcl_wait_set_resize+0x1e2>
 800fb24:	4652      	mov	r2, sl
 800fb26:	4631      	mov	r1, r6
 800fb28:	f005 fe50 	bl	80157cc <memset>
 800fb2c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fb2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb30:	626b      	str	r3, [r5, #36]	; 0x24
 800fb32:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fb34:	62a6      	str	r6, [r4, #40]	; 0x28
 800fb36:	463a      	mov	r2, r7
 800fb38:	4651      	mov	r1, sl
 800fb3a:	47c8      	blx	r9
 800fb3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fb3e:	62e0      	str	r0, [r4, #44]	; 0x2c
 800fb40:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800fb42:	2c00      	cmp	r4, #0
 800fb44:	f000 80f0 	beq.w	800fd28 <rcl_wait_set_resize+0x34c>
 800fb48:	4620      	mov	r0, r4
 800fb4a:	4652      	mov	r2, sl
 800fb4c:	4631      	mov	r1, r6
 800fb4e:	f005 fe3d 	bl	80157cc <memset>
 800fb52:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fb54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb56:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800fb58:	2600      	movs	r6, #0
 800fb5a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 800fb5e:	62ee      	str	r6, [r5, #44]	; 0x2c
 800fb60:	6326      	str	r6, [r4, #48]	; 0x30
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	f040 809d 	bne.w	800fca2 <rcl_wait_set_resize+0x2c6>
 800fb68:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800fb6a:	b120      	cbz	r0, 800fb76 <rcl_wait_set_resize+0x19a>
 800fb6c:	4639      	mov	r1, r7
 800fb6e:	47c0      	blx	r8
 800fb70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb72:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fb74:	62ab      	str	r3, [r5, #40]	; 0x28
 800fb76:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800fb78:	b310      	cbz	r0, 800fbc0 <rcl_wait_set_resize+0x1e4>
 800fb7a:	4639      	mov	r1, r7
 800fb7c:	47c0      	blx	r8
 800fb7e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fb80:	2000      	movs	r0, #0
 800fb82:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 800fb86:	b003      	add	sp, #12
 800fb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb8c:	6800      	ldr	r0, [r0, #0]
 800fb8e:	b120      	cbz	r0, 800fb9a <rcl_wait_set_resize+0x1be>
 800fb90:	4651      	mov	r1, sl
 800fb92:	47d8      	blx	fp
 800fb94:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fb96:	f8c5 8000 	str.w	r8, [r5]
 800fb9a:	68a0      	ldr	r0, [r4, #8]
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	f43f af61 	beq.w	800fa64 <rcl_wait_set_resize+0x88>
 800fba2:	4651      	mov	r1, sl
 800fba4:	47d8      	blx	fp
 800fba6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fba8:	2300      	movs	r3, #0
 800fbaa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800fbae:	e759      	b.n	800fa64 <rcl_wait_set_resize+0x88>
 800fbb0:	6828      	ldr	r0, [r5, #0]
 800fbb2:	9301      	str	r3, [sp, #4]
 800fbb4:	4651      	mov	r1, sl
 800fbb6:	47d8      	blx	fp
 800fbb8:	9b01      	ldr	r3, [sp, #4]
 800fbba:	e9c5 3300 	strd	r3, r3, [r5]
 800fbbe:	200a      	movs	r0, #10
 800fbc0:	b003      	add	sp, #12
 800fbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc6:	00b4      	lsls	r4, r6, #2
 800fbc8:	68a8      	ldr	r0, [r5, #8]
 800fbca:	464a      	mov	r2, r9
 800fbcc:	4621      	mov	r1, r4
 800fbce:	4798      	blx	r3
 800fbd0:	60a8      	str	r0, [r5, #8]
 800fbd2:	2800      	cmp	r0, #0
 800fbd4:	d0f3      	beq.n	800fbbe <rcl_wait_set_resize+0x1e2>
 800fbd6:	4622      	mov	r2, r4
 800fbd8:	4641      	mov	r1, r8
 800fbda:	f005 fdf7 	bl	80157cc <memset>
 800fbde:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fbe0:	60ee      	str	r6, [r5, #12]
 800fbe2:	f04f 0800 	mov.w	r8, #0
 800fbe6:	19f6      	adds	r6, r6, r7
 800fbe8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800fbec:	f8c4 8010 	str.w	r8, [r4, #16]
 800fbf0:	f43f af54 	beq.w	800fa9c <rcl_wait_set_resize+0xc0>
 800fbf4:	00b6      	lsls	r6, r6, #2
 800fbf6:	464a      	mov	r2, r9
 800fbf8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fbfa:	6960      	ldr	r0, [r4, #20]
 800fbfc:	4631      	mov	r1, r6
 800fbfe:	4798      	blx	r3
 800fc00:	4681      	mov	r9, r0
 800fc02:	6160      	str	r0, [r4, #20]
 800fc04:	2800      	cmp	r0, #0
 800fc06:	d076      	beq.n	800fcf6 <rcl_wait_set_resize+0x31a>
 800fc08:	4632      	mov	r2, r6
 800fc0a:	4641      	mov	r1, r8
 800fc0c:	f005 fdde 	bl	80157cc <memset>
 800fc10:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fc12:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800fc16:	e74a      	b.n	800faae <rcl_wait_set_resize+0xd2>
 800fc18:	00bc      	lsls	r4, r7, #2
 800fc1a:	6928      	ldr	r0, [r5, #16]
 800fc1c:	464a      	mov	r2, r9
 800fc1e:	4621      	mov	r1, r4
 800fc20:	47c0      	blx	r8
 800fc22:	6128      	str	r0, [r5, #16]
 800fc24:	2800      	cmp	r0, #0
 800fc26:	d0ca      	beq.n	800fbbe <rcl_wait_set_resize+0x1e2>
 800fc28:	4622      	mov	r2, r4
 800fc2a:	4631      	mov	r1, r6
 800fc2c:	f005 fdce 	bl	80157cc <memset>
 800fc30:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fc32:	616f      	str	r7, [r5, #20]
 800fc34:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 800fc38:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800fc3c:	e749      	b.n	800fad2 <rcl_wait_set_resize+0xf6>
 800fc3e:	009c      	lsls	r4, r3, #2
 800fc40:	69a8      	ldr	r0, [r5, #24]
 800fc42:	464a      	mov	r2, r9
 800fc44:	4621      	mov	r1, r4
 800fc46:	47c0      	blx	r8
 800fc48:	61a8      	str	r0, [r5, #24]
 800fc4a:	2800      	cmp	r0, #0
 800fc4c:	d0b7      	beq.n	800fbbe <rcl_wait_set_resize+0x1e2>
 800fc4e:	4622      	mov	r2, r4
 800fc50:	4631      	mov	r1, r6
 800fc52:	f005 fdbb 	bl	80157cc <memset>
 800fc56:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 800fc58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc5a:	61eb      	str	r3, [r5, #28]
 800fc5c:	6a38      	ldr	r0, [r7, #32]
 800fc5e:	61fe      	str	r6, [r7, #28]
 800fc60:	464a      	mov	r2, r9
 800fc62:	4621      	mov	r1, r4
 800fc64:	47c0      	blx	r8
 800fc66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fc68:	6238      	str	r0, [r7, #32]
 800fc6a:	6a1f      	ldr	r7, [r3, #32]
 800fc6c:	2f00      	cmp	r7, #0
 800fc6e:	d054      	beq.n	800fd1a <rcl_wait_set_resize+0x33e>
 800fc70:	4622      	mov	r2, r4
 800fc72:	4631      	mov	r1, r6
 800fc74:	4638      	mov	r0, r7
 800fc76:	f005 fda9 	bl	80157cc <memset>
 800fc7a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fc7c:	e73f      	b.n	800fafe <rcl_wait_set_resize+0x122>
 800fc7e:	6a28      	ldr	r0, [r5, #32]
 800fc80:	b120      	cbz	r0, 800fc8c <rcl_wait_set_resize+0x2b0>
 800fc82:	4639      	mov	r1, r7
 800fc84:	47c0      	blx	r8
 800fc86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc88:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fc8a:	622b      	str	r3, [r5, #32]
 800fc8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	f43f af60 	beq.w	800fb54 <rcl_wait_set_resize+0x178>
 800fc94:	4639      	mov	r1, r7
 800fc96:	47c0      	blx	r8
 800fc98:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800fca0:	e758      	b.n	800fb54 <rcl_wait_set_resize+0x178>
 800fca2:	009c      	lsls	r4, r3, #2
 800fca4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800fca6:	463a      	mov	r2, r7
 800fca8:	4621      	mov	r1, r4
 800fcaa:	47c8      	blx	r9
 800fcac:	62a8      	str	r0, [r5, #40]	; 0x28
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d085      	beq.n	800fbbe <rcl_wait_set_resize+0x1e2>
 800fcb2:	4622      	mov	r2, r4
 800fcb4:	4631      	mov	r1, r6
 800fcb6:	f005 fd89 	bl	80157cc <memset>
 800fcba:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800fcbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fcc0:	62eb      	str	r3, [r5, #44]	; 0x2c
 800fcc2:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800fcc6:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 800fcca:	463a      	mov	r2, r7
 800fccc:	4621      	mov	r1, r4
 800fcce:	47c8      	blx	r9
 800fcd0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fcd2:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 800fcd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcd8:	b36b      	cbz	r3, 800fd36 <rcl_wait_set_resize+0x35a>
 800fcda:	4622      	mov	r2, r4
 800fcdc:	4631      	mov	r1, r6
 800fcde:	4618      	mov	r0, r3
 800fce0:	f005 fd74 	bl	80157cc <memset>
 800fce4:	4630      	mov	r0, r6
 800fce6:	b003      	add	sp, #12
 800fce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcec:	200b      	movs	r0, #11
 800fcee:	4770      	bx	lr
 800fcf0:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fcf4:	e764      	b.n	800fbc0 <rcl_wait_set_resize+0x1e4>
 800fcf6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fcf8:	68a8      	ldr	r0, [r5, #8]
 800fcfa:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800fcfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fcfe:	4798      	blx	r3
 800fd00:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fd02:	6928      	ldr	r0, [r5, #16]
 800fd04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fd06:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800fd08:	f8c5 900c 	str.w	r9, [r5, #12]
 800fd0c:	f8c5 9008 	str.w	r9, [r5, #8]
 800fd10:	4790      	blx	r2
 800fd12:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800fd16:	200a      	movs	r0, #10
 800fd18:	e752      	b.n	800fbc0 <rcl_wait_set_resize+0x1e4>
 800fd1a:	69a8      	ldr	r0, [r5, #24]
 800fd1c:	4649      	mov	r1, r9
 800fd1e:	47d0      	blx	sl
 800fd20:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800fd24:	200a      	movs	r0, #10
 800fd26:	e74b      	b.n	800fbc0 <rcl_wait_set_resize+0x1e4>
 800fd28:	6a28      	ldr	r0, [r5, #32]
 800fd2a:	4639      	mov	r1, r7
 800fd2c:	47c0      	blx	r8
 800fd2e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800fd32:	200a      	movs	r0, #10
 800fd34:	e744      	b.n	800fbc0 <rcl_wait_set_resize+0x1e4>
 800fd36:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800fd38:	9301      	str	r3, [sp, #4]
 800fd3a:	4639      	mov	r1, r7
 800fd3c:	47c0      	blx	r8
 800fd3e:	9b01      	ldr	r3, [sp, #4]
 800fd40:	200a      	movs	r0, #10
 800fd42:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800fd46:	e73b      	b.n	800fbc0 <rcl_wait_set_resize+0x1e4>

0800fd48 <rcl_wait_set_init>:
 800fd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd4c:	b084      	sub	sp, #16
 800fd4e:	4604      	mov	r4, r0
 800fd50:	a810      	add	r0, sp, #64	; 0x40
 800fd52:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800fd56:	460f      	mov	r7, r1
 800fd58:	4690      	mov	r8, r2
 800fd5a:	4699      	mov	r9, r3
 800fd5c:	f7fa fa7c 	bl	800a258 <rcutils_allocator_is_valid>
 800fd60:	2800      	cmp	r0, #0
 800fd62:	d06b      	beq.n	800fe3c <rcl_wait_set_init+0xf4>
 800fd64:	2c00      	cmp	r4, #0
 800fd66:	d069      	beq.n	800fe3c <rcl_wait_set_init+0xf4>
 800fd68:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800fd6a:	b125      	cbz	r5, 800fd76 <rcl_wait_set_init+0x2e>
 800fd6c:	2564      	movs	r5, #100	; 0x64
 800fd6e:	4628      	mov	r0, r5
 800fd70:	b004      	add	sp, #16
 800fd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd76:	f1ba 0f00 	cmp.w	sl, #0
 800fd7a:	d05f      	beq.n	800fe3c <rcl_wait_set_init+0xf4>
 800fd7c:	4650      	mov	r0, sl
 800fd7e:	f7fe f96f 	bl	800e060 <rcl_context_is_valid>
 800fd82:	2800      	cmp	r0, #0
 800fd84:	d067      	beq.n	800fe56 <rcl_wait_set_init+0x10e>
 800fd86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd88:	9914      	ldr	r1, [sp, #80]	; 0x50
 800fd8a:	205c      	movs	r0, #92	; 0x5c
 800fd8c:	4798      	blx	r3
 800fd8e:	6320      	str	r0, [r4, #48]	; 0x30
 800fd90:	2800      	cmp	r0, #0
 800fd92:	d062      	beq.n	800fe5a <rcl_wait_set_init+0x112>
 800fd94:	4629      	mov	r1, r5
 800fd96:	225c      	movs	r2, #92	; 0x5c
 800fd98:	f005 fd18 	bl	80157cc <memset>
 800fd9c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800fda0:	eb03 0e02 	add.w	lr, r3, r2
 800fda4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fda6:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800fda8:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 800fdac:	449e      	add	lr, r3
 800fdae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fdb2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800fdb6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800fdba:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800fdbe:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 800fdc2:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 800fdc6:	f106 0548 	add.w	r5, r6, #72	; 0x48
 800fdca:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 800fdce:	f8da a000 	ldr.w	sl, [sl]
 800fdd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fdd4:	44c6      	add	lr, r8
 800fdd6:	f8dc 3000 	ldr.w	r3, [ip]
 800fdda:	602b      	str	r3, [r5, #0]
 800fddc:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 800fde0:	f10a 0028 	add.w	r0, sl, #40	; 0x28
 800fde4:	f002 fdde 	bl	80129a4 <rmw_create_wait_set>
 800fde8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fdea:	63f0      	str	r0, [r6, #60]	; 0x3c
 800fdec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fdee:	b350      	cbz	r0, 800fe46 <rcl_wait_set_init+0xfe>
 800fdf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fdf2:	9302      	str	r3, [sp, #8]
 800fdf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdf6:	9301      	str	r3, [sp, #4]
 800fdf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fdfa:	9300      	str	r3, [sp, #0]
 800fdfc:	4642      	mov	r2, r8
 800fdfe:	464b      	mov	r3, r9
 800fe00:	4639      	mov	r1, r7
 800fe02:	4620      	mov	r0, r4
 800fe04:	f7ff fdea 	bl	800f9dc <rcl_wait_set_resize>
 800fe08:	4605      	mov	r5, r0
 800fe0a:	2800      	cmp	r0, #0
 800fe0c:	d0af      	beq.n	800fd6e <rcl_wait_set_init+0x26>
 800fe0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fe10:	bb2b      	cbnz	r3, 800fe5e <rcl_wait_set_init+0x116>
 800fe12:	2600      	movs	r6, #0
 800fe14:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800fe18:	9600      	str	r6, [sp, #0]
 800fe1a:	4633      	mov	r3, r6
 800fe1c:	4632      	mov	r2, r6
 800fe1e:	4631      	mov	r1, r6
 800fe20:	4620      	mov	r0, r4
 800fe22:	f7ff fddb 	bl	800f9dc <rcl_wait_set_resize>
 800fe26:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fe28:	2800      	cmp	r0, #0
 800fe2a:	d0a0      	beq.n	800fd6e <rcl_wait_set_init+0x26>
 800fe2c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800fe2e:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800fe30:	4798      	blx	r3
 800fe32:	4628      	mov	r0, r5
 800fe34:	6326      	str	r6, [r4, #48]	; 0x30
 800fe36:	b004      	add	sp, #16
 800fe38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe3c:	250b      	movs	r5, #11
 800fe3e:	4628      	mov	r0, r5
 800fe40:	b004      	add	sp, #16
 800fe42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe46:	2501      	movs	r5, #1
 800fe48:	f002 fdb6 	bl	80129b8 <rmw_destroy_wait_set>
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	bf18      	it	ne
 800fe50:	f44f 7561 	movne.w	r5, #900	; 0x384
 800fe54:	e7dd      	b.n	800fe12 <rcl_wait_set_init+0xca>
 800fe56:	2565      	movs	r5, #101	; 0x65
 800fe58:	e789      	b.n	800fd6e <rcl_wait_set_init+0x26>
 800fe5a:	250a      	movs	r5, #10
 800fe5c:	e787      	b.n	800fd6e <rcl_wait_set_init+0x26>
 800fe5e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fe60:	e7f2      	b.n	800fe48 <rcl_wait_set_init+0x100>
 800fe62:	bf00      	nop

0800fe64 <rcl_wait_set_add_guard_condition>:
 800fe64:	b318      	cbz	r0, 800feae <rcl_wait_set_add_guard_condition+0x4a>
 800fe66:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fe68:	b570      	push	{r4, r5, r6, lr}
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	b30b      	cbz	r3, 800feb2 <rcl_wait_set_add_guard_condition+0x4e>
 800fe6e:	b319      	cbz	r1, 800feb8 <rcl_wait_set_add_guard_condition+0x54>
 800fe70:	68dd      	ldr	r5, [r3, #12]
 800fe72:	68c0      	ldr	r0, [r0, #12]
 800fe74:	4285      	cmp	r5, r0
 800fe76:	d217      	bcs.n	800fea8 <rcl_wait_set_add_guard_condition+0x44>
 800fe78:	68a0      	ldr	r0, [r4, #8]
 800fe7a:	1c6e      	adds	r6, r5, #1
 800fe7c:	60de      	str	r6, [r3, #12]
 800fe7e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fe82:	b102      	cbz	r2, 800fe86 <rcl_wait_set_add_guard_condition+0x22>
 800fe84:	6015      	str	r5, [r2, #0]
 800fe86:	4608      	mov	r0, r1
 800fe88:	f7fe fa58 	bl	800e33c <rcl_guard_condition_get_rmw_handle>
 800fe8c:	b150      	cbz	r0, 800fea4 <rcl_wait_set_add_guard_condition+0x40>
 800fe8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fe90:	6842      	ldr	r2, [r0, #4]
 800fe92:	695b      	ldr	r3, [r3, #20]
 800fe94:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fe9a:	6913      	ldr	r3, [r2, #16]
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	2000      	movs	r0, #0
 800fea0:	6113      	str	r3, [r2, #16]
 800fea2:	bd70      	pop	{r4, r5, r6, pc}
 800fea4:	2001      	movs	r0, #1
 800fea6:	bd70      	pop	{r4, r5, r6, pc}
 800fea8:	f240 3086 	movw	r0, #902	; 0x386
 800feac:	bd70      	pop	{r4, r5, r6, pc}
 800feae:	200b      	movs	r0, #11
 800feb0:	4770      	bx	lr
 800feb2:	f44f 7061 	mov.w	r0, #900	; 0x384
 800feb6:	bd70      	pop	{r4, r5, r6, pc}
 800feb8:	200b      	movs	r0, #11
 800feba:	bd70      	pop	{r4, r5, r6, pc}

0800febc <rcl_wait_set_add_timer>:
 800febc:	b328      	cbz	r0, 800ff0a <rcl_wait_set_add_timer+0x4e>
 800febe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fec0:	b570      	push	{r4, r5, r6, lr}
 800fec2:	4604      	mov	r4, r0
 800fec4:	b31b      	cbz	r3, 800ff0e <rcl_wait_set_add_timer+0x52>
 800fec6:	b329      	cbz	r1, 800ff14 <rcl_wait_set_add_timer+0x58>
 800fec8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800feca:	6965      	ldr	r5, [r4, #20]
 800fecc:	42a8      	cmp	r0, r5
 800fece:	d219      	bcs.n	800ff04 <rcl_wait_set_add_timer+0x48>
 800fed0:	6925      	ldr	r5, [r4, #16]
 800fed2:	1c46      	adds	r6, r0, #1
 800fed4:	641e      	str	r6, [r3, #64]	; 0x40
 800fed6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800feda:	b102      	cbz	r2, 800fede <rcl_wait_set_add_timer+0x22>
 800fedc:	6010      	str	r0, [r2, #0]
 800fede:	4608      	mov	r0, r1
 800fee0:	f7f9 f9fa 	bl	80092d8 <rcl_timer_get_guard_condition>
 800fee4:	b168      	cbz	r0, 800ff02 <rcl_wait_set_add_timer+0x46>
 800fee6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fee8:	68e3      	ldr	r3, [r4, #12]
 800feea:	6c15      	ldr	r5, [r2, #64]	; 0x40
 800feec:	3b01      	subs	r3, #1
 800feee:	441d      	add	r5, r3
 800fef0:	f7fe fa24 	bl	800e33c <rcl_guard_condition_get_rmw_handle>
 800fef4:	b180      	cbz	r0, 800ff18 <rcl_wait_set_add_timer+0x5c>
 800fef6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fef8:	6842      	ldr	r2, [r0, #4]
 800fefa:	695b      	ldr	r3, [r3, #20]
 800fefc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff00:	2000      	movs	r0, #0
 800ff02:	bd70      	pop	{r4, r5, r6, pc}
 800ff04:	f240 3086 	movw	r0, #902	; 0x386
 800ff08:	bd70      	pop	{r4, r5, r6, pc}
 800ff0a:	200b      	movs	r0, #11
 800ff0c:	4770      	bx	lr
 800ff0e:	f44f 7061 	mov.w	r0, #900	; 0x384
 800ff12:	bd70      	pop	{r4, r5, r6, pc}
 800ff14:	200b      	movs	r0, #11
 800ff16:	bd70      	pop	{r4, r5, r6, pc}
 800ff18:	2001      	movs	r0, #1
 800ff1a:	bd70      	pop	{r4, r5, r6, pc}

0800ff1c <rcl_wait_set_add_client>:
 800ff1c:	b318      	cbz	r0, 800ff66 <rcl_wait_set_add_client+0x4a>
 800ff1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ff20:	b570      	push	{r4, r5, r6, lr}
 800ff22:	4604      	mov	r4, r0
 800ff24:	b30b      	cbz	r3, 800ff6a <rcl_wait_set_add_client+0x4e>
 800ff26:	b319      	cbz	r1, 800ff70 <rcl_wait_set_add_client+0x54>
 800ff28:	699d      	ldr	r5, [r3, #24]
 800ff2a:	69c0      	ldr	r0, [r0, #28]
 800ff2c:	4285      	cmp	r5, r0
 800ff2e:	d217      	bcs.n	800ff60 <rcl_wait_set_add_client+0x44>
 800ff30:	69a0      	ldr	r0, [r4, #24]
 800ff32:	1c6e      	adds	r6, r5, #1
 800ff34:	619e      	str	r6, [r3, #24]
 800ff36:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800ff3a:	b102      	cbz	r2, 800ff3e <rcl_wait_set_add_client+0x22>
 800ff3c:	6015      	str	r5, [r2, #0]
 800ff3e:	4608      	mov	r0, r1
 800ff40:	f7fd ffa6 	bl	800de90 <rcl_client_get_rmw_handle>
 800ff44:	b150      	cbz	r0, 800ff5c <rcl_wait_set_add_client+0x40>
 800ff46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ff48:	6842      	ldr	r2, [r0, #4]
 800ff4a:	6a1b      	ldr	r3, [r3, #32]
 800ff4c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff50:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ff52:	69d3      	ldr	r3, [r2, #28]
 800ff54:	3301      	adds	r3, #1
 800ff56:	2000      	movs	r0, #0
 800ff58:	61d3      	str	r3, [r2, #28]
 800ff5a:	bd70      	pop	{r4, r5, r6, pc}
 800ff5c:	2001      	movs	r0, #1
 800ff5e:	bd70      	pop	{r4, r5, r6, pc}
 800ff60:	f240 3086 	movw	r0, #902	; 0x386
 800ff64:	bd70      	pop	{r4, r5, r6, pc}
 800ff66:	200b      	movs	r0, #11
 800ff68:	4770      	bx	lr
 800ff6a:	f44f 7061 	mov.w	r0, #900	; 0x384
 800ff6e:	bd70      	pop	{r4, r5, r6, pc}
 800ff70:	200b      	movs	r0, #11
 800ff72:	bd70      	pop	{r4, r5, r6, pc}

0800ff74 <rcl_wait_set_add_service>:
 800ff74:	b318      	cbz	r0, 800ffbe <rcl_wait_set_add_service+0x4a>
 800ff76:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ff78:	b570      	push	{r4, r5, r6, lr}
 800ff7a:	4604      	mov	r4, r0
 800ff7c:	b30b      	cbz	r3, 800ffc2 <rcl_wait_set_add_service+0x4e>
 800ff7e:	b319      	cbz	r1, 800ffc8 <rcl_wait_set_add_service+0x54>
 800ff80:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800ff82:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800ff84:	4285      	cmp	r5, r0
 800ff86:	d217      	bcs.n	800ffb8 <rcl_wait_set_add_service+0x44>
 800ff88:	6a20      	ldr	r0, [r4, #32]
 800ff8a:	1c6e      	adds	r6, r5, #1
 800ff8c:	625e      	str	r6, [r3, #36]	; 0x24
 800ff8e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800ff92:	b102      	cbz	r2, 800ff96 <rcl_wait_set_add_service+0x22>
 800ff94:	6015      	str	r5, [r2, #0]
 800ff96:	4608      	mov	r0, r1
 800ff98:	f7fe ff7c 	bl	800ee94 <rcl_service_get_rmw_handle>
 800ff9c:	b150      	cbz	r0, 800ffb4 <rcl_wait_set_add_service+0x40>
 800ff9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ffa0:	6842      	ldr	r2, [r0, #4]
 800ffa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffa4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ffa8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ffaa:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800ffac:	3301      	adds	r3, #1
 800ffae:	2000      	movs	r0, #0
 800ffb0:	6293      	str	r3, [r2, #40]	; 0x28
 800ffb2:	bd70      	pop	{r4, r5, r6, pc}
 800ffb4:	2001      	movs	r0, #1
 800ffb6:	bd70      	pop	{r4, r5, r6, pc}
 800ffb8:	f240 3086 	movw	r0, #902	; 0x386
 800ffbc:	bd70      	pop	{r4, r5, r6, pc}
 800ffbe:	200b      	movs	r0, #11
 800ffc0:	4770      	bx	lr
 800ffc2:	f44f 7061 	mov.w	r0, #900	; 0x384
 800ffc6:	bd70      	pop	{r4, r5, r6, pc}
 800ffc8:	200b      	movs	r0, #11
 800ffca:	bd70      	pop	{r4, r5, r6, pc}
 800ffcc:	0000      	movs	r0, r0
	...

0800ffd0 <rcl_wait>:
 800ffd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd4:	ed2d 8b02 	vpush	{d8}
 800ffd8:	b08d      	sub	sp, #52	; 0x34
 800ffda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	f000 8143 	beq.w	801026a <rcl_wait+0x29a>
 800ffe4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800ffe6:	4605      	mov	r5, r0
 800ffe8:	2e00      	cmp	r6, #0
 800ffea:	f000 8112 	beq.w	8010212 <rcl_wait+0x242>
 800ffee:	6843      	ldr	r3, [r0, #4]
 800fff0:	b983      	cbnz	r3, 8010014 <rcl_wait+0x44>
 800fff2:	68eb      	ldr	r3, [r5, #12]
 800fff4:	b973      	cbnz	r3, 8010014 <rcl_wait+0x44>
 800fff6:	696b      	ldr	r3, [r5, #20]
 800fff8:	b963      	cbnz	r3, 8010014 <rcl_wait+0x44>
 800fffa:	69eb      	ldr	r3, [r5, #28]
 800fffc:	b953      	cbnz	r3, 8010014 <rcl_wait+0x44>
 800fffe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010000:	b943      	cbnz	r3, 8010014 <rcl_wait+0x44>
 8010002:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010004:	b933      	cbnz	r3, 8010014 <rcl_wait+0x44>
 8010006:	f240 3085 	movw	r0, #901	; 0x385
 801000a:	b00d      	add	sp, #52	; 0x34
 801000c:	ecbd 8b02 	vpop	{d8}
 8010010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010014:	9b04      	ldr	r3, [sp, #16]
 8010016:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8010018:	2b01      	cmp	r3, #1
 801001a:	9b05      	ldr	r3, [sp, #20]
 801001c:	f173 0300 	sbcs.w	r3, r3, #0
 8010020:	f2c0 80f0 	blt.w	8010204 <rcl_wait+0x234>
 8010024:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8010028:	4643      	mov	r3, r8
 801002a:	2a00      	cmp	r2, #0
 801002c:	f000 8133 	beq.w	8010296 <rcl_wait+0x2c6>
 8010030:	2400      	movs	r4, #0
 8010032:	4613      	mov	r3, r2
 8010034:	ed9f 8b9c 	vldr	d8, [pc, #624]	; 80102a8 <rcl_wait+0x2d8>
 8010038:	46a2      	mov	sl, r4
 801003a:	46a3      	mov	fp, r4
 801003c:	f240 3921 	movw	r9, #801	; 0x321
 8010040:	4632      	mov	r2, r6
 8010042:	e014      	b.n	801006e <rcl_wait+0x9e>
 8010044:	2800      	cmp	r0, #0
 8010046:	d1e0      	bne.n	801000a <rcl_wait+0x3a>
 8010048:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801004c:	4542      	cmp	r2, r8
 801004e:	eb73 0107 	sbcs.w	r1, r3, r7
 8010052:	da03      	bge.n	801005c <rcl_wait+0x8c>
 8010054:	4690      	mov	r8, r2
 8010056:	461f      	mov	r7, r3
 8010058:	f04f 0b01 	mov.w	fp, #1
 801005c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801005e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010060:	3401      	adds	r4, #1
 8010062:	f14a 0a00 	adc.w	sl, sl, #0
 8010066:	429c      	cmp	r4, r3
 8010068:	f17a 0100 	sbcs.w	r1, sl, #0
 801006c:	d228      	bcs.n	80100c0 <rcl_wait+0xf0>
 801006e:	6928      	ldr	r0, [r5, #16]
 8010070:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010074:	a908      	add	r1, sp, #32
 8010076:	00a6      	lsls	r6, r4, #2
 8010078:	2800      	cmp	r0, #0
 801007a:	d0f1      	beq.n	8010060 <rcl_wait+0x90>
 801007c:	68eb      	ldr	r3, [r5, #12]
 801007e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8010082:	4423      	add	r3, r4
 8010084:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010088:	f1be 0f00 	cmp.w	lr, #0
 801008c:	d006      	beq.n	801009c <rcl_wait+0xcc>
 801008e:	6913      	ldr	r3, [r2, #16]
 8010090:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8010094:	3301      	adds	r3, #1
 8010096:	6113      	str	r3, [r2, #16]
 8010098:	692b      	ldr	r3, [r5, #16]
 801009a:	5998      	ldr	r0, [r3, r6]
 801009c:	ed8d 8b08 	vstr	d8, [sp, #32]
 80100a0:	f7f9 f8e8 	bl	8009274 <rcl_timer_get_time_until_next_call>
 80100a4:	4548      	cmp	r0, r9
 80100a6:	d1cd      	bne.n	8010044 <rcl_wait+0x74>
 80100a8:	692b      	ldr	r3, [r5, #16]
 80100aa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80100ac:	2100      	movs	r1, #0
 80100ae:	5199      	str	r1, [r3, r6]
 80100b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80100b2:	3401      	adds	r4, #1
 80100b4:	f14a 0a00 	adc.w	sl, sl, #0
 80100b8:	429c      	cmp	r4, r3
 80100ba:	f17a 0100 	sbcs.w	r1, sl, #0
 80100be:	d3d6      	bcc.n	801006e <rcl_wait+0x9e>
 80100c0:	4616      	mov	r6, r2
 80100c2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80100c6:	4313      	orrs	r3, r2
 80100c8:	46d9      	mov	r9, fp
 80100ca:	f040 80a9 	bne.w	8010220 <rcl_wait+0x250>
 80100ce:	2300      	movs	r3, #0
 80100d0:	2200      	movs	r2, #0
 80100d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80100d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80100da:	ab08      	add	r3, sp, #32
 80100dc:	9302      	str	r3, [sp, #8]
 80100de:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80100e0:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80100e4:	e9cd 3200 	strd	r3, r2, [sp]
 80100e8:	f106 0110 	add.w	r1, r6, #16
 80100ec:	f106 031c 	add.w	r3, r6, #28
 80100f0:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80100f4:	1d30      	adds	r0, r6, #4
 80100f6:	f002 fadd 	bl	80126b4 <rmw_wait>
 80100fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80100fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80100fe:	4680      	mov	r8, r0
 8010100:	b1ca      	cbz	r2, 8010136 <rcl_wait+0x166>
 8010102:	2400      	movs	r4, #0
 8010104:	4627      	mov	r7, r4
 8010106:	692a      	ldr	r2, [r5, #16]
 8010108:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801010c:	f10d 011f 	add.w	r1, sp, #31
 8010110:	00a6      	lsls	r6, r4, #2
 8010112:	b160      	cbz	r0, 801012e <rcl_wait+0x15e>
 8010114:	f88d 701f 	strb.w	r7, [sp, #31]
 8010118:	f7f9 f872 	bl	8009200 <rcl_timer_is_ready>
 801011c:	2800      	cmp	r0, #0
 801011e:	f47f af74 	bne.w	801000a <rcl_wait+0x3a>
 8010122:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010126:	b90b      	cbnz	r3, 801012c <rcl_wait+0x15c>
 8010128:	692a      	ldr	r2, [r5, #16]
 801012a:	5193      	str	r3, [r2, r6]
 801012c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801012e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010130:	3401      	adds	r4, #1
 8010132:	42a2      	cmp	r2, r4
 8010134:	d8e7      	bhi.n	8010106 <rcl_wait+0x136>
 8010136:	f038 0002 	bics.w	r0, r8, #2
 801013a:	f040 8090 	bne.w	801025e <rcl_wait+0x28e>
 801013e:	686e      	ldr	r6, [r5, #4]
 8010140:	4602      	mov	r2, r0
 8010142:	b91e      	cbnz	r6, 801014c <rcl_wait+0x17c>
 8010144:	e00d      	b.n	8010162 <rcl_wait+0x192>
 8010146:	3201      	adds	r2, #1
 8010148:	42b2      	cmp	r2, r6
 801014a:	d00a      	beq.n	8010162 <rcl_wait+0x192>
 801014c:	6899      	ldr	r1, [r3, #8]
 801014e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010152:	2900      	cmp	r1, #0
 8010154:	d1f7      	bne.n	8010146 <rcl_wait+0x176>
 8010156:	682c      	ldr	r4, [r5, #0]
 8010158:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801015c:	3201      	adds	r2, #1
 801015e:	42b2      	cmp	r2, r6
 8010160:	d1f4      	bne.n	801014c <rcl_wait+0x17c>
 8010162:	68ee      	ldr	r6, [r5, #12]
 8010164:	2200      	movs	r2, #0
 8010166:	b91e      	cbnz	r6, 8010170 <rcl_wait+0x1a0>
 8010168:	e00d      	b.n	8010186 <rcl_wait+0x1b6>
 801016a:	3201      	adds	r2, #1
 801016c:	42b2      	cmp	r2, r6
 801016e:	d00a      	beq.n	8010186 <rcl_wait+0x1b6>
 8010170:	6959      	ldr	r1, [r3, #20]
 8010172:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010176:	2900      	cmp	r1, #0
 8010178:	d1f7      	bne.n	801016a <rcl_wait+0x19a>
 801017a:	68ac      	ldr	r4, [r5, #8]
 801017c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010180:	3201      	adds	r2, #1
 8010182:	42b2      	cmp	r2, r6
 8010184:	d1f4      	bne.n	8010170 <rcl_wait+0x1a0>
 8010186:	69ee      	ldr	r6, [r5, #28]
 8010188:	2200      	movs	r2, #0
 801018a:	b91e      	cbnz	r6, 8010194 <rcl_wait+0x1c4>
 801018c:	e00d      	b.n	80101aa <rcl_wait+0x1da>
 801018e:	3201      	adds	r2, #1
 8010190:	42b2      	cmp	r2, r6
 8010192:	d00a      	beq.n	80101aa <rcl_wait+0x1da>
 8010194:	6a19      	ldr	r1, [r3, #32]
 8010196:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801019a:	2900      	cmp	r1, #0
 801019c:	d1f7      	bne.n	801018e <rcl_wait+0x1be>
 801019e:	69ac      	ldr	r4, [r5, #24]
 80101a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80101a4:	3201      	adds	r2, #1
 80101a6:	42b2      	cmp	r2, r6
 80101a8:	d1f4      	bne.n	8010194 <rcl_wait+0x1c4>
 80101aa:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80101ac:	2200      	movs	r2, #0
 80101ae:	b91e      	cbnz	r6, 80101b8 <rcl_wait+0x1e8>
 80101b0:	e00d      	b.n	80101ce <rcl_wait+0x1fe>
 80101b2:	3201      	adds	r2, #1
 80101b4:	4296      	cmp	r6, r2
 80101b6:	d00a      	beq.n	80101ce <rcl_wait+0x1fe>
 80101b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80101ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80101be:	2900      	cmp	r1, #0
 80101c0:	d1f7      	bne.n	80101b2 <rcl_wait+0x1e2>
 80101c2:	6a2c      	ldr	r4, [r5, #32]
 80101c4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80101c8:	3201      	adds	r2, #1
 80101ca:	4296      	cmp	r6, r2
 80101cc:	d1f4      	bne.n	80101b8 <rcl_wait+0x1e8>
 80101ce:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 80101d0:	2200      	movs	r2, #0
 80101d2:	b91e      	cbnz	r6, 80101dc <rcl_wait+0x20c>
 80101d4:	e00d      	b.n	80101f2 <rcl_wait+0x222>
 80101d6:	3201      	adds	r2, #1
 80101d8:	42b2      	cmp	r2, r6
 80101da:	d00a      	beq.n	80101f2 <rcl_wait+0x222>
 80101dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80101de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80101e2:	2900      	cmp	r1, #0
 80101e4:	d1f7      	bne.n	80101d6 <rcl_wait+0x206>
 80101e6:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80101e8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80101ec:	3201      	adds	r2, #1
 80101ee:	42b2      	cmp	r2, r6
 80101f0:	d1f4      	bne.n	80101dc <rcl_wait+0x20c>
 80101f2:	f1b8 0f02 	cmp.w	r8, #2
 80101f6:	f47f af08 	bne.w	801000a <rcl_wait+0x3a>
 80101fa:	464b      	mov	r3, r9
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	bf08      	it	eq
 8010200:	2002      	moveq	r0, #2
 8010202:	e702      	b.n	801000a <rcl_wait+0x3a>
 8010204:	2a00      	cmp	r2, #0
 8010206:	d03a      	beq.n	801027e <rcl_wait+0x2ae>
 8010208:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801020c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8010210:	e70e      	b.n	8010030 <rcl_wait+0x60>
 8010212:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010216:	b00d      	add	sp, #52	; 0x34
 8010218:	ecbd 8b02 	vpop	{d8}
 801021c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010220:	9b04      	ldr	r3, [sp, #16]
 8010222:	2b01      	cmp	r3, #1
 8010224:	9b05      	ldr	r3, [sp, #20]
 8010226:	f173 0300 	sbcs.w	r3, r3, #0
 801022a:	db24      	blt.n	8010276 <rcl_wait+0x2a6>
 801022c:	2f00      	cmp	r7, #0
 801022e:	bfbc      	itt	lt
 8010230:	f04f 0800 	movlt.w	r8, #0
 8010234:	4647      	movlt	r7, r8
 8010236:	a31e      	add	r3, pc, #120	; (adr r3, 80102b0 <rcl_wait+0x2e0>)
 8010238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023c:	4640      	mov	r0, r8
 801023e:	4639      	mov	r1, r7
 8010240:	f7f0 f836 	bl	80002b0 <__aeabi_ldivmod>
 8010244:	a31a      	add	r3, pc, #104	; (adr r3, 80102b0 <rcl_wait+0x2e0>)
 8010246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801024e:	4640      	mov	r0, r8
 8010250:	4639      	mov	r1, r7
 8010252:	f7f0 f82d 	bl	80002b0 <__aeabi_ldivmod>
 8010256:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801025a:	ab08      	add	r3, sp, #32
 801025c:	e73e      	b.n	80100dc <rcl_wait+0x10c>
 801025e:	2001      	movs	r0, #1
 8010260:	b00d      	add	sp, #52	; 0x34
 8010262:	ecbd 8b02 	vpop	{d8}
 8010266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801026a:	200b      	movs	r0, #11
 801026c:	b00d      	add	sp, #52	; 0x34
 801026e:	ecbd 8b02 	vpop	{d8}
 8010272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010276:	465b      	mov	r3, fp
 8010278:	2b00      	cmp	r3, #0
 801027a:	d1d7      	bne.n	801022c <rcl_wait+0x25c>
 801027c:	e72e      	b.n	80100dc <rcl_wait+0x10c>
 801027e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010282:	430b      	orrs	r3, r1
 8010284:	bf08      	it	eq
 8010286:	4691      	moveq	r9, r2
 8010288:	f43f af21 	beq.w	80100ce <rcl_wait+0xfe>
 801028c:	9b04      	ldr	r3, [sp, #16]
 801028e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010292:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8010296:	2b01      	cmp	r3, #1
 8010298:	9b05      	ldr	r3, [sp, #20]
 801029a:	f173 0300 	sbcs.w	r3, r3, #0
 801029e:	f04f 0300 	mov.w	r3, #0
 80102a2:	4699      	mov	r9, r3
 80102a4:	dac2      	bge.n	801022c <rcl_wait+0x25c>
 80102a6:	e719      	b.n	80100dc <rcl_wait+0x10c>
 80102a8:	ffffffff 	.word	0xffffffff
 80102ac:	7fffffff 	.word	0x7fffffff
 80102b0:	3b9aca00 	.word	0x3b9aca00
 80102b4:	00000000 	.word	0x00000000

080102b8 <rcl_action_take_goal_response>:
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d039      	beq.n	8010330 <rcl_action_take_goal_response+0x78>
 80102bc:	b570      	push	{r4, r5, r6, lr}
 80102be:	4604      	mov	r4, r0
 80102c0:	6800      	ldr	r0, [r0, #0]
 80102c2:	b380      	cbz	r0, 8010326 <rcl_action_take_goal_response+0x6e>
 80102c4:	460d      	mov	r5, r1
 80102c6:	4616      	mov	r6, r2
 80102c8:	f7fd fea2 	bl	800e010 <rcl_client_is_valid>
 80102cc:	b330      	cbz	r0, 801031c <rcl_action_take_goal_response+0x64>
 80102ce:	6820      	ldr	r0, [r4, #0]
 80102d0:	3004      	adds	r0, #4
 80102d2:	f7fd fe9d 	bl	800e010 <rcl_client_is_valid>
 80102d6:	b308      	cbz	r0, 801031c <rcl_action_take_goal_response+0x64>
 80102d8:	6820      	ldr	r0, [r4, #0]
 80102da:	3008      	adds	r0, #8
 80102dc:	f7fd fe98 	bl	800e010 <rcl_client_is_valid>
 80102e0:	b1e0      	cbz	r0, 801031c <rcl_action_take_goal_response+0x64>
 80102e2:	6820      	ldr	r0, [r4, #0]
 80102e4:	300c      	adds	r0, #12
 80102e6:	f7ff f83d 	bl	800f364 <rcl_subscription_is_valid>
 80102ea:	b1b8      	cbz	r0, 801031c <rcl_action_take_goal_response+0x64>
 80102ec:	6820      	ldr	r0, [r4, #0]
 80102ee:	3010      	adds	r0, #16
 80102f0:	f7ff f838 	bl	800f364 <rcl_subscription_is_valid>
 80102f4:	b190      	cbz	r0, 801031c <rcl_action_take_goal_response+0x64>
 80102f6:	b1cd      	cbz	r5, 801032c <rcl_action_take_goal_response+0x74>
 80102f8:	b1c6      	cbz	r6, 801032c <rcl_action_take_goal_response+0x74>
 80102fa:	6820      	ldr	r0, [r4, #0]
 80102fc:	4632      	mov	r2, r6
 80102fe:	4629      	mov	r1, r5
 8010300:	f7fd fe1e 	bl	800df40 <rcl_take_response>
 8010304:	b148      	cbz	r0, 801031a <rcl_action_take_goal_response+0x62>
 8010306:	280a      	cmp	r0, #10
 8010308:	d007      	beq.n	801031a <rcl_action_take_goal_response+0x62>
 801030a:	f240 12f5 	movw	r2, #501	; 0x1f5
 801030e:	f640 0337 	movw	r3, #2103	; 0x837
 8010312:	4290      	cmp	r0, r2
 8010314:	bf0c      	ite	eq
 8010316:	4618      	moveq	r0, r3
 8010318:	2001      	movne	r0, #1
 801031a:	bd70      	pop	{r4, r5, r6, pc}
 801031c:	f7fa f864 	bl	800a3e8 <rcutils_reset_error>
 8010320:	f640 0036 	movw	r0, #2102	; 0x836
 8010324:	bd70      	pop	{r4, r5, r6, pc}
 8010326:	f640 0036 	movw	r0, #2102	; 0x836
 801032a:	bd70      	pop	{r4, r5, r6, pc}
 801032c:	200b      	movs	r0, #11
 801032e:	bd70      	pop	{r4, r5, r6, pc}
 8010330:	f640 0036 	movw	r0, #2102	; 0x836
 8010334:	4770      	bx	lr
 8010336:	bf00      	nop

08010338 <rcl_action_send_result_request>:
 8010338:	b390      	cbz	r0, 80103a0 <rcl_action_send_result_request+0x68>
 801033a:	b570      	push	{r4, r5, r6, lr}
 801033c:	4604      	mov	r4, r0
 801033e:	6800      	ldr	r0, [r0, #0]
 8010340:	b348      	cbz	r0, 8010396 <rcl_action_send_result_request+0x5e>
 8010342:	460d      	mov	r5, r1
 8010344:	4616      	mov	r6, r2
 8010346:	f7fd fe63 	bl	800e010 <rcl_client_is_valid>
 801034a:	b1f8      	cbz	r0, 801038c <rcl_action_send_result_request+0x54>
 801034c:	6820      	ldr	r0, [r4, #0]
 801034e:	3004      	adds	r0, #4
 8010350:	f7fd fe5e 	bl	800e010 <rcl_client_is_valid>
 8010354:	b1d0      	cbz	r0, 801038c <rcl_action_send_result_request+0x54>
 8010356:	6820      	ldr	r0, [r4, #0]
 8010358:	3008      	adds	r0, #8
 801035a:	f7fd fe59 	bl	800e010 <rcl_client_is_valid>
 801035e:	b1a8      	cbz	r0, 801038c <rcl_action_send_result_request+0x54>
 8010360:	6820      	ldr	r0, [r4, #0]
 8010362:	300c      	adds	r0, #12
 8010364:	f7fe fffe 	bl	800f364 <rcl_subscription_is_valid>
 8010368:	b180      	cbz	r0, 801038c <rcl_action_send_result_request+0x54>
 801036a:	6820      	ldr	r0, [r4, #0]
 801036c:	3010      	adds	r0, #16
 801036e:	f7fe fff9 	bl	800f364 <rcl_subscription_is_valid>
 8010372:	b158      	cbz	r0, 801038c <rcl_action_send_result_request+0x54>
 8010374:	b195      	cbz	r5, 801039c <rcl_action_send_result_request+0x64>
 8010376:	b18e      	cbz	r6, 801039c <rcl_action_send_result_request+0x64>
 8010378:	6820      	ldr	r0, [r4, #0]
 801037a:	4632      	mov	r2, r6
 801037c:	4629      	mov	r1, r5
 801037e:	3008      	adds	r0, #8
 8010380:	f7fd fd8c 	bl	800de9c <rcl_send_request>
 8010384:	3800      	subs	r0, #0
 8010386:	bf18      	it	ne
 8010388:	2001      	movne	r0, #1
 801038a:	bd70      	pop	{r4, r5, r6, pc}
 801038c:	f7fa f82c 	bl	800a3e8 <rcutils_reset_error>
 8010390:	f640 0036 	movw	r0, #2102	; 0x836
 8010394:	bd70      	pop	{r4, r5, r6, pc}
 8010396:	f640 0036 	movw	r0, #2102	; 0x836
 801039a:	bd70      	pop	{r4, r5, r6, pc}
 801039c:	200b      	movs	r0, #11
 801039e:	bd70      	pop	{r4, r5, r6, pc}
 80103a0:	f640 0036 	movw	r0, #2102	; 0x836
 80103a4:	4770      	bx	lr
 80103a6:	bf00      	nop

080103a8 <rcl_action_take_result_response>:
 80103a8:	2800      	cmp	r0, #0
 80103aa:	d03a      	beq.n	8010422 <rcl_action_take_result_response+0x7a>
 80103ac:	b570      	push	{r4, r5, r6, lr}
 80103ae:	4604      	mov	r4, r0
 80103b0:	6800      	ldr	r0, [r0, #0]
 80103b2:	b388      	cbz	r0, 8010418 <rcl_action_take_result_response+0x70>
 80103b4:	460d      	mov	r5, r1
 80103b6:	4616      	mov	r6, r2
 80103b8:	f7fd fe2a 	bl	800e010 <rcl_client_is_valid>
 80103bc:	b338      	cbz	r0, 801040e <rcl_action_take_result_response+0x66>
 80103be:	6820      	ldr	r0, [r4, #0]
 80103c0:	3004      	adds	r0, #4
 80103c2:	f7fd fe25 	bl	800e010 <rcl_client_is_valid>
 80103c6:	b310      	cbz	r0, 801040e <rcl_action_take_result_response+0x66>
 80103c8:	6820      	ldr	r0, [r4, #0]
 80103ca:	3008      	adds	r0, #8
 80103cc:	f7fd fe20 	bl	800e010 <rcl_client_is_valid>
 80103d0:	b1e8      	cbz	r0, 801040e <rcl_action_take_result_response+0x66>
 80103d2:	6820      	ldr	r0, [r4, #0]
 80103d4:	300c      	adds	r0, #12
 80103d6:	f7fe ffc5 	bl	800f364 <rcl_subscription_is_valid>
 80103da:	b1c0      	cbz	r0, 801040e <rcl_action_take_result_response+0x66>
 80103dc:	6820      	ldr	r0, [r4, #0]
 80103de:	3010      	adds	r0, #16
 80103e0:	f7fe ffc0 	bl	800f364 <rcl_subscription_is_valid>
 80103e4:	b198      	cbz	r0, 801040e <rcl_action_take_result_response+0x66>
 80103e6:	b1d5      	cbz	r5, 801041e <rcl_action_take_result_response+0x76>
 80103e8:	b1ce      	cbz	r6, 801041e <rcl_action_take_result_response+0x76>
 80103ea:	6820      	ldr	r0, [r4, #0]
 80103ec:	4632      	mov	r2, r6
 80103ee:	4629      	mov	r1, r5
 80103f0:	3008      	adds	r0, #8
 80103f2:	f7fd fda5 	bl	800df40 <rcl_take_response>
 80103f6:	b148      	cbz	r0, 801040c <rcl_action_take_result_response+0x64>
 80103f8:	280a      	cmp	r0, #10
 80103fa:	d007      	beq.n	801040c <rcl_action_take_result_response+0x64>
 80103fc:	f240 12f5 	movw	r2, #501	; 0x1f5
 8010400:	f640 0337 	movw	r3, #2103	; 0x837
 8010404:	4290      	cmp	r0, r2
 8010406:	bf0c      	ite	eq
 8010408:	4618      	moveq	r0, r3
 801040a:	2001      	movne	r0, #1
 801040c:	bd70      	pop	{r4, r5, r6, pc}
 801040e:	f7f9 ffeb 	bl	800a3e8 <rcutils_reset_error>
 8010412:	f640 0036 	movw	r0, #2102	; 0x836
 8010416:	bd70      	pop	{r4, r5, r6, pc}
 8010418:	f640 0036 	movw	r0, #2102	; 0x836
 801041c:	bd70      	pop	{r4, r5, r6, pc}
 801041e:	200b      	movs	r0, #11
 8010420:	bd70      	pop	{r4, r5, r6, pc}
 8010422:	f640 0036 	movw	r0, #2102	; 0x836
 8010426:	4770      	bx	lr

08010428 <rcl_action_take_cancel_response>:
 8010428:	2800      	cmp	r0, #0
 801042a:	d03a      	beq.n	80104a2 <rcl_action_take_cancel_response+0x7a>
 801042c:	b570      	push	{r4, r5, r6, lr}
 801042e:	4604      	mov	r4, r0
 8010430:	6800      	ldr	r0, [r0, #0]
 8010432:	b388      	cbz	r0, 8010498 <rcl_action_take_cancel_response+0x70>
 8010434:	460d      	mov	r5, r1
 8010436:	4616      	mov	r6, r2
 8010438:	f7fd fdea 	bl	800e010 <rcl_client_is_valid>
 801043c:	b338      	cbz	r0, 801048e <rcl_action_take_cancel_response+0x66>
 801043e:	6820      	ldr	r0, [r4, #0]
 8010440:	3004      	adds	r0, #4
 8010442:	f7fd fde5 	bl	800e010 <rcl_client_is_valid>
 8010446:	b310      	cbz	r0, 801048e <rcl_action_take_cancel_response+0x66>
 8010448:	6820      	ldr	r0, [r4, #0]
 801044a:	3008      	adds	r0, #8
 801044c:	f7fd fde0 	bl	800e010 <rcl_client_is_valid>
 8010450:	b1e8      	cbz	r0, 801048e <rcl_action_take_cancel_response+0x66>
 8010452:	6820      	ldr	r0, [r4, #0]
 8010454:	300c      	adds	r0, #12
 8010456:	f7fe ff85 	bl	800f364 <rcl_subscription_is_valid>
 801045a:	b1c0      	cbz	r0, 801048e <rcl_action_take_cancel_response+0x66>
 801045c:	6820      	ldr	r0, [r4, #0]
 801045e:	3010      	adds	r0, #16
 8010460:	f7fe ff80 	bl	800f364 <rcl_subscription_is_valid>
 8010464:	b198      	cbz	r0, 801048e <rcl_action_take_cancel_response+0x66>
 8010466:	b1d5      	cbz	r5, 801049e <rcl_action_take_cancel_response+0x76>
 8010468:	b1ce      	cbz	r6, 801049e <rcl_action_take_cancel_response+0x76>
 801046a:	6820      	ldr	r0, [r4, #0]
 801046c:	4632      	mov	r2, r6
 801046e:	4629      	mov	r1, r5
 8010470:	3004      	adds	r0, #4
 8010472:	f7fd fd65 	bl	800df40 <rcl_take_response>
 8010476:	b148      	cbz	r0, 801048c <rcl_action_take_cancel_response+0x64>
 8010478:	280a      	cmp	r0, #10
 801047a:	d007      	beq.n	801048c <rcl_action_take_cancel_response+0x64>
 801047c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8010480:	f640 0337 	movw	r3, #2103	; 0x837
 8010484:	4290      	cmp	r0, r2
 8010486:	bf0c      	ite	eq
 8010488:	4618      	moveq	r0, r3
 801048a:	2001      	movne	r0, #1
 801048c:	bd70      	pop	{r4, r5, r6, pc}
 801048e:	f7f9 ffab 	bl	800a3e8 <rcutils_reset_error>
 8010492:	f640 0036 	movw	r0, #2102	; 0x836
 8010496:	bd70      	pop	{r4, r5, r6, pc}
 8010498:	f640 0036 	movw	r0, #2102	; 0x836
 801049c:	bd70      	pop	{r4, r5, r6, pc}
 801049e:	200b      	movs	r0, #11
 80104a0:	bd70      	pop	{r4, r5, r6, pc}
 80104a2:	f640 0036 	movw	r0, #2102	; 0x836
 80104a6:	4770      	bx	lr

080104a8 <rcl_action_take_feedback>:
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d038      	beq.n	801051e <rcl_action_take_feedback+0x76>
 80104ac:	b530      	push	{r4, r5, lr}
 80104ae:	4604      	mov	r4, r0
 80104b0:	6800      	ldr	r0, [r0, #0]
 80104b2:	b08f      	sub	sp, #60	; 0x3c
 80104b4:	b378      	cbz	r0, 8010516 <rcl_action_take_feedback+0x6e>
 80104b6:	460d      	mov	r5, r1
 80104b8:	f7fd fdaa 	bl	800e010 <rcl_client_is_valid>
 80104bc:	b328      	cbz	r0, 801050a <rcl_action_take_feedback+0x62>
 80104be:	6820      	ldr	r0, [r4, #0]
 80104c0:	3004      	adds	r0, #4
 80104c2:	f7fd fda5 	bl	800e010 <rcl_client_is_valid>
 80104c6:	b300      	cbz	r0, 801050a <rcl_action_take_feedback+0x62>
 80104c8:	6820      	ldr	r0, [r4, #0]
 80104ca:	3008      	adds	r0, #8
 80104cc:	f7fd fda0 	bl	800e010 <rcl_client_is_valid>
 80104d0:	b1d8      	cbz	r0, 801050a <rcl_action_take_feedback+0x62>
 80104d2:	6820      	ldr	r0, [r4, #0]
 80104d4:	300c      	adds	r0, #12
 80104d6:	f7fe ff45 	bl	800f364 <rcl_subscription_is_valid>
 80104da:	b1b0      	cbz	r0, 801050a <rcl_action_take_feedback+0x62>
 80104dc:	6820      	ldr	r0, [r4, #0]
 80104de:	3010      	adds	r0, #16
 80104e0:	f7fe ff40 	bl	800f364 <rcl_subscription_is_valid>
 80104e4:	b188      	cbz	r0, 801050a <rcl_action_take_feedback+0x62>
 80104e6:	b1ed      	cbz	r5, 8010524 <rcl_action_take_feedback+0x7c>
 80104e8:	6820      	ldr	r0, [r4, #0]
 80104ea:	2300      	movs	r3, #0
 80104ec:	466a      	mov	r2, sp
 80104ee:	4629      	mov	r1, r5
 80104f0:	300c      	adds	r0, #12
 80104f2:	f7fe fed9 	bl	800f2a8 <rcl_take>
 80104f6:	b160      	cbz	r0, 8010512 <rcl_action_take_feedback+0x6a>
 80104f8:	f240 1391 	movw	r3, #401	; 0x191
 80104fc:	4298      	cmp	r0, r3
 80104fe:	d014      	beq.n	801052a <rcl_action_take_feedback+0x82>
 8010500:	280a      	cmp	r0, #10
 8010502:	bf18      	it	ne
 8010504:	2001      	movne	r0, #1
 8010506:	b00f      	add	sp, #60	; 0x3c
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	f7f9 ff6d 	bl	800a3e8 <rcutils_reset_error>
 801050e:	f640 0036 	movw	r0, #2102	; 0x836
 8010512:	b00f      	add	sp, #60	; 0x3c
 8010514:	bd30      	pop	{r4, r5, pc}
 8010516:	f640 0036 	movw	r0, #2102	; 0x836
 801051a:	b00f      	add	sp, #60	; 0x3c
 801051c:	bd30      	pop	{r4, r5, pc}
 801051e:	f640 0036 	movw	r0, #2102	; 0x836
 8010522:	4770      	bx	lr
 8010524:	200b      	movs	r0, #11
 8010526:	b00f      	add	sp, #60	; 0x3c
 8010528:	bd30      	pop	{r4, r5, pc}
 801052a:	f640 0037 	movw	r0, #2103	; 0x837
 801052e:	e7f0      	b.n	8010512 <rcl_action_take_feedback+0x6a>

08010530 <rcl_action_wait_set_add_action_client>:
 8010530:	2800      	cmp	r0, #0
 8010532:	d048      	beq.n	80105c6 <rcl_action_wait_set_add_action_client+0x96>
 8010534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010536:	460c      	mov	r4, r1
 8010538:	2900      	cmp	r1, #0
 801053a:	d03c      	beq.n	80105b6 <rcl_action_wait_set_add_action_client+0x86>
 801053c:	4605      	mov	r5, r0
 801053e:	6808      	ldr	r0, [r1, #0]
 8010540:	2800      	cmp	r0, #0
 8010542:	d038      	beq.n	80105b6 <rcl_action_wait_set_add_action_client+0x86>
 8010544:	4617      	mov	r7, r2
 8010546:	461e      	mov	r6, r3
 8010548:	f7fd fd62 	bl	800e010 <rcl_client_is_valid>
 801054c:	b3b0      	cbz	r0, 80105bc <rcl_action_wait_set_add_action_client+0x8c>
 801054e:	6820      	ldr	r0, [r4, #0]
 8010550:	3004      	adds	r0, #4
 8010552:	f7fd fd5d 	bl	800e010 <rcl_client_is_valid>
 8010556:	b388      	cbz	r0, 80105bc <rcl_action_wait_set_add_action_client+0x8c>
 8010558:	6820      	ldr	r0, [r4, #0]
 801055a:	3008      	adds	r0, #8
 801055c:	f7fd fd58 	bl	800e010 <rcl_client_is_valid>
 8010560:	b360      	cbz	r0, 80105bc <rcl_action_wait_set_add_action_client+0x8c>
 8010562:	6820      	ldr	r0, [r4, #0]
 8010564:	300c      	adds	r0, #12
 8010566:	f7fe fefd 	bl	800f364 <rcl_subscription_is_valid>
 801056a:	b338      	cbz	r0, 80105bc <rcl_action_wait_set_add_action_client+0x8c>
 801056c:	6820      	ldr	r0, [r4, #0]
 801056e:	3010      	adds	r0, #16
 8010570:	f7fe fef8 	bl	800f364 <rcl_subscription_is_valid>
 8010574:	b310      	cbz	r0, 80105bc <rcl_action_wait_set_add_action_client+0x8c>
 8010576:	6821      	ldr	r1, [r4, #0]
 8010578:	4628      	mov	r0, r5
 801057a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801057e:	f7ff fccd 	bl	800ff1c <rcl_wait_set_add_client>
 8010582:	b9b8      	cbnz	r0, 80105b4 <rcl_action_wait_set_add_action_client+0x84>
 8010584:	6821      	ldr	r1, [r4, #0]
 8010586:	4628      	mov	r0, r5
 8010588:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801058c:	3104      	adds	r1, #4
 801058e:	f7ff fcc5 	bl	800ff1c <rcl_wait_set_add_client>
 8010592:	b978      	cbnz	r0, 80105b4 <rcl_action_wait_set_add_action_client+0x84>
 8010594:	6821      	ldr	r1, [r4, #0]
 8010596:	4628      	mov	r0, r5
 8010598:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801059c:	3108      	adds	r1, #8
 801059e:	f7ff fcbd 	bl	800ff1c <rcl_wait_set_add_client>
 80105a2:	b938      	cbnz	r0, 80105b4 <rcl_action_wait_set_add_action_client+0x84>
 80105a4:	6821      	ldr	r1, [r4, #0]
 80105a6:	4628      	mov	r0, r5
 80105a8:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 80105ac:	310c      	adds	r1, #12
 80105ae:	f7ff f96d 	bl	800f88c <rcl_wait_set_add_subscription>
 80105b2:	b158      	cbz	r0, 80105cc <rcl_action_wait_set_add_action_client+0x9c>
 80105b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105b6:	f640 0036 	movw	r0, #2102	; 0x836
 80105ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105bc:	f7f9 ff14 	bl	800a3e8 <rcutils_reset_error>
 80105c0:	f640 0036 	movw	r0, #2102	; 0x836
 80105c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105c6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80105ca:	4770      	bx	lr
 80105cc:	6821      	ldr	r1, [r4, #0]
 80105ce:	4628      	mov	r0, r5
 80105d0:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 80105d4:	3110      	adds	r1, #16
 80105d6:	f7ff f959 	bl	800f88c <rcl_wait_set_add_subscription>
 80105da:	2800      	cmp	r0, #0
 80105dc:	d1ea      	bne.n	80105b4 <rcl_action_wait_set_add_action_client+0x84>
 80105de:	b11f      	cbz	r7, 80105e8 <rcl_action_wait_set_add_action_client+0xb8>
 80105e0:	6823      	ldr	r3, [r4, #0]
 80105e2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80105e6:	603b      	str	r3, [r7, #0]
 80105e8:	2e00      	cmp	r6, #0
 80105ea:	d0e3      	beq.n	80105b4 <rcl_action_wait_set_add_action_client+0x84>
 80105ec:	6823      	ldr	r3, [r4, #0]
 80105ee:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80105f2:	6033      	str	r3, [r6, #0]
 80105f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105f6:	bf00      	nop

080105f8 <rcl_action_client_wait_set_get_entities_ready>:
 80105f8:	2800      	cmp	r0, #0
 80105fa:	f000 808d 	beq.w	8010718 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80105fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010602:	460c      	mov	r4, r1
 8010604:	2900      	cmp	r1, #0
 8010606:	d077      	beq.n	80106f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8010608:	4605      	mov	r5, r0
 801060a:	6808      	ldr	r0, [r1, #0]
 801060c:	2800      	cmp	r0, #0
 801060e:	d073      	beq.n	80106f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8010610:	4616      	mov	r6, r2
 8010612:	461f      	mov	r7, r3
 8010614:	f7fd fcfc 	bl	800e010 <rcl_client_is_valid>
 8010618:	2800      	cmp	r0, #0
 801061a:	d071      	beq.n	8010700 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801061c:	6820      	ldr	r0, [r4, #0]
 801061e:	3004      	adds	r0, #4
 8010620:	f7fd fcf6 	bl	800e010 <rcl_client_is_valid>
 8010624:	2800      	cmp	r0, #0
 8010626:	d06b      	beq.n	8010700 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010628:	6820      	ldr	r0, [r4, #0]
 801062a:	3008      	adds	r0, #8
 801062c:	f7fd fcf0 	bl	800e010 <rcl_client_is_valid>
 8010630:	2800      	cmp	r0, #0
 8010632:	d065      	beq.n	8010700 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010634:	6820      	ldr	r0, [r4, #0]
 8010636:	300c      	adds	r0, #12
 8010638:	f7fe fe94 	bl	800f364 <rcl_subscription_is_valid>
 801063c:	2800      	cmp	r0, #0
 801063e:	d05f      	beq.n	8010700 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010640:	6820      	ldr	r0, [r4, #0]
 8010642:	3010      	adds	r0, #16
 8010644:	f7fe fe8e 	bl	800f364 <rcl_subscription_is_valid>
 8010648:	2800      	cmp	r0, #0
 801064a:	d059      	beq.n	8010700 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801064c:	2e00      	cmp	r6, #0
 801064e:	d060      	beq.n	8010712 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010650:	2f00      	cmp	r7, #0
 8010652:	d05e      	beq.n	8010712 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010654:	9b06      	ldr	r3, [sp, #24]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d05b      	beq.n	8010712 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801065a:	9b07      	ldr	r3, [sp, #28]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d058      	beq.n	8010712 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010660:	9b08      	ldr	r3, [sp, #32]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d055      	beq.n	8010712 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010666:	6823      	ldr	r3, [r4, #0]
 8010668:	686a      	ldr	r2, [r5, #4]
 801066a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 801066e:	428a      	cmp	r2, r1
 8010670:	d94c      	bls.n	801070c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010672:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 8010676:	4282      	cmp	r2, r0
 8010678:	d948      	bls.n	801070c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801067a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
 801067e:	69ea      	ldr	r2, [r5, #28]
 8010680:	42a2      	cmp	r2, r4
 8010682:	d943      	bls.n	801070c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010684:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	; 0x1c8
 8010688:	4562      	cmp	r2, ip
 801068a:	d93f      	bls.n	801070c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801068c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	; 0x1cc
 8010690:	4572      	cmp	r2, lr
 8010692:	d93b      	bls.n	801070c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010694:	69aa      	ldr	r2, [r5, #24]
 8010696:	682d      	ldr	r5, [r5, #0]
 8010698:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801069c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80106a0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80106a4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80106a8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80106ac:	f103 0c0c 	add.w	ip, r3, #12
 80106b0:	eba5 050c 	sub.w	r5, r5, ip
 80106b4:	fab5 f585 	clz	r5, r5
 80106b8:	096d      	lsrs	r5, r5, #5
 80106ba:	7035      	strb	r5, [r6, #0]
 80106bc:	f103 0510 	add.w	r5, r3, #16
 80106c0:	1b64      	subs	r4, r4, r5
 80106c2:	fab4 f484 	clz	r4, r4
 80106c6:	0964      	lsrs	r4, r4, #5
 80106c8:	703c      	strb	r4, [r7, #0]
 80106ca:	eba3 0008 	sub.w	r0, r3, r8
 80106ce:	1d1c      	adds	r4, r3, #4
 80106d0:	3308      	adds	r3, #8
 80106d2:	1ad3      	subs	r3, r2, r3
 80106d4:	fab0 f080 	clz	r0, r0
 80106d8:	9a06      	ldr	r2, [sp, #24]
 80106da:	0940      	lsrs	r0, r0, #5
 80106dc:	1b09      	subs	r1, r1, r4
 80106de:	7010      	strb	r0, [r2, #0]
 80106e0:	fab1 f181 	clz	r1, r1
 80106e4:	9a07      	ldr	r2, [sp, #28]
 80106e6:	0949      	lsrs	r1, r1, #5
 80106e8:	7011      	strb	r1, [r2, #0]
 80106ea:	fab3 f383 	clz	r3, r3
 80106ee:	9a08      	ldr	r2, [sp, #32]
 80106f0:	095b      	lsrs	r3, r3, #5
 80106f2:	2000      	movs	r0, #0
 80106f4:	7013      	strb	r3, [r2, #0]
 80106f6:	e001      	b.n	80106fc <rcl_action_client_wait_set_get_entities_ready+0x104>
 80106f8:	f640 0036 	movw	r0, #2102	; 0x836
 80106fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010700:	f7f9 fe72 	bl	800a3e8 <rcutils_reset_error>
 8010704:	f640 0036 	movw	r0, #2102	; 0x836
 8010708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801070c:	2001      	movs	r0, #1
 801070e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010712:	200b      	movs	r0, #11
 8010714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010718:	f44f 7061 	mov.w	r0, #900	; 0x384
 801071c:	4770      	bx	lr
 801071e:	bf00      	nop

08010720 <rcl_action_take_goal_request>:
 8010720:	2800      	cmp	r0, #0
 8010722:	d039      	beq.n	8010798 <rcl_action_take_goal_request+0x78>
 8010724:	b570      	push	{r4, r5, r6, lr}
 8010726:	4604      	mov	r4, r0
 8010728:	6800      	ldr	r0, [r0, #0]
 801072a:	b380      	cbz	r0, 801078e <rcl_action_take_goal_request+0x6e>
 801072c:	460d      	mov	r5, r1
 801072e:	4616      	mov	r6, r2
 8010730:	f7fe fc36 	bl	800efa0 <rcl_service_is_valid>
 8010734:	b330      	cbz	r0, 8010784 <rcl_action_take_goal_request+0x64>
 8010736:	6820      	ldr	r0, [r4, #0]
 8010738:	3004      	adds	r0, #4
 801073a:	f7fe fc31 	bl	800efa0 <rcl_service_is_valid>
 801073e:	b308      	cbz	r0, 8010784 <rcl_action_take_goal_request+0x64>
 8010740:	6820      	ldr	r0, [r4, #0]
 8010742:	3008      	adds	r0, #8
 8010744:	f7fe fc2c 	bl	800efa0 <rcl_service_is_valid>
 8010748:	b1e0      	cbz	r0, 8010784 <rcl_action_take_goal_request+0x64>
 801074a:	6820      	ldr	r0, [r4, #0]
 801074c:	300c      	adds	r0, #12
 801074e:	f7f8 fb53 	bl	8008df8 <rcl_publisher_is_valid>
 8010752:	b1b8      	cbz	r0, 8010784 <rcl_action_take_goal_request+0x64>
 8010754:	6820      	ldr	r0, [r4, #0]
 8010756:	3010      	adds	r0, #16
 8010758:	f7f8 fb4e 	bl	8008df8 <rcl_publisher_is_valid>
 801075c:	b190      	cbz	r0, 8010784 <rcl_action_take_goal_request+0x64>
 801075e:	b1cd      	cbz	r5, 8010794 <rcl_action_take_goal_request+0x74>
 8010760:	b1c6      	cbz	r6, 8010794 <rcl_action_take_goal_request+0x74>
 8010762:	6820      	ldr	r0, [r4, #0]
 8010764:	4632      	mov	r2, r6
 8010766:	4629      	mov	r1, r5
 8010768:	f7fe fb9a 	bl	800eea0 <rcl_take_request>
 801076c:	b148      	cbz	r0, 8010782 <rcl_action_take_goal_request+0x62>
 801076e:	280a      	cmp	r0, #10
 8010770:	d007      	beq.n	8010782 <rcl_action_take_goal_request+0x62>
 8010772:	f240 2259 	movw	r2, #601	; 0x259
 8010776:	f640 0399 	movw	r3, #2201	; 0x899
 801077a:	4290      	cmp	r0, r2
 801077c:	bf0c      	ite	eq
 801077e:	4618      	moveq	r0, r3
 8010780:	2001      	movne	r0, #1
 8010782:	bd70      	pop	{r4, r5, r6, pc}
 8010784:	f7f9 fe30 	bl	800a3e8 <rcutils_reset_error>
 8010788:	f640 0098 	movw	r0, #2200	; 0x898
 801078c:	bd70      	pop	{r4, r5, r6, pc}
 801078e:	f640 0098 	movw	r0, #2200	; 0x898
 8010792:	bd70      	pop	{r4, r5, r6, pc}
 8010794:	200b      	movs	r0, #11
 8010796:	bd70      	pop	{r4, r5, r6, pc}
 8010798:	f640 0098 	movw	r0, #2200	; 0x898
 801079c:	4770      	bx	lr
 801079e:	bf00      	nop

080107a0 <rcl_action_send_goal_response>:
 80107a0:	b390      	cbz	r0, 8010808 <rcl_action_send_goal_response+0x68>
 80107a2:	b570      	push	{r4, r5, r6, lr}
 80107a4:	4604      	mov	r4, r0
 80107a6:	6800      	ldr	r0, [r0, #0]
 80107a8:	b348      	cbz	r0, 80107fe <rcl_action_send_goal_response+0x5e>
 80107aa:	460d      	mov	r5, r1
 80107ac:	4616      	mov	r6, r2
 80107ae:	f7fe fbf7 	bl	800efa0 <rcl_service_is_valid>
 80107b2:	b1f8      	cbz	r0, 80107f4 <rcl_action_send_goal_response+0x54>
 80107b4:	6820      	ldr	r0, [r4, #0]
 80107b6:	3004      	adds	r0, #4
 80107b8:	f7fe fbf2 	bl	800efa0 <rcl_service_is_valid>
 80107bc:	b1d0      	cbz	r0, 80107f4 <rcl_action_send_goal_response+0x54>
 80107be:	6820      	ldr	r0, [r4, #0]
 80107c0:	3008      	adds	r0, #8
 80107c2:	f7fe fbed 	bl	800efa0 <rcl_service_is_valid>
 80107c6:	b1a8      	cbz	r0, 80107f4 <rcl_action_send_goal_response+0x54>
 80107c8:	6820      	ldr	r0, [r4, #0]
 80107ca:	300c      	adds	r0, #12
 80107cc:	f7f8 fb14 	bl	8008df8 <rcl_publisher_is_valid>
 80107d0:	b180      	cbz	r0, 80107f4 <rcl_action_send_goal_response+0x54>
 80107d2:	6820      	ldr	r0, [r4, #0]
 80107d4:	3010      	adds	r0, #16
 80107d6:	f7f8 fb0f 	bl	8008df8 <rcl_publisher_is_valid>
 80107da:	b158      	cbz	r0, 80107f4 <rcl_action_send_goal_response+0x54>
 80107dc:	b195      	cbz	r5, 8010804 <rcl_action_send_goal_response+0x64>
 80107de:	b18e      	cbz	r6, 8010804 <rcl_action_send_goal_response+0x64>
 80107e0:	6820      	ldr	r0, [r4, #0]
 80107e2:	4632      	mov	r2, r6
 80107e4:	4629      	mov	r1, r5
 80107e6:	f7fe fbab 	bl	800ef40 <rcl_send_response>
 80107ea:	b110      	cbz	r0, 80107f2 <rcl_action_send_goal_response+0x52>
 80107ec:	2802      	cmp	r0, #2
 80107ee:	bf18      	it	ne
 80107f0:	2001      	movne	r0, #1
 80107f2:	bd70      	pop	{r4, r5, r6, pc}
 80107f4:	f7f9 fdf8 	bl	800a3e8 <rcutils_reset_error>
 80107f8:	f640 0098 	movw	r0, #2200	; 0x898
 80107fc:	bd70      	pop	{r4, r5, r6, pc}
 80107fe:	f640 0098 	movw	r0, #2200	; 0x898
 8010802:	bd70      	pop	{r4, r5, r6, pc}
 8010804:	200b      	movs	r0, #11
 8010806:	bd70      	pop	{r4, r5, r6, pc}
 8010808:	f640 0098 	movw	r0, #2200	; 0x898
 801080c:	4770      	bx	lr
 801080e:	bf00      	nop

08010810 <rcl_action_take_result_request>:
 8010810:	2800      	cmp	r0, #0
 8010812:	d03a      	beq.n	801088a <rcl_action_take_result_request+0x7a>
 8010814:	b570      	push	{r4, r5, r6, lr}
 8010816:	4604      	mov	r4, r0
 8010818:	6800      	ldr	r0, [r0, #0]
 801081a:	b388      	cbz	r0, 8010880 <rcl_action_take_result_request+0x70>
 801081c:	460d      	mov	r5, r1
 801081e:	4616      	mov	r6, r2
 8010820:	f7fe fbbe 	bl	800efa0 <rcl_service_is_valid>
 8010824:	b338      	cbz	r0, 8010876 <rcl_action_take_result_request+0x66>
 8010826:	6820      	ldr	r0, [r4, #0]
 8010828:	3004      	adds	r0, #4
 801082a:	f7fe fbb9 	bl	800efa0 <rcl_service_is_valid>
 801082e:	b310      	cbz	r0, 8010876 <rcl_action_take_result_request+0x66>
 8010830:	6820      	ldr	r0, [r4, #0]
 8010832:	3008      	adds	r0, #8
 8010834:	f7fe fbb4 	bl	800efa0 <rcl_service_is_valid>
 8010838:	b1e8      	cbz	r0, 8010876 <rcl_action_take_result_request+0x66>
 801083a:	6820      	ldr	r0, [r4, #0]
 801083c:	300c      	adds	r0, #12
 801083e:	f7f8 fadb 	bl	8008df8 <rcl_publisher_is_valid>
 8010842:	b1c0      	cbz	r0, 8010876 <rcl_action_take_result_request+0x66>
 8010844:	6820      	ldr	r0, [r4, #0]
 8010846:	3010      	adds	r0, #16
 8010848:	f7f8 fad6 	bl	8008df8 <rcl_publisher_is_valid>
 801084c:	b198      	cbz	r0, 8010876 <rcl_action_take_result_request+0x66>
 801084e:	b1d5      	cbz	r5, 8010886 <rcl_action_take_result_request+0x76>
 8010850:	b1ce      	cbz	r6, 8010886 <rcl_action_take_result_request+0x76>
 8010852:	6820      	ldr	r0, [r4, #0]
 8010854:	4632      	mov	r2, r6
 8010856:	4629      	mov	r1, r5
 8010858:	3008      	adds	r0, #8
 801085a:	f7fe fb21 	bl	800eea0 <rcl_take_request>
 801085e:	b148      	cbz	r0, 8010874 <rcl_action_take_result_request+0x64>
 8010860:	280a      	cmp	r0, #10
 8010862:	d007      	beq.n	8010874 <rcl_action_take_result_request+0x64>
 8010864:	f240 2259 	movw	r2, #601	; 0x259
 8010868:	f640 0399 	movw	r3, #2201	; 0x899
 801086c:	4290      	cmp	r0, r2
 801086e:	bf0c      	ite	eq
 8010870:	4618      	moveq	r0, r3
 8010872:	2001      	movne	r0, #1
 8010874:	bd70      	pop	{r4, r5, r6, pc}
 8010876:	f7f9 fdb7 	bl	800a3e8 <rcutils_reset_error>
 801087a:	f640 0098 	movw	r0, #2200	; 0x898
 801087e:	bd70      	pop	{r4, r5, r6, pc}
 8010880:	f640 0098 	movw	r0, #2200	; 0x898
 8010884:	bd70      	pop	{r4, r5, r6, pc}
 8010886:	200b      	movs	r0, #11
 8010888:	bd70      	pop	{r4, r5, r6, pc}
 801088a:	f640 0098 	movw	r0, #2200	; 0x898
 801088e:	4770      	bx	lr

08010890 <rcl_action_take_cancel_request>:
 8010890:	2800      	cmp	r0, #0
 8010892:	d03a      	beq.n	801090a <rcl_action_take_cancel_request+0x7a>
 8010894:	b570      	push	{r4, r5, r6, lr}
 8010896:	4604      	mov	r4, r0
 8010898:	6800      	ldr	r0, [r0, #0]
 801089a:	b388      	cbz	r0, 8010900 <rcl_action_take_cancel_request+0x70>
 801089c:	460d      	mov	r5, r1
 801089e:	4616      	mov	r6, r2
 80108a0:	f7fe fb7e 	bl	800efa0 <rcl_service_is_valid>
 80108a4:	b338      	cbz	r0, 80108f6 <rcl_action_take_cancel_request+0x66>
 80108a6:	6820      	ldr	r0, [r4, #0]
 80108a8:	3004      	adds	r0, #4
 80108aa:	f7fe fb79 	bl	800efa0 <rcl_service_is_valid>
 80108ae:	b310      	cbz	r0, 80108f6 <rcl_action_take_cancel_request+0x66>
 80108b0:	6820      	ldr	r0, [r4, #0]
 80108b2:	3008      	adds	r0, #8
 80108b4:	f7fe fb74 	bl	800efa0 <rcl_service_is_valid>
 80108b8:	b1e8      	cbz	r0, 80108f6 <rcl_action_take_cancel_request+0x66>
 80108ba:	6820      	ldr	r0, [r4, #0]
 80108bc:	300c      	adds	r0, #12
 80108be:	f7f8 fa9b 	bl	8008df8 <rcl_publisher_is_valid>
 80108c2:	b1c0      	cbz	r0, 80108f6 <rcl_action_take_cancel_request+0x66>
 80108c4:	6820      	ldr	r0, [r4, #0]
 80108c6:	3010      	adds	r0, #16
 80108c8:	f7f8 fa96 	bl	8008df8 <rcl_publisher_is_valid>
 80108cc:	b198      	cbz	r0, 80108f6 <rcl_action_take_cancel_request+0x66>
 80108ce:	b1d5      	cbz	r5, 8010906 <rcl_action_take_cancel_request+0x76>
 80108d0:	b1ce      	cbz	r6, 8010906 <rcl_action_take_cancel_request+0x76>
 80108d2:	6820      	ldr	r0, [r4, #0]
 80108d4:	4632      	mov	r2, r6
 80108d6:	4629      	mov	r1, r5
 80108d8:	3004      	adds	r0, #4
 80108da:	f7fe fae1 	bl	800eea0 <rcl_take_request>
 80108de:	b148      	cbz	r0, 80108f4 <rcl_action_take_cancel_request+0x64>
 80108e0:	280a      	cmp	r0, #10
 80108e2:	d007      	beq.n	80108f4 <rcl_action_take_cancel_request+0x64>
 80108e4:	f240 2259 	movw	r2, #601	; 0x259
 80108e8:	f640 0399 	movw	r3, #2201	; 0x899
 80108ec:	4290      	cmp	r0, r2
 80108ee:	bf0c      	ite	eq
 80108f0:	4618      	moveq	r0, r3
 80108f2:	2001      	movne	r0, #1
 80108f4:	bd70      	pop	{r4, r5, r6, pc}
 80108f6:	f7f9 fd77 	bl	800a3e8 <rcutils_reset_error>
 80108fa:	f640 0098 	movw	r0, #2200	; 0x898
 80108fe:	bd70      	pop	{r4, r5, r6, pc}
 8010900:	f640 0098 	movw	r0, #2200	; 0x898
 8010904:	bd70      	pop	{r4, r5, r6, pc}
 8010906:	200b      	movs	r0, #11
 8010908:	bd70      	pop	{r4, r5, r6, pc}
 801090a:	f640 0098 	movw	r0, #2200	; 0x898
 801090e:	4770      	bx	lr

08010910 <rcl_action_send_cancel_response>:
 8010910:	b398      	cbz	r0, 801097a <rcl_action_send_cancel_response+0x6a>
 8010912:	b570      	push	{r4, r5, r6, lr}
 8010914:	4604      	mov	r4, r0
 8010916:	6800      	ldr	r0, [r0, #0]
 8010918:	b350      	cbz	r0, 8010970 <rcl_action_send_cancel_response+0x60>
 801091a:	460d      	mov	r5, r1
 801091c:	4616      	mov	r6, r2
 801091e:	f7fe fb3f 	bl	800efa0 <rcl_service_is_valid>
 8010922:	b300      	cbz	r0, 8010966 <rcl_action_send_cancel_response+0x56>
 8010924:	6820      	ldr	r0, [r4, #0]
 8010926:	3004      	adds	r0, #4
 8010928:	f7fe fb3a 	bl	800efa0 <rcl_service_is_valid>
 801092c:	b1d8      	cbz	r0, 8010966 <rcl_action_send_cancel_response+0x56>
 801092e:	6820      	ldr	r0, [r4, #0]
 8010930:	3008      	adds	r0, #8
 8010932:	f7fe fb35 	bl	800efa0 <rcl_service_is_valid>
 8010936:	b1b0      	cbz	r0, 8010966 <rcl_action_send_cancel_response+0x56>
 8010938:	6820      	ldr	r0, [r4, #0]
 801093a:	300c      	adds	r0, #12
 801093c:	f7f8 fa5c 	bl	8008df8 <rcl_publisher_is_valid>
 8010940:	b188      	cbz	r0, 8010966 <rcl_action_send_cancel_response+0x56>
 8010942:	6820      	ldr	r0, [r4, #0]
 8010944:	3010      	adds	r0, #16
 8010946:	f7f8 fa57 	bl	8008df8 <rcl_publisher_is_valid>
 801094a:	b160      	cbz	r0, 8010966 <rcl_action_send_cancel_response+0x56>
 801094c:	b19d      	cbz	r5, 8010976 <rcl_action_send_cancel_response+0x66>
 801094e:	b196      	cbz	r6, 8010976 <rcl_action_send_cancel_response+0x66>
 8010950:	6820      	ldr	r0, [r4, #0]
 8010952:	4632      	mov	r2, r6
 8010954:	4629      	mov	r1, r5
 8010956:	3004      	adds	r0, #4
 8010958:	f7fe faf2 	bl	800ef40 <rcl_send_response>
 801095c:	b110      	cbz	r0, 8010964 <rcl_action_send_cancel_response+0x54>
 801095e:	2802      	cmp	r0, #2
 8010960:	bf18      	it	ne
 8010962:	2001      	movne	r0, #1
 8010964:	bd70      	pop	{r4, r5, r6, pc}
 8010966:	f7f9 fd3f 	bl	800a3e8 <rcutils_reset_error>
 801096a:	f640 0098 	movw	r0, #2200	; 0x898
 801096e:	bd70      	pop	{r4, r5, r6, pc}
 8010970:	f640 0098 	movw	r0, #2200	; 0x898
 8010974:	bd70      	pop	{r4, r5, r6, pc}
 8010976:	200b      	movs	r0, #11
 8010978:	bd70      	pop	{r4, r5, r6, pc}
 801097a:	f640 0098 	movw	r0, #2200	; 0x898
 801097e:	4770      	bx	lr

08010980 <rcl_action_wait_set_add_action_server>:
 8010980:	2800      	cmp	r0, #0
 8010982:	d04d      	beq.n	8010a20 <rcl_action_wait_set_add_action_server+0xa0>
 8010984:	b570      	push	{r4, r5, r6, lr}
 8010986:	460c      	mov	r4, r1
 8010988:	b159      	cbz	r1, 80109a2 <rcl_action_wait_set_add_action_server+0x22>
 801098a:	4605      	mov	r5, r0
 801098c:	6808      	ldr	r0, [r1, #0]
 801098e:	b140      	cbz	r0, 80109a2 <rcl_action_wait_set_add_action_server+0x22>
 8010990:	4616      	mov	r6, r2
 8010992:	f7fe fb05 	bl	800efa0 <rcl_service_is_valid>
 8010996:	b120      	cbz	r0, 80109a2 <rcl_action_wait_set_add_action_server+0x22>
 8010998:	6820      	ldr	r0, [r4, #0]
 801099a:	3004      	adds	r0, #4
 801099c:	f7fe fb00 	bl	800efa0 <rcl_service_is_valid>
 80109a0:	b910      	cbnz	r0, 80109a8 <rcl_action_wait_set_add_action_server+0x28>
 80109a2:	f640 0098 	movw	r0, #2200	; 0x898
 80109a6:	bd70      	pop	{r4, r5, r6, pc}
 80109a8:	6820      	ldr	r0, [r4, #0]
 80109aa:	3008      	adds	r0, #8
 80109ac:	f7fe faf8 	bl	800efa0 <rcl_service_is_valid>
 80109b0:	2800      	cmp	r0, #0
 80109b2:	d0f6      	beq.n	80109a2 <rcl_action_wait_set_add_action_server+0x22>
 80109b4:	6820      	ldr	r0, [r4, #0]
 80109b6:	300c      	adds	r0, #12
 80109b8:	f7f8 fa36 	bl	8008e28 <rcl_publisher_is_valid_except_context>
 80109bc:	2800      	cmp	r0, #0
 80109be:	d0f0      	beq.n	80109a2 <rcl_action_wait_set_add_action_server+0x22>
 80109c0:	6820      	ldr	r0, [r4, #0]
 80109c2:	3010      	adds	r0, #16
 80109c4:	f7f8 fa30 	bl	8008e28 <rcl_publisher_is_valid_except_context>
 80109c8:	2800      	cmp	r0, #0
 80109ca:	d0ea      	beq.n	80109a2 <rcl_action_wait_set_add_action_server+0x22>
 80109cc:	6821      	ldr	r1, [r4, #0]
 80109ce:	4628      	mov	r0, r5
 80109d0:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 80109d4:	f7ff face 	bl	800ff74 <rcl_wait_set_add_service>
 80109d8:	2800      	cmp	r0, #0
 80109da:	d1e4      	bne.n	80109a6 <rcl_action_wait_set_add_action_server+0x26>
 80109dc:	6821      	ldr	r1, [r4, #0]
 80109de:	4628      	mov	r0, r5
 80109e0:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 80109e4:	3104      	adds	r1, #4
 80109e6:	f7ff fac5 	bl	800ff74 <rcl_wait_set_add_service>
 80109ea:	2800      	cmp	r0, #0
 80109ec:	d1db      	bne.n	80109a6 <rcl_action_wait_set_add_action_server+0x26>
 80109ee:	6821      	ldr	r1, [r4, #0]
 80109f0:	4628      	mov	r0, r5
 80109f2:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 80109f6:	3108      	adds	r1, #8
 80109f8:	f7ff fabc 	bl	800ff74 <rcl_wait_set_add_service>
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d1d2      	bne.n	80109a6 <rcl_action_wait_set_add_action_server+0x26>
 8010a00:	6821      	ldr	r1, [r4, #0]
 8010a02:	4628      	mov	r0, r5
 8010a04:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8010a08:	3114      	adds	r1, #20
 8010a0a:	f7ff fa57 	bl	800febc <rcl_wait_set_add_timer>
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	d1c9      	bne.n	80109a6 <rcl_action_wait_set_add_action_server+0x26>
 8010a12:	2e00      	cmp	r6, #0
 8010a14:	d0c7      	beq.n	80109a6 <rcl_action_wait_set_add_action_server+0x26>
 8010a16:	6823      	ldr	r3, [r4, #0]
 8010a18:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8010a1c:	6033      	str	r3, [r6, #0]
 8010a1e:	bd70      	pop	{r4, r5, r6, pc}
 8010a20:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop

08010a28 <rcl_action_server_wait_set_get_entities_ready>:
 8010a28:	2800      	cmp	r0, #0
 8010a2a:	d05a      	beq.n	8010ae2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8010a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a2e:	460c      	mov	r4, r1
 8010a30:	b161      	cbz	r1, 8010a4c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010a32:	4605      	mov	r5, r0
 8010a34:	6808      	ldr	r0, [r1, #0]
 8010a36:	b148      	cbz	r0, 8010a4c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010a38:	4616      	mov	r6, r2
 8010a3a:	461f      	mov	r7, r3
 8010a3c:	f7fe fab0 	bl	800efa0 <rcl_service_is_valid>
 8010a40:	b120      	cbz	r0, 8010a4c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010a42:	6820      	ldr	r0, [r4, #0]
 8010a44:	3004      	adds	r0, #4
 8010a46:	f7fe faab 	bl	800efa0 <rcl_service_is_valid>
 8010a4a:	b910      	cbnz	r0, 8010a52 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8010a4c:	f640 0098 	movw	r0, #2200	; 0x898
 8010a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a52:	6820      	ldr	r0, [r4, #0]
 8010a54:	3008      	adds	r0, #8
 8010a56:	f7fe faa3 	bl	800efa0 <rcl_service_is_valid>
 8010a5a:	2800      	cmp	r0, #0
 8010a5c:	d0f6      	beq.n	8010a4c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010a5e:	6820      	ldr	r0, [r4, #0]
 8010a60:	300c      	adds	r0, #12
 8010a62:	f7f8 f9e1 	bl	8008e28 <rcl_publisher_is_valid_except_context>
 8010a66:	2800      	cmp	r0, #0
 8010a68:	d0f0      	beq.n	8010a4c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010a6a:	6820      	ldr	r0, [r4, #0]
 8010a6c:	3010      	adds	r0, #16
 8010a6e:	f7f8 f9db 	bl	8008e28 <rcl_publisher_is_valid_except_context>
 8010a72:	2800      	cmp	r0, #0
 8010a74:	d0ea      	beq.n	8010a4c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010a76:	b3be      	cbz	r6, 8010ae8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010a78:	b3b7      	cbz	r7, 8010ae8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010a7a:	9b06      	ldr	r3, [sp, #24]
 8010a7c:	b3a3      	cbz	r3, 8010ae8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010a7e:	9b07      	ldr	r3, [sp, #28]
 8010a80:	b393      	cbz	r3, 8010ae8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010a82:	6821      	ldr	r1, [r4, #0]
 8010a84:	692a      	ldr	r2, [r5, #16]
 8010a86:	6a2c      	ldr	r4, [r5, #32]
 8010a88:	f8d1 51e8 	ldr.w	r5, [r1, #488]	; 0x1e8
 8010a8c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8010a90:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8010a94:	f8d1 01e4 	ldr.w	r0, [r1, #484]	; 0x1e4
 8010a98:	f8d1 51dc 	ldr.w	r5, [r1, #476]	; 0x1dc
 8010a9c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8010aa0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010aa4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8010aa8:	1a64      	subs	r4, r4, r1
 8010aaa:	fab4 f484 	clz	r4, r4
 8010aae:	0964      	lsrs	r4, r4, #5
 8010ab0:	7034      	strb	r4, [r6, #0]
 8010ab2:	1d0c      	adds	r4, r1, #4
 8010ab4:	1b1b      	subs	r3, r3, r4
 8010ab6:	fab3 f383 	clz	r3, r3
 8010aba:	095b      	lsrs	r3, r3, #5
 8010abc:	f101 0408 	add.w	r4, r1, #8
 8010ac0:	703b      	strb	r3, [r7, #0]
 8010ac2:	f101 0314 	add.w	r3, r1, #20
 8010ac6:	1b01      	subs	r1, r0, r4
 8010ac8:	1ad3      	subs	r3, r2, r3
 8010aca:	fab1 f181 	clz	r1, r1
 8010ace:	9a06      	ldr	r2, [sp, #24]
 8010ad0:	0949      	lsrs	r1, r1, #5
 8010ad2:	7011      	strb	r1, [r2, #0]
 8010ad4:	fab3 f383 	clz	r3, r3
 8010ad8:	9a07      	ldr	r2, [sp, #28]
 8010ada:	095b      	lsrs	r3, r3, #5
 8010adc:	2000      	movs	r0, #0
 8010ade:	7013      	strb	r3, [r2, #0]
 8010ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ae2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010ae6:	4770      	bx	lr
 8010ae8:	200b      	movs	r0, #11
 8010aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010aec <_execute_event_handler>:
 8010aec:	2002      	movs	r0, #2
 8010aee:	4770      	bx	lr

08010af0 <_cancel_goal_event_handler>:
 8010af0:	2003      	movs	r0, #3
 8010af2:	4770      	bx	lr

08010af4 <_succeed_event_handler>:
 8010af4:	2004      	movs	r0, #4
 8010af6:	4770      	bx	lr

08010af8 <_abort_event_handler>:
 8010af8:	2006      	movs	r0, #6
 8010afa:	4770      	bx	lr

08010afc <_canceled_event_handler>:
 8010afc:	2005      	movs	r0, #5
 8010afe:	4770      	bx	lr

08010b00 <rcl_action_transition_goal_state>:
 8010b00:	b2c2      	uxtb	r2, r0
 8010b02:	2a06      	cmp	r2, #6
 8010b04:	d80c      	bhi.n	8010b20 <rcl_action_transition_goal_state+0x20>
 8010b06:	2904      	cmp	r1, #4
 8010b08:	d80a      	bhi.n	8010b20 <rcl_action_transition_goal_state+0x20>
 8010b0a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8010b0e:	b410      	push	{r4}
 8010b10:	1853      	adds	r3, r2, r1
 8010b12:	4c06      	ldr	r4, [pc, #24]	; (8010b2c <rcl_action_transition_goal_state+0x2c>)
 8010b14:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010b18:	b123      	cbz	r3, 8010b24 <rcl_action_transition_goal_state+0x24>
 8010b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b1e:	4718      	bx	r3
 8010b20:	2000      	movs	r0, #0
 8010b22:	4770      	bx	lr
 8010b24:	2000      	movs	r0, #0
 8010b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b2a:	4770      	bx	lr
 8010b2c:	08016f8c 	.word	0x08016f8c

08010b30 <rcl_action_get_zero_initialized_cancel_response>:
 8010b30:	b510      	push	{r4, lr}
 8010b32:	4c07      	ldr	r4, [pc, #28]	; (8010b50 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8010b34:	4686      	mov	lr, r0
 8010b36:	4684      	mov	ip, r0
 8010b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b44:	6823      	ldr	r3, [r4, #0]
 8010b46:	f8cc 3000 	str.w	r3, [ip]
 8010b4a:	4670      	mov	r0, lr
 8010b4c:	bd10      	pop	{r4, pc}
 8010b4e:	bf00      	nop
 8010b50:	08017018 	.word	0x08017018

08010b54 <rclc_action_send_result_request>:
 8010b54:	b1d0      	cbz	r0, 8010b8c <rclc_action_send_result_request+0x38>
 8010b56:	b500      	push	{lr}
 8010b58:	4684      	mov	ip, r0
 8010b5a:	b087      	sub	sp, #28
 8010b5c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8010b60:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8010b64:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8010b68:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8010b6c:	f10d 0e08 	add.w	lr, sp, #8
 8010b70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010b74:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8010b78:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8010b7c:	a902      	add	r1, sp, #8
 8010b7e:	3010      	adds	r0, #16
 8010b80:	f7ff fbda 	bl	8010338 <rcl_action_send_result_request>
 8010b84:	b920      	cbnz	r0, 8010b90 <rclc_action_send_result_request+0x3c>
 8010b86:	b007      	add	sp, #28
 8010b88:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b8c:	200b      	movs	r0, #11
 8010b8e:	4770      	bx	lr
 8010b90:	9001      	str	r0, [sp, #4]
 8010b92:	f7f9 fc29 	bl	800a3e8 <rcutils_reset_error>
 8010b96:	9801      	ldr	r0, [sp, #4]
 8010b98:	b007      	add	sp, #28
 8010b9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b9e:	bf00      	nop

08010ba0 <rclc_action_take_goal_handle>:
 8010ba0:	b160      	cbz	r0, 8010bbc <rclc_action_take_goal_handle+0x1c>
 8010ba2:	6883      	ldr	r3, [r0, #8]
 8010ba4:	b143      	cbz	r3, 8010bb8 <rclc_action_take_goal_handle+0x18>
 8010ba6:	6819      	ldr	r1, [r3, #0]
 8010ba8:	6081      	str	r1, [r0, #8]
 8010baa:	2200      	movs	r2, #0
 8010bac:	721a      	strb	r2, [r3, #8]
 8010bae:	68c1      	ldr	r1, [r0, #12]
 8010bb0:	6019      	str	r1, [r3, #0]
 8010bb2:	621a      	str	r2, [r3, #32]
 8010bb4:	849a      	strh	r2, [r3, #36]	; 0x24
 8010bb6:	60c3      	str	r3, [r0, #12]
 8010bb8:	4618      	mov	r0, r3
 8010bba:	4770      	bx	lr
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	e7fb      	b.n	8010bb8 <rclc_action_take_goal_handle+0x18>

08010bc0 <rclc_action_remove_used_goal_handle>:
 8010bc0:	b180      	cbz	r0, 8010be4 <rclc_action_remove_used_goal_handle+0x24>
 8010bc2:	b179      	cbz	r1, 8010be4 <rclc_action_remove_used_goal_handle+0x24>
 8010bc4:	68c3      	ldr	r3, [r0, #12]
 8010bc6:	4299      	cmp	r1, r3
 8010bc8:	d00d      	beq.n	8010be6 <rclc_action_remove_used_goal_handle+0x26>
 8010bca:	b12b      	cbz	r3, 8010bd8 <rclc_action_remove_used_goal_handle+0x18>
 8010bcc:	681a      	ldr	r2, [r3, #0]
 8010bce:	4291      	cmp	r1, r2
 8010bd0:	d003      	beq.n	8010bda <rclc_action_remove_used_goal_handle+0x1a>
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d1f9      	bne.n	8010bcc <rclc_action_remove_used_goal_handle+0xc>
 8010bd8:	4770      	bx	lr
 8010bda:	680a      	ldr	r2, [r1, #0]
 8010bdc:	601a      	str	r2, [r3, #0]
 8010bde:	6883      	ldr	r3, [r0, #8]
 8010be0:	600b      	str	r3, [r1, #0]
 8010be2:	6081      	str	r1, [r0, #8]
 8010be4:	4770      	bx	lr
 8010be6:	680b      	ldr	r3, [r1, #0]
 8010be8:	60c3      	str	r3, [r0, #12]
 8010bea:	e7f8      	b.n	8010bde <rclc_action_remove_used_goal_handle+0x1e>

08010bec <rclc_action_find_goal_handle_by_uuid>:
 8010bec:	b538      	push	{r3, r4, r5, lr}
 8010bee:	b180      	cbz	r0, 8010c12 <rclc_action_find_goal_handle_by_uuid+0x26>
 8010bf0:	460d      	mov	r5, r1
 8010bf2:	b181      	cbz	r1, 8010c16 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8010bf4:	68c4      	ldr	r4, [r0, #12]
 8010bf6:	b914      	cbnz	r4, 8010bfe <rclc_action_find_goal_handle_by_uuid+0x12>
 8010bf8:	e009      	b.n	8010c0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8010bfa:	6824      	ldr	r4, [r4, #0]
 8010bfc:	b13c      	cbz	r4, 8010c0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8010bfe:	f104 0009 	add.w	r0, r4, #9
 8010c02:	2210      	movs	r2, #16
 8010c04:	4629      	mov	r1, r5
 8010c06:	f004 fdb7 	bl	8015778 <memcmp>
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	d1f5      	bne.n	8010bfa <rclc_action_find_goal_handle_by_uuid+0xe>
 8010c0e:	4620      	mov	r0, r4
 8010c10:	bd38      	pop	{r3, r4, r5, pc}
 8010c12:	4604      	mov	r4, r0
 8010c14:	e7fb      	b.n	8010c0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8010c16:	460c      	mov	r4, r1
 8010c18:	e7f9      	b.n	8010c0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8010c1a:	bf00      	nop

08010c1c <rclc_action_find_first_handle_by_status>:
 8010c1c:	b140      	cbz	r0, 8010c30 <rclc_action_find_first_handle_by_status+0x14>
 8010c1e:	68c0      	ldr	r0, [r0, #12]
 8010c20:	b910      	cbnz	r0, 8010c28 <rclc_action_find_first_handle_by_status+0xc>
 8010c22:	e005      	b.n	8010c30 <rclc_action_find_first_handle_by_status+0x14>
 8010c24:	6800      	ldr	r0, [r0, #0]
 8010c26:	b118      	cbz	r0, 8010c30 <rclc_action_find_first_handle_by_status+0x14>
 8010c28:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010c2c:	428b      	cmp	r3, r1
 8010c2e:	d1f9      	bne.n	8010c24 <rclc_action_find_first_handle_by_status+0x8>
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop

08010c34 <rclc_action_find_first_terminated_handle>:
 8010c34:	b140      	cbz	r0, 8010c48 <rclc_action_find_first_terminated_handle+0x14>
 8010c36:	68c0      	ldr	r0, [r0, #12]
 8010c38:	b910      	cbnz	r0, 8010c40 <rclc_action_find_first_terminated_handle+0xc>
 8010c3a:	e005      	b.n	8010c48 <rclc_action_find_first_terminated_handle+0x14>
 8010c3c:	6800      	ldr	r0, [r0, #0]
 8010c3e:	b118      	cbz	r0, 8010c48 <rclc_action_find_first_terminated_handle+0x14>
 8010c40:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010c44:	2b03      	cmp	r3, #3
 8010c46:	ddf9      	ble.n	8010c3c <rclc_action_find_first_terminated_handle+0x8>
 8010c48:	4770      	bx	lr
 8010c4a:	bf00      	nop

08010c4c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8010c4c:	b170      	cbz	r0, 8010c6c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8010c4e:	68c0      	ldr	r0, [r0, #12]
 8010c50:	b160      	cbz	r0, 8010c6c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8010c52:	b410      	push	{r4}
 8010c54:	e001      	b.n	8010c5a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8010c56:	6800      	ldr	r0, [r0, #0]
 8010c58:	b128      	cbz	r0, 8010c66 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8010c5a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8010c5e:	4299      	cmp	r1, r3
 8010c60:	bf08      	it	eq
 8010c62:	4294      	cmpeq	r4, r2
 8010c64:	d1f7      	bne.n	8010c56 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8010c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c6a:	4770      	bx	lr
 8010c6c:	4770      	bx	lr
 8010c6e:	bf00      	nop

08010c70 <rclc_action_find_handle_by_result_request_sequence_number>:
 8010c70:	b170      	cbz	r0, 8010c90 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8010c72:	68c0      	ldr	r0, [r0, #12]
 8010c74:	b160      	cbz	r0, 8010c90 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8010c76:	b410      	push	{r4}
 8010c78:	e001      	b.n	8010c7e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8010c7a:	6800      	ldr	r0, [r0, #0]
 8010c7c:	b128      	cbz	r0, 8010c8a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8010c7e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8010c82:	4299      	cmp	r1, r3
 8010c84:	bf08      	it	eq
 8010c86:	4294      	cmpeq	r4, r2
 8010c88:	d1f7      	bne.n	8010c7a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8010c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c8e:	4770      	bx	lr
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop

08010c94 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8010c94:	b170      	cbz	r0, 8010cb4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8010c96:	68c0      	ldr	r0, [r0, #12]
 8010c98:	b160      	cbz	r0, 8010cb4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8010c9a:	b410      	push	{r4}
 8010c9c:	e001      	b.n	8010ca2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8010c9e:	6800      	ldr	r0, [r0, #0]
 8010ca0:	b128      	cbz	r0, 8010cae <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8010ca2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8010ca6:	4299      	cmp	r1, r3
 8010ca8:	bf08      	it	eq
 8010caa:	4294      	cmpeq	r4, r2
 8010cac:	d1f7      	bne.n	8010c9e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8010cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cb2:	4770      	bx	lr
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <rclc_action_find_first_handle_with_goal_response>:
 8010cb8:	b140      	cbz	r0, 8010ccc <rclc_action_find_first_handle_with_goal_response+0x14>
 8010cba:	68c0      	ldr	r0, [r0, #12]
 8010cbc:	b910      	cbnz	r0, 8010cc4 <rclc_action_find_first_handle_with_goal_response+0xc>
 8010cbe:	e005      	b.n	8010ccc <rclc_action_find_first_handle_with_goal_response+0x14>
 8010cc0:	6800      	ldr	r0, [r0, #0]
 8010cc2:	b118      	cbz	r0, 8010ccc <rclc_action_find_first_handle_with_goal_response+0x14>
 8010cc4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d0f9      	beq.n	8010cc0 <rclc_action_find_first_handle_with_goal_response+0x8>
 8010ccc:	4770      	bx	lr
 8010cce:	bf00      	nop

08010cd0 <rclc_action_find_first_handle_with_result_response>:
 8010cd0:	b140      	cbz	r0, 8010ce4 <rclc_action_find_first_handle_with_result_response+0x14>
 8010cd2:	68c0      	ldr	r0, [r0, #12]
 8010cd4:	b910      	cbnz	r0, 8010cdc <rclc_action_find_first_handle_with_result_response+0xc>
 8010cd6:	e005      	b.n	8010ce4 <rclc_action_find_first_handle_with_result_response+0x14>
 8010cd8:	6800      	ldr	r0, [r0, #0]
 8010cda:	b118      	cbz	r0, 8010ce4 <rclc_action_find_first_handle_with_result_response+0x14>
 8010cdc:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d0f9      	beq.n	8010cd8 <rclc_action_find_first_handle_with_result_response+0x8>
 8010ce4:	4770      	bx	lr
 8010ce6:	bf00      	nop

08010ce8 <rclc_action_server_response_goal_request>:
 8010ce8:	b198      	cbz	r0, 8010d12 <rclc_action_server_response_goal_request+0x2a>
 8010cea:	b510      	push	{r4, lr}
 8010cec:	6844      	ldr	r4, [r0, #4]
 8010cee:	b086      	sub	sp, #24
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8010cf6:	460b      	mov	r3, r1
 8010cf8:	9205      	str	r2, [sp, #20]
 8010cfa:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8010cfe:	aa03      	add	r2, sp, #12
 8010d00:	f104 0010 	add.w	r0, r4, #16
 8010d04:	f88d 300c 	strb.w	r3, [sp, #12]
 8010d08:	f7ff fd4a 	bl	80107a0 <rcl_action_send_goal_response>
 8010d0c:	b918      	cbnz	r0, 8010d16 <rclc_action_server_response_goal_request+0x2e>
 8010d0e:	b006      	add	sp, #24
 8010d10:	bd10      	pop	{r4, pc}
 8010d12:	200b      	movs	r0, #11
 8010d14:	4770      	bx	lr
 8010d16:	9001      	str	r0, [sp, #4]
 8010d18:	f7f9 fb66 	bl	800a3e8 <rcutils_reset_error>
 8010d1c:	9801      	ldr	r0, [sp, #4]
 8010d1e:	b006      	add	sp, #24
 8010d20:	bd10      	pop	{r4, pc}
 8010d22:	bf00      	nop
 8010d24:	0000      	movs	r0, r0
	...

08010d28 <rclc_action_server_goal_cancel_accept>:
 8010d28:	b310      	cbz	r0, 8010d70 <rclc_action_server_goal_cancel_accept+0x48>
 8010d2a:	b510      	push	{r4, lr}
 8010d2c:	b090      	sub	sp, #64	; 0x40
 8010d2e:	4604      	mov	r4, r0
 8010d30:	a806      	add	r0, sp, #24
 8010d32:	f7ff fefd 	bl	8010b30 <rcl_action_get_zero_initialized_cancel_response>
 8010d36:	2300      	movs	r3, #0
 8010d38:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8010d3c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8010d40:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8010d44:	f88d 3018 	strb.w	r3, [sp, #24]
 8010d48:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8010d4c:	f8cd d01c 	str.w	sp, [sp, #28]
 8010d50:	46ec      	mov	ip, sp
 8010d52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d56:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8010d78 <rclc_action_server_goal_cancel_accept+0x50>
 8010d5a:	6860      	ldr	r0, [r4, #4]
 8010d5c:	aa06      	add	r2, sp, #24
 8010d5e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8010d62:	3010      	adds	r0, #16
 8010d64:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010d68:	f7ff fdd2 	bl	8010910 <rcl_action_send_cancel_response>
 8010d6c:	b010      	add	sp, #64	; 0x40
 8010d6e:	bd10      	pop	{r4, pc}
 8010d70:	200b      	movs	r0, #11
 8010d72:	4770      	bx	lr
 8010d74:	f3af 8000 	nop.w
 8010d78:	00000001 	.word	0x00000001
 8010d7c:	00000001 	.word	0x00000001

08010d80 <rclc_action_server_goal_cancel_reject>:
 8010d80:	b082      	sub	sp, #8
 8010d82:	b530      	push	{r4, r5, lr}
 8010d84:	b08b      	sub	sp, #44	; 0x2c
 8010d86:	ac0e      	add	r4, sp, #56	; 0x38
 8010d88:	e884 000c 	stmia.w	r4, {r2, r3}
 8010d8c:	b188      	cbz	r0, 8010db2 <rclc_action_server_goal_cancel_reject+0x32>
 8010d8e:	4604      	mov	r4, r0
 8010d90:	a801      	add	r0, sp, #4
 8010d92:	460d      	mov	r5, r1
 8010d94:	f7ff fecc 	bl	8010b30 <rcl_action_get_zero_initialized_cancel_response>
 8010d98:	aa01      	add	r2, sp, #4
 8010d9a:	a90e      	add	r1, sp, #56	; 0x38
 8010d9c:	f104 0010 	add.w	r0, r4, #16
 8010da0:	f88d 5004 	strb.w	r5, [sp, #4]
 8010da4:	f7ff fdb4 	bl	8010910 <rcl_action_send_cancel_response>
 8010da8:	b00b      	add	sp, #44	; 0x2c
 8010daa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010dae:	b002      	add	sp, #8
 8010db0:	4770      	bx	lr
 8010db2:	200b      	movs	r0, #11
 8010db4:	b00b      	add	sp, #44	; 0x2c
 8010db6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010dba:	b002      	add	sp, #8
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop

08010dc0 <rcutils_get_env>:
 8010dc0:	b168      	cbz	r0, 8010dde <rcutils_get_env+0x1e>
 8010dc2:	b510      	push	{r4, lr}
 8010dc4:	460c      	mov	r4, r1
 8010dc6:	b129      	cbz	r1, 8010dd4 <rcutils_get_env+0x14>
 8010dc8:	f004 f92e 	bl	8015028 <getenv>
 8010dcc:	b120      	cbz	r0, 8010dd8 <rcutils_get_env+0x18>
 8010dce:	6020      	str	r0, [r4, #0]
 8010dd0:	2000      	movs	r0, #0
 8010dd2:	bd10      	pop	{r4, pc}
 8010dd4:	4803      	ldr	r0, [pc, #12]	; (8010de4 <rcutils_get_env+0x24>)
 8010dd6:	bd10      	pop	{r4, pc}
 8010dd8:	4b03      	ldr	r3, [pc, #12]	; (8010de8 <rcutils_get_env+0x28>)
 8010dda:	6023      	str	r3, [r4, #0]
 8010ddc:	bd10      	pop	{r4, pc}
 8010dde:	4803      	ldr	r0, [pc, #12]	; (8010dec <rcutils_get_env+0x2c>)
 8010de0:	4770      	bx	lr
 8010de2:	bf00      	nop
 8010de4:	08017058 	.word	0x08017058
 8010de8:	0801717c 	.word	0x0801717c
 8010dec:	0801703c 	.word	0x0801703c

08010df0 <rcutils_is_directory>:
 8010df0:	2000      	movs	r0, #0
 8010df2:	4770      	bx	lr

08010df4 <rcutils_join_path>:
 8010df4:	b082      	sub	sp, #8
 8010df6:	e88d 000c 	stmia.w	sp, {r2, r3}
 8010dfa:	2000      	movs	r0, #0
 8010dfc:	b002      	add	sp, #8
 8010dfe:	4770      	bx	lr

08010e00 <rcutils_to_native_path>:
 8010e00:	b084      	sub	sp, #16
 8010e02:	a801      	add	r0, sp, #4
 8010e04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8010e08:	b004      	add	sp, #16
 8010e0a:	2000      	movs	r0, #0
 8010e0c:	4770      	bx	lr
 8010e0e:	bf00      	nop

08010e10 <rcutils_format_string_limit>:
 8010e10:	b40f      	push	{r0, r1, r2, r3}
 8010e12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e14:	b083      	sub	sp, #12
 8010e16:	ac08      	add	r4, sp, #32
 8010e18:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010e1e:	b34e      	cbz	r6, 8010e74 <rcutils_format_string_limit+0x64>
 8010e20:	a808      	add	r0, sp, #32
 8010e22:	f7f9 fa19 	bl	800a258 <rcutils_allocator_is_valid>
 8010e26:	b328      	cbz	r0, 8010e74 <rcutils_format_string_limit+0x64>
 8010e28:	2100      	movs	r1, #0
 8010e2a:	ab0f      	add	r3, sp, #60	; 0x3c
 8010e2c:	4632      	mov	r2, r6
 8010e2e:	4608      	mov	r0, r1
 8010e30:	e9cd 3300 	strd	r3, r3, [sp]
 8010e34:	f000 f8f4 	bl	8011020 <rcutils_vsnprintf>
 8010e38:	1c43      	adds	r3, r0, #1
 8010e3a:	4605      	mov	r5, r0
 8010e3c:	d01a      	beq.n	8010e74 <rcutils_format_string_limit+0x64>
 8010e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010e42:	1c47      	adds	r7, r0, #1
 8010e44:	429f      	cmp	r7, r3
 8010e46:	bf84      	itt	hi
 8010e48:	461f      	movhi	r7, r3
 8010e4a:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8010e4e:	4638      	mov	r0, r7
 8010e50:	9b08      	ldr	r3, [sp, #32]
 8010e52:	4798      	blx	r3
 8010e54:	4604      	mov	r4, r0
 8010e56:	b168      	cbz	r0, 8010e74 <rcutils_format_string_limit+0x64>
 8010e58:	9b01      	ldr	r3, [sp, #4]
 8010e5a:	4632      	mov	r2, r6
 8010e5c:	4639      	mov	r1, r7
 8010e5e:	f000 f8df 	bl	8011020 <rcutils_vsnprintf>
 8010e62:	2800      	cmp	r0, #0
 8010e64:	db02      	blt.n	8010e6c <rcutils_format_string_limit+0x5c>
 8010e66:	2300      	movs	r3, #0
 8010e68:	5563      	strb	r3, [r4, r5]
 8010e6a:	e004      	b.n	8010e76 <rcutils_format_string_limit+0x66>
 8010e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010e70:	4620      	mov	r0, r4
 8010e72:	4798      	blx	r3
 8010e74:	2400      	movs	r4, #0
 8010e76:	4620      	mov	r0, r4
 8010e78:	b003      	add	sp, #12
 8010e7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010e7e:	b004      	add	sp, #16
 8010e80:	4770      	bx	lr
 8010e82:	bf00      	nop

08010e84 <rcutils_repl_str>:
 8010e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e88:	ed2d 8b02 	vpush	{d8}
 8010e8c:	b087      	sub	sp, #28
 8010e8e:	4680      	mov	r8, r0
 8010e90:	4608      	mov	r0, r1
 8010e92:	f8cd 8004 	str.w	r8, [sp, #4]
 8010e96:	ee08 2a10 	vmov	s16, r2
 8010e9a:	468a      	mov	sl, r1
 8010e9c:	4699      	mov	r9, r3
 8010e9e:	f7ef f9ff 	bl	80002a0 <strlen>
 8010ea2:	2600      	movs	r6, #0
 8010ea4:	4647      	mov	r7, r8
 8010ea6:	9002      	str	r0, [sp, #8]
 8010ea8:	46b3      	mov	fp, r6
 8010eaa:	2510      	movs	r5, #16
 8010eac:	46b0      	mov	r8, r6
 8010eae:	e01d      	b.n	8010eec <rcutils_repl_str+0x68>
 8010eb0:	f10b 0b01 	add.w	fp, fp, #1
 8010eb4:	455e      	cmp	r6, fp
 8010eb6:	d211      	bcs.n	8010edc <rcutils_repl_str+0x58>
 8010eb8:	442e      	add	r6, r5
 8010eba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010ebe:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010ec2:	00b1      	lsls	r1, r6, #2
 8010ec4:	4798      	blx	r3
 8010ec6:	2800      	cmp	r0, #0
 8010ec8:	f000 8088 	beq.w	8010fdc <rcutils_repl_str+0x158>
 8010ecc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ed0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8010ed4:	4680      	mov	r8, r0
 8010ed6:	bf28      	it	cs
 8010ed8:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8010edc:	9a01      	ldr	r2, [sp, #4]
 8010ede:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8010ee2:	1aa2      	subs	r2, r4, r2
 8010ee4:	f843 2c04 	str.w	r2, [r3, #-4]
 8010ee8:	9b02      	ldr	r3, [sp, #8]
 8010eea:	18e7      	adds	r7, r4, r3
 8010eec:	4651      	mov	r1, sl
 8010eee:	4638      	mov	r0, r7
 8010ef0:	f004 fca6 	bl	8015840 <strstr>
 8010ef4:	4604      	mov	r4, r0
 8010ef6:	4640      	mov	r0, r8
 8010ef8:	2c00      	cmp	r4, #0
 8010efa:	d1d9      	bne.n	8010eb0 <rcutils_repl_str+0x2c>
 8010efc:	46b8      	mov	r8, r7
 8010efe:	4607      	mov	r7, r0
 8010f00:	4640      	mov	r0, r8
 8010f02:	f7ef f9cd 	bl	80002a0 <strlen>
 8010f06:	9b01      	ldr	r3, [sp, #4]
 8010f08:	eba8 0303 	sub.w	r3, r8, r3
 8010f0c:	181c      	adds	r4, r3, r0
 8010f0e:	9404      	str	r4, [sp, #16]
 8010f10:	f1bb 0f00 	cmp.w	fp, #0
 8010f14:	d04a      	beq.n	8010fac <rcutils_repl_str+0x128>
 8010f16:	ee18 0a10 	vmov	r0, s16
 8010f1a:	f7ef f9c1 	bl	80002a0 <strlen>
 8010f1e:	9b02      	ldr	r3, [sp, #8]
 8010f20:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010f24:	1ac3      	subs	r3, r0, r3
 8010f26:	fb0b 4303 	mla	r3, fp, r3, r4
 8010f2a:	461a      	mov	r2, r3
 8010f2c:	9305      	str	r3, [sp, #20]
 8010f2e:	4606      	mov	r6, r0
 8010f30:	f8d9 3000 	ldr.w	r3, [r9]
 8010f34:	1c50      	adds	r0, r2, #1
 8010f36:	4798      	blx	r3
 8010f38:	9003      	str	r0, [sp, #12]
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	d04f      	beq.n	8010fde <rcutils_repl_str+0x15a>
 8010f3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010f42:	683a      	ldr	r2, [r7, #0]
 8010f44:	4641      	mov	r1, r8
 8010f46:	f004 fd1c 	bl	8015982 <memcpy>
 8010f4a:	683d      	ldr	r5, [r7, #0]
 8010f4c:	9b03      	ldr	r3, [sp, #12]
 8010f4e:	9701      	str	r7, [sp, #4]
 8010f50:	46ba      	mov	sl, r7
 8010f52:	441d      	add	r5, r3
 8010f54:	9f02      	ldr	r7, [sp, #8]
 8010f56:	f8cd 9008 	str.w	r9, [sp, #8]
 8010f5a:	2401      	movs	r4, #1
 8010f5c:	46d1      	mov	r9, sl
 8010f5e:	ee18 aa10 	vmov	sl, s16
 8010f62:	e00a      	b.n	8010f7a <rcutils_repl_str+0xf6>
 8010f64:	f8d9 5000 	ldr.w	r5, [r9]
 8010f68:	1aaa      	subs	r2, r5, r2
 8010f6a:	1885      	adds	r5, r0, r2
 8010f6c:	f004 fd09 	bl	8015982 <memcpy>
 8010f70:	45a3      	cmp	fp, r4
 8010f72:	f104 0201 	add.w	r2, r4, #1
 8010f76:	d935      	bls.n	8010fe4 <rcutils_repl_str+0x160>
 8010f78:	4614      	mov	r4, r2
 8010f7a:	4632      	mov	r2, r6
 8010f7c:	4651      	mov	r1, sl
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f004 fcff 	bl	8015982 <memcpy>
 8010f84:	f859 2b04 	ldr.w	r2, [r9], #4
 8010f88:	45a3      	cmp	fp, r4
 8010f8a:	443a      	add	r2, r7
 8010f8c:	eb05 0006 	add.w	r0, r5, r6
 8010f90:	eb08 0102 	add.w	r1, r8, r2
 8010f94:	d1e6      	bne.n	8010f64 <rcutils_repl_str+0xe0>
 8010f96:	9b04      	ldr	r3, [sp, #16]
 8010f98:	1a9a      	subs	r2, r3, r2
 8010f9a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8010f9e:	f004 fcf0 	bl	8015982 <memcpy>
 8010fa2:	9a03      	ldr	r2, [sp, #12]
 8010fa4:	9905      	ldr	r1, [sp, #20]
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	5453      	strb	r3, [r2, r1]
 8010faa:	e00b      	b.n	8010fc4 <rcutils_repl_str+0x140>
 8010fac:	4620      	mov	r0, r4
 8010fae:	f8d9 3000 	ldr.w	r3, [r9]
 8010fb2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010fb6:	3001      	adds	r0, #1
 8010fb8:	4798      	blx	r3
 8010fba:	9003      	str	r0, [sp, #12]
 8010fbc:	b110      	cbz	r0, 8010fc4 <rcutils_repl_str+0x140>
 8010fbe:	9901      	ldr	r1, [sp, #4]
 8010fc0:	f004 fcd7 	bl	8015972 <strcpy>
 8010fc4:	4638      	mov	r0, r7
 8010fc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010fca:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010fce:	4798      	blx	r3
 8010fd0:	9803      	ldr	r0, [sp, #12]
 8010fd2:	b007      	add	sp, #28
 8010fd4:	ecbd 8b02 	vpop	{d8}
 8010fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fdc:	4647      	mov	r7, r8
 8010fde:	2300      	movs	r3, #0
 8010fe0:	9303      	str	r3, [sp, #12]
 8010fe2:	e7ef      	b.n	8010fc4 <rcutils_repl_str+0x140>
 8010fe4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8010fe8:	e7db      	b.n	8010fa2 <rcutils_repl_str+0x11e>
 8010fea:	bf00      	nop

08010fec <rcutils_snprintf>:
 8010fec:	b40c      	push	{r2, r3}
 8010fee:	b530      	push	{r4, r5, lr}
 8010ff0:	b083      	sub	sp, #12
 8010ff2:	ab06      	add	r3, sp, #24
 8010ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ff8:	9301      	str	r3, [sp, #4]
 8010ffa:	b152      	cbz	r2, 8011012 <rcutils_snprintf+0x26>
 8010ffc:	b138      	cbz	r0, 801100e <rcutils_snprintf+0x22>
 8010ffe:	b141      	cbz	r1, 8011012 <rcutils_snprintf+0x26>
 8011000:	f004 fbac 	bl	801575c <vsniprintf>
 8011004:	b003      	add	sp, #12
 8011006:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801100a:	b002      	add	sp, #8
 801100c:	4770      	bx	lr
 801100e:	2900      	cmp	r1, #0
 8011010:	d0f6      	beq.n	8011000 <rcutils_snprintf+0x14>
 8011012:	f004 fc81 	bl	8015918 <__errno>
 8011016:	2316      	movs	r3, #22
 8011018:	6003      	str	r3, [r0, #0]
 801101a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801101e:	e7f1      	b.n	8011004 <rcutils_snprintf+0x18>

08011020 <rcutils_vsnprintf>:
 8011020:	b570      	push	{r4, r5, r6, lr}
 8011022:	b13a      	cbz	r2, 8011034 <rcutils_vsnprintf+0x14>
 8011024:	b120      	cbz	r0, 8011030 <rcutils_vsnprintf+0x10>
 8011026:	b129      	cbz	r1, 8011034 <rcutils_vsnprintf+0x14>
 8011028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801102c:	f004 bb96 	b.w	801575c <vsniprintf>
 8011030:	2900      	cmp	r1, #0
 8011032:	d0f9      	beq.n	8011028 <rcutils_vsnprintf+0x8>
 8011034:	f004 fc70 	bl	8015918 <__errno>
 8011038:	2316      	movs	r3, #22
 801103a:	6003      	str	r3, [r0, #0]
 801103c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011040:	bd70      	pop	{r4, r5, r6, pc}
 8011042:	bf00      	nop

08011044 <rcutils_strdup>:
 8011044:	b084      	sub	sp, #16
 8011046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011048:	ac07      	add	r4, sp, #28
 801104a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801104e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8011050:	4605      	mov	r5, r0
 8011052:	b1d0      	cbz	r0, 801108a <rcutils_strdup+0x46>
 8011054:	460c      	mov	r4, r1
 8011056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801105a:	2100      	movs	r1, #0
 801105c:	f7ef f8d0 	bl	8000200 <memchr>
 8011060:	b180      	cbz	r0, 8011084 <rcutils_strdup+0x40>
 8011062:	1b46      	subs	r6, r0, r5
 8011064:	1c70      	adds	r0, r6, #1
 8011066:	4639      	mov	r1, r7
 8011068:	47a0      	blx	r4
 801106a:	4604      	mov	r4, r0
 801106c:	b128      	cbz	r0, 801107a <rcutils_strdup+0x36>
 801106e:	4632      	mov	r2, r6
 8011070:	4629      	mov	r1, r5
 8011072:	f004 fc86 	bl	8015982 <memcpy>
 8011076:	2300      	movs	r3, #0
 8011078:	55a3      	strb	r3, [r4, r6]
 801107a:	4620      	mov	r0, r4
 801107c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011080:	b004      	add	sp, #16
 8011082:	4770      	bx	lr
 8011084:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011088:	e7ed      	b.n	8011066 <rcutils_strdup+0x22>
 801108a:	4604      	mov	r4, r0
 801108c:	e7f5      	b.n	801107a <rcutils_strdup+0x36>
 801108e:	bf00      	nop

08011090 <rcutils_strndup>:
 8011090:	b082      	sub	sp, #8
 8011092:	b570      	push	{r4, r5, r6, lr}
 8011094:	ac04      	add	r4, sp, #16
 8011096:	e884 000c 	stmia.w	r4, {r2, r3}
 801109a:	4606      	mov	r6, r0
 801109c:	b1b8      	cbz	r0, 80110ce <rcutils_strndup+0x3e>
 801109e:	460c      	mov	r4, r1
 80110a0:	460a      	mov	r2, r1
 80110a2:	2100      	movs	r1, #0
 80110a4:	f7ef f8ac 	bl	8000200 <memchr>
 80110a8:	b100      	cbz	r0, 80110ac <rcutils_strndup+0x1c>
 80110aa:	1b84      	subs	r4, r0, r6
 80110ac:	9b04      	ldr	r3, [sp, #16]
 80110ae:	9908      	ldr	r1, [sp, #32]
 80110b0:	1c60      	adds	r0, r4, #1
 80110b2:	4798      	blx	r3
 80110b4:	4605      	mov	r5, r0
 80110b6:	b128      	cbz	r0, 80110c4 <rcutils_strndup+0x34>
 80110b8:	4622      	mov	r2, r4
 80110ba:	4631      	mov	r1, r6
 80110bc:	f004 fc61 	bl	8015982 <memcpy>
 80110c0:	2300      	movs	r3, #0
 80110c2:	552b      	strb	r3, [r5, r4]
 80110c4:	4628      	mov	r0, r5
 80110c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110ca:	b002      	add	sp, #8
 80110cc:	4770      	bx	lr
 80110ce:	4605      	mov	r5, r0
 80110d0:	e7f8      	b.n	80110c4 <rcutils_strndup+0x34>
 80110d2:	bf00      	nop

080110d4 <rcutils_get_zero_initialized_string_map>:
 80110d4:	4b01      	ldr	r3, [pc, #4]	; (80110dc <rcutils_get_zero_initialized_string_map+0x8>)
 80110d6:	2000      	movs	r0, #0
 80110d8:	6018      	str	r0, [r3, #0]
 80110da:	4770      	bx	lr
 80110dc:	20011198 	.word	0x20011198

080110e0 <rcutils_string_map_reserve>:
 80110e0:	2800      	cmp	r0, #0
 80110e2:	d03e      	beq.n	8011162 <rcutils_string_map_reserve+0x82>
 80110e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110e6:	6805      	ldr	r5, [r0, #0]
 80110e8:	460c      	mov	r4, r1
 80110ea:	4606      	mov	r6, r0
 80110ec:	b12d      	cbz	r5, 80110fa <rcutils_string_map_reserve+0x1a>
 80110ee:	68ab      	ldr	r3, [r5, #8]
 80110f0:	42a3      	cmp	r3, r4
 80110f2:	d904      	bls.n	80110fe <rcutils_string_map_reserve+0x1e>
 80110f4:	461c      	mov	r4, r3
 80110f6:	2d00      	cmp	r5, #0
 80110f8:	d1f9      	bne.n	80110ee <rcutils_string_map_reserve+0xe>
 80110fa:	201f      	movs	r0, #31
 80110fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110fe:	686b      	ldr	r3, [r5, #4]
 8011100:	42a3      	cmp	r3, r4
 8011102:	d02a      	beq.n	801115a <rcutils_string_map_reserve+0x7a>
 8011104:	69e9      	ldr	r1, [r5, #28]
 8011106:	b304      	cbz	r4, 801114a <rcutils_string_map_reserve+0x6a>
 8011108:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 801110c:	d227      	bcs.n	801115e <rcutils_string_map_reserve+0x7e>
 801110e:	00e7      	lsls	r7, r4, #3
 8011110:	460a      	mov	r2, r1
 8011112:	696b      	ldr	r3, [r5, #20]
 8011114:	6828      	ldr	r0, [r5, #0]
 8011116:	4639      	mov	r1, r7
 8011118:	4798      	blx	r3
 801111a:	b300      	cbz	r0, 801115e <rcutils_string_map_reserve+0x7e>
 801111c:	6835      	ldr	r5, [r6, #0]
 801111e:	686a      	ldr	r2, [r5, #4]
 8011120:	6028      	str	r0, [r5, #0]
 8011122:	42a2      	cmp	r2, r4
 8011124:	d216      	bcs.n	8011154 <rcutils_string_map_reserve+0x74>
 8011126:	43d1      	mvns	r1, r2
 8011128:	4421      	add	r1, r4
 801112a:	2909      	cmp	r1, #9
 801112c:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 8011130:	d919      	bls.n	8011166 <rcutils_string_map_reserve+0x86>
 8011132:	0759      	lsls	r1, r3, #29
 8011134:	d117      	bne.n	8011166 <rcutils_string_map_reserve+0x86>
 8011136:	1aa1      	subs	r1, r4, r2
 8011138:	2600      	movs	r6, #0
 801113a:	2200      	movs	r2, #0
 801113c:	2700      	movs	r7, #0
 801113e:	3201      	adds	r2, #1
 8011140:	4291      	cmp	r1, r2
 8011142:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011146:	d8fa      	bhi.n	801113e <rcutils_string_map_reserve+0x5e>
 8011148:	e004      	b.n	8011154 <rcutils_string_map_reserve+0x74>
 801114a:	692b      	ldr	r3, [r5, #16]
 801114c:	6828      	ldr	r0, [r5, #0]
 801114e:	4798      	blx	r3
 8011150:	6835      	ldr	r5, [r6, #0]
 8011152:	602c      	str	r4, [r5, #0]
 8011154:	606c      	str	r4, [r5, #4]
 8011156:	2000      	movs	r0, #0
 8011158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801115a:	2000      	movs	r0, #0
 801115c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801115e:	200a      	movs	r0, #10
 8011160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011162:	200b      	movs	r0, #11
 8011164:	4770      	bx	lr
 8011166:	4438      	add	r0, r7
 8011168:	2200      	movs	r2, #0
 801116a:	e9c3 2200 	strd	r2, r2, [r3]
 801116e:	3308      	adds	r3, #8
 8011170:	4283      	cmp	r3, r0
 8011172:	d1fa      	bne.n	801116a <rcutils_string_map_reserve+0x8a>
 8011174:	e7ee      	b.n	8011154 <rcutils_string_map_reserve+0x74>
 8011176:	bf00      	nop

08011178 <rcutils_string_map_init>:
 8011178:	b082      	sub	sp, #8
 801117a:	b570      	push	{r4, r5, r6, lr}
 801117c:	ac04      	add	r4, sp, #16
 801117e:	e884 000c 	stmia.w	r4, {r2, r3}
 8011182:	b378      	cbz	r0, 80111e4 <rcutils_string_map_init+0x6c>
 8011184:	6806      	ldr	r6, [r0, #0]
 8011186:	4604      	mov	r4, r0
 8011188:	b12e      	cbz	r6, 8011196 <rcutils_string_map_init+0x1e>
 801118a:	251e      	movs	r5, #30
 801118c:	4628      	mov	r0, r5
 801118e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011192:	b002      	add	sp, #8
 8011194:	4770      	bx	lr
 8011196:	a804      	add	r0, sp, #16
 8011198:	460d      	mov	r5, r1
 801119a:	f7f9 f85d 	bl	800a258 <rcutils_allocator_is_valid>
 801119e:	b308      	cbz	r0, 80111e4 <rcutils_string_map_init+0x6c>
 80111a0:	9b04      	ldr	r3, [sp, #16]
 80111a2:	9908      	ldr	r1, [sp, #32]
 80111a4:	2020      	movs	r0, #32
 80111a6:	4798      	blx	r3
 80111a8:	6020      	str	r0, [r4, #0]
 80111aa:	b308      	cbz	r0, 80111f0 <rcutils_string_map_init+0x78>
 80111ac:	f10d 0e10 	add.w	lr, sp, #16
 80111b0:	e9c0 6600 	strd	r6, r6, [r0]
 80111b4:	6086      	str	r6, [r0, #8]
 80111b6:	f100 0c0c 	add.w	ip, r0, #12
 80111ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80111be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80111c2:	f8de 3000 	ldr.w	r3, [lr]
 80111c6:	f8cc 3000 	str.w	r3, [ip]
 80111ca:	4629      	mov	r1, r5
 80111cc:	4620      	mov	r0, r4
 80111ce:	f7ff ff87 	bl	80110e0 <rcutils_string_map_reserve>
 80111d2:	4605      	mov	r5, r0
 80111d4:	2800      	cmp	r0, #0
 80111d6:	d0d9      	beq.n	801118c <rcutils_string_map_init+0x14>
 80111d8:	9b05      	ldr	r3, [sp, #20]
 80111da:	9908      	ldr	r1, [sp, #32]
 80111dc:	6820      	ldr	r0, [r4, #0]
 80111de:	4798      	blx	r3
 80111e0:	6026      	str	r6, [r4, #0]
 80111e2:	e7d3      	b.n	801118c <rcutils_string_map_init+0x14>
 80111e4:	250b      	movs	r5, #11
 80111e6:	4628      	mov	r0, r5
 80111e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111ec:	b002      	add	sp, #8
 80111ee:	4770      	bx	lr
 80111f0:	250a      	movs	r5, #10
 80111f2:	e7cb      	b.n	801118c <rcutils_string_map_init+0x14>

080111f4 <rcutils_string_map_fini>:
 80111f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111f8:	b083      	sub	sp, #12
 80111fa:	2800      	cmp	r0, #0
 80111fc:	d03e      	beq.n	801127c <rcutils_string_map_fini+0x88>
 80111fe:	6804      	ldr	r4, [r0, #0]
 8011200:	4606      	mov	r6, r0
 8011202:	2c00      	cmp	r4, #0
 8011204:	d036      	beq.n	8011274 <rcutils_string_map_fini+0x80>
 8011206:	6863      	ldr	r3, [r4, #4]
 8011208:	b34b      	cbz	r3, 801125e <rcutils_string_map_fini+0x6a>
 801120a:	2500      	movs	r5, #0
 801120c:	6822      	ldr	r2, [r4, #0]
 801120e:	462f      	mov	r7, r5
 8011210:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8011214:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8011218:	b1f0      	cbz	r0, 8011258 <rcutils_string_map_fini+0x64>
 801121a:	69e1      	ldr	r1, [r4, #28]
 801121c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011220:	9101      	str	r1, [sp, #4]
 8011222:	47c8      	blx	r9
 8011224:	6823      	ldr	r3, [r4, #0]
 8011226:	9901      	ldr	r1, [sp, #4]
 8011228:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 801122c:	eb03 0208 	add.w	r2, r3, r8
 8011230:	3501      	adds	r5, #1
 8011232:	6850      	ldr	r0, [r2, #4]
 8011234:	47c8      	blx	r9
 8011236:	6822      	ldr	r2, [r4, #0]
 8011238:	68a3      	ldr	r3, [r4, #8]
 801123a:	4442      	add	r2, r8
 801123c:	3b01      	subs	r3, #1
 801123e:	6057      	str	r7, [r2, #4]
 8011240:	60a3      	str	r3, [r4, #8]
 8011242:	6834      	ldr	r4, [r6, #0]
 8011244:	6863      	ldr	r3, [r4, #4]
 8011246:	429d      	cmp	r5, r3
 8011248:	d209      	bcs.n	801125e <rcutils_string_map_fini+0x6a>
 801124a:	6822      	ldr	r2, [r4, #0]
 801124c:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8011250:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8011254:	2800      	cmp	r0, #0
 8011256:	d1e0      	bne.n	801121a <rcutils_string_map_fini+0x26>
 8011258:	3501      	adds	r5, #1
 801125a:	429d      	cmp	r5, r3
 801125c:	d3d8      	bcc.n	8011210 <rcutils_string_map_fini+0x1c>
 801125e:	2100      	movs	r1, #0
 8011260:	4630      	mov	r0, r6
 8011262:	f7ff ff3d 	bl	80110e0 <rcutils_string_map_reserve>
 8011266:	4604      	mov	r4, r0
 8011268:	b920      	cbnz	r0, 8011274 <rcutils_string_map_fini+0x80>
 801126a:	6830      	ldr	r0, [r6, #0]
 801126c:	6903      	ldr	r3, [r0, #16]
 801126e:	69c1      	ldr	r1, [r0, #28]
 8011270:	4798      	blx	r3
 8011272:	6034      	str	r4, [r6, #0]
 8011274:	4620      	mov	r0, r4
 8011276:	b003      	add	sp, #12
 8011278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801127c:	240b      	movs	r4, #11
 801127e:	4620      	mov	r0, r4
 8011280:	b003      	add	sp, #12
 8011282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011286:	bf00      	nop

08011288 <rcutils_string_map_getn>:
 8011288:	b338      	cbz	r0, 80112da <rcutils_string_map_getn+0x52>
 801128a:	6800      	ldr	r0, [r0, #0]
 801128c:	b328      	cbz	r0, 80112da <rcutils_string_map_getn+0x52>
 801128e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011292:	460f      	mov	r7, r1
 8011294:	b1d1      	cbz	r1, 80112cc <rcutils_string_map_getn+0x44>
 8011296:	e9d0 6900 	ldrd	r6, r9, [r0]
 801129a:	f1b9 0f00 	cmp.w	r9, #0
 801129e:	d015      	beq.n	80112cc <rcutils_string_map_getn+0x44>
 80112a0:	4690      	mov	r8, r2
 80112a2:	2400      	movs	r4, #0
 80112a4:	f856 5034 	ldr.w	r5, [r6, r4, lsl #3]
 80112a8:	eb06 0ac4 	add.w	sl, r6, r4, lsl #3
 80112ac:	4628      	mov	r0, r5
 80112ae:	3401      	adds	r4, #1
 80112b0:	b155      	cbz	r5, 80112c8 <rcutils_string_map_getn+0x40>
 80112b2:	f7ee fff5 	bl	80002a0 <strlen>
 80112b6:	4540      	cmp	r0, r8
 80112b8:	4602      	mov	r2, r0
 80112ba:	4629      	mov	r1, r5
 80112bc:	bf38      	it	cc
 80112be:	4642      	movcc	r2, r8
 80112c0:	4638      	mov	r0, r7
 80112c2:	f004 fa98 	bl	80157f6 <strncmp>
 80112c6:	b120      	cbz	r0, 80112d2 <rcutils_string_map_getn+0x4a>
 80112c8:	45a1      	cmp	r9, r4
 80112ca:	d1eb      	bne.n	80112a4 <rcutils_string_map_getn+0x1c>
 80112cc:	2000      	movs	r0, #0
 80112ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112d2:	f8da 0004 	ldr.w	r0, [sl, #4]
 80112d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112da:	4770      	bx	lr

080112dc <rmw_get_zero_initialized_context>:
 80112dc:	b510      	push	{r4, lr}
 80112de:	4604      	mov	r4, r0
 80112e0:	3010      	adds	r0, #16
 80112e2:	f000 f80b 	bl	80112fc <rmw_get_zero_initialized_init_options>
 80112e6:	2300      	movs	r3, #0
 80112e8:	2000      	movs	r0, #0
 80112ea:	2100      	movs	r1, #0
 80112ec:	e9c4 0100 	strd	r0, r1, [r4]
 80112f0:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 80112f4:	60a3      	str	r3, [r4, #8]
 80112f6:	4620      	mov	r0, r4
 80112f8:	bd10      	pop	{r4, pc}
 80112fa:	bf00      	nop

080112fc <rmw_get_zero_initialized_init_options>:
 80112fc:	b510      	push	{r4, lr}
 80112fe:	2258      	movs	r2, #88	; 0x58
 8011300:	4604      	mov	r4, r0
 8011302:	2100      	movs	r1, #0
 8011304:	f004 fa62 	bl	80157cc <memset>
 8011308:	f104 0010 	add.w	r0, r4, #16
 801130c:	f000 f80a 	bl	8011324 <rmw_get_default_security_options>
 8011310:	f104 001c 	add.w	r0, r4, #28
 8011314:	f003 fd4c 	bl	8014db0 <rmw_get_zero_initialized_discovery_options>
 8011318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801131c:	60e3      	str	r3, [r4, #12]
 801131e:	4620      	mov	r0, r4
 8011320:	bd10      	pop	{r4, pc}
 8011322:	bf00      	nop

08011324 <rmw_get_default_security_options>:
 8011324:	2200      	movs	r2, #0
 8011326:	7002      	strb	r2, [r0, #0]
 8011328:	6042      	str	r2, [r0, #4]
 801132a:	4770      	bx	lr

0801132c <rmw_subscription_content_filter_options_fini>:
 801132c:	b1b0      	cbz	r0, 801135c <rmw_subscription_content_filter_options_fini+0x30>
 801132e:	b538      	push	{r3, r4, r5, lr}
 8011330:	4604      	mov	r4, r0
 8011332:	4608      	mov	r0, r1
 8011334:	460d      	mov	r5, r1
 8011336:	f7f8 ff8f 	bl	800a258 <rcutils_allocator_is_valid>
 801133a:	b168      	cbz	r0, 8011358 <rmw_subscription_content_filter_options_fini+0x2c>
 801133c:	6820      	ldr	r0, [r4, #0]
 801133e:	b120      	cbz	r0, 801134a <rmw_subscription_content_filter_options_fini+0x1e>
 8011340:	686b      	ldr	r3, [r5, #4]
 8011342:	6929      	ldr	r1, [r5, #16]
 8011344:	4798      	blx	r3
 8011346:	2300      	movs	r3, #0
 8011348:	6023      	str	r3, [r4, #0]
 801134a:	1d20      	adds	r0, r4, #4
 801134c:	f003 fd08 	bl	8014d60 <rcutils_string_array_fini>
 8011350:	3800      	subs	r0, #0
 8011352:	bf18      	it	ne
 8011354:	2001      	movne	r0, #1
 8011356:	bd38      	pop	{r3, r4, r5, pc}
 8011358:	200b      	movs	r0, #11
 801135a:	bd38      	pop	{r3, r4, r5, pc}
 801135c:	200b      	movs	r0, #11
 801135e:	4770      	bx	lr

08011360 <rmw_get_default_subscription_options>:
 8011360:	2200      	movs	r2, #0
 8011362:	e9c0 2200 	strd	r2, r2, [r0]
 8011366:	6082      	str	r2, [r0, #8]
 8011368:	4770      	bx	lr
 801136a:	bf00      	nop

0801136c <rmw_time_equal>:
 801136c:	b4f0      	push	{r4, r5, r6, r7}
 801136e:	b084      	sub	sp, #16
 8011370:	ac04      	add	r4, sp, #16
 8011372:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011376:	4603      	mov	r3, r0
 8011378:	4924      	ldr	r1, [pc, #144]	; (801140c <rmw_time_equal+0xa0>)
 801137a:	9e03      	ldr	r6, [sp, #12]
 801137c:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011380:	2202      	movs	r2, #2
 8011382:	4299      	cmp	r1, r3
 8011384:	41aa      	sbcs	r2, r5
 8011386:	d330      	bcc.n	80113ea <rmw_time_equal+0x7e>
 8011388:	4c21      	ldr	r4, [pc, #132]	; (8011410 <rmw_time_equal+0xa4>)
 801138a:	fba3 3204 	umull	r3, r2, r3, r4
 801138e:	fb04 2205 	mla	r2, r4, r5, r2
 8011392:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011396:	43dd      	mvns	r5, r3
 8011398:	1a8c      	subs	r4, r1, r2
 801139a:	4285      	cmp	r5, r0
 801139c:	41b4      	sbcs	r4, r6
 801139e:	d332      	bcc.n	8011406 <rmw_time_equal+0x9a>
 80113a0:	eb10 0c03 	adds.w	ip, r0, r3
 80113a4:	eb42 0106 	adc.w	r1, r2, r6
 80113a8:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80113ac:	4817      	ldr	r0, [pc, #92]	; (801140c <rmw_time_equal+0xa0>)
 80113ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80113b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80113b2:	2202      	movs	r2, #2
 80113b4:	4298      	cmp	r0, r3
 80113b6:	41b2      	sbcs	r2, r6
 80113b8:	d31c      	bcc.n	80113f4 <rmw_time_equal+0x88>
 80113ba:	4c15      	ldr	r4, [pc, #84]	; (8011410 <rmw_time_equal+0xa4>)
 80113bc:	fba3 3204 	umull	r3, r2, r3, r4
 80113c0:	fb04 2206 	mla	r2, r4, r6, r2
 80113c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80113c8:	43de      	mvns	r6, r3
 80113ca:	1a84      	subs	r4, r0, r2
 80113cc:	42ae      	cmp	r6, r5
 80113ce:	41bc      	sbcs	r4, r7
 80113d0:	d315      	bcc.n	80113fe <rmw_time_equal+0x92>
 80113d2:	195b      	adds	r3, r3, r5
 80113d4:	eb42 0207 	adc.w	r2, r2, r7
 80113d8:	428a      	cmp	r2, r1
 80113da:	bf08      	it	eq
 80113dc:	4563      	cmpeq	r3, ip
 80113de:	bf0c      	ite	eq
 80113e0:	2001      	moveq	r0, #1
 80113e2:	2000      	movne	r0, #0
 80113e4:	b004      	add	sp, #16
 80113e6:	bcf0      	pop	{r4, r5, r6, r7}
 80113e8:	4770      	bx	lr
 80113ea:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80113ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80113f2:	e7d9      	b.n	80113a8 <rmw_time_equal+0x3c>
 80113f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80113fc:	e7ec      	b.n	80113d8 <rmw_time_equal+0x6c>
 80113fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011402:	4602      	mov	r2, r0
 8011404:	e7e8      	b.n	80113d8 <rmw_time_equal+0x6c>
 8011406:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801140a:	e7cd      	b.n	80113a8 <rmw_time_equal+0x3c>
 801140c:	25c17d04 	.word	0x25c17d04
 8011410:	3b9aca00 	.word	0x3b9aca00

08011414 <rmw_time_total_nsec>:
 8011414:	b470      	push	{r4, r5, r6}
 8011416:	b085      	sub	sp, #20
 8011418:	ac04      	add	r4, sp, #16
 801141a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801141e:	4603      	mov	r3, r0
 8011420:	4912      	ldr	r1, [pc, #72]	; (801146c <rmw_time_total_nsec+0x58>)
 8011422:	9e03      	ldr	r6, [sp, #12]
 8011424:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011428:	2202      	movs	r2, #2
 801142a:	4299      	cmp	r1, r3
 801142c:	41aa      	sbcs	r2, r5
 801142e:	d311      	bcc.n	8011454 <rmw_time_total_nsec+0x40>
 8011430:	4c0f      	ldr	r4, [pc, #60]	; (8011470 <rmw_time_total_nsec+0x5c>)
 8011432:	fba3 3204 	umull	r3, r2, r3, r4
 8011436:	fb04 2205 	mla	r2, r4, r5, r2
 801143a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801143e:	43dd      	mvns	r5, r3
 8011440:	1a8c      	subs	r4, r1, r2
 8011442:	4285      	cmp	r5, r0
 8011444:	41b4      	sbcs	r4, r6
 8011446:	d30c      	bcc.n	8011462 <rmw_time_total_nsec+0x4e>
 8011448:	1818      	adds	r0, r3, r0
 801144a:	eb42 0106 	adc.w	r1, r2, r6
 801144e:	b005      	add	sp, #20
 8011450:	bc70      	pop	{r4, r5, r6}
 8011452:	4770      	bx	lr
 8011454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011458:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801145c:	b005      	add	sp, #20
 801145e:	bc70      	pop	{r4, r5, r6}
 8011460:	4770      	bx	lr
 8011462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011466:	b005      	add	sp, #20
 8011468:	bc70      	pop	{r4, r5, r6}
 801146a:	4770      	bx	lr
 801146c:	25c17d04 	.word	0x25c17d04
 8011470:	3b9aca00 	.word	0x3b9aca00

08011474 <rmw_get_zero_initialized_message_info>:
 8011474:	b510      	push	{r4, lr}
 8011476:	2238      	movs	r2, #56	; 0x38
 8011478:	4604      	mov	r4, r0
 801147a:	2100      	movs	r1, #0
 801147c:	f004 f9a6 	bl	80157cc <memset>
 8011480:	4620      	mov	r0, r4
 8011482:	bd10      	pop	{r4, pc}

08011484 <rmw_validate_full_topic_name>:
 8011484:	2800      	cmp	r0, #0
 8011486:	d057      	beq.n	8011538 <rmw_validate_full_topic_name+0xb4>
 8011488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801148c:	460d      	mov	r5, r1
 801148e:	2900      	cmp	r1, #0
 8011490:	d054      	beq.n	801153c <rmw_validate_full_topic_name+0xb8>
 8011492:	4616      	mov	r6, r2
 8011494:	4604      	mov	r4, r0
 8011496:	f7ee ff03 	bl	80002a0 <strlen>
 801149a:	b148      	cbz	r0, 80114b0 <rmw_validate_full_topic_name+0x2c>
 801149c:	7823      	ldrb	r3, [r4, #0]
 801149e:	2b2f      	cmp	r3, #47	; 0x2f
 80114a0:	d00d      	beq.n	80114be <rmw_validate_full_topic_name+0x3a>
 80114a2:	2302      	movs	r3, #2
 80114a4:	602b      	str	r3, [r5, #0]
 80114a6:	b13e      	cbz	r6, 80114b8 <rmw_validate_full_topic_name+0x34>
 80114a8:	2000      	movs	r0, #0
 80114aa:	6030      	str	r0, [r6, #0]
 80114ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114b0:	2301      	movs	r3, #1
 80114b2:	602b      	str	r3, [r5, #0]
 80114b4:	2e00      	cmp	r6, #0
 80114b6:	d1f7      	bne.n	80114a8 <rmw_validate_full_topic_name+0x24>
 80114b8:	2000      	movs	r0, #0
 80114ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114be:	1e43      	subs	r3, r0, #1
 80114c0:	5ce2      	ldrb	r2, [r4, r3]
 80114c2:	2a2f      	cmp	r2, #47	; 0x2f
 80114c4:	d03c      	beq.n	8011540 <rmw_validate_full_topic_name+0xbc>
 80114c6:	1e63      	subs	r3, r4, #1
 80114c8:	eb03 0800 	add.w	r8, r3, r0
 80114cc:	f1c4 0e01 	rsb	lr, r4, #1
 80114d0:	eb0e 0703 	add.w	r7, lr, r3
 80114d4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80114d8:	f021 0220 	bic.w	r2, r1, #32
 80114dc:	3a41      	subs	r2, #65	; 0x41
 80114de:	2a19      	cmp	r2, #25
 80114e0:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 80114e4:	d90b      	bls.n	80114fe <rmw_validate_full_topic_name+0x7a>
 80114e6:	295f      	cmp	r1, #95	; 0x5f
 80114e8:	d009      	beq.n	80114fe <rmw_validate_full_topic_name+0x7a>
 80114ea:	f1bc 0f0a 	cmp.w	ip, #10
 80114ee:	d906      	bls.n	80114fe <rmw_validate_full_topic_name+0x7a>
 80114f0:	2304      	movs	r3, #4
 80114f2:	602b      	str	r3, [r5, #0]
 80114f4:	2e00      	cmp	r6, #0
 80114f6:	d0df      	beq.n	80114b8 <rmw_validate_full_topic_name+0x34>
 80114f8:	6037      	str	r7, [r6, #0]
 80114fa:	2000      	movs	r0, #0
 80114fc:	e7d6      	b.n	80114ac <rmw_validate_full_topic_name+0x28>
 80114fe:	4543      	cmp	r3, r8
 8011500:	d1e6      	bne.n	80114d0 <rmw_validate_full_topic_name+0x4c>
 8011502:	4f1a      	ldr	r7, [pc, #104]	; (801156c <rmw_validate_full_topic_name+0xe8>)
 8011504:	2301      	movs	r3, #1
 8011506:	e004      	b.n	8011512 <rmw_validate_full_topic_name+0x8e>
 8011508:	4298      	cmp	r0, r3
 801150a:	f104 0401 	add.w	r4, r4, #1
 801150e:	d91c      	bls.n	801154a <rmw_validate_full_topic_name+0xc6>
 8011510:	4613      	mov	r3, r2
 8011512:	4298      	cmp	r0, r3
 8011514:	f103 0201 	add.w	r2, r3, #1
 8011518:	d0f6      	beq.n	8011508 <rmw_validate_full_topic_name+0x84>
 801151a:	7821      	ldrb	r1, [r4, #0]
 801151c:	292f      	cmp	r1, #47	; 0x2f
 801151e:	d1f3      	bne.n	8011508 <rmw_validate_full_topic_name+0x84>
 8011520:	7861      	ldrb	r1, [r4, #1]
 8011522:	292f      	cmp	r1, #47	; 0x2f
 8011524:	d01c      	beq.n	8011560 <rmw_validate_full_topic_name+0xdc>
 8011526:	5dc9      	ldrb	r1, [r1, r7]
 8011528:	0749      	lsls	r1, r1, #29
 801152a:	d5ed      	bpl.n	8011508 <rmw_validate_full_topic_name+0x84>
 801152c:	2206      	movs	r2, #6
 801152e:	602a      	str	r2, [r5, #0]
 8011530:	2e00      	cmp	r6, #0
 8011532:	d0c1      	beq.n	80114b8 <rmw_validate_full_topic_name+0x34>
 8011534:	6033      	str	r3, [r6, #0]
 8011536:	e7bf      	b.n	80114b8 <rmw_validate_full_topic_name+0x34>
 8011538:	200b      	movs	r0, #11
 801153a:	4770      	bx	lr
 801153c:	200b      	movs	r0, #11
 801153e:	e7b5      	b.n	80114ac <rmw_validate_full_topic_name+0x28>
 8011540:	2203      	movs	r2, #3
 8011542:	602a      	str	r2, [r5, #0]
 8011544:	2e00      	cmp	r6, #0
 8011546:	d1f5      	bne.n	8011534 <rmw_validate_full_topic_name+0xb0>
 8011548:	e7b6      	b.n	80114b8 <rmw_validate_full_topic_name+0x34>
 801154a:	28f7      	cmp	r0, #247	; 0xf7
 801154c:	d802      	bhi.n	8011554 <rmw_validate_full_topic_name+0xd0>
 801154e:	2000      	movs	r0, #0
 8011550:	6028      	str	r0, [r5, #0]
 8011552:	e7ab      	b.n	80114ac <rmw_validate_full_topic_name+0x28>
 8011554:	2307      	movs	r3, #7
 8011556:	602b      	str	r3, [r5, #0]
 8011558:	2e00      	cmp	r6, #0
 801155a:	d0ad      	beq.n	80114b8 <rmw_validate_full_topic_name+0x34>
 801155c:	23f6      	movs	r3, #246	; 0xf6
 801155e:	e7e9      	b.n	8011534 <rmw_validate_full_topic_name+0xb0>
 8011560:	2205      	movs	r2, #5
 8011562:	602a      	str	r2, [r5, #0]
 8011564:	2e00      	cmp	r6, #0
 8011566:	d1e5      	bne.n	8011534 <rmw_validate_full_topic_name+0xb0>
 8011568:	e7a6      	b.n	80114b8 <rmw_validate_full_topic_name+0x34>
 801156a:	bf00      	nop
 801156c:	080177dc 	.word	0x080177dc

08011570 <rmw_validate_namespace_with_size>:
 8011570:	b340      	cbz	r0, 80115c4 <rmw_validate_namespace_with_size+0x54>
 8011572:	b570      	push	{r4, r5, r6, lr}
 8011574:	4614      	mov	r4, r2
 8011576:	b0c2      	sub	sp, #264	; 0x108
 8011578:	b332      	cbz	r2, 80115c8 <rmw_validate_namespace_with_size+0x58>
 801157a:	2901      	cmp	r1, #1
 801157c:	460d      	mov	r5, r1
 801157e:	461e      	mov	r6, r3
 8011580:	d102      	bne.n	8011588 <rmw_validate_namespace_with_size+0x18>
 8011582:	7803      	ldrb	r3, [r0, #0]
 8011584:	2b2f      	cmp	r3, #47	; 0x2f
 8011586:	d012      	beq.n	80115ae <rmw_validate_namespace_with_size+0x3e>
 8011588:	aa01      	add	r2, sp, #4
 801158a:	4669      	mov	r1, sp
 801158c:	f7ff ff7a 	bl	8011484 <rmw_validate_full_topic_name>
 8011590:	b978      	cbnz	r0, 80115b2 <rmw_validate_namespace_with_size+0x42>
 8011592:	9b00      	ldr	r3, [sp, #0]
 8011594:	b14b      	cbz	r3, 80115aa <rmw_validate_namespace_with_size+0x3a>
 8011596:	2b07      	cmp	r3, #7
 8011598:	d007      	beq.n	80115aa <rmw_validate_namespace_with_size+0x3a>
 801159a:	1e5a      	subs	r2, r3, #1
 801159c:	2a05      	cmp	r2, #5
 801159e:	d82b      	bhi.n	80115f8 <rmw_validate_namespace_with_size+0x88>
 80115a0:	e8df f002 	tbb	[pc, r2]
 80115a4:	1e212427 	.word	0x1e212427
 80115a8:	141b      	.short	0x141b
 80115aa:	2df5      	cmp	r5, #245	; 0xf5
 80115ac:	d803      	bhi.n	80115b6 <rmw_validate_namespace_with_size+0x46>
 80115ae:	2000      	movs	r0, #0
 80115b0:	6020      	str	r0, [r4, #0]
 80115b2:	b042      	add	sp, #264	; 0x108
 80115b4:	bd70      	pop	{r4, r5, r6, pc}
 80115b6:	2307      	movs	r3, #7
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	2e00      	cmp	r6, #0
 80115bc:	d0f9      	beq.n	80115b2 <rmw_validate_namespace_with_size+0x42>
 80115be:	23f4      	movs	r3, #244	; 0xf4
 80115c0:	6033      	str	r3, [r6, #0]
 80115c2:	e7f6      	b.n	80115b2 <rmw_validate_namespace_with_size+0x42>
 80115c4:	200b      	movs	r0, #11
 80115c6:	4770      	bx	lr
 80115c8:	200b      	movs	r0, #11
 80115ca:	e7f2      	b.n	80115b2 <rmw_validate_namespace_with_size+0x42>
 80115cc:	2306      	movs	r3, #6
 80115ce:	6023      	str	r3, [r4, #0]
 80115d0:	2e00      	cmp	r6, #0
 80115d2:	d0ee      	beq.n	80115b2 <rmw_validate_namespace_with_size+0x42>
 80115d4:	9b01      	ldr	r3, [sp, #4]
 80115d6:	6033      	str	r3, [r6, #0]
 80115d8:	e7eb      	b.n	80115b2 <rmw_validate_namespace_with_size+0x42>
 80115da:	2305      	movs	r3, #5
 80115dc:	6023      	str	r3, [r4, #0]
 80115de:	e7f7      	b.n	80115d0 <rmw_validate_namespace_with_size+0x60>
 80115e0:	2304      	movs	r3, #4
 80115e2:	6023      	str	r3, [r4, #0]
 80115e4:	e7f4      	b.n	80115d0 <rmw_validate_namespace_with_size+0x60>
 80115e6:	2303      	movs	r3, #3
 80115e8:	6023      	str	r3, [r4, #0]
 80115ea:	e7f1      	b.n	80115d0 <rmw_validate_namespace_with_size+0x60>
 80115ec:	2302      	movs	r3, #2
 80115ee:	6023      	str	r3, [r4, #0]
 80115f0:	e7ee      	b.n	80115d0 <rmw_validate_namespace_with_size+0x60>
 80115f2:	2301      	movs	r3, #1
 80115f4:	6023      	str	r3, [r4, #0]
 80115f6:	e7eb      	b.n	80115d0 <rmw_validate_namespace_with_size+0x60>
 80115f8:	4a03      	ldr	r2, [pc, #12]	; (8011608 <rmw_validate_namespace_with_size+0x98>)
 80115fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80115fe:	a802      	add	r0, sp, #8
 8011600:	f7ff fcf4 	bl	8010fec <rcutils_snprintf>
 8011604:	2001      	movs	r0, #1
 8011606:	e7d4      	b.n	80115b2 <rmw_validate_namespace_with_size+0x42>
 8011608:	08017074 	.word	0x08017074

0801160c <rmw_validate_namespace>:
 801160c:	b168      	cbz	r0, 801162a <rmw_validate_namespace+0x1e>
 801160e:	b570      	push	{r4, r5, r6, lr}
 8011610:	460d      	mov	r5, r1
 8011612:	4616      	mov	r6, r2
 8011614:	4604      	mov	r4, r0
 8011616:	f7ee fe43 	bl	80002a0 <strlen>
 801161a:	4633      	mov	r3, r6
 801161c:	4601      	mov	r1, r0
 801161e:	462a      	mov	r2, r5
 8011620:	4620      	mov	r0, r4
 8011622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011626:	f7ff bfa3 	b.w	8011570 <rmw_validate_namespace_with_size>
 801162a:	200b      	movs	r0, #11
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop

08011630 <rmw_namespace_validation_result_string>:
 8011630:	2807      	cmp	r0, #7
 8011632:	bf9a      	itte	ls
 8011634:	4b02      	ldrls	r3, [pc, #8]	; (8011640 <rmw_namespace_validation_result_string+0x10>)
 8011636:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801163a:	4802      	ldrhi	r0, [pc, #8]	; (8011644 <rmw_namespace_validation_result_string+0x14>)
 801163c:	4770      	bx	lr
 801163e:	bf00      	nop
 8011640:	0801726c 	.word	0x0801726c
 8011644:	080170c4 	.word	0x080170c4

08011648 <rmw_validate_node_name>:
 8011648:	2800      	cmp	r0, #0
 801164a:	d03b      	beq.n	80116c4 <rmw_validate_node_name+0x7c>
 801164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011650:	460d      	mov	r5, r1
 8011652:	2900      	cmp	r1, #0
 8011654:	d038      	beq.n	80116c8 <rmw_validate_node_name+0x80>
 8011656:	4616      	mov	r6, r2
 8011658:	4604      	mov	r4, r0
 801165a:	f7ee fe21 	bl	80002a0 <strlen>
 801165e:	b1e0      	cbz	r0, 801169a <rmw_validate_node_name+0x52>
 8011660:	1e63      	subs	r3, r4, #1
 8011662:	eb03 0800 	add.w	r8, r3, r0
 8011666:	f1c4 0101 	rsb	r1, r4, #1
 801166a:	18cf      	adds	r7, r1, r3
 801166c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8011670:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8011674:	f02e 0c20 	bic.w	ip, lr, #32
 8011678:	2a09      	cmp	r2, #9
 801167a:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801167e:	d914      	bls.n	80116aa <rmw_validate_node_name+0x62>
 8011680:	f1bc 0f19 	cmp.w	ip, #25
 8011684:	d911      	bls.n	80116aa <rmw_validate_node_name+0x62>
 8011686:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 801168a:	d00e      	beq.n	80116aa <rmw_validate_node_name+0x62>
 801168c:	2302      	movs	r3, #2
 801168e:	602b      	str	r3, [r5, #0]
 8011690:	b106      	cbz	r6, 8011694 <rmw_validate_node_name+0x4c>
 8011692:	6037      	str	r7, [r6, #0]
 8011694:	2000      	movs	r0, #0
 8011696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801169a:	2301      	movs	r3, #1
 801169c:	602b      	str	r3, [r5, #0]
 801169e:	2e00      	cmp	r6, #0
 80116a0:	d0f8      	beq.n	8011694 <rmw_validate_node_name+0x4c>
 80116a2:	2000      	movs	r0, #0
 80116a4:	6030      	str	r0, [r6, #0]
 80116a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116aa:	4543      	cmp	r3, r8
 80116ac:	d1dd      	bne.n	801166a <rmw_validate_node_name+0x22>
 80116ae:	7822      	ldrb	r2, [r4, #0]
 80116b0:	4b0d      	ldr	r3, [pc, #52]	; (80116e8 <rmw_validate_node_name+0xa0>)
 80116b2:	5cd3      	ldrb	r3, [r2, r3]
 80116b4:	f013 0304 	ands.w	r3, r3, #4
 80116b8:	d110      	bne.n	80116dc <rmw_validate_node_name+0x94>
 80116ba:	28ff      	cmp	r0, #255	; 0xff
 80116bc:	d806      	bhi.n	80116cc <rmw_validate_node_name+0x84>
 80116be:	602b      	str	r3, [r5, #0]
 80116c0:	4618      	mov	r0, r3
 80116c2:	e7e8      	b.n	8011696 <rmw_validate_node_name+0x4e>
 80116c4:	200b      	movs	r0, #11
 80116c6:	4770      	bx	lr
 80116c8:	200b      	movs	r0, #11
 80116ca:	e7e4      	b.n	8011696 <rmw_validate_node_name+0x4e>
 80116cc:	2204      	movs	r2, #4
 80116ce:	602a      	str	r2, [r5, #0]
 80116d0:	2e00      	cmp	r6, #0
 80116d2:	d0df      	beq.n	8011694 <rmw_validate_node_name+0x4c>
 80116d4:	22fe      	movs	r2, #254	; 0xfe
 80116d6:	6032      	str	r2, [r6, #0]
 80116d8:	4618      	mov	r0, r3
 80116da:	e7dc      	b.n	8011696 <rmw_validate_node_name+0x4e>
 80116dc:	2303      	movs	r3, #3
 80116de:	602b      	str	r3, [r5, #0]
 80116e0:	2e00      	cmp	r6, #0
 80116e2:	d1de      	bne.n	80116a2 <rmw_validate_node_name+0x5a>
 80116e4:	e7d6      	b.n	8011694 <rmw_validate_node_name+0x4c>
 80116e6:	bf00      	nop
 80116e8:	080177dc 	.word	0x080177dc

080116ec <rmw_node_name_validation_result_string>:
 80116ec:	2804      	cmp	r0, #4
 80116ee:	bf9a      	itte	ls
 80116f0:	4b02      	ldrls	r3, [pc, #8]	; (80116fc <rmw_node_name_validation_result_string+0x10>)
 80116f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80116f6:	4802      	ldrhi	r0, [pc, #8]	; (8011700 <rmw_node_name_validation_result_string+0x14>)
 80116f8:	4770      	bx	lr
 80116fa:	bf00      	nop
 80116fc:	08017378 	.word	0x08017378
 8011700:	0801728c 	.word	0x0801728c

08011704 <get_memory>:
 8011704:	4603      	mov	r3, r0
 8011706:	6840      	ldr	r0, [r0, #4]
 8011708:	b158      	cbz	r0, 8011722 <get_memory+0x1e>
 801170a:	6842      	ldr	r2, [r0, #4]
 801170c:	605a      	str	r2, [r3, #4]
 801170e:	b10a      	cbz	r2, 8011714 <get_memory+0x10>
 8011710:	2100      	movs	r1, #0
 8011712:	6011      	str	r1, [r2, #0]
 8011714:	681a      	ldr	r2, [r3, #0]
 8011716:	6042      	str	r2, [r0, #4]
 8011718:	b102      	cbz	r2, 801171c <get_memory+0x18>
 801171a:	6010      	str	r0, [r2, #0]
 801171c:	2200      	movs	r2, #0
 801171e:	6002      	str	r2, [r0, #0]
 8011720:	6018      	str	r0, [r3, #0]
 8011722:	4770      	bx	lr

08011724 <put_memory>:
 8011724:	680b      	ldr	r3, [r1, #0]
 8011726:	b10b      	cbz	r3, 801172c <put_memory+0x8>
 8011728:	684a      	ldr	r2, [r1, #4]
 801172a:	605a      	str	r2, [r3, #4]
 801172c:	684a      	ldr	r2, [r1, #4]
 801172e:	b102      	cbz	r2, 8011732 <put_memory+0xe>
 8011730:	6013      	str	r3, [r2, #0]
 8011732:	6803      	ldr	r3, [r0, #0]
 8011734:	428b      	cmp	r3, r1
 8011736:	6843      	ldr	r3, [r0, #4]
 8011738:	bf08      	it	eq
 801173a:	6002      	streq	r2, [r0, #0]
 801173c:	604b      	str	r3, [r1, #4]
 801173e:	b103      	cbz	r3, 8011742 <put_memory+0x1e>
 8011740:	6019      	str	r1, [r3, #0]
 8011742:	2300      	movs	r3, #0
 8011744:	600b      	str	r3, [r1, #0]
 8011746:	6041      	str	r1, [r0, #4]
 8011748:	4770      	bx	lr
 801174a:	bf00      	nop

0801174c <rmw_destroy_client>:
 801174c:	b570      	push	{r4, r5, r6, lr}
 801174e:	b128      	cbz	r0, 801175c <rmw_destroy_client+0x10>
 8011750:	4604      	mov	r4, r0
 8011752:	6800      	ldr	r0, [r0, #0]
 8011754:	460d      	mov	r5, r1
 8011756:	f7f9 fbcd 	bl	800aef4 <is_uxrce_rmw_identifier_valid>
 801175a:	b910      	cbnz	r0, 8011762 <rmw_destroy_client+0x16>
 801175c:	2401      	movs	r4, #1
 801175e:	4620      	mov	r0, r4
 8011760:	bd70      	pop	{r4, r5, r6, pc}
 8011762:	6863      	ldr	r3, [r4, #4]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d0f9      	beq.n	801175c <rmw_destroy_client+0x10>
 8011768:	2d00      	cmp	r5, #0
 801176a:	d0f7      	beq.n	801175c <rmw_destroy_client+0x10>
 801176c:	6828      	ldr	r0, [r5, #0]
 801176e:	f7f9 fbc1 	bl	800aef4 <is_uxrce_rmw_identifier_valid>
 8011772:	2800      	cmp	r0, #0
 8011774:	d0f2      	beq.n	801175c <rmw_destroy_client+0x10>
 8011776:	686e      	ldr	r6, [r5, #4]
 8011778:	2e00      	cmp	r6, #0
 801177a:	d0ef      	beq.n	801175c <rmw_destroy_client+0x10>
 801177c:	6864      	ldr	r4, [r4, #4]
 801177e:	6932      	ldr	r2, [r6, #16]
 8011780:	6920      	ldr	r0, [r4, #16]
 8011782:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011786:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801178a:	6819      	ldr	r1, [r3, #0]
 801178c:	f002 f948 	bl	8013a20 <uxr_buffer_cancel_data>
 8011790:	4602      	mov	r2, r0
 8011792:	6920      	ldr	r0, [r4, #16]
 8011794:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011798:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801179c:	f7f9 fb2a 	bl	800adf4 <run_xrce_session>
 80117a0:	6920      	ldr	r0, [r4, #16]
 80117a2:	6932      	ldr	r2, [r6, #16]
 80117a4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80117a8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80117ac:	6819      	ldr	r1, [r3, #0]
 80117ae:	f7f9 fceb 	bl	800b188 <uxr_buffer_delete_entity>
 80117b2:	4602      	mov	r2, r0
 80117b4:	6920      	ldr	r0, [r4, #16]
 80117b6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80117ba:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80117be:	f7f9 fb19 	bl	800adf4 <run_xrce_session>
 80117c2:	2800      	cmp	r0, #0
 80117c4:	4628      	mov	r0, r5
 80117c6:	bf14      	ite	ne
 80117c8:	2400      	movne	r4, #0
 80117ca:	2402      	moveq	r4, #2
 80117cc:	f7f9 f9fa 	bl	800abc4 <rmw_uxrce_fini_client_memory>
 80117d0:	e7c5      	b.n	801175e <rmw_destroy_client+0x12>
 80117d2:	bf00      	nop

080117d4 <rmw_get_gid_for_client>:
 80117d4:	b1a8      	cbz	r0, 8011802 <rmw_get_gid_for_client+0x2e>
 80117d6:	b538      	push	{r3, r4, r5, lr}
 80117d8:	460c      	mov	r4, r1
 80117da:	b1a1      	cbz	r1, 8011806 <rmw_get_gid_for_client+0x32>
 80117dc:	4605      	mov	r5, r0
 80117de:	6800      	ldr	r0, [r0, #0]
 80117e0:	b120      	cbz	r0, 80117ec <rmw_get_gid_for_client+0x18>
 80117e2:	4b0a      	ldr	r3, [pc, #40]	; (801180c <rmw_get_gid_for_client+0x38>)
 80117e4:	6819      	ldr	r1, [r3, #0]
 80117e6:	f7ee fcfb 	bl	80001e0 <strcmp>
 80117ea:	b940      	cbnz	r0, 80117fe <rmw_get_gid_for_client+0x2a>
 80117ec:	686b      	ldr	r3, [r5, #4]
 80117ee:	2000      	movs	r0, #0
 80117f0:	6060      	str	r0, [r4, #4]
 80117f2:	60a0      	str	r0, [r4, #8]
 80117f4:	60e0      	str	r0, [r4, #12]
 80117f6:	6120      	str	r0, [r4, #16]
 80117f8:	691b      	ldr	r3, [r3, #16]
 80117fa:	6063      	str	r3, [r4, #4]
 80117fc:	bd38      	pop	{r3, r4, r5, pc}
 80117fe:	200c      	movs	r0, #12
 8011800:	bd38      	pop	{r3, r4, r5, pc}
 8011802:	200b      	movs	r0, #11
 8011804:	4770      	bx	lr
 8011806:	200b      	movs	r0, #11
 8011808:	bd38      	pop	{r3, r4, r5, pc}
 801180a:	bf00      	nop
 801180c:	080173a4 	.word	0x080173a4

08011810 <rmw_get_implementation_identifier>:
 8011810:	4b01      	ldr	r3, [pc, #4]	; (8011818 <rmw_get_implementation_identifier+0x8>)
 8011812:	6818      	ldr	r0, [r3, #0]
 8011814:	4770      	bx	lr
 8011816:	bf00      	nop
 8011818:	080173a4 	.word	0x080173a4

0801181c <rmw_create_guard_condition>:
 801181c:	b538      	push	{r3, r4, r5, lr}
 801181e:	4605      	mov	r5, r0
 8011820:	4807      	ldr	r0, [pc, #28]	; (8011840 <rmw_create_guard_condition+0x24>)
 8011822:	f7ff ff6f 	bl	8011704 <get_memory>
 8011826:	b148      	cbz	r0, 801183c <rmw_create_guard_condition+0x20>
 8011828:	6884      	ldr	r4, [r0, #8]
 801182a:	2300      	movs	r3, #0
 801182c:	7423      	strb	r3, [r4, #16]
 801182e:	61e5      	str	r5, [r4, #28]
 8011830:	f7ff ffee 	bl	8011810 <rmw_get_implementation_identifier>
 8011834:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8011838:	f104 0014 	add.w	r0, r4, #20
 801183c:	bd38      	pop	{r3, r4, r5, pc}
 801183e:	bf00      	nop
 8011840:	20010ff4 	.word	0x20010ff4

08011844 <rmw_destroy_guard_condition>:
 8011844:	b508      	push	{r3, lr}
 8011846:	4b08      	ldr	r3, [pc, #32]	; (8011868 <rmw_destroy_guard_condition+0x24>)
 8011848:	6819      	ldr	r1, [r3, #0]
 801184a:	b911      	cbnz	r1, 8011852 <rmw_destroy_guard_condition+0xe>
 801184c:	e00a      	b.n	8011864 <rmw_destroy_guard_condition+0x20>
 801184e:	6849      	ldr	r1, [r1, #4]
 8011850:	b141      	cbz	r1, 8011864 <rmw_destroy_guard_condition+0x20>
 8011852:	688b      	ldr	r3, [r1, #8]
 8011854:	3314      	adds	r3, #20
 8011856:	4298      	cmp	r0, r3
 8011858:	d1f9      	bne.n	801184e <rmw_destroy_guard_condition+0xa>
 801185a:	4803      	ldr	r0, [pc, #12]	; (8011868 <rmw_destroy_guard_condition+0x24>)
 801185c:	f7ff ff62 	bl	8011724 <put_memory>
 8011860:	2000      	movs	r0, #0
 8011862:	bd08      	pop	{r3, pc}
 8011864:	2001      	movs	r0, #1
 8011866:	bd08      	pop	{r3, pc}
 8011868:	20010ff4 	.word	0x20010ff4

0801186c <rmw_init_options_init>:
 801186c:	b084      	sub	sp, #16
 801186e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011870:	b083      	sub	sp, #12
 8011872:	ad09      	add	r5, sp, #36	; 0x24
 8011874:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8011878:	b130      	cbz	r0, 8011888 <rmw_init_options_init+0x1c>
 801187a:	4604      	mov	r4, r0
 801187c:	4628      	mov	r0, r5
 801187e:	f7f8 fceb 	bl	800a258 <rcutils_allocator_is_valid>
 8011882:	b108      	cbz	r0, 8011888 <rmw_init_options_init+0x1c>
 8011884:	68a6      	ldr	r6, [r4, #8]
 8011886:	b12e      	cbz	r6, 8011894 <rmw_init_options_init+0x28>
 8011888:	200b      	movs	r0, #11
 801188a:	b003      	add	sp, #12
 801188c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011890:	b004      	add	sp, #16
 8011892:	4770      	bx	lr
 8011894:	2200      	movs	r2, #0
 8011896:	2300      	movs	r3, #0
 8011898:	e9c4 2300 	strd	r2, r3, [r4]
 801189c:	4b22      	ldr	r3, [pc, #136]	; (8011928 <rmw_init_options_init+0xbc>)
 801189e:	f8df e098 	ldr.w	lr, [pc, #152]	; 8011938 <rmw_init_options_init+0xcc>
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	60a3      	str	r3, [r4, #8]
 80118a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118a8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80118ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118b0:	466f      	mov	r7, sp
 80118b2:	682b      	ldr	r3, [r5, #0]
 80118b4:	f8cc 3000 	str.w	r3, [ip]
 80118b8:	4638      	mov	r0, r7
 80118ba:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 80118be:	60e6      	str	r6, [r4, #12]
 80118c0:	f7ff fd30 	bl	8011324 <rmw_get_default_security_options>
 80118c4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80118c8:	f104 0310 	add.w	r3, r4, #16
 80118cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80118d0:	2203      	movs	r2, #3
 80118d2:	4816      	ldr	r0, [pc, #88]	; (801192c <rmw_init_options_init+0xc0>)
 80118d4:	4916      	ldr	r1, [pc, #88]	; (8011930 <rmw_init_options_init+0xc4>)
 80118d6:	7626      	strb	r6, [r4, #24]
 80118d8:	f7f9 f8b4 	bl	800aa44 <rmw_uxrce_init_init_options_impl_memory>
 80118dc:	4813      	ldr	r0, [pc, #76]	; (801192c <rmw_init_options_init+0xc0>)
 80118de:	f7ff ff11 	bl	8011704 <get_memory>
 80118e2:	b1f0      	cbz	r0, 8011922 <rmw_init_options_init+0xb6>
 80118e4:	4a13      	ldr	r2, [pc, #76]	; (8011934 <rmw_init_options_init+0xc8>)
 80118e6:	6883      	ldr	r3, [r0, #8]
 80118e8:	6851      	ldr	r1, [r2, #4]
 80118ea:	7810      	ldrb	r0, [r2, #0]
 80118ec:	6563      	str	r3, [r4, #84]	; 0x54
 80118ee:	7418      	strb	r0, [r3, #16]
 80118f0:	6159      	str	r1, [r3, #20]
 80118f2:	68d1      	ldr	r1, [r2, #12]
 80118f4:	61d9      	str	r1, [r3, #28]
 80118f6:	6911      	ldr	r1, [r2, #16]
 80118f8:	6219      	str	r1, [r3, #32]
 80118fa:	6951      	ldr	r1, [r2, #20]
 80118fc:	6892      	ldr	r2, [r2, #8]
 80118fe:	619a      	str	r2, [r3, #24]
 8011900:	6259      	str	r1, [r3, #36]	; 0x24
 8011902:	f7fb f89d 	bl	800ca40 <uxr_nanos>
 8011906:	f003 fc93 	bl	8015230 <srand>
 801190a:	f003 fcbf 	bl	801528c <rand>
 801190e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011910:	6298      	str	r0, [r3, #40]	; 0x28
 8011912:	2800      	cmp	r0, #0
 8011914:	d0f9      	beq.n	801190a <rmw_init_options_init+0x9e>
 8011916:	2000      	movs	r0, #0
 8011918:	b003      	add	sp, #12
 801191a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801191e:	b004      	add	sp, #16
 8011920:	4770      	bx	lr
 8011922:	2001      	movs	r0, #1
 8011924:	e7b1      	b.n	801188a <rmw_init_options_init+0x1e>
 8011926:	bf00      	nop
 8011928:	080173a4 	.word	0x080173a4
 801192c:	20011004 	.word	0x20011004
 8011930:	2000c8a0 	.word	0x2000c8a0
 8011934:	2000c72c 	.word	0x2000c72c
 8011938:	08016dec 	.word	0x08016dec

0801193c <rmw_init_options_copy>:
 801193c:	b570      	push	{r4, r5, r6, lr}
 801193e:	b158      	cbz	r0, 8011958 <rmw_init_options_copy+0x1c>
 8011940:	460d      	mov	r5, r1
 8011942:	b149      	cbz	r1, 8011958 <rmw_init_options_copy+0x1c>
 8011944:	4604      	mov	r4, r0
 8011946:	6880      	ldr	r0, [r0, #8]
 8011948:	b120      	cbz	r0, 8011954 <rmw_init_options_copy+0x18>
 801194a:	4b14      	ldr	r3, [pc, #80]	; (801199c <rmw_init_options_copy+0x60>)
 801194c:	6819      	ldr	r1, [r3, #0]
 801194e:	f7ee fc47 	bl	80001e0 <strcmp>
 8011952:	b9e8      	cbnz	r0, 8011990 <rmw_init_options_copy+0x54>
 8011954:	68ae      	ldr	r6, [r5, #8]
 8011956:	b116      	cbz	r6, 801195e <rmw_init_options_copy+0x22>
 8011958:	260b      	movs	r6, #11
 801195a:	4630      	mov	r0, r6
 801195c:	bd70      	pop	{r4, r5, r6, pc}
 801195e:	2258      	movs	r2, #88	; 0x58
 8011960:	4621      	mov	r1, r4
 8011962:	4628      	mov	r0, r5
 8011964:	f004 f80d 	bl	8015982 <memcpy>
 8011968:	480d      	ldr	r0, [pc, #52]	; (80119a0 <rmw_init_options_copy+0x64>)
 801196a:	f7ff fecb 	bl	8011704 <get_memory>
 801196e:	b190      	cbz	r0, 8011996 <rmw_init_options_copy+0x5a>
 8011970:	6883      	ldr	r3, [r0, #8]
 8011972:	656b      	str	r3, [r5, #84]	; 0x54
 8011974:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8011976:	f102 0c10 	add.w	ip, r2, #16
 801197a:	f103 0510 	add.w	r5, r3, #16
 801197e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011984:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011988:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801198c:	4630      	mov	r0, r6
 801198e:	bd70      	pop	{r4, r5, r6, pc}
 8011990:	260c      	movs	r6, #12
 8011992:	4630      	mov	r0, r6
 8011994:	bd70      	pop	{r4, r5, r6, pc}
 8011996:	2601      	movs	r6, #1
 8011998:	e7df      	b.n	801195a <rmw_init_options_copy+0x1e>
 801199a:	bf00      	nop
 801199c:	080173a4 	.word	0x080173a4
 80119a0:	20011004 	.word	0x20011004

080119a4 <rmw_init_options_fini>:
 80119a4:	b368      	cbz	r0, 8011a02 <rmw_init_options_fini+0x5e>
 80119a6:	b510      	push	{r4, lr}
 80119a8:	4604      	mov	r4, r0
 80119aa:	b096      	sub	sp, #88	; 0x58
 80119ac:	3040      	adds	r0, #64	; 0x40
 80119ae:	f7f8 fc53 	bl	800a258 <rcutils_allocator_is_valid>
 80119b2:	b1f0      	cbz	r0, 80119f2 <rmw_init_options_fini+0x4e>
 80119b4:	68a0      	ldr	r0, [r4, #8]
 80119b6:	b120      	cbz	r0, 80119c2 <rmw_init_options_fini+0x1e>
 80119b8:	4b13      	ldr	r3, [pc, #76]	; (8011a08 <rmw_init_options_fini+0x64>)
 80119ba:	6819      	ldr	r1, [r3, #0]
 80119bc:	f7ee fc10 	bl	80001e0 <strcmp>
 80119c0:	b9e8      	cbnz	r0, 80119fe <rmw_init_options_fini+0x5a>
 80119c2:	4b12      	ldr	r3, [pc, #72]	; (8011a0c <rmw_init_options_fini+0x68>)
 80119c4:	6819      	ldr	r1, [r3, #0]
 80119c6:	b1b9      	cbz	r1, 80119f8 <rmw_init_options_fini+0x54>
 80119c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80119ca:	e001      	b.n	80119d0 <rmw_init_options_fini+0x2c>
 80119cc:	6849      	ldr	r1, [r1, #4]
 80119ce:	b199      	cbz	r1, 80119f8 <rmw_init_options_fini+0x54>
 80119d0:	688b      	ldr	r3, [r1, #8]
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d1fa      	bne.n	80119cc <rmw_init_options_fini+0x28>
 80119d6:	480d      	ldr	r0, [pc, #52]	; (8011a0c <rmw_init_options_fini+0x68>)
 80119d8:	f7ff fea4 	bl	8011724 <put_memory>
 80119dc:	4668      	mov	r0, sp
 80119de:	f7ff fc8d 	bl	80112fc <rmw_get_zero_initialized_init_options>
 80119e2:	2258      	movs	r2, #88	; 0x58
 80119e4:	4669      	mov	r1, sp
 80119e6:	4620      	mov	r0, r4
 80119e8:	f003 ffcb 	bl	8015982 <memcpy>
 80119ec:	2000      	movs	r0, #0
 80119ee:	b016      	add	sp, #88	; 0x58
 80119f0:	bd10      	pop	{r4, pc}
 80119f2:	200b      	movs	r0, #11
 80119f4:	b016      	add	sp, #88	; 0x58
 80119f6:	bd10      	pop	{r4, pc}
 80119f8:	2001      	movs	r0, #1
 80119fa:	b016      	add	sp, #88	; 0x58
 80119fc:	bd10      	pop	{r4, pc}
 80119fe:	200c      	movs	r0, #12
 8011a00:	e7f5      	b.n	80119ee <rmw_init_options_fini+0x4a>
 8011a02:	200b      	movs	r0, #11
 8011a04:	4770      	bx	lr
 8011a06:	bf00      	nop
 8011a08:	080173a4 	.word	0x080173a4
 8011a0c:	20011004 	.word	0x20011004

08011a10 <rmw_init>:
 8011a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a14:	b083      	sub	sp, #12
 8011a16:	2800      	cmp	r0, #0
 8011a18:	f000 80d3 	beq.w	8011bc2 <rmw_init+0x1b2>
 8011a1c:	460e      	mov	r6, r1
 8011a1e:	2900      	cmp	r1, #0
 8011a20:	f000 80cf 	beq.w	8011bc2 <rmw_init+0x1b2>
 8011a24:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8011a26:	4605      	mov	r5, r0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	f000 80ca 	beq.w	8011bc2 <rmw_init+0x1b2>
 8011a2e:	4b78      	ldr	r3, [pc, #480]	; (8011c10 <rmw_init+0x200>)
 8011a30:	6880      	ldr	r0, [r0, #8]
 8011a32:	681f      	ldr	r7, [r3, #0]
 8011a34:	b128      	cbz	r0, 8011a42 <rmw_init+0x32>
 8011a36:	4639      	mov	r1, r7
 8011a38:	f7ee fbd2 	bl	80001e0 <strcmp>
 8011a3c:	2800      	cmp	r0, #0
 8011a3e:	f040 80ca 	bne.w	8011bd6 <rmw_init+0x1c6>
 8011a42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a46:	4c73      	ldr	r4, [pc, #460]	; (8011c14 <rmw_init+0x204>)
 8011a48:	4973      	ldr	r1, [pc, #460]	; (8011c18 <rmw_init+0x208>)
 8011a4a:	4874      	ldr	r0, [pc, #464]	; (8011c1c <rmw_init+0x20c>)
 8011a4c:	60b7      	str	r7, [r6, #8]
 8011a4e:	e9c6 2300 	strd	r2, r3, [r6]
 8011a52:	68eb      	ldr	r3, [r5, #12]
 8011a54:	66b3      	str	r3, [r6, #104]	; 0x68
 8011a56:	2201      	movs	r2, #1
 8011a58:	f7f8 ff94 	bl	800a984 <rmw_uxrce_init_session_memory>
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	4970      	ldr	r1, [pc, #448]	; (8011c20 <rmw_init+0x210>)
 8011a60:	2204      	movs	r2, #4
 8011a62:	f7f8 ffcf 	bl	800aa04 <rmw_uxrce_init_static_input_buffer_memory>
 8011a66:	f04f 0800 	mov.w	r8, #0
 8011a6a:	486c      	ldr	r0, [pc, #432]	; (8011c1c <rmw_init+0x20c>)
 8011a6c:	f884 800d 	strb.w	r8, [r4, #13]
 8011a70:	f7ff fe48 	bl	8011704 <get_memory>
 8011a74:	2800      	cmp	r0, #0
 8011a76:	f000 80a9 	beq.w	8011bcc <rmw_init+0x1bc>
 8011a7a:	6884      	ldr	r4, [r0, #8]
 8011a7c:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8011a7e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8011a80:	f890 c010 	ldrb.w	ip, [r0, #16]
 8011a84:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8011a88:	9101      	str	r1, [sp, #4]
 8011a8a:	6a00      	ldr	r0, [r0, #32]
 8011a8c:	9000      	str	r0, [sp, #0]
 8011a8e:	f104 0910 	add.w	r9, r4, #16
 8011a92:	4661      	mov	r1, ip
 8011a94:	4648      	mov	r0, r9
 8011a96:	f001 f9fb 	bl	8012e90 <uxr_set_custom_transport_callbacks>
 8011a9a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8011a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011aa2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8011aa6:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8011aaa:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8011aae:	495d      	ldr	r1, [pc, #372]	; (8011c24 <rmw_init+0x214>)
 8011ab0:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8011ab4:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8011ab8:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8011abc:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8011ac0:	4859      	ldr	r0, [pc, #356]	; (8011c28 <rmw_init+0x218>)
 8011ac2:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	66f4      	str	r4, [r6, #108]	; 0x6c
 8011aca:	f7f8 ff3b 	bl	800a944 <rmw_uxrce_init_node_memory>
 8011ace:	4957      	ldr	r1, [pc, #348]	; (8011c2c <rmw_init+0x21c>)
 8011ad0:	4857      	ldr	r0, [pc, #348]	; (8011c30 <rmw_init+0x220>)
 8011ad2:	2205      	movs	r2, #5
 8011ad4:	f7f8 ff16 	bl	800a904 <rmw_uxrce_init_subscription_memory>
 8011ad8:	4956      	ldr	r1, [pc, #344]	; (8011c34 <rmw_init+0x224>)
 8011ada:	4857      	ldr	r0, [pc, #348]	; (8011c38 <rmw_init+0x228>)
 8011adc:	220a      	movs	r2, #10
 8011ade:	f7f8 fef1 	bl	800a8c4 <rmw_uxrce_init_publisher_memory>
 8011ae2:	4956      	ldr	r1, [pc, #344]	; (8011c3c <rmw_init+0x22c>)
 8011ae4:	4856      	ldr	r0, [pc, #344]	; (8011c40 <rmw_init+0x230>)
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	f7f8 feac 	bl	800a844 <rmw_uxrce_init_service_memory>
 8011aec:	4955      	ldr	r1, [pc, #340]	; (8011c44 <rmw_init+0x234>)
 8011aee:	4856      	ldr	r0, [pc, #344]	; (8011c48 <rmw_init+0x238>)
 8011af0:	2201      	movs	r2, #1
 8011af2:	f7f8 fec7 	bl	800a884 <rmw_uxrce_init_client_memory>
 8011af6:	4955      	ldr	r1, [pc, #340]	; (8011c4c <rmw_init+0x23c>)
 8011af8:	4855      	ldr	r0, [pc, #340]	; (8011c50 <rmw_init+0x240>)
 8011afa:	220f      	movs	r2, #15
 8011afc:	f7f8 ff62 	bl	800a9c4 <rmw_uxrce_init_topic_memory>
 8011b00:	4954      	ldr	r1, [pc, #336]	; (8011c54 <rmw_init+0x244>)
 8011b02:	4855      	ldr	r0, [pc, #340]	; (8011c58 <rmw_init+0x248>)
 8011b04:	2203      	movs	r2, #3
 8011b06:	f7f8 ff9d 	bl	800aa44 <rmw_uxrce_init_init_options_impl_memory>
 8011b0a:	4954      	ldr	r1, [pc, #336]	; (8011c5c <rmw_init+0x24c>)
 8011b0c:	4854      	ldr	r0, [pc, #336]	; (8011c60 <rmw_init+0x250>)
 8011b0e:	2204      	movs	r2, #4
 8011b10:	f7f8 ffb8 	bl	800aa84 <rmw_uxrce_init_wait_set_memory>
 8011b14:	4953      	ldr	r1, [pc, #332]	; (8011c64 <rmw_init+0x254>)
 8011b16:	4854      	ldr	r0, [pc, #336]	; (8011c68 <rmw_init+0x258>)
 8011b18:	2204      	movs	r2, #4
 8011b1a:	f7f8 ffd3 	bl	800aac4 <rmw_uxrce_init_guard_condition_memory>
 8011b1e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8011b20:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8011b22:	4642      	mov	r2, r8
 8011b24:	f000 fdae 	bl	8012684 <rmw_uxrce_transport_init>
 8011b28:	4607      	mov	r7, r0
 8011b2a:	2800      	cmp	r0, #0
 8011b2c:	d158      	bne.n	8011be0 <rmw_init+0x1d0>
 8011b2e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8011b30:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8011b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b36:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	f7f9 fde4 	bl	800b708 <uxr_init_session>
 8011b40:	494a      	ldr	r1, [pc, #296]	; (8011c6c <rmw_init+0x25c>)
 8011b42:	4622      	mov	r2, r4
 8011b44:	4628      	mov	r0, r5
 8011b46:	f7f9 fe03 	bl	800b750 <uxr_set_topic_callback>
 8011b4a:	4949      	ldr	r1, [pc, #292]	; (8011c70 <rmw_init+0x260>)
 8011b4c:	463a      	mov	r2, r7
 8011b4e:	4628      	mov	r0, r5
 8011b50:	f7f9 fdfa 	bl	800b748 <uxr_set_status_callback>
 8011b54:	4947      	ldr	r1, [pc, #284]	; (8011c74 <rmw_init+0x264>)
 8011b56:	463a      	mov	r2, r7
 8011b58:	4628      	mov	r0, r5
 8011b5a:	f7f9 fdfd 	bl	800b758 <uxr_set_request_callback>
 8011b5e:	4946      	ldr	r1, [pc, #280]	; (8011c78 <rmw_init+0x268>)
 8011b60:	463a      	mov	r2, r7
 8011b62:	4628      	mov	r0, r5
 8011b64:	f7f9 fdfc 	bl	800b760 <uxr_set_reply_callback>
 8011b68:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8011b6c:	2304      	movs	r3, #4
 8011b6e:	0092      	lsls	r2, r2, #2
 8011b70:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8011b74:	4628      	mov	r0, r5
 8011b76:	f7f9 fe31 	bl	800b7dc <uxr_create_input_reliable_stream>
 8011b7a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8011b7e:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8011b82:	0092      	lsls	r2, r2, #2
 8011b84:	2304      	movs	r3, #4
 8011b86:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	f7f9 fdfe 	bl	800b78c <uxr_create_output_reliable_stream>
 8011b90:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8011b94:	4628      	mov	r0, r5
 8011b96:	f7f9 fe1b 	bl	800b7d0 <uxr_create_input_best_effort_stream>
 8011b9a:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8011b9e:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8011ba2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8011ba6:	3114      	adds	r1, #20
 8011ba8:	4628      	mov	r0, r5
 8011baa:	f7f9 fddd 	bl	800b768 <uxr_create_output_best_effort_stream>
 8011bae:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8011bb2:	4628      	mov	r0, r5
 8011bb4:	f7fa fb68 	bl	800c288 <uxr_create_session>
 8011bb8:	b1f8      	cbz	r0, 8011bfa <rmw_init+0x1ea>
 8011bba:	4638      	mov	r0, r7
 8011bbc:	b003      	add	sp, #12
 8011bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bc2:	270b      	movs	r7, #11
 8011bc4:	4638      	mov	r0, r7
 8011bc6:	b003      	add	sp, #12
 8011bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bcc:	2701      	movs	r7, #1
 8011bce:	4638      	mov	r0, r7
 8011bd0:	b003      	add	sp, #12
 8011bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bd6:	270c      	movs	r7, #12
 8011bd8:	4638      	mov	r0, r7
 8011bda:	b003      	add	sp, #12
 8011bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011be0:	4648      	mov	r0, r9
 8011be2:	f001 f997 	bl	8012f14 <uxr_close_custom_transport>
 8011be6:	480d      	ldr	r0, [pc, #52]	; (8011c1c <rmw_init+0x20c>)
 8011be8:	4621      	mov	r1, r4
 8011bea:	f7ff fd9b 	bl	8011724 <put_memory>
 8011bee:	4638      	mov	r0, r7
 8011bf0:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 8011bf4:	b003      	add	sp, #12
 8011bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bfa:	4648      	mov	r0, r9
 8011bfc:	f001 f98a 	bl	8012f14 <uxr_close_custom_transport>
 8011c00:	4806      	ldr	r0, [pc, #24]	; (8011c1c <rmw_init+0x20c>)
 8011c02:	4621      	mov	r1, r4
 8011c04:	f7ff fd8e 	bl	8011724 <put_memory>
 8011c08:	66f7      	str	r7, [r6, #108]	; 0x6c
 8011c0a:	2701      	movs	r7, #1
 8011c0c:	e7d5      	b.n	8011bba <rmw_init+0x1aa>
 8011c0e:	bf00      	nop
 8011c10:	080173a4 	.word	0x080173a4
 8011c14:	20011054 	.word	0x20011054
 8011c18:	2000d300 	.word	0x2000d300
 8011c1c:	20011044 	.word	0x20011044
 8011c20:	2000e8a8 	.word	0x2000e8a8
 8011c24:	2000c924 	.word	0x2000c924
 8011c28:	20011014 	.word	0x20011014
 8011c2c:	200109a8 	.word	0x200109a8
 8011c30:	20011064 	.word	0x20011064
 8011c34:	2000c9c8 	.word	0x2000c9c8
 8011c38:	20011024 	.word	0x20011024
 8011c3c:	2000d238 	.word	0x2000d238
 8011c40:	20011034 	.word	0x20011034
 8011c44:	2000c758 	.word	0x2000c758
 8011c48:	2000c748 	.word	0x2000c748
 8011c4c:	20010de0 	.word	0x20010de0
 8011c50:	20011074 	.word	0x20011074
 8011c54:	2000c8a0 	.word	0x2000c8a0
 8011c58:	20011004 	.word	0x20011004
 8011c5c:	20010f84 	.word	0x20010f84
 8011c60:	20011084 	.word	0x20011084
 8011c64:	2000c820 	.word	0x2000c820
 8011c68:	20010ff4 	.word	0x20010ff4
 8011c6c:	08014e25 	.word	0x08014e25
 8011c70:	08014e1d 	.word	0x08014e1d
 8011c74:	08014ebd 	.word	0x08014ebd
 8011c78:	08014f59 	.word	0x08014f59

08011c7c <rmw_context_fini>:
 8011c7c:	4b17      	ldr	r3, [pc, #92]	; (8011cdc <rmw_context_fini+0x60>)
 8011c7e:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8011c80:	b570      	push	{r4, r5, r6, lr}
 8011c82:	681c      	ldr	r4, [r3, #0]
 8011c84:	4605      	mov	r5, r0
 8011c86:	b334      	cbz	r4, 8011cd6 <rmw_context_fini+0x5a>
 8011c88:	2600      	movs	r6, #0
 8011c8a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8011c8e:	6902      	ldr	r2, [r0, #16]
 8011c90:	428a      	cmp	r2, r1
 8011c92:	d018      	beq.n	8011cc6 <rmw_context_fini+0x4a>
 8011c94:	2c00      	cmp	r4, #0
 8011c96:	d1f8      	bne.n	8011c8a <rmw_context_fini+0xe>
 8011c98:	b189      	cbz	r1, 8011cbe <rmw_context_fini+0x42>
 8011c9a:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8011c9e:	789b      	ldrb	r3, [r3, #2]
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8011ca6:	bf14      	ite	ne
 8011ca8:	210a      	movne	r1, #10
 8011caa:	2100      	moveq	r1, #0
 8011cac:	f7fa fac4 	bl	800c238 <uxr_delete_session_retries>
 8011cb0:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8011cb2:	f7f8 ff27 	bl	800ab04 <rmw_uxrce_fini_session_memory>
 8011cb6:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8011cb8:	3010      	adds	r0, #16
 8011cba:	f001 f92b 	bl	8012f14 <uxr_close_custom_transport>
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	66eb      	str	r3, [r5, #108]	; 0x6c
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	bd70      	pop	{r4, r5, r6, pc}
 8011cc6:	3018      	adds	r0, #24
 8011cc8:	f000 f90e 	bl	8011ee8 <rmw_destroy_node>
 8011ccc:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8011cce:	4606      	mov	r6, r0
 8011cd0:	2c00      	cmp	r4, #0
 8011cd2:	d1da      	bne.n	8011c8a <rmw_context_fini+0xe>
 8011cd4:	e7e0      	b.n	8011c98 <rmw_context_fini+0x1c>
 8011cd6:	4626      	mov	r6, r4
 8011cd8:	e7de      	b.n	8011c98 <rmw_context_fini+0x1c>
 8011cda:	bf00      	nop
 8011cdc:	20011014 	.word	0x20011014

08011ce0 <create_topic>:
 8011ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce4:	4605      	mov	r5, r0
 8011ce6:	b084      	sub	sp, #16
 8011ce8:	4822      	ldr	r0, [pc, #136]	; (8011d74 <create_topic+0x94>)
 8011cea:	460f      	mov	r7, r1
 8011cec:	4616      	mov	r6, r2
 8011cee:	f7ff fd09 	bl	8011704 <get_memory>
 8011cf2:	4604      	mov	r4, r0
 8011cf4:	2800      	cmp	r0, #0
 8011cf6:	d039      	beq.n	8011d6c <create_topic+0x8c>
 8011cf8:	692b      	ldr	r3, [r5, #16]
 8011cfa:	6884      	ldr	r4, [r0, #8]
 8011cfc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8011d7c <create_topic+0x9c>
 8011d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d04:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8011d08:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8011d0c:	1c42      	adds	r2, r0, #1
 8011d0e:	2102      	movs	r1, #2
 8011d10:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8011d14:	f7f9 fc3a 	bl	800b58c <uxr_object_id>
 8011d18:	223c      	movs	r2, #60	; 0x3c
 8011d1a:	6120      	str	r0, [r4, #16]
 8011d1c:	4641      	mov	r1, r8
 8011d1e:	4638      	mov	r0, r7
 8011d20:	f7f9 f8ce 	bl	800aec0 <generate_topic_name>
 8011d24:	b1f0      	cbz	r0, 8011d64 <create_topic+0x84>
 8011d26:	4f14      	ldr	r7, [pc, #80]	; (8011d78 <create_topic+0x98>)
 8011d28:	4630      	mov	r0, r6
 8011d2a:	2264      	movs	r2, #100	; 0x64
 8011d2c:	4639      	mov	r1, r7
 8011d2e:	f7f9 f897 	bl	800ae60 <generate_type_name>
 8011d32:	b1b8      	cbz	r0, 8011d64 <create_topic+0x84>
 8011d34:	6928      	ldr	r0, [r5, #16]
 8011d36:	2306      	movs	r3, #6
 8011d38:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8011d3c:	f8cd 8000 	str.w	r8, [sp]
 8011d40:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8011d44:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011d48:	6811      	ldr	r1, [r2, #0]
 8011d4a:	696b      	ldr	r3, [r5, #20]
 8011d4c:	6922      	ldr	r2, [r4, #16]
 8011d4e:	f7f9 fa99 	bl	800b284 <uxr_buffer_create_topic_bin>
 8011d52:	4602      	mov	r2, r0
 8011d54:	6928      	ldr	r0, [r5, #16]
 8011d56:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8011d5a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8011d5e:	f7f9 f849 	bl	800adf4 <run_xrce_session>
 8011d62:	b918      	cbnz	r0, 8011d6c <create_topic+0x8c>
 8011d64:	4620      	mov	r0, r4
 8011d66:	f7f8 ff43 	bl	800abf0 <rmw_uxrce_fini_topic_memory>
 8011d6a:	2400      	movs	r4, #0
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	b004      	add	sp, #16
 8011d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d74:	20011074 	.word	0x20011074
 8011d78:	200111d8 	.word	0x200111d8
 8011d7c:	2001119c 	.word	0x2001119c

08011d80 <destroy_topic>:
 8011d80:	b538      	push	{r3, r4, r5, lr}
 8011d82:	6985      	ldr	r5, [r0, #24]
 8011d84:	b1d5      	cbz	r5, 8011dbc <destroy_topic+0x3c>
 8011d86:	4604      	mov	r4, r0
 8011d88:	6928      	ldr	r0, [r5, #16]
 8011d8a:	6922      	ldr	r2, [r4, #16]
 8011d8c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011d90:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011d94:	6819      	ldr	r1, [r3, #0]
 8011d96:	f7f9 f9f7 	bl	800b188 <uxr_buffer_delete_entity>
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	6928      	ldr	r0, [r5, #16]
 8011d9e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011da2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011da6:	f7f9 f825 	bl	800adf4 <run_xrce_session>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	4620      	mov	r0, r4
 8011dae:	bf14      	ite	ne
 8011db0:	2400      	movne	r4, #0
 8011db2:	2402      	moveq	r4, #2
 8011db4:	f7f8 ff1c 	bl	800abf0 <rmw_uxrce_fini_topic_memory>
 8011db8:	4620      	mov	r0, r4
 8011dba:	bd38      	pop	{r3, r4, r5, pc}
 8011dbc:	2401      	movs	r4, #1
 8011dbe:	4620      	mov	r0, r4
 8011dc0:	bd38      	pop	{r3, r4, r5, pc}
 8011dc2:	bf00      	nop

08011dc4 <create_node>:
 8011dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011dc8:	b083      	sub	sp, #12
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d05f      	beq.n	8011e8e <create_node+0xca>
 8011dce:	4606      	mov	r6, r0
 8011dd0:	4835      	ldr	r0, [pc, #212]	; (8011ea8 <create_node+0xe4>)
 8011dd2:	460f      	mov	r7, r1
 8011dd4:	4690      	mov	r8, r2
 8011dd6:	461d      	mov	r5, r3
 8011dd8:	f7ff fc94 	bl	8011704 <get_memory>
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	d056      	beq.n	8011e8e <create_node+0xca>
 8011de0:	6884      	ldr	r4, [r0, #8]
 8011de2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8011de4:	6123      	str	r3, [r4, #16]
 8011de6:	f7ff fd13 	bl	8011810 <rmw_get_implementation_identifier>
 8011dea:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8011dee:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8011df2:	f8c4 9020 	str.w	r9, [r4, #32]
 8011df6:	4630      	mov	r0, r6
 8011df8:	f7ee fa52 	bl	80002a0 <strlen>
 8011dfc:	1c42      	adds	r2, r0, #1
 8011dfe:	2a3c      	cmp	r2, #60	; 0x3c
 8011e00:	f104 0518 	add.w	r5, r4, #24
 8011e04:	d840      	bhi.n	8011e88 <create_node+0xc4>
 8011e06:	4648      	mov	r0, r9
 8011e08:	4631      	mov	r1, r6
 8011e0a:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8011e0e:	f003 fdb8 	bl	8015982 <memcpy>
 8011e12:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8011e16:	4638      	mov	r0, r7
 8011e18:	f7ee fa42 	bl	80002a0 <strlen>
 8011e1c:	1c42      	adds	r2, r0, #1
 8011e1e:	2a3c      	cmp	r2, #60	; 0x3c
 8011e20:	d832      	bhi.n	8011e88 <create_node+0xc4>
 8011e22:	4639      	mov	r1, r7
 8011e24:	4648      	mov	r0, r9
 8011e26:	f003 fdac 	bl	8015982 <memcpy>
 8011e2a:	6923      	ldr	r3, [r4, #16]
 8011e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e30:	2101      	movs	r1, #1
 8011e32:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8011e36:	1842      	adds	r2, r0, r1
 8011e38:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8011e3c:	f7f9 fba6 	bl	800b58c <uxr_object_id>
 8011e40:	6160      	str	r0, [r4, #20]
 8011e42:	783b      	ldrb	r3, [r7, #0]
 8011e44:	2b2f      	cmp	r3, #47	; 0x2f
 8011e46:	d127      	bne.n	8011e98 <create_node+0xd4>
 8011e48:	787b      	ldrb	r3, [r7, #1]
 8011e4a:	bb2b      	cbnz	r3, 8011e98 <create_node+0xd4>
 8011e4c:	4a17      	ldr	r2, [pc, #92]	; (8011eac <create_node+0xe8>)
 8011e4e:	4818      	ldr	r0, [pc, #96]	; (8011eb0 <create_node+0xec>)
 8011e50:	4633      	mov	r3, r6
 8011e52:	213c      	movs	r1, #60	; 0x3c
 8011e54:	f003 fbe0 	bl	8015618 <sniprintf>
 8011e58:	6920      	ldr	r0, [r4, #16]
 8011e5a:	4915      	ldr	r1, [pc, #84]	; (8011eb0 <create_node+0xec>)
 8011e5c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8011e60:	9100      	str	r1, [sp, #0]
 8011e62:	2106      	movs	r1, #6
 8011e64:	9101      	str	r1, [sp, #4]
 8011e66:	6811      	ldr	r1, [r2, #0]
 8011e68:	6962      	ldr	r2, [r4, #20]
 8011e6a:	fa1f f388 	uxth.w	r3, r8
 8011e6e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011e72:	f7f9 f9d5 	bl	800b220 <uxr_buffer_create_participant_bin>
 8011e76:	4602      	mov	r2, r0
 8011e78:	6920      	ldr	r0, [r4, #16]
 8011e7a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8011e7e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8011e82:	f7f8 ffb7 	bl	800adf4 <run_xrce_session>
 8011e86:	b918      	cbnz	r0, 8011e90 <create_node+0xcc>
 8011e88:	4628      	mov	r0, r5
 8011e8a:	f7f8 fe41 	bl	800ab10 <rmw_uxrce_fini_node_memory>
 8011e8e:	2500      	movs	r5, #0
 8011e90:	4628      	mov	r0, r5
 8011e92:	b003      	add	sp, #12
 8011e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e98:	4a06      	ldr	r2, [pc, #24]	; (8011eb4 <create_node+0xf0>)
 8011e9a:	9600      	str	r6, [sp, #0]
 8011e9c:	463b      	mov	r3, r7
 8011e9e:	213c      	movs	r1, #60	; 0x3c
 8011ea0:	4803      	ldr	r0, [pc, #12]	; (8011eb0 <create_node+0xec>)
 8011ea2:	f003 fbb9 	bl	8015618 <sniprintf>
 8011ea6:	e7d7      	b.n	8011e58 <create_node+0x94>
 8011ea8:	20011014 	.word	0x20011014
 8011eac:	08016bc0 	.word	0x08016bc0
 8011eb0:	2001123c 	.word	0x2001123c
 8011eb4:	08016df4 	.word	0x08016df4

08011eb8 <rmw_create_node>:
 8011eb8:	b199      	cbz	r1, 8011ee2 <rmw_create_node+0x2a>
 8011eba:	780b      	ldrb	r3, [r1, #0]
 8011ebc:	468c      	mov	ip, r1
 8011ebe:	b183      	cbz	r3, 8011ee2 <rmw_create_node+0x2a>
 8011ec0:	b410      	push	{r4}
 8011ec2:	4614      	mov	r4, r2
 8011ec4:	b14a      	cbz	r2, 8011eda <rmw_create_node+0x22>
 8011ec6:	7813      	ldrb	r3, [r2, #0]
 8011ec8:	b13b      	cbz	r3, 8011eda <rmw_create_node+0x22>
 8011eca:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8011ecc:	4603      	mov	r3, r0
 8011ece:	4621      	mov	r1, r4
 8011ed0:	4660      	mov	r0, ip
 8011ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ed6:	f7ff bf75 	b.w	8011dc4 <create_node>
 8011eda:	2000      	movs	r0, #0
 8011edc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ee0:	4770      	bx	lr
 8011ee2:	2000      	movs	r0, #0
 8011ee4:	4770      	bx	lr
 8011ee6:	bf00      	nop

08011ee8 <rmw_destroy_node>:
 8011ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eea:	b328      	cbz	r0, 8011f38 <rmw_destroy_node+0x50>
 8011eec:	4607      	mov	r7, r0
 8011eee:	6800      	ldr	r0, [r0, #0]
 8011ef0:	b120      	cbz	r0, 8011efc <rmw_destroy_node+0x14>
 8011ef2:	4b36      	ldr	r3, [pc, #216]	; (8011fcc <rmw_destroy_node+0xe4>)
 8011ef4:	6819      	ldr	r1, [r3, #0]
 8011ef6:	f7ee f973 	bl	80001e0 <strcmp>
 8011efa:	b9e8      	cbnz	r0, 8011f38 <rmw_destroy_node+0x50>
 8011efc:	687d      	ldr	r5, [r7, #4]
 8011efe:	b1dd      	cbz	r5, 8011f38 <rmw_destroy_node+0x50>
 8011f00:	4b33      	ldr	r3, [pc, #204]	; (8011fd0 <rmw_destroy_node+0xe8>)
 8011f02:	681c      	ldr	r4, [r3, #0]
 8011f04:	2c00      	cmp	r4, #0
 8011f06:	d05f      	beq.n	8011fc8 <rmw_destroy_node+0xe0>
 8011f08:	2600      	movs	r6, #0
 8011f0a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011f0e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8011f12:	429d      	cmp	r5, r3
 8011f14:	d013      	beq.n	8011f3e <rmw_destroy_node+0x56>
 8011f16:	2c00      	cmp	r4, #0
 8011f18:	d1f7      	bne.n	8011f0a <rmw_destroy_node+0x22>
 8011f1a:	4b2e      	ldr	r3, [pc, #184]	; (8011fd4 <rmw_destroy_node+0xec>)
 8011f1c:	681c      	ldr	r4, [r3, #0]
 8011f1e:	b1c4      	cbz	r4, 8011f52 <rmw_destroy_node+0x6a>
 8011f20:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011f24:	6a0b      	ldr	r3, [r1, #32]
 8011f26:	429d      	cmp	r5, r3
 8011f28:	d1f9      	bne.n	8011f1e <rmw_destroy_node+0x36>
 8011f2a:	317c      	adds	r1, #124	; 0x7c
 8011f2c:	4638      	mov	r0, r7
 8011f2e:	f000 fae5 	bl	80124fc <rmw_destroy_subscription>
 8011f32:	2801      	cmp	r0, #1
 8011f34:	4606      	mov	r6, r0
 8011f36:	d1f2      	bne.n	8011f1e <rmw_destroy_node+0x36>
 8011f38:	2601      	movs	r6, #1
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f3e:	3184      	adds	r1, #132	; 0x84
 8011f40:	4638      	mov	r0, r7
 8011f42:	f7f8 fc2d 	bl	800a7a0 <rmw_destroy_publisher>
 8011f46:	2801      	cmp	r0, #1
 8011f48:	4606      	mov	r6, r0
 8011f4a:	d0f5      	beq.n	8011f38 <rmw_destroy_node+0x50>
 8011f4c:	2c00      	cmp	r4, #0
 8011f4e:	d1dc      	bne.n	8011f0a <rmw_destroy_node+0x22>
 8011f50:	e7e3      	b.n	8011f1a <rmw_destroy_node+0x32>
 8011f52:	4b21      	ldr	r3, [pc, #132]	; (8011fd8 <rmw_destroy_node+0xf0>)
 8011f54:	681c      	ldr	r4, [r3, #0]
 8011f56:	b16c      	cbz	r4, 8011f74 <rmw_destroy_node+0x8c>
 8011f58:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011f5c:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8011f5e:	429d      	cmp	r5, r3
 8011f60:	d1f9      	bne.n	8011f56 <rmw_destroy_node+0x6e>
 8011f62:	317c      	adds	r1, #124	; 0x7c
 8011f64:	4638      	mov	r0, r7
 8011f66:	f000 f993 	bl	8012290 <rmw_destroy_service>
 8011f6a:	2801      	cmp	r0, #1
 8011f6c:	4606      	mov	r6, r0
 8011f6e:	d0e3      	beq.n	8011f38 <rmw_destroy_node+0x50>
 8011f70:	2c00      	cmp	r4, #0
 8011f72:	d1f1      	bne.n	8011f58 <rmw_destroy_node+0x70>
 8011f74:	4b19      	ldr	r3, [pc, #100]	; (8011fdc <rmw_destroy_node+0xf4>)
 8011f76:	681c      	ldr	r4, [r3, #0]
 8011f78:	b16c      	cbz	r4, 8011f96 <rmw_destroy_node+0xae>
 8011f7a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011f7e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8011f80:	429d      	cmp	r5, r3
 8011f82:	d1f9      	bne.n	8011f78 <rmw_destroy_node+0x90>
 8011f84:	317c      	adds	r1, #124	; 0x7c
 8011f86:	4638      	mov	r0, r7
 8011f88:	f7ff fbe0 	bl	801174c <rmw_destroy_client>
 8011f8c:	2801      	cmp	r0, #1
 8011f8e:	4606      	mov	r6, r0
 8011f90:	d0d2      	beq.n	8011f38 <rmw_destroy_node+0x50>
 8011f92:	2c00      	cmp	r4, #0
 8011f94:	d1f1      	bne.n	8011f7a <rmw_destroy_node+0x92>
 8011f96:	6928      	ldr	r0, [r5, #16]
 8011f98:	696a      	ldr	r2, [r5, #20]
 8011f9a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011f9e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011fa2:	6819      	ldr	r1, [r3, #0]
 8011fa4:	f7f9 f8f0 	bl	800b188 <uxr_buffer_delete_entity>
 8011fa8:	4602      	mov	r2, r0
 8011faa:	6928      	ldr	r0, [r5, #16]
 8011fac:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011fb0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011fb4:	f7f8 ff1e 	bl	800adf4 <run_xrce_session>
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	bf08      	it	eq
 8011fbc:	2602      	moveq	r6, #2
 8011fbe:	4638      	mov	r0, r7
 8011fc0:	f7f8 fda6 	bl	800ab10 <rmw_uxrce_fini_node_memory>
 8011fc4:	4630      	mov	r0, r6
 8011fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fc8:	4626      	mov	r6, r4
 8011fca:	e7a6      	b.n	8011f1a <rmw_destroy_node+0x32>
 8011fcc:	080173a4 	.word	0x080173a4
 8011fd0:	20011024 	.word	0x20011024
 8011fd4:	20011064 	.word	0x20011064
 8011fd8:	20011034 	.word	0x20011034
 8011fdc:	2000c748 	.word	0x2000c748

08011fe0 <rmw_node_get_graph_guard_condition>:
 8011fe0:	6843      	ldr	r3, [r0, #4]
 8011fe2:	6918      	ldr	r0, [r3, #16]
 8011fe4:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8011fe8:	4770      	bx	lr
 8011fea:	bf00      	nop

08011fec <rmw_send_request>:
 8011fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ff0:	4604      	mov	r4, r0
 8011ff2:	6800      	ldr	r0, [r0, #0]
 8011ff4:	b08b      	sub	sp, #44	; 0x2c
 8011ff6:	460e      	mov	r6, r1
 8011ff8:	4615      	mov	r5, r2
 8011ffa:	b128      	cbz	r0, 8012008 <rmw_send_request+0x1c>
 8011ffc:	4b21      	ldr	r3, [pc, #132]	; (8012084 <rmw_send_request+0x98>)
 8011ffe:	6819      	ldr	r1, [r3, #0]
 8012000:	f7ee f8ee 	bl	80001e0 <strcmp>
 8012004:	2800      	cmp	r0, #0
 8012006:	d139      	bne.n	801207c <rmw_send_request+0x90>
 8012008:	6864      	ldr	r4, [r4, #4]
 801200a:	6963      	ldr	r3, [r4, #20]
 801200c:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8012010:	689b      	ldr	r3, [r3, #8]
 8012012:	4798      	blx	r3
 8012014:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8012018:	4630      	mov	r0, r6
 801201a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801201e:	4798      	blx	r3
 8012020:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012024:	9000      	str	r0, [sp, #0]
 8012026:	6922      	ldr	r2, [r4, #16]
 8012028:	6f21      	ldr	r1, [r4, #112]	; 0x70
 801202a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801202e:	ab02      	add	r3, sp, #8
 8012030:	f7fa fda6 	bl	800cb80 <uxr_prepare_output_stream>
 8012034:	2700      	movs	r7, #0
 8012036:	6028      	str	r0, [r5, #0]
 8012038:	606f      	str	r7, [r5, #4]
 801203a:	b198      	cbz	r0, 8012064 <rmw_send_request+0x78>
 801203c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012040:	a902      	add	r1, sp, #8
 8012042:	4630      	mov	r0, r6
 8012044:	4798      	blx	r3
 8012046:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 801204a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801204e:	2b01      	cmp	r3, #1
 8012050:	d00c      	beq.n	801206c <rmw_send_request+0x80>
 8012052:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8012054:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012058:	f7f9 ffa6 	bl	800bfa8 <uxr_run_session_until_confirm_delivery>
 801205c:	4638      	mov	r0, r7
 801205e:	b00b      	add	sp, #44	; 0x2c
 8012060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012064:	2001      	movs	r0, #1
 8012066:	b00b      	add	sp, #44	; 0x2c
 8012068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801206c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012070:	f7f9 fbda 	bl	800b828 <uxr_flash_output_streams>
 8012074:	4638      	mov	r0, r7
 8012076:	b00b      	add	sp, #44	; 0x2c
 8012078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801207c:	200c      	movs	r0, #12
 801207e:	b00b      	add	sp, #44	; 0x2c
 8012080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012084:	080173a4 	.word	0x080173a4

08012088 <rmw_take_request>:
 8012088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801208c:	4605      	mov	r5, r0
 801208e:	6800      	ldr	r0, [r0, #0]
 8012090:	b089      	sub	sp, #36	; 0x24
 8012092:	460c      	mov	r4, r1
 8012094:	4690      	mov	r8, r2
 8012096:	461e      	mov	r6, r3
 8012098:	b128      	cbz	r0, 80120a6 <rmw_take_request+0x1e>
 801209a:	4b28      	ldr	r3, [pc, #160]	; (801213c <rmw_take_request+0xb4>)
 801209c:	6819      	ldr	r1, [r3, #0]
 801209e:	f7ee f89f 	bl	80001e0 <strcmp>
 80120a2:	2800      	cmp	r0, #0
 80120a4:	d146      	bne.n	8012134 <rmw_take_request+0xac>
 80120a6:	b10e      	cbz	r6, 80120ac <rmw_take_request+0x24>
 80120a8:	2300      	movs	r3, #0
 80120aa:	7033      	strb	r3, [r6, #0]
 80120ac:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80120b0:	f7f8 fe22 	bl	800acf8 <rmw_uxrce_clean_expired_static_input_buffer>
 80120b4:	4648      	mov	r0, r9
 80120b6:	f7f8 fdf7 	bl	800aca8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80120ba:	4607      	mov	r7, r0
 80120bc:	b3b0      	cbz	r0, 801212c <rmw_take_request+0xa4>
 80120be:	6885      	ldr	r5, [r0, #8]
 80120c0:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
 80120c4:	f8d5 283c 	ldr.w	r2, [r5, #2108]	; 0x83c
 80120c8:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80120cc:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80120d0:	7423      	strb	r3, [r4, #16]
 80120d2:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 80120d6:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 80120da:	74e2      	strb	r2, [r4, #19]
 80120dc:	f8a4 3011 	strh.w	r3, [r4, #17]
 80120e0:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 80120e4:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 80120e8:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 80120ec:	61e1      	str	r1, [r4, #28]
 80120ee:	6162      	str	r2, [r4, #20]
 80120f0:	61a3      	str	r3, [r4, #24]
 80120f2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80120f6:	689b      	ldr	r3, [r3, #8]
 80120f8:	4798      	blx	r3
 80120fa:	6844      	ldr	r4, [r0, #4]
 80120fc:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8012100:	f105 0110 	add.w	r1, r5, #16
 8012104:	4668      	mov	r0, sp
 8012106:	f7f6 fd05 	bl	8008b14 <ucdr_init_buffer>
 801210a:	68e3      	ldr	r3, [r4, #12]
 801210c:	4641      	mov	r1, r8
 801210e:	4668      	mov	r0, sp
 8012110:	4798      	blx	r3
 8012112:	4639      	mov	r1, r7
 8012114:	4604      	mov	r4, r0
 8012116:	480a      	ldr	r0, [pc, #40]	; (8012140 <rmw_take_request+0xb8>)
 8012118:	f7ff fb04 	bl	8011724 <put_memory>
 801211c:	b106      	cbz	r6, 8012120 <rmw_take_request+0x98>
 801211e:	7034      	strb	r4, [r6, #0]
 8012120:	f084 0001 	eor.w	r0, r4, #1
 8012124:	b2c0      	uxtb	r0, r0
 8012126:	b009      	add	sp, #36	; 0x24
 8012128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801212c:	2001      	movs	r0, #1
 801212e:	b009      	add	sp, #36	; 0x24
 8012130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012134:	200c      	movs	r0, #12
 8012136:	b009      	add	sp, #36	; 0x24
 8012138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801213c:	080173a4 	.word	0x080173a4
 8012140:	20011054 	.word	0x20011054

08012144 <rmw_send_response>:
 8012144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012146:	4605      	mov	r5, r0
 8012148:	6800      	ldr	r0, [r0, #0]
 801214a:	b091      	sub	sp, #68	; 0x44
 801214c:	460c      	mov	r4, r1
 801214e:	4616      	mov	r6, r2
 8012150:	b128      	cbz	r0, 801215e <rmw_send_response+0x1a>
 8012152:	4b29      	ldr	r3, [pc, #164]	; (80121f8 <rmw_send_response+0xb4>)
 8012154:	6819      	ldr	r1, [r3, #0]
 8012156:	f7ee f843 	bl	80001e0 <strcmp>
 801215a:	2800      	cmp	r0, #0
 801215c:	d141      	bne.n	80121e2 <rmw_send_response+0x9e>
 801215e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8012162:	9306      	str	r3, [sp, #24]
 8012164:	4623      	mov	r3, r4
 8012166:	9207      	str	r2, [sp, #28]
 8012168:	f813 2b01 	ldrb.w	r2, [r3], #1
 801216c:	686d      	ldr	r5, [r5, #4]
 801216e:	789b      	ldrb	r3, [r3, #2]
 8012170:	68a1      	ldr	r1, [r4, #8]
 8012172:	f88d 2017 	strb.w	r2, [sp, #23]
 8012176:	f88d 3016 	strb.w	r3, [sp, #22]
 801217a:	68e2      	ldr	r2, [r4, #12]
 801217c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8012180:	6860      	ldr	r0, [r4, #4]
 8012182:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012186:	ab02      	add	r3, sp, #8
 8012188:	c307      	stmia	r3!, {r0, r1, r2}
 801218a:	696b      	ldr	r3, [r5, #20]
 801218c:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801218e:	68db      	ldr	r3, [r3, #12]
 8012190:	4798      	blx	r3
 8012192:	6844      	ldr	r4, [r0, #4]
 8012194:	4630      	mov	r0, r6
 8012196:	6923      	ldr	r3, [r4, #16]
 8012198:	4798      	blx	r3
 801219a:	f100 0318 	add.w	r3, r0, #24
 801219e:	6938      	ldr	r0, [r7, #16]
 80121a0:	9300      	str	r3, [sp, #0]
 80121a2:	692a      	ldr	r2, [r5, #16]
 80121a4:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80121a6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80121aa:	ab08      	add	r3, sp, #32
 80121ac:	f7fa fce8 	bl	800cb80 <uxr_prepare_output_stream>
 80121b0:	b910      	cbnz	r0, 80121b8 <rmw_send_response+0x74>
 80121b2:	2001      	movs	r0, #1
 80121b4:	b011      	add	sp, #68	; 0x44
 80121b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121b8:	a902      	add	r1, sp, #8
 80121ba:	a808      	add	r0, sp, #32
 80121bc:	f7fb fe18 	bl	800ddf0 <uxr_serialize_SampleIdentity>
 80121c0:	68a3      	ldr	r3, [r4, #8]
 80121c2:	a908      	add	r1, sp, #32
 80121c4:	4630      	mov	r0, r6
 80121c6:	4798      	blx	r3
 80121c8:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80121cc:	6938      	ldr	r0, [r7, #16]
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d00a      	beq.n	80121e8 <rmw_send_response+0xa4>
 80121d2:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80121d4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80121d8:	f7f9 fee6 	bl	800bfa8 <uxr_run_session_until_confirm_delivery>
 80121dc:	2000      	movs	r0, #0
 80121de:	b011      	add	sp, #68	; 0x44
 80121e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121e2:	200c      	movs	r0, #12
 80121e4:	b011      	add	sp, #68	; 0x44
 80121e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121e8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80121ec:	f7f9 fb1c 	bl	800b828 <uxr_flash_output_streams>
 80121f0:	2000      	movs	r0, #0
 80121f2:	b011      	add	sp, #68	; 0x44
 80121f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121f6:	bf00      	nop
 80121f8:	080173a4 	.word	0x080173a4

080121fc <rmw_take_response>:
 80121fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012200:	4604      	mov	r4, r0
 8012202:	6800      	ldr	r0, [r0, #0]
 8012204:	b088      	sub	sp, #32
 8012206:	4688      	mov	r8, r1
 8012208:	4617      	mov	r7, r2
 801220a:	461d      	mov	r5, r3
 801220c:	b120      	cbz	r0, 8012218 <rmw_take_response+0x1c>
 801220e:	4b1e      	ldr	r3, [pc, #120]	; (8012288 <rmw_take_response+0x8c>)
 8012210:	6819      	ldr	r1, [r3, #0]
 8012212:	f7ed ffe5 	bl	80001e0 <strcmp>
 8012216:	bb78      	cbnz	r0, 8012278 <rmw_take_response+0x7c>
 8012218:	b10d      	cbz	r5, 801221e <rmw_take_response+0x22>
 801221a:	2300      	movs	r3, #0
 801221c:	702b      	strb	r3, [r5, #0]
 801221e:	6864      	ldr	r4, [r4, #4]
 8012220:	f7f8 fd6a 	bl	800acf8 <rmw_uxrce_clean_expired_static_input_buffer>
 8012224:	4620      	mov	r0, r4
 8012226:	f7f8 fd3f 	bl	800aca8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801222a:	4606      	mov	r6, r0
 801222c:	b340      	cbz	r0, 8012280 <rmw_take_response+0x84>
 801222e:	6963      	ldr	r3, [r4, #20]
 8012230:	6884      	ldr	r4, [r0, #8]
 8012232:	68db      	ldr	r3, [r3, #12]
 8012234:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8012238:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801223c:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8012240:	4798      	blx	r3
 8012242:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012246:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801224a:	f104 0110 	add.w	r1, r4, #16
 801224e:	4668      	mov	r0, sp
 8012250:	f7f6 fc60 	bl	8008b14 <ucdr_init_buffer>
 8012254:	4639      	mov	r1, r7
 8012256:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801225a:	4668      	mov	r0, sp
 801225c:	4798      	blx	r3
 801225e:	4631      	mov	r1, r6
 8012260:	4604      	mov	r4, r0
 8012262:	480a      	ldr	r0, [pc, #40]	; (801228c <rmw_take_response+0x90>)
 8012264:	f7ff fa5e 	bl	8011724 <put_memory>
 8012268:	b105      	cbz	r5, 801226c <rmw_take_response+0x70>
 801226a:	702c      	strb	r4, [r5, #0]
 801226c:	f084 0001 	eor.w	r0, r4, #1
 8012270:	b2c0      	uxtb	r0, r0
 8012272:	b008      	add	sp, #32
 8012274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012278:	200c      	movs	r0, #12
 801227a:	b008      	add	sp, #32
 801227c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012280:	2001      	movs	r0, #1
 8012282:	b008      	add	sp, #32
 8012284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012288:	080173a4 	.word	0x080173a4
 801228c:	20011054 	.word	0x20011054

08012290 <rmw_destroy_service>:
 8012290:	b570      	push	{r4, r5, r6, lr}
 8012292:	b128      	cbz	r0, 80122a0 <rmw_destroy_service+0x10>
 8012294:	4604      	mov	r4, r0
 8012296:	6800      	ldr	r0, [r0, #0]
 8012298:	460d      	mov	r5, r1
 801229a:	f7f8 fe2b 	bl	800aef4 <is_uxrce_rmw_identifier_valid>
 801229e:	b910      	cbnz	r0, 80122a6 <rmw_destroy_service+0x16>
 80122a0:	2401      	movs	r4, #1
 80122a2:	4620      	mov	r0, r4
 80122a4:	bd70      	pop	{r4, r5, r6, pc}
 80122a6:	6863      	ldr	r3, [r4, #4]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d0f9      	beq.n	80122a0 <rmw_destroy_service+0x10>
 80122ac:	2d00      	cmp	r5, #0
 80122ae:	d0f7      	beq.n	80122a0 <rmw_destroy_service+0x10>
 80122b0:	6828      	ldr	r0, [r5, #0]
 80122b2:	f7f8 fe1f 	bl	800aef4 <is_uxrce_rmw_identifier_valid>
 80122b6:	2800      	cmp	r0, #0
 80122b8:	d0f2      	beq.n	80122a0 <rmw_destroy_service+0x10>
 80122ba:	686e      	ldr	r6, [r5, #4]
 80122bc:	2e00      	cmp	r6, #0
 80122be:	d0ef      	beq.n	80122a0 <rmw_destroy_service+0x10>
 80122c0:	6864      	ldr	r4, [r4, #4]
 80122c2:	6932      	ldr	r2, [r6, #16]
 80122c4:	6920      	ldr	r0, [r4, #16]
 80122c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80122ca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80122ce:	6819      	ldr	r1, [r3, #0]
 80122d0:	f001 fba6 	bl	8013a20 <uxr_buffer_cancel_data>
 80122d4:	4602      	mov	r2, r0
 80122d6:	6920      	ldr	r0, [r4, #16]
 80122d8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80122dc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80122e0:	f7f8 fd88 	bl	800adf4 <run_xrce_session>
 80122e4:	6920      	ldr	r0, [r4, #16]
 80122e6:	6932      	ldr	r2, [r6, #16]
 80122e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80122ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80122f0:	6819      	ldr	r1, [r3, #0]
 80122f2:	f7f8 ff49 	bl	800b188 <uxr_buffer_delete_entity>
 80122f6:	4602      	mov	r2, r0
 80122f8:	6920      	ldr	r0, [r4, #16]
 80122fa:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80122fe:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012302:	f7f8 fd77 	bl	800adf4 <run_xrce_session>
 8012306:	2800      	cmp	r0, #0
 8012308:	4628      	mov	r0, r5
 801230a:	bf14      	ite	ne
 801230c:	2400      	movne	r4, #0
 801230e:	2402      	moveq	r4, #2
 8012310:	f7f8 fc42 	bl	800ab98 <rmw_uxrce_fini_service_memory>
 8012314:	e7c5      	b.n	80122a2 <rmw_destroy_service+0x12>
 8012316:	bf00      	nop

08012318 <rmw_create_subscription>:
 8012318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801231c:	b08d      	sub	sp, #52	; 0x34
 801231e:	2800      	cmp	r0, #0
 8012320:	f000 80d1 	beq.w	80124c6 <rmw_create_subscription+0x1ae>
 8012324:	460e      	mov	r6, r1
 8012326:	2900      	cmp	r1, #0
 8012328:	f000 80cd 	beq.w	80124c6 <rmw_create_subscription+0x1ae>
 801232c:	4604      	mov	r4, r0
 801232e:	6800      	ldr	r0, [r0, #0]
 8012330:	4615      	mov	r5, r2
 8012332:	4698      	mov	r8, r3
 8012334:	f7f8 fdde 	bl	800aef4 <is_uxrce_rmw_identifier_valid>
 8012338:	2800      	cmp	r0, #0
 801233a:	f000 80c4 	beq.w	80124c6 <rmw_create_subscription+0x1ae>
 801233e:	2d00      	cmp	r5, #0
 8012340:	f000 80c1 	beq.w	80124c6 <rmw_create_subscription+0x1ae>
 8012344:	782b      	ldrb	r3, [r5, #0]
 8012346:	2b00      	cmp	r3, #0
 8012348:	f000 80bd 	beq.w	80124c6 <rmw_create_subscription+0x1ae>
 801234c:	f1b8 0f00 	cmp.w	r8, #0
 8012350:	f000 80b9 	beq.w	80124c6 <rmw_create_subscription+0x1ae>
 8012354:	485e      	ldr	r0, [pc, #376]	; (80124d0 <rmw_create_subscription+0x1b8>)
 8012356:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801235a:	f7ff f9d3 	bl	8011704 <get_memory>
 801235e:	4604      	mov	r4, r0
 8012360:	2800      	cmp	r0, #0
 8012362:	f000 80b1 	beq.w	80124c8 <rmw_create_subscription+0x1b0>
 8012366:	6887      	ldr	r7, [r0, #8]
 8012368:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 801236c:	f7ff fa50 	bl	8011810 <rmw_get_implementation_identifier>
 8012370:	f107 0a98 	add.w	sl, r7, #152	; 0x98
 8012374:	67f8      	str	r0, [r7, #124]	; 0x7c
 8012376:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 801237a:	4628      	mov	r0, r5
 801237c:	f7ed ff90 	bl	80002a0 <strlen>
 8012380:	3001      	adds	r0, #1
 8012382:	283c      	cmp	r0, #60	; 0x3c
 8012384:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8012388:	f200 8096 	bhi.w	80124b8 <rmw_create_subscription+0x1a0>
 801238c:	4a51      	ldr	r2, [pc, #324]	; (80124d4 <rmw_create_subscription+0x1bc>)
 801238e:	462b      	mov	r3, r5
 8012390:	213c      	movs	r1, #60	; 0x3c
 8012392:	4650      	mov	r0, sl
 8012394:	f003 f940 	bl	8015618 <sniprintf>
 8012398:	4641      	mov	r1, r8
 801239a:	f8c7 9020 	str.w	r9, [r7, #32]
 801239e:	2250      	movs	r2, #80	; 0x50
 80123a0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80123a4:	f003 faed 	bl	8015982 <memcpy>
 80123a8:	494b      	ldr	r1, [pc, #300]	; (80124d8 <rmw_create_subscription+0x1c0>)
 80123aa:	4630      	mov	r0, r6
 80123ac:	f7f8 fdb0 	bl	800af10 <get_message_typesupport_handle>
 80123b0:	2800      	cmp	r0, #0
 80123b2:	f000 8081 	beq.w	80124b8 <rmw_create_subscription+0x1a0>
 80123b6:	6842      	ldr	r2, [r0, #4]
 80123b8:	61ba      	str	r2, [r7, #24]
 80123ba:	2a00      	cmp	r2, #0
 80123bc:	d07c      	beq.n	80124b8 <rmw_create_subscription+0x1a0>
 80123be:	4629      	mov	r1, r5
 80123c0:	4643      	mov	r3, r8
 80123c2:	4648      	mov	r0, r9
 80123c4:	f7ff fc8c 	bl	8011ce0 <create_topic>
 80123c8:	61f8      	str	r0, [r7, #28]
 80123ca:	2800      	cmp	r0, #0
 80123cc:	d078      	beq.n	80124c0 <rmw_create_subscription+0x1a8>
 80123ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80123d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80123d6:	2104      	movs	r1, #4
 80123d8:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 80123dc:	1c42      	adds	r2, r0, #1
 80123de:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 80123e2:	f7f9 f8d3 	bl	800b58c <uxr_object_id>
 80123e6:	6138      	str	r0, [r7, #16]
 80123e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80123ec:	2506      	movs	r5, #6
 80123ee:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 80123f2:	9500      	str	r5, [sp, #0]
 80123f4:	6819      	ldr	r1, [r3, #0]
 80123f6:	693a      	ldr	r2, [r7, #16]
 80123f8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80123fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012400:	f7f8 ffa6 	bl	800b350 <uxr_buffer_create_subscriber_bin>
 8012404:	4602      	mov	r2, r0
 8012406:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801240a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801240e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012412:	f7f8 fcef 	bl	800adf4 <run_xrce_session>
 8012416:	2800      	cmp	r0, #0
 8012418:	d04e      	beq.n	80124b8 <rmw_create_subscription+0x1a0>
 801241a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801241e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012422:	4629      	mov	r1, r5
 8012424:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8012428:	1c42      	adds	r2, r0, #1
 801242a:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 801242e:	f7f9 f8ad 	bl	800b58c <uxr_object_id>
 8012432:	ae08      	add	r6, sp, #32
 8012434:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012438:	69fb      	ldr	r3, [r7, #28]
 801243a:	6178      	str	r0, [r7, #20]
 801243c:	4641      	mov	r1, r8
 801243e:	4630      	mov	r0, r6
 8012440:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8012444:	9305      	str	r3, [sp, #20]
 8012446:	f7f8 fcf1 	bl	800ae2c <convert_qos_profile>
 801244a:	9503      	str	r5, [sp, #12]
 801244c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012450:	9b05      	ldr	r3, [sp, #20]
 8012452:	9001      	str	r0, [sp, #4]
 8012454:	f8ad 1008 	strh.w	r1, [sp, #8]
 8012458:	691b      	ldr	r3, [r3, #16]
 801245a:	9300      	str	r3, [sp, #0]
 801245c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8012460:	f8db 1000 	ldr.w	r1, [fp]
 8012464:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8012468:	f7f9 f818 	bl	800b49c <uxr_buffer_create_datareader_bin>
 801246c:	4602      	mov	r2, r0
 801246e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012472:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012476:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801247a:	f7f8 fcbb 	bl	800adf4 <run_xrce_session>
 801247e:	b1d8      	cbz	r0, 80124b8 <rmw_create_subscription+0x1a0>
 8012480:	f898 3008 	ldrb.w	r3, [r8, #8]
 8012484:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012488:	2b02      	cmp	r3, #2
 801248a:	bf0c      	ite	eq
 801248c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8012490:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 8012494:	9307      	str	r3, [sp, #28]
 8012496:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801249a:	2200      	movs	r2, #0
 801249c:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 80124a0:	ab0a      	add	r3, sp, #40	; 0x28
 80124a2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80124a6:	9300      	str	r3, [sp, #0]
 80124a8:	697a      	ldr	r2, [r7, #20]
 80124aa:	9b07      	ldr	r3, [sp, #28]
 80124ac:	6809      	ldr	r1, [r1, #0]
 80124ae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80124b2:	f001 fa7b 	bl	80139ac <uxr_buffer_request_data>
 80124b6:	e007      	b.n	80124c8 <rmw_create_subscription+0x1b0>
 80124b8:	69f8      	ldr	r0, [r7, #28]
 80124ba:	b108      	cbz	r0, 80124c0 <rmw_create_subscription+0x1a8>
 80124bc:	f7f8 fb98 	bl	800abf0 <rmw_uxrce_fini_topic_memory>
 80124c0:	4620      	mov	r0, r4
 80124c2:	f7f8 fb53 	bl	800ab6c <rmw_uxrce_fini_subscription_memory>
 80124c6:	2400      	movs	r4, #0
 80124c8:	4620      	mov	r0, r4
 80124ca:	b00d      	add	sp, #52	; 0x34
 80124cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d0:	20011064 	.word	0x20011064
 80124d4:	08016bc0 	.word	0x08016bc0
 80124d8:	08016940 	.word	0x08016940

080124dc <rmw_subscription_get_actual_qos>:
 80124dc:	b150      	cbz	r0, 80124f4 <rmw_subscription_get_actual_qos+0x18>
 80124de:	b508      	push	{r3, lr}
 80124e0:	460b      	mov	r3, r1
 80124e2:	b149      	cbz	r1, 80124f8 <rmw_subscription_get_actual_qos+0x1c>
 80124e4:	6841      	ldr	r1, [r0, #4]
 80124e6:	2250      	movs	r2, #80	; 0x50
 80124e8:	3128      	adds	r1, #40	; 0x28
 80124ea:	4618      	mov	r0, r3
 80124ec:	f003 fa49 	bl	8015982 <memcpy>
 80124f0:	2000      	movs	r0, #0
 80124f2:	bd08      	pop	{r3, pc}
 80124f4:	200b      	movs	r0, #11
 80124f6:	4770      	bx	lr
 80124f8:	200b      	movs	r0, #11
 80124fa:	bd08      	pop	{r3, pc}

080124fc <rmw_destroy_subscription>:
 80124fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124fe:	b128      	cbz	r0, 801250c <rmw_destroy_subscription+0x10>
 8012500:	4604      	mov	r4, r0
 8012502:	6800      	ldr	r0, [r0, #0]
 8012504:	460d      	mov	r5, r1
 8012506:	f7f8 fcf5 	bl	800aef4 <is_uxrce_rmw_identifier_valid>
 801250a:	b910      	cbnz	r0, 8012512 <rmw_destroy_subscription+0x16>
 801250c:	2401      	movs	r4, #1
 801250e:	4620      	mov	r0, r4
 8012510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012512:	6863      	ldr	r3, [r4, #4]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d0f9      	beq.n	801250c <rmw_destroy_subscription+0x10>
 8012518:	2d00      	cmp	r5, #0
 801251a:	d0f7      	beq.n	801250c <rmw_destroy_subscription+0x10>
 801251c:	6828      	ldr	r0, [r5, #0]
 801251e:	f7f8 fce9 	bl	800aef4 <is_uxrce_rmw_identifier_valid>
 8012522:	2800      	cmp	r0, #0
 8012524:	d0f2      	beq.n	801250c <rmw_destroy_subscription+0x10>
 8012526:	686c      	ldr	r4, [r5, #4]
 8012528:	2c00      	cmp	r4, #0
 801252a:	d0ef      	beq.n	801250c <rmw_destroy_subscription+0x10>
 801252c:	6a26      	ldr	r6, [r4, #32]
 801252e:	6962      	ldr	r2, [r4, #20]
 8012530:	6930      	ldr	r0, [r6, #16]
 8012532:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012536:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801253a:	6819      	ldr	r1, [r3, #0]
 801253c:	f001 fa70 	bl	8013a20 <uxr_buffer_cancel_data>
 8012540:	4602      	mov	r2, r0
 8012542:	6930      	ldr	r0, [r6, #16]
 8012544:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012548:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801254c:	f7f8 fc52 	bl	800adf4 <run_xrce_session>
 8012550:	69e0      	ldr	r0, [r4, #28]
 8012552:	f7ff fc15 	bl	8011d80 <destroy_topic>
 8012556:	6a23      	ldr	r3, [r4, #32]
 8012558:	6962      	ldr	r2, [r4, #20]
 801255a:	6918      	ldr	r0, [r3, #16]
 801255c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012560:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012564:	6819      	ldr	r1, [r3, #0]
 8012566:	f7f8 fe0f 	bl	800b188 <uxr_buffer_delete_entity>
 801256a:	6a23      	ldr	r3, [r4, #32]
 801256c:	6922      	ldr	r2, [r4, #16]
 801256e:	691b      	ldr	r3, [r3, #16]
 8012570:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8012574:	4604      	mov	r4, r0
 8012576:	6809      	ldr	r1, [r1, #0]
 8012578:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801257c:	f7f8 fe04 	bl	800b188 <uxr_buffer_delete_entity>
 8012580:	6937      	ldr	r7, [r6, #16]
 8012582:	4622      	mov	r2, r4
 8012584:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8012588:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801258c:	4604      	mov	r4, r0
 801258e:	4638      	mov	r0, r7
 8012590:	f7f8 fc30 	bl	800adf4 <run_xrce_session>
 8012594:	6936      	ldr	r6, [r6, #16]
 8012596:	4622      	mov	r2, r4
 8012598:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 801259c:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 80125a0:	4604      	mov	r4, r0
 80125a2:	4630      	mov	r0, r6
 80125a4:	f7f8 fc26 	bl	800adf4 <run_xrce_session>
 80125a8:	b12c      	cbz	r4, 80125b6 <rmw_destroy_subscription+0xba>
 80125aa:	b120      	cbz	r0, 80125b6 <rmw_destroy_subscription+0xba>
 80125ac:	2400      	movs	r4, #0
 80125ae:	4628      	mov	r0, r5
 80125b0:	f7f8 fadc 	bl	800ab6c <rmw_uxrce_fini_subscription_memory>
 80125b4:	e7ab      	b.n	801250e <rmw_destroy_subscription+0x12>
 80125b6:	2402      	movs	r4, #2
 80125b8:	e7f9      	b.n	80125ae <rmw_destroy_subscription+0xb2>
 80125ba:	bf00      	nop

080125bc <rmw_take_with_info>:
 80125bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125be:	4604      	mov	r4, r0
 80125c0:	6800      	ldr	r0, [r0, #0]
 80125c2:	b089      	sub	sp, #36	; 0x24
 80125c4:	460f      	mov	r7, r1
 80125c6:	4615      	mov	r5, r2
 80125c8:	b128      	cbz	r0, 80125d6 <rmw_take_with_info+0x1a>
 80125ca:	4b24      	ldr	r3, [pc, #144]	; (801265c <rmw_take_with_info+0xa0>)
 80125cc:	6819      	ldr	r1, [r3, #0]
 80125ce:	f7ed fe07 	bl	80001e0 <strcmp>
 80125d2:	2800      	cmp	r0, #0
 80125d4:	d13e      	bne.n	8012654 <rmw_take_with_info+0x98>
 80125d6:	b305      	cbz	r5, 801261a <rmw_take_with_info+0x5e>
 80125d8:	6864      	ldr	r4, [r4, #4]
 80125da:	2300      	movs	r3, #0
 80125dc:	702b      	strb	r3, [r5, #0]
 80125de:	f7f8 fb8b 	bl	800acf8 <rmw_uxrce_clean_expired_static_input_buffer>
 80125e2:	4620      	mov	r0, r4
 80125e4:	f7f8 fb60 	bl	800aca8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80125e8:	4606      	mov	r6, r0
 80125ea:	b1f0      	cbz	r0, 801262a <rmw_take_with_info+0x6e>
 80125ec:	6881      	ldr	r1, [r0, #8]
 80125ee:	4668      	mov	r0, sp
 80125f0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80125f4:	3110      	adds	r1, #16
 80125f6:	f7f6 fa8d 	bl	8008b14 <ucdr_init_buffer>
 80125fa:	69a3      	ldr	r3, [r4, #24]
 80125fc:	4639      	mov	r1, r7
 80125fe:	68db      	ldr	r3, [r3, #12]
 8012600:	4668      	mov	r0, sp
 8012602:	4798      	blx	r3
 8012604:	4631      	mov	r1, r6
 8012606:	4604      	mov	r4, r0
 8012608:	4815      	ldr	r0, [pc, #84]	; (8012660 <rmw_take_with_info+0xa4>)
 801260a:	f7ff f88b 	bl	8011724 <put_memory>
 801260e:	702c      	strb	r4, [r5, #0]
 8012610:	f084 0001 	eor.w	r0, r4, #1
 8012614:	b2c0      	uxtb	r0, r0
 8012616:	b009      	add	sp, #36	; 0x24
 8012618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801261a:	6864      	ldr	r4, [r4, #4]
 801261c:	f7f8 fb6c 	bl	800acf8 <rmw_uxrce_clean_expired_static_input_buffer>
 8012620:	4620      	mov	r0, r4
 8012622:	f7f8 fb41 	bl	800aca8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012626:	4605      	mov	r5, r0
 8012628:	b910      	cbnz	r0, 8012630 <rmw_take_with_info+0x74>
 801262a:	2001      	movs	r0, #1
 801262c:	b009      	add	sp, #36	; 0x24
 801262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012630:	68a9      	ldr	r1, [r5, #8]
 8012632:	4668      	mov	r0, sp
 8012634:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8012638:	3110      	adds	r1, #16
 801263a:	f7f6 fa6b 	bl	8008b14 <ucdr_init_buffer>
 801263e:	69a3      	ldr	r3, [r4, #24]
 8012640:	4639      	mov	r1, r7
 8012642:	68db      	ldr	r3, [r3, #12]
 8012644:	4668      	mov	r0, sp
 8012646:	4798      	blx	r3
 8012648:	4629      	mov	r1, r5
 801264a:	4604      	mov	r4, r0
 801264c:	4804      	ldr	r0, [pc, #16]	; (8012660 <rmw_take_with_info+0xa4>)
 801264e:	f7ff f869 	bl	8011724 <put_memory>
 8012652:	e7dd      	b.n	8012610 <rmw_take_with_info+0x54>
 8012654:	200c      	movs	r0, #12
 8012656:	b009      	add	sp, #36	; 0x24
 8012658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801265a:	bf00      	nop
 801265c:	080173a4 	.word	0x080173a4
 8012660:	20011054 	.word	0x20011054

08012664 <rmw_trigger_guard_condition>:
 8012664:	b160      	cbz	r0, 8012680 <rmw_trigger_guard_condition+0x1c>
 8012666:	b510      	push	{r4, lr}
 8012668:	4604      	mov	r4, r0
 801266a:	6800      	ldr	r0, [r0, #0]
 801266c:	f7f8 fc42 	bl	800aef4 <is_uxrce_rmw_identifier_valid>
 8012670:	b908      	cbnz	r0, 8012676 <rmw_trigger_guard_condition+0x12>
 8012672:	2001      	movs	r0, #1
 8012674:	bd10      	pop	{r4, pc}
 8012676:	6863      	ldr	r3, [r4, #4]
 8012678:	2201      	movs	r2, #1
 801267a:	741a      	strb	r2, [r3, #16]
 801267c:	2000      	movs	r0, #0
 801267e:	bd10      	pop	{r4, pc}
 8012680:	2001      	movs	r0, #1
 8012682:	4770      	bx	lr

08012684 <rmw_uxrce_transport_init>:
 8012684:	b508      	push	{r3, lr}
 8012686:	b108      	cbz	r0, 801268c <rmw_uxrce_transport_init+0x8>
 8012688:	f100 0210 	add.w	r2, r0, #16
 801268c:	b139      	cbz	r1, 801269e <rmw_uxrce_transport_init+0x1a>
 801268e:	6949      	ldr	r1, [r1, #20]
 8012690:	4610      	mov	r0, r2
 8012692:	f000 fc0b 	bl	8012eac <uxr_init_custom_transport>
 8012696:	f080 0001 	eor.w	r0, r0, #1
 801269a:	b2c0      	uxtb	r0, r0
 801269c:	bd08      	pop	{r3, pc}
 801269e:	4b04      	ldr	r3, [pc, #16]	; (80126b0 <rmw_uxrce_transport_init+0x2c>)
 80126a0:	4610      	mov	r0, r2
 80126a2:	6859      	ldr	r1, [r3, #4]
 80126a4:	f000 fc02 	bl	8012eac <uxr_init_custom_transport>
 80126a8:	f080 0001 	eor.w	r0, r0, #1
 80126ac:	b2c0      	uxtb	r0, r0
 80126ae:	bd08      	pop	{r3, pc}
 80126b0:	2000c72c 	.word	0x2000c72c

080126b4 <rmw_wait>:
 80126b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126b8:	b089      	sub	sp, #36	; 0x24
 80126ba:	4605      	mov	r5, r0
 80126bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80126be:	460e      	mov	r6, r1
 80126c0:	4698      	mov	r8, r3
 80126c2:	4691      	mov	r9, r2
 80126c4:	2a00      	cmp	r2, #0
 80126c6:	f000 810a 	beq.w	80128de <rmw_wait+0x22a>
 80126ca:	b16c      	cbz	r4, 80126e8 <rmw_wait+0x34>
 80126cc:	4bae      	ldr	r3, [pc, #696]	; (8012988 <rmw_wait+0x2d4>)
 80126ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80126d0:	af04      	add	r7, sp, #16
 80126d2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80126d6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80126da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80126de:	f7fe fe45 	bl	801136c <rmw_time_equal>
 80126e2:	2800      	cmp	r0, #0
 80126e4:	f000 8127 	beq.w	8012936 <rmw_wait+0x282>
 80126e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80126ec:	f7f8 fb04 	bl	800acf8 <rmw_uxrce_clean_expired_static_input_buffer>
 80126f0:	4ba6      	ldr	r3, [pc, #664]	; (801298c <rmw_wait+0x2d8>)
 80126f2:	681c      	ldr	r4, [r3, #0]
 80126f4:	b14c      	cbz	r4, 801270a <rmw_wait+0x56>
 80126f6:	4623      	mov	r3, r4
 80126f8:	2100      	movs	r1, #0
 80126fa:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80126fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8012702:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8012706:	2b00      	cmp	r3, #0
 8012708:	d1f7      	bne.n	80126fa <rmw_wait+0x46>
 801270a:	f1b9 0f00 	cmp.w	r9, #0
 801270e:	d011      	beq.n	8012734 <rmw_wait+0x80>
 8012710:	f8d9 1000 	ldr.w	r1, [r9]
 8012714:	b171      	cbz	r1, 8012734 <rmw_wait+0x80>
 8012716:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801271a:	2300      	movs	r3, #0
 801271c:	2001      	movs	r0, #1
 801271e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012722:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8012724:	6912      	ldr	r2, [r2, #16]
 8012726:	3301      	adds	r3, #1
 8012728:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801272c:	4299      	cmp	r1, r3
 801272e:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8012732:	d1f4      	bne.n	801271e <rmw_wait+0x6a>
 8012734:	f1b8 0f00 	cmp.w	r8, #0
 8012738:	d011      	beq.n	801275e <rmw_wait+0xaa>
 801273a:	f8d8 1000 	ldr.w	r1, [r8]
 801273e:	b171      	cbz	r1, 801275e <rmw_wait+0xaa>
 8012740:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8012744:	2300      	movs	r3, #0
 8012746:	2001      	movs	r0, #1
 8012748:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801274c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801274e:	6912      	ldr	r2, [r2, #16]
 8012750:	3301      	adds	r3, #1
 8012752:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8012756:	4299      	cmp	r1, r3
 8012758:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801275c:	d1f4      	bne.n	8012748 <rmw_wait+0x94>
 801275e:	b185      	cbz	r5, 8012782 <rmw_wait+0xce>
 8012760:	6829      	ldr	r1, [r5, #0]
 8012762:	b171      	cbz	r1, 8012782 <rmw_wait+0xce>
 8012764:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8012768:	2300      	movs	r3, #0
 801276a:	2001      	movs	r0, #1
 801276c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012770:	6a12      	ldr	r2, [r2, #32]
 8012772:	6912      	ldr	r2, [r2, #16]
 8012774:	3301      	adds	r3, #1
 8012776:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801277a:	4299      	cmp	r1, r3
 801277c:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8012780:	d1f4      	bne.n	801276c <rmw_wait+0xb8>
 8012782:	b34c      	cbz	r4, 80127d8 <rmw_wait+0x124>
 8012784:	4622      	mov	r2, r4
 8012786:	2300      	movs	r3, #0
 8012788:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801278c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8012790:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8012794:	440b      	add	r3, r1
 8012796:	b2db      	uxtb	r3, r3
 8012798:	2a00      	cmp	r2, #0
 801279a:	d1f5      	bne.n	8012788 <rmw_wait+0xd4>
 801279c:	2b00      	cmp	r3, #0
 801279e:	f000 8084 	beq.w	80128aa <rmw_wait+0x1f6>
 80127a2:	1c7a      	adds	r2, r7, #1
 80127a4:	d00d      	beq.n	80127c2 <rmw_wait+0x10e>
 80127a6:	ee07 7a90 	vmov	s15, r7
 80127aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80127ae:	ee07 3a90 	vmov	s15, r3
 80127b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80127ba:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80127be:	ee17 7a90 	vmov	r7, s15
 80127c2:	68a0      	ldr	r0, [r4, #8]
 80127c4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80127c8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	f040 8090 	bne.w	80128f2 <rmw_wait+0x23e>
 80127d2:	6864      	ldr	r4, [r4, #4]
 80127d4:	2c00      	cmp	r4, #0
 80127d6:	d1f4      	bne.n	80127c2 <rmw_wait+0x10e>
 80127d8:	f1b9 0f00 	cmp.w	r9, #0
 80127dc:	f000 80bc 	beq.w	8012958 <rmw_wait+0x2a4>
 80127e0:	f8d9 7000 	ldr.w	r7, [r9]
 80127e4:	2f00      	cmp	r7, #0
 80127e6:	f000 808e 	beq.w	8012906 <rmw_wait+0x252>
 80127ea:	2400      	movs	r4, #0
 80127ec:	4627      	mov	r7, r4
 80127ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80127f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80127f6:	f7f8 fa57 	bl	800aca8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80127fa:	2800      	cmp	r0, #0
 80127fc:	d05f      	beq.n	80128be <rmw_wait+0x20a>
 80127fe:	f8d9 3000 	ldr.w	r3, [r9]
 8012802:	3401      	adds	r4, #1
 8012804:	42a3      	cmp	r3, r4
 8012806:	f04f 0701 	mov.w	r7, #1
 801280a:	d8f0      	bhi.n	80127ee <rmw_wait+0x13a>
 801280c:	f1b8 0f00 	cmp.w	r8, #0
 8012810:	d012      	beq.n	8012838 <rmw_wait+0x184>
 8012812:	f8d8 3000 	ldr.w	r3, [r8]
 8012816:	b17b      	cbz	r3, 8012838 <rmw_wait+0x184>
 8012818:	2400      	movs	r4, #0
 801281a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801281e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012822:	f7f8 fa41 	bl	800aca8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012826:	2800      	cmp	r0, #0
 8012828:	d051      	beq.n	80128ce <rmw_wait+0x21a>
 801282a:	f8d8 3000 	ldr.w	r3, [r8]
 801282e:	3401      	adds	r4, #1
 8012830:	42a3      	cmp	r3, r4
 8012832:	f04f 0701 	mov.w	r7, #1
 8012836:	d8f0      	bhi.n	801281a <rmw_wait+0x166>
 8012838:	b1dd      	cbz	r5, 8012872 <rmw_wait+0x1be>
 801283a:	682b      	ldr	r3, [r5, #0]
 801283c:	b1cb      	cbz	r3, 8012872 <rmw_wait+0x1be>
 801283e:	2400      	movs	r4, #0
 8012840:	686b      	ldr	r3, [r5, #4]
 8012842:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012846:	f7f8 fa2f 	bl	800aca8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801284a:	b158      	cbz	r0, 8012864 <rmw_wait+0x1b0>
 801284c:	682b      	ldr	r3, [r5, #0]
 801284e:	3401      	adds	r4, #1
 8012850:	42a3      	cmp	r3, r4
 8012852:	d969      	bls.n	8012928 <rmw_wait+0x274>
 8012854:	686b      	ldr	r3, [r5, #4]
 8012856:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801285a:	2701      	movs	r7, #1
 801285c:	f7f8 fa24 	bl	800aca8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012860:	2800      	cmp	r0, #0
 8012862:	d1f3      	bne.n	801284c <rmw_wait+0x198>
 8012864:	e9d5 3200 	ldrd	r3, r2, [r5]
 8012868:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801286c:	3401      	adds	r4, #1
 801286e:	42a3      	cmp	r3, r4
 8012870:	d8e6      	bhi.n	8012840 <rmw_wait+0x18c>
 8012872:	b1a6      	cbz	r6, 801289e <rmw_wait+0x1ea>
 8012874:	6834      	ldr	r4, [r6, #0]
 8012876:	b194      	cbz	r4, 801289e <rmw_wait+0x1ea>
 8012878:	2300      	movs	r3, #0
 801287a:	461d      	mov	r5, r3
 801287c:	e004      	b.n	8012888 <rmw_wait+0x1d4>
 801287e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8012882:	3301      	adds	r3, #1
 8012884:	42a3      	cmp	r3, r4
 8012886:	d00a      	beq.n	801289e <rmw_wait+0x1ea>
 8012888:	6870      	ldr	r0, [r6, #4]
 801288a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801288e:	7c0a      	ldrb	r2, [r1, #16]
 8012890:	2a00      	cmp	r2, #0
 8012892:	d0f4      	beq.n	801287e <rmw_wait+0x1ca>
 8012894:	3301      	adds	r3, #1
 8012896:	42a3      	cmp	r3, r4
 8012898:	740d      	strb	r5, [r1, #16]
 801289a:	4617      	mov	r7, r2
 801289c:	d1f4      	bne.n	8012888 <rmw_wait+0x1d4>
 801289e:	2f00      	cmp	r7, #0
 80128a0:	d03e      	beq.n	8012920 <rmw_wait+0x26c>
 80128a2:	2000      	movs	r0, #0
 80128a4:	b009      	add	sp, #36	; 0x24
 80128a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128aa:	68a0      	ldr	r0, [r4, #8]
 80128ac:	2100      	movs	r1, #0
 80128ae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80128b2:	f7f9 fb3f 	bl	800bf34 <uxr_run_session_timeout>
 80128b6:	6864      	ldr	r4, [r4, #4]
 80128b8:	2c00      	cmp	r4, #0
 80128ba:	d1f6      	bne.n	80128aa <rmw_wait+0x1f6>
 80128bc:	e78c      	b.n	80127d8 <rmw_wait+0x124>
 80128be:	e9d9 3200 	ldrd	r3, r2, [r9]
 80128c2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80128c6:	3401      	adds	r4, #1
 80128c8:	42a3      	cmp	r3, r4
 80128ca:	d890      	bhi.n	80127ee <rmw_wait+0x13a>
 80128cc:	e79e      	b.n	801280c <rmw_wait+0x158>
 80128ce:	e9d8 3200 	ldrd	r3, r2, [r8]
 80128d2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80128d6:	3401      	adds	r4, #1
 80128d8:	429c      	cmp	r4, r3
 80128da:	d39e      	bcc.n	801281a <rmw_wait+0x166>
 80128dc:	e7ac      	b.n	8012838 <rmw_wait+0x184>
 80128de:	2b00      	cmp	r3, #0
 80128e0:	f47f aef3 	bne.w	80126ca <rmw_wait+0x16>
 80128e4:	2800      	cmp	r0, #0
 80128e6:	f47f aef0 	bne.w	80126ca <rmw_wait+0x16>
 80128ea:	2900      	cmp	r1, #0
 80128ec:	f47f aeed 	bne.w	80126ca <rmw_wait+0x16>
 80128f0:	e7d7      	b.n	80128a2 <rmw_wait+0x1ee>
 80128f2:	4639      	mov	r1, r7
 80128f4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80128f8:	f7f9 fb36 	bl	800bf68 <uxr_run_session_until_data>
 80128fc:	6864      	ldr	r4, [r4, #4]
 80128fe:	2c00      	cmp	r4, #0
 8012900:	f47f af5f 	bne.w	80127c2 <rmw_wait+0x10e>
 8012904:	e768      	b.n	80127d8 <rmw_wait+0x124>
 8012906:	f1b8 0f00 	cmp.w	r8, #0
 801290a:	d032      	beq.n	8012972 <rmw_wait+0x2be>
 801290c:	f8d8 3000 	ldr.w	r3, [r8]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d181      	bne.n	8012818 <rmw_wait+0x164>
 8012914:	461f      	mov	r7, r3
 8012916:	2d00      	cmp	r5, #0
 8012918:	d18f      	bne.n	801283a <rmw_wait+0x186>
 801291a:	462f      	mov	r7, r5
 801291c:	2e00      	cmp	r6, #0
 801291e:	d1a9      	bne.n	8012874 <rmw_wait+0x1c0>
 8012920:	2002      	movs	r0, #2
 8012922:	b009      	add	sp, #36	; 0x24
 8012924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012928:	2e00      	cmp	r6, #0
 801292a:	d0ba      	beq.n	80128a2 <rmw_wait+0x1ee>
 801292c:	6834      	ldr	r4, [r6, #0]
 801292e:	2701      	movs	r7, #1
 8012930:	2c00      	cmp	r4, #0
 8012932:	d1a1      	bne.n	8012878 <rmw_wait+0x1c4>
 8012934:	e7b5      	b.n	80128a2 <rmw_wait+0x1ee>
 8012936:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801293a:	f7fe fd6b 	bl	8011414 <rmw_time_total_nsec>
 801293e:	2300      	movs	r3, #0
 8012940:	4a13      	ldr	r2, [pc, #76]	; (8012990 <rmw_wait+0x2dc>)
 8012942:	f7ed fd05 	bl	8000350 <__aeabi_uldivmod>
 8012946:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801294a:	f171 0300 	sbcs.w	r3, r1, #0
 801294e:	4607      	mov	r7, r0
 8012950:	bfa8      	it	ge
 8012952:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 8012956:	e6c9      	b.n	80126ec <rmw_wait+0x38>
 8012958:	f1b8 0f00 	cmp.w	r8, #0
 801295c:	d009      	beq.n	8012972 <rmw_wait+0x2be>
 801295e:	f8d8 3000 	ldr.w	r3, [r8]
 8012962:	464f      	mov	r7, r9
 8012964:	2b00      	cmp	r3, #0
 8012966:	f47f af57 	bne.w	8012818 <rmw_wait+0x164>
 801296a:	2d00      	cmp	r5, #0
 801296c:	f47f af65 	bne.w	801283a <rmw_wait+0x186>
 8012970:	e7d3      	b.n	801291a <rmw_wait+0x266>
 8012972:	b17d      	cbz	r5, 8012994 <rmw_wait+0x2e0>
 8012974:	682b      	ldr	r3, [r5, #0]
 8012976:	4647      	mov	r7, r8
 8012978:	2b00      	cmp	r3, #0
 801297a:	f47f af60 	bne.w	801283e <rmw_wait+0x18a>
 801297e:	2e00      	cmp	r6, #0
 8012980:	f47f af78 	bne.w	8012874 <rmw_wait+0x1c0>
 8012984:	e7cc      	b.n	8012920 <rmw_wait+0x26c>
 8012986:	bf00      	nop
 8012988:	080167f8 	.word	0x080167f8
 801298c:	20011044 	.word	0x20011044
 8012990:	000f4240 	.word	0x000f4240
 8012994:	2e00      	cmp	r6, #0
 8012996:	d0c3      	beq.n	8012920 <rmw_wait+0x26c>
 8012998:	6834      	ldr	r4, [r6, #0]
 801299a:	462f      	mov	r7, r5
 801299c:	2c00      	cmp	r4, #0
 801299e:	f47f af6b 	bne.w	8012878 <rmw_wait+0x1c4>
 80129a2:	e7bd      	b.n	8012920 <rmw_wait+0x26c>

080129a4 <rmw_create_wait_set>:
 80129a4:	b508      	push	{r3, lr}
 80129a6:	4803      	ldr	r0, [pc, #12]	; (80129b4 <rmw_create_wait_set+0x10>)
 80129a8:	f7fe feac 	bl	8011704 <get_memory>
 80129ac:	b108      	cbz	r0, 80129b2 <rmw_create_wait_set+0xe>
 80129ae:	6880      	ldr	r0, [r0, #8]
 80129b0:	3010      	adds	r0, #16
 80129b2:	bd08      	pop	{r3, pc}
 80129b4:	20011084 	.word	0x20011084

080129b8 <rmw_destroy_wait_set>:
 80129b8:	b508      	push	{r3, lr}
 80129ba:	4b08      	ldr	r3, [pc, #32]	; (80129dc <rmw_destroy_wait_set+0x24>)
 80129bc:	6819      	ldr	r1, [r3, #0]
 80129be:	b911      	cbnz	r1, 80129c6 <rmw_destroy_wait_set+0xe>
 80129c0:	e00a      	b.n	80129d8 <rmw_destroy_wait_set+0x20>
 80129c2:	6849      	ldr	r1, [r1, #4]
 80129c4:	b141      	cbz	r1, 80129d8 <rmw_destroy_wait_set+0x20>
 80129c6:	688b      	ldr	r3, [r1, #8]
 80129c8:	3310      	adds	r3, #16
 80129ca:	4298      	cmp	r0, r3
 80129cc:	d1f9      	bne.n	80129c2 <rmw_destroy_wait_set+0xa>
 80129ce:	4803      	ldr	r0, [pc, #12]	; (80129dc <rmw_destroy_wait_set+0x24>)
 80129d0:	f7fe fea8 	bl	8011724 <put_memory>
 80129d4:	2000      	movs	r0, #0
 80129d6:	bd08      	pop	{r3, pc}
 80129d8:	2001      	movs	r0, #1
 80129da:	bd08      	pop	{r3, pc}
 80129dc:	20011084 	.word	0x20011084

080129e0 <rmw_uros_epoch_nanos>:
 80129e0:	4b05      	ldr	r3, [pc, #20]	; (80129f8 <rmw_uros_epoch_nanos+0x18>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	b123      	cbz	r3, 80129f0 <rmw_uros_epoch_nanos+0x10>
 80129e6:	6898      	ldr	r0, [r3, #8]
 80129e8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80129ec:	f7f8 bf12 	b.w	800b814 <uxr_epoch_nanos>
 80129f0:	2000      	movs	r0, #0
 80129f2:	2100      	movs	r1, #0
 80129f4:	4770      	bx	lr
 80129f6:	bf00      	nop
 80129f8:	20011044 	.word	0x20011044

080129fc <std_msgs__msg__Int32__get_type_hash>:
 80129fc:	4800      	ldr	r0, [pc, #0]	; (8012a00 <std_msgs__msg__Int32__get_type_hash+0x4>)
 80129fe:	4770      	bx	lr
 8012a00:	2000066c 	.word	0x2000066c

08012a04 <std_msgs__msg__Int32__get_type_description>:
 8012a04:	4b03      	ldr	r3, [pc, #12]	; (8012a14 <std_msgs__msg__Int32__get_type_description+0x10>)
 8012a06:	781a      	ldrb	r2, [r3, #0]
 8012a08:	b90a      	cbnz	r2, 8012a0e <std_msgs__msg__Int32__get_type_description+0xa>
 8012a0a:	2201      	movs	r2, #1
 8012a0c:	701a      	strb	r2, [r3, #0]
 8012a0e:	4802      	ldr	r0, [pc, #8]	; (8012a18 <std_msgs__msg__Int32__get_type_description+0x14>)
 8012a10:	4770      	bx	lr
 8012a12:	bf00      	nop
 8012a14:	20011279 	.word	0x20011279
 8012a18:	080173a8 	.word	0x080173a8

08012a1c <std_msgs__msg__Int32__get_type_description_sources>:
 8012a1c:	4b09      	ldr	r3, [pc, #36]	; (8012a44 <std_msgs__msg__Int32__get_type_description_sources+0x28>)
 8012a1e:	781a      	ldrb	r2, [r3, #0]
 8012a20:	b96a      	cbnz	r2, 8012a3e <std_msgs__msg__Int32__get_type_description_sources+0x22>
 8012a22:	b430      	push	{r4, r5}
 8012a24:	4d08      	ldr	r5, [pc, #32]	; (8012a48 <std_msgs__msg__Int32__get_type_description_sources+0x2c>)
 8012a26:	4c09      	ldr	r4, [pc, #36]	; (8012a4c <std_msgs__msg__Int32__get_type_description_sources+0x30>)
 8012a28:	2201      	movs	r2, #1
 8012a2a:	701a      	strb	r2, [r3, #0]
 8012a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a34:	682b      	ldr	r3, [r5, #0]
 8012a36:	4806      	ldr	r0, [pc, #24]	; (8012a50 <std_msgs__msg__Int32__get_type_description_sources+0x34>)
 8012a38:	6023      	str	r3, [r4, #0]
 8012a3a:	bc30      	pop	{r4, r5}
 8012a3c:	4770      	bx	lr
 8012a3e:	4804      	ldr	r0, [pc, #16]	; (8012a50 <std_msgs__msg__Int32__get_type_description_sources+0x34>)
 8012a40:	4770      	bx	lr
 8012a42:	bf00      	nop
 8012a44:	20011278 	.word	0x20011278
 8012a48:	080173cc 	.word	0x080173cc
 8012a4c:	2001127c 	.word	0x2001127c
 8012a50:	080173f0 	.word	0x080173f0

08012a54 <std_msgs__msg__Int32__init>:
 8012a54:	3800      	subs	r0, #0
 8012a56:	bf18      	it	ne
 8012a58:	2001      	movne	r0, #1
 8012a5a:	4770      	bx	lr

08012a5c <std_msgs__msg__Int32__fini>:
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop

08012a60 <ucdr_serialize_endian_array_char>:
 8012a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a64:	4619      	mov	r1, r3
 8012a66:	461f      	mov	r7, r3
 8012a68:	4605      	mov	r5, r0
 8012a6a:	4690      	mov	r8, r2
 8012a6c:	f7f5 fffe 	bl	8008a6c <ucdr_check_buffer_available_for>
 8012a70:	b9e0      	cbnz	r0, 8012aac <ucdr_serialize_endian_array_char+0x4c>
 8012a72:	463e      	mov	r6, r7
 8012a74:	e009      	b.n	8012a8a <ucdr_serialize_endian_array_char+0x2a>
 8012a76:	68a8      	ldr	r0, [r5, #8]
 8012a78:	f002 ff83 	bl	8015982 <memcpy>
 8012a7c:	68ab      	ldr	r3, [r5, #8]
 8012a7e:	6928      	ldr	r0, [r5, #16]
 8012a80:	4423      	add	r3, r4
 8012a82:	4420      	add	r0, r4
 8012a84:	1b36      	subs	r6, r6, r4
 8012a86:	60ab      	str	r3, [r5, #8]
 8012a88:	6128      	str	r0, [r5, #16]
 8012a8a:	4631      	mov	r1, r6
 8012a8c:	2201      	movs	r2, #1
 8012a8e:	4628      	mov	r0, r5
 8012a90:	f7f6 f874 	bl	8008b7c <ucdr_check_final_buffer_behavior_array>
 8012a94:	1bb9      	subs	r1, r7, r6
 8012a96:	4441      	add	r1, r8
 8012a98:	4604      	mov	r4, r0
 8012a9a:	4602      	mov	r2, r0
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	d1ea      	bne.n	8012a76 <ucdr_serialize_endian_array_char+0x16>
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	7da8      	ldrb	r0, [r5, #22]
 8012aa4:	756b      	strb	r3, [r5, #21]
 8012aa6:	4058      	eors	r0, r3
 8012aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aac:	463a      	mov	r2, r7
 8012aae:	68a8      	ldr	r0, [r5, #8]
 8012ab0:	4641      	mov	r1, r8
 8012ab2:	f002 ff66 	bl	8015982 <memcpy>
 8012ab6:	68aa      	ldr	r2, [r5, #8]
 8012ab8:	692b      	ldr	r3, [r5, #16]
 8012aba:	443a      	add	r2, r7
 8012abc:	443b      	add	r3, r7
 8012abe:	60aa      	str	r2, [r5, #8]
 8012ac0:	612b      	str	r3, [r5, #16]
 8012ac2:	e7ed      	b.n	8012aa0 <ucdr_serialize_endian_array_char+0x40>

08012ac4 <ucdr_deserialize_endian_array_char>:
 8012ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ac8:	4619      	mov	r1, r3
 8012aca:	461f      	mov	r7, r3
 8012acc:	4605      	mov	r5, r0
 8012ace:	4690      	mov	r8, r2
 8012ad0:	f7f5 ffcc 	bl	8008a6c <ucdr_check_buffer_available_for>
 8012ad4:	b9e0      	cbnz	r0, 8012b10 <ucdr_deserialize_endian_array_char+0x4c>
 8012ad6:	463e      	mov	r6, r7
 8012ad8:	e009      	b.n	8012aee <ucdr_deserialize_endian_array_char+0x2a>
 8012ada:	68a9      	ldr	r1, [r5, #8]
 8012adc:	f002 ff51 	bl	8015982 <memcpy>
 8012ae0:	68ab      	ldr	r3, [r5, #8]
 8012ae2:	6928      	ldr	r0, [r5, #16]
 8012ae4:	4423      	add	r3, r4
 8012ae6:	4420      	add	r0, r4
 8012ae8:	1b36      	subs	r6, r6, r4
 8012aea:	60ab      	str	r3, [r5, #8]
 8012aec:	6128      	str	r0, [r5, #16]
 8012aee:	2201      	movs	r2, #1
 8012af0:	4631      	mov	r1, r6
 8012af2:	4628      	mov	r0, r5
 8012af4:	f7f6 f842 	bl	8008b7c <ucdr_check_final_buffer_behavior_array>
 8012af8:	4604      	mov	r4, r0
 8012afa:	1bb8      	subs	r0, r7, r6
 8012afc:	4440      	add	r0, r8
 8012afe:	4622      	mov	r2, r4
 8012b00:	2c00      	cmp	r4, #0
 8012b02:	d1ea      	bne.n	8012ada <ucdr_deserialize_endian_array_char+0x16>
 8012b04:	2301      	movs	r3, #1
 8012b06:	7da8      	ldrb	r0, [r5, #22]
 8012b08:	756b      	strb	r3, [r5, #21]
 8012b0a:	4058      	eors	r0, r3
 8012b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b10:	463a      	mov	r2, r7
 8012b12:	68a9      	ldr	r1, [r5, #8]
 8012b14:	4640      	mov	r0, r8
 8012b16:	f002 ff34 	bl	8015982 <memcpy>
 8012b1a:	68aa      	ldr	r2, [r5, #8]
 8012b1c:	692b      	ldr	r3, [r5, #16]
 8012b1e:	443a      	add	r2, r7
 8012b20:	443b      	add	r3, r7
 8012b22:	60aa      	str	r2, [r5, #8]
 8012b24:	612b      	str	r3, [r5, #16]
 8012b26:	e7ed      	b.n	8012b04 <ucdr_deserialize_endian_array_char+0x40>

08012b28 <ucdr_serialize_array_uint8_t>:
 8012b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b2c:	4688      	mov	r8, r1
 8012b2e:	4611      	mov	r1, r2
 8012b30:	4617      	mov	r7, r2
 8012b32:	4605      	mov	r5, r0
 8012b34:	f7f5 ff9a 	bl	8008a6c <ucdr_check_buffer_available_for>
 8012b38:	b9e0      	cbnz	r0, 8012b74 <ucdr_serialize_array_uint8_t+0x4c>
 8012b3a:	463e      	mov	r6, r7
 8012b3c:	e009      	b.n	8012b52 <ucdr_serialize_array_uint8_t+0x2a>
 8012b3e:	68a8      	ldr	r0, [r5, #8]
 8012b40:	f002 ff1f 	bl	8015982 <memcpy>
 8012b44:	68aa      	ldr	r2, [r5, #8]
 8012b46:	692b      	ldr	r3, [r5, #16]
 8012b48:	4422      	add	r2, r4
 8012b4a:	4423      	add	r3, r4
 8012b4c:	1b36      	subs	r6, r6, r4
 8012b4e:	60aa      	str	r2, [r5, #8]
 8012b50:	612b      	str	r3, [r5, #16]
 8012b52:	4631      	mov	r1, r6
 8012b54:	2201      	movs	r2, #1
 8012b56:	4628      	mov	r0, r5
 8012b58:	f7f6 f810 	bl	8008b7c <ucdr_check_final_buffer_behavior_array>
 8012b5c:	1bb9      	subs	r1, r7, r6
 8012b5e:	4441      	add	r1, r8
 8012b60:	4604      	mov	r4, r0
 8012b62:	4602      	mov	r2, r0
 8012b64:	2800      	cmp	r0, #0
 8012b66:	d1ea      	bne.n	8012b3e <ucdr_serialize_array_uint8_t+0x16>
 8012b68:	2301      	movs	r3, #1
 8012b6a:	7da8      	ldrb	r0, [r5, #22]
 8012b6c:	756b      	strb	r3, [r5, #21]
 8012b6e:	4058      	eors	r0, r3
 8012b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b74:	463a      	mov	r2, r7
 8012b76:	68a8      	ldr	r0, [r5, #8]
 8012b78:	4641      	mov	r1, r8
 8012b7a:	f002 ff02 	bl	8015982 <memcpy>
 8012b7e:	68aa      	ldr	r2, [r5, #8]
 8012b80:	692b      	ldr	r3, [r5, #16]
 8012b82:	443a      	add	r2, r7
 8012b84:	443b      	add	r3, r7
 8012b86:	60aa      	str	r2, [r5, #8]
 8012b88:	612b      	str	r3, [r5, #16]
 8012b8a:	e7ed      	b.n	8012b68 <ucdr_serialize_array_uint8_t+0x40>

08012b8c <ucdr_serialize_endian_array_uint8_t>:
 8012b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b90:	4619      	mov	r1, r3
 8012b92:	461f      	mov	r7, r3
 8012b94:	4605      	mov	r5, r0
 8012b96:	4690      	mov	r8, r2
 8012b98:	f7f5 ff68 	bl	8008a6c <ucdr_check_buffer_available_for>
 8012b9c:	b9e0      	cbnz	r0, 8012bd8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8012b9e:	463e      	mov	r6, r7
 8012ba0:	e009      	b.n	8012bb6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8012ba2:	68a8      	ldr	r0, [r5, #8]
 8012ba4:	f002 feed 	bl	8015982 <memcpy>
 8012ba8:	68ab      	ldr	r3, [r5, #8]
 8012baa:	6928      	ldr	r0, [r5, #16]
 8012bac:	4423      	add	r3, r4
 8012bae:	4420      	add	r0, r4
 8012bb0:	1b36      	subs	r6, r6, r4
 8012bb2:	60ab      	str	r3, [r5, #8]
 8012bb4:	6128      	str	r0, [r5, #16]
 8012bb6:	4631      	mov	r1, r6
 8012bb8:	2201      	movs	r2, #1
 8012bba:	4628      	mov	r0, r5
 8012bbc:	f7f5 ffde 	bl	8008b7c <ucdr_check_final_buffer_behavior_array>
 8012bc0:	1bb9      	subs	r1, r7, r6
 8012bc2:	4441      	add	r1, r8
 8012bc4:	4604      	mov	r4, r0
 8012bc6:	4602      	mov	r2, r0
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	d1ea      	bne.n	8012ba2 <ucdr_serialize_endian_array_uint8_t+0x16>
 8012bcc:	2301      	movs	r3, #1
 8012bce:	7da8      	ldrb	r0, [r5, #22]
 8012bd0:	756b      	strb	r3, [r5, #21]
 8012bd2:	4058      	eors	r0, r3
 8012bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bd8:	463a      	mov	r2, r7
 8012bda:	68a8      	ldr	r0, [r5, #8]
 8012bdc:	4641      	mov	r1, r8
 8012bde:	f002 fed0 	bl	8015982 <memcpy>
 8012be2:	68aa      	ldr	r2, [r5, #8]
 8012be4:	692b      	ldr	r3, [r5, #16]
 8012be6:	443a      	add	r2, r7
 8012be8:	443b      	add	r3, r7
 8012bea:	60aa      	str	r2, [r5, #8]
 8012bec:	612b      	str	r3, [r5, #16]
 8012bee:	e7ed      	b.n	8012bcc <ucdr_serialize_endian_array_uint8_t+0x40>

08012bf0 <ucdr_deserialize_array_uint8_t>:
 8012bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf4:	4688      	mov	r8, r1
 8012bf6:	4611      	mov	r1, r2
 8012bf8:	4617      	mov	r7, r2
 8012bfa:	4605      	mov	r5, r0
 8012bfc:	f7f5 ff36 	bl	8008a6c <ucdr_check_buffer_available_for>
 8012c00:	b9e0      	cbnz	r0, 8012c3c <ucdr_deserialize_array_uint8_t+0x4c>
 8012c02:	463e      	mov	r6, r7
 8012c04:	e009      	b.n	8012c1a <ucdr_deserialize_array_uint8_t+0x2a>
 8012c06:	68a9      	ldr	r1, [r5, #8]
 8012c08:	f002 febb 	bl	8015982 <memcpy>
 8012c0c:	68aa      	ldr	r2, [r5, #8]
 8012c0e:	692b      	ldr	r3, [r5, #16]
 8012c10:	4422      	add	r2, r4
 8012c12:	4423      	add	r3, r4
 8012c14:	1b36      	subs	r6, r6, r4
 8012c16:	60aa      	str	r2, [r5, #8]
 8012c18:	612b      	str	r3, [r5, #16]
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	4631      	mov	r1, r6
 8012c1e:	4628      	mov	r0, r5
 8012c20:	f7f5 ffac 	bl	8008b7c <ucdr_check_final_buffer_behavior_array>
 8012c24:	4604      	mov	r4, r0
 8012c26:	1bb8      	subs	r0, r7, r6
 8012c28:	4440      	add	r0, r8
 8012c2a:	4622      	mov	r2, r4
 8012c2c:	2c00      	cmp	r4, #0
 8012c2e:	d1ea      	bne.n	8012c06 <ucdr_deserialize_array_uint8_t+0x16>
 8012c30:	2301      	movs	r3, #1
 8012c32:	7da8      	ldrb	r0, [r5, #22]
 8012c34:	756b      	strb	r3, [r5, #21]
 8012c36:	4058      	eors	r0, r3
 8012c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c3c:	463a      	mov	r2, r7
 8012c3e:	68a9      	ldr	r1, [r5, #8]
 8012c40:	4640      	mov	r0, r8
 8012c42:	f002 fe9e 	bl	8015982 <memcpy>
 8012c46:	68aa      	ldr	r2, [r5, #8]
 8012c48:	692b      	ldr	r3, [r5, #16]
 8012c4a:	443a      	add	r2, r7
 8012c4c:	443b      	add	r3, r7
 8012c4e:	60aa      	str	r2, [r5, #8]
 8012c50:	612b      	str	r3, [r5, #16]
 8012c52:	e7ed      	b.n	8012c30 <ucdr_deserialize_array_uint8_t+0x40>

08012c54 <ucdr_deserialize_endian_array_uint8_t>:
 8012c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c58:	4619      	mov	r1, r3
 8012c5a:	461f      	mov	r7, r3
 8012c5c:	4605      	mov	r5, r0
 8012c5e:	4690      	mov	r8, r2
 8012c60:	f7f5 ff04 	bl	8008a6c <ucdr_check_buffer_available_for>
 8012c64:	b9e0      	cbnz	r0, 8012ca0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012c66:	463e      	mov	r6, r7
 8012c68:	e009      	b.n	8012c7e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012c6a:	68a9      	ldr	r1, [r5, #8]
 8012c6c:	f002 fe89 	bl	8015982 <memcpy>
 8012c70:	68ab      	ldr	r3, [r5, #8]
 8012c72:	6928      	ldr	r0, [r5, #16]
 8012c74:	4423      	add	r3, r4
 8012c76:	4420      	add	r0, r4
 8012c78:	1b36      	subs	r6, r6, r4
 8012c7a:	60ab      	str	r3, [r5, #8]
 8012c7c:	6128      	str	r0, [r5, #16]
 8012c7e:	2201      	movs	r2, #1
 8012c80:	4631      	mov	r1, r6
 8012c82:	4628      	mov	r0, r5
 8012c84:	f7f5 ff7a 	bl	8008b7c <ucdr_check_final_buffer_behavior_array>
 8012c88:	4604      	mov	r4, r0
 8012c8a:	1bb8      	subs	r0, r7, r6
 8012c8c:	4440      	add	r0, r8
 8012c8e:	4622      	mov	r2, r4
 8012c90:	2c00      	cmp	r4, #0
 8012c92:	d1ea      	bne.n	8012c6a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012c94:	2301      	movs	r3, #1
 8012c96:	7da8      	ldrb	r0, [r5, #22]
 8012c98:	756b      	strb	r3, [r5, #21]
 8012c9a:	4058      	eors	r0, r3
 8012c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ca0:	463a      	mov	r2, r7
 8012ca2:	68a9      	ldr	r1, [r5, #8]
 8012ca4:	4640      	mov	r0, r8
 8012ca6:	f002 fe6c 	bl	8015982 <memcpy>
 8012caa:	68aa      	ldr	r2, [r5, #8]
 8012cac:	692b      	ldr	r3, [r5, #16]
 8012cae:	443a      	add	r2, r7
 8012cb0:	443b      	add	r3, r7
 8012cb2:	60aa      	str	r2, [r5, #8]
 8012cb4:	612b      	str	r3, [r5, #16]
 8012cb6:	e7ed      	b.n	8012c94 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012cb8 <ucdr_serialize_sequence_char>:
 8012cb8:	b570      	push	{r4, r5, r6, lr}
 8012cba:	4615      	mov	r5, r2
 8012cbc:	460e      	mov	r6, r1
 8012cbe:	7d01      	ldrb	r1, [r0, #20]
 8012cc0:	4604      	mov	r4, r0
 8012cc2:	f7f5 f893 	bl	8007dec <ucdr_serialize_endian_uint32_t>
 8012cc6:	b90d      	cbnz	r5, 8012ccc <ucdr_serialize_sequence_char+0x14>
 8012cc8:	2001      	movs	r0, #1
 8012cca:	bd70      	pop	{r4, r5, r6, pc}
 8012ccc:	7d21      	ldrb	r1, [r4, #20]
 8012cce:	462b      	mov	r3, r5
 8012cd0:	4632      	mov	r2, r6
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012cd8:	f7ff bec2 	b.w	8012a60 <ucdr_serialize_endian_array_char>

08012cdc <ucdr_deserialize_sequence_char>:
 8012cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ce0:	461d      	mov	r5, r3
 8012ce2:	4616      	mov	r6, r2
 8012ce4:	460f      	mov	r7, r1
 8012ce6:	461a      	mov	r2, r3
 8012ce8:	7d01      	ldrb	r1, [r0, #20]
 8012cea:	4604      	mov	r4, r0
 8012cec:	f7f5 f9a6 	bl	800803c <ucdr_deserialize_endian_uint32_t>
 8012cf0:	682b      	ldr	r3, [r5, #0]
 8012cf2:	429e      	cmp	r6, r3
 8012cf4:	bf3c      	itt	cc
 8012cf6:	2201      	movcc	r2, #1
 8012cf8:	75a2      	strbcc	r2, [r4, #22]
 8012cfa:	b913      	cbnz	r3, 8012d02 <ucdr_deserialize_sequence_char+0x26>
 8012cfc:	2001      	movs	r0, #1
 8012cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d02:	7d21      	ldrb	r1, [r4, #20]
 8012d04:	463a      	mov	r2, r7
 8012d06:	4620      	mov	r0, r4
 8012d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d0c:	f7ff beda 	b.w	8012ac4 <ucdr_deserialize_endian_array_char>

08012d10 <ucdr_serialize_sequence_uint8_t>:
 8012d10:	b570      	push	{r4, r5, r6, lr}
 8012d12:	4615      	mov	r5, r2
 8012d14:	460e      	mov	r6, r1
 8012d16:	7d01      	ldrb	r1, [r0, #20]
 8012d18:	4604      	mov	r4, r0
 8012d1a:	f7f5 f867 	bl	8007dec <ucdr_serialize_endian_uint32_t>
 8012d1e:	b90d      	cbnz	r5, 8012d24 <ucdr_serialize_sequence_uint8_t+0x14>
 8012d20:	2001      	movs	r0, #1
 8012d22:	bd70      	pop	{r4, r5, r6, pc}
 8012d24:	7d21      	ldrb	r1, [r4, #20]
 8012d26:	462b      	mov	r3, r5
 8012d28:	4632      	mov	r2, r6
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d30:	f7ff bf2c 	b.w	8012b8c <ucdr_serialize_endian_array_uint8_t>

08012d34 <ucdr_deserialize_sequence_uint8_t>:
 8012d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d38:	461d      	mov	r5, r3
 8012d3a:	4616      	mov	r6, r2
 8012d3c:	460f      	mov	r7, r1
 8012d3e:	461a      	mov	r2, r3
 8012d40:	7d01      	ldrb	r1, [r0, #20]
 8012d42:	4604      	mov	r4, r0
 8012d44:	f7f5 f97a 	bl	800803c <ucdr_deserialize_endian_uint32_t>
 8012d48:	682b      	ldr	r3, [r5, #0]
 8012d4a:	429e      	cmp	r6, r3
 8012d4c:	bf3c      	itt	cc
 8012d4e:	2201      	movcc	r2, #1
 8012d50:	75a2      	strbcc	r2, [r4, #22]
 8012d52:	b913      	cbnz	r3, 8012d5a <ucdr_deserialize_sequence_uint8_t+0x26>
 8012d54:	2001      	movs	r0, #1
 8012d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d5a:	7d21      	ldrb	r1, [r4, #20]
 8012d5c:	463a      	mov	r2, r7
 8012d5e:	4620      	mov	r0, r4
 8012d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d64:	f7ff bf76 	b.w	8012c54 <ucdr_deserialize_endian_array_uint8_t>

08012d68 <ucdr_serialize_string>:
 8012d68:	b510      	push	{r4, lr}
 8012d6a:	b082      	sub	sp, #8
 8012d6c:	4604      	mov	r4, r0
 8012d6e:	4608      	mov	r0, r1
 8012d70:	9101      	str	r1, [sp, #4]
 8012d72:	f7ed fa95 	bl	80002a0 <strlen>
 8012d76:	9901      	ldr	r1, [sp, #4]
 8012d78:	1c42      	adds	r2, r0, #1
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	b002      	add	sp, #8
 8012d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d82:	f7ff bf99 	b.w	8012cb8 <ucdr_serialize_sequence_char>
 8012d86:	bf00      	nop

08012d88 <ucdr_deserialize_string>:
 8012d88:	b500      	push	{lr}
 8012d8a:	b083      	sub	sp, #12
 8012d8c:	ab01      	add	r3, sp, #4
 8012d8e:	f7ff ffa5 	bl	8012cdc <ucdr_deserialize_sequence_char>
 8012d92:	b003      	add	sp, #12
 8012d94:	f85d fb04 	ldr.w	pc, [sp], #4

08012d98 <get_custom_error>:
 8012d98:	4b01      	ldr	r3, [pc, #4]	; (8012da0 <get_custom_error+0x8>)
 8012d9a:	7818      	ldrb	r0, [r3, #0]
 8012d9c:	4770      	bx	lr
 8012d9e:	bf00      	nop
 8012da0:	200112a0 	.word	0x200112a0

08012da4 <recv_custom_msg>:
 8012da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da8:	4693      	mov	fp, r2
 8012daa:	b089      	sub	sp, #36	; 0x24
 8012dac:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8012db0:	9305      	str	r3, [sp, #20]
 8012db2:	468a      	mov	sl, r1
 8012db4:	2100      	movs	r1, #0
 8012db6:	4604      	mov	r4, r0
 8012db8:	f88d 101e 	strb.w	r1, [sp, #30]
 8012dbc:	b322      	cbz	r2, 8012e08 <recv_custom_msg+0x64>
 8012dbe:	f200 2902 	addw	r9, r0, #514	; 0x202
 8012dc2:	f10d 081f 	add.w	r8, sp, #31
 8012dc6:	af05      	add	r7, sp, #20
 8012dc8:	f10d 061e 	add.w	r6, sp, #30
 8012dcc:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012dd0:	e002      	b.n	8012dd8 <recv_custom_msg+0x34>
 8012dd2:	9b05      	ldr	r3, [sp, #20]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	dd0f      	ble.n	8012df8 <recv_custom_msg+0x54>
 8012dd8:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8012ddc:	4623      	mov	r3, r4
 8012dde:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012de2:	e9cd 5600 	strd	r5, r6, [sp]
 8012de6:	4622      	mov	r2, r4
 8012de8:	4648      	mov	r0, r9
 8012dea:	f001 f92d 	bl	8014048 <uxr_read_framed_msg>
 8012dee:	2800      	cmp	r0, #0
 8012df0:	d0ef      	beq.n	8012dd2 <recv_custom_msg+0x2e>
 8012df2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012df6:	b1b3      	cbz	r3, 8012e26 <recv_custom_msg+0x82>
 8012df8:	4b0f      	ldr	r3, [pc, #60]	; (8012e38 <recv_custom_msg+0x94>)
 8012dfa:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8012dfe:	701a      	strb	r2, [r3, #0]
 8012e00:	2000      	movs	r0, #0
 8012e02:	b009      	add	sp, #36	; 0x24
 8012e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e08:	f10d 021f 	add.w	r2, sp, #31
 8012e0c:	9200      	str	r2, [sp, #0]
 8012e0e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8012e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012e16:	4601      	mov	r1, r0
 8012e18:	47a8      	blx	r5
 8012e1a:	2800      	cmp	r0, #0
 8012e1c:	d0ec      	beq.n	8012df8 <recv_custom_msg+0x54>
 8012e1e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d1e8      	bne.n	8012df8 <recv_custom_msg+0x54>
 8012e26:	f8cb 0000 	str.w	r0, [fp]
 8012e2a:	2001      	movs	r0, #1
 8012e2c:	f8ca 4000 	str.w	r4, [sl]
 8012e30:	b009      	add	sp, #36	; 0x24
 8012e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e36:	bf00      	nop
 8012e38:	200112a0 	.word	0x200112a0

08012e3c <send_custom_msg>:
 8012e3c:	b530      	push	{r4, r5, lr}
 8012e3e:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 8012e42:	b087      	sub	sp, #28
 8012e44:	4615      	mov	r5, r2
 8012e46:	b974      	cbnz	r4, 8012e66 <send_custom_msg+0x2a>
 8012e48:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8012e4c:	f10d 0317 	add.w	r3, sp, #23
 8012e50:	47a0      	blx	r4
 8012e52:	b108      	cbz	r0, 8012e58 <send_custom_msg+0x1c>
 8012e54:	42a8      	cmp	r0, r5
 8012e56:	d015      	beq.n	8012e84 <send_custom_msg+0x48>
 8012e58:	4b0c      	ldr	r3, [pc, #48]	; (8012e8c <send_custom_msg+0x50>)
 8012e5a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8012e5e:	701a      	strb	r2, [r3, #0]
 8012e60:	2000      	movs	r0, #0
 8012e62:	b007      	add	sp, #28
 8012e64:	bd30      	pop	{r4, r5, pc}
 8012e66:	460b      	mov	r3, r1
 8012e68:	2200      	movs	r2, #0
 8012e6a:	f10d 0117 	add.w	r1, sp, #23
 8012e6e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8012e72:	4602      	mov	r2, r0
 8012e74:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8012e78:	9500      	str	r5, [sp, #0]
 8012e7a:	f200 2002 	addw	r0, r0, #514	; 0x202
 8012e7e:	f000 feeb 	bl	8013c58 <uxr_write_framed_msg>
 8012e82:	e7e6      	b.n	8012e52 <send_custom_msg+0x16>
 8012e84:	2001      	movs	r0, #1
 8012e86:	b007      	add	sp, #28
 8012e88:	bd30      	pop	{r4, r5, pc}
 8012e8a:	bf00      	nop
 8012e8c:	200112a0 	.word	0x200112a0

08012e90 <uxr_set_custom_transport_callbacks>:
 8012e90:	b410      	push	{r4}
 8012e92:	9c01      	ldr	r4, [sp, #4]
 8012e94:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8012e98:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8012e9c:	9b02      	ldr	r3, [sp, #8]
 8012e9e:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8012ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ea6:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 8012eaa:	4770      	bx	lr

08012eac <uxr_init_custom_transport>:
 8012eac:	b538      	push	{r3, r4, r5, lr}
 8012eae:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8012eb2:	b303      	cbz	r3, 8012ef6 <uxr_init_custom_transport+0x4a>
 8012eb4:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8012eb8:	4604      	mov	r4, r0
 8012eba:	b1e2      	cbz	r2, 8012ef6 <uxr_init_custom_transport+0x4a>
 8012ebc:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8012ec0:	b1ca      	cbz	r2, 8012ef6 <uxr_init_custom_transport+0x4a>
 8012ec2:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8012ec6:	b1b2      	cbz	r2, 8012ef6 <uxr_init_custom_transport+0x4a>
 8012ec8:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8012ecc:	4798      	blx	r3
 8012ece:	4605      	mov	r5, r0
 8012ed0:	b188      	cbz	r0, 8012ef6 <uxr_init_custom_transport+0x4a>
 8012ed2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8012ed6:	b98b      	cbnz	r3, 8012efc <uxr_init_custom_transport+0x50>
 8012ed8:	490b      	ldr	r1, [pc, #44]	; (8012f08 <uxr_init_custom_transport+0x5c>)
 8012eda:	4b0c      	ldr	r3, [pc, #48]	; (8012f0c <uxr_init_custom_transport+0x60>)
 8012edc:	4a0c      	ldr	r2, [pc, #48]	; (8012f10 <uxr_init_custom_transport+0x64>)
 8012ede:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8012ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ee6:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8012eea:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8012eee:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	bd38      	pop	{r3, r4, r5, pc}
 8012ef6:	2500      	movs	r5, #0
 8012ef8:	4628      	mov	r0, r5
 8012efa:	bd38      	pop	{r3, r4, r5, pc}
 8012efc:	2100      	movs	r1, #0
 8012efe:	f204 2002 	addw	r0, r4, #514	; 0x202
 8012f02:	f000 fea3 	bl	8013c4c <uxr_init_framing_io>
 8012f06:	e7e7      	b.n	8012ed8 <uxr_init_custom_transport+0x2c>
 8012f08:	08012e3d 	.word	0x08012e3d
 8012f0c:	08012da5 	.word	0x08012da5
 8012f10:	08012d99 	.word	0x08012d99

08012f14 <uxr_close_custom_transport>:
 8012f14:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8012f18:	4718      	bx	r3
 8012f1a:	bf00      	nop

08012f1c <uxr_init_input_best_effort_stream>:
 8012f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012f20:	8003      	strh	r3, [r0, #0]
 8012f22:	4770      	bx	lr

08012f24 <uxr_reset_input_best_effort_stream>:
 8012f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012f28:	8003      	strh	r3, [r0, #0]
 8012f2a:	4770      	bx	lr

08012f2c <uxr_receive_best_effort_message>:
 8012f2c:	b538      	push	{r3, r4, r5, lr}
 8012f2e:	4604      	mov	r4, r0
 8012f30:	8800      	ldrh	r0, [r0, #0]
 8012f32:	460d      	mov	r5, r1
 8012f34:	f000 fe72 	bl	8013c1c <uxr_seq_num_cmp>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8012f40:	bfb8      	it	lt
 8012f42:	8025      	strhlt	r5, [r4, #0]
 8012f44:	bd38      	pop	{r3, r4, r5, pc}
 8012f46:	bf00      	nop

08012f48 <on_full_input_buffer>:
 8012f48:	b570      	push	{r4, r5, r6, lr}
 8012f4a:	4605      	mov	r5, r0
 8012f4c:	460c      	mov	r4, r1
 8012f4e:	682b      	ldr	r3, [r5, #0]
 8012f50:	6809      	ldr	r1, [r1, #0]
 8012f52:	8920      	ldrh	r0, [r4, #8]
 8012f54:	6862      	ldr	r2, [r4, #4]
 8012f56:	fbb2 f2f0 	udiv	r2, r2, r0
 8012f5a:	eba3 0c01 	sub.w	ip, r3, r1
 8012f5e:	fbbc fcf2 	udiv	ip, ip, r2
 8012f62:	f10c 0c01 	add.w	ip, ip, #1
 8012f66:	fa1f f38c 	uxth.w	r3, ip
 8012f6a:	fbb3 f6f0 	udiv	r6, r3, r0
 8012f6e:	fb00 3316 	mls	r3, r0, r6, r3
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	fb02 f303 	mul.w	r3, r2, r3
 8012f78:	1d18      	adds	r0, r3, #4
 8012f7a:	4408      	add	r0, r1
 8012f7c:	7d26      	ldrb	r6, [r4, #20]
 8012f7e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8012f82:	b116      	cbz	r6, 8012f8a <on_full_input_buffer+0x42>
 8012f84:	2600      	movs	r6, #0
 8012f86:	f840 6c04 	str.w	r6, [r0, #-4]
 8012f8a:	2a03      	cmp	r2, #3
 8012f8c:	d801      	bhi.n	8012f92 <on_full_input_buffer+0x4a>
 8012f8e:	2001      	movs	r0, #1
 8012f90:	bd70      	pop	{r4, r5, r6, pc}
 8012f92:	3308      	adds	r3, #8
 8012f94:	4419      	add	r1, r3
 8012f96:	4628      	mov	r0, r5
 8012f98:	692b      	ldr	r3, [r5, #16]
 8012f9a:	3a04      	subs	r2, #4
 8012f9c:	f7f5 fdb2 	bl	8008b04 <ucdr_init_buffer_origin>
 8012fa0:	4628      	mov	r0, r5
 8012fa2:	4903      	ldr	r1, [pc, #12]	; (8012fb0 <on_full_input_buffer+0x68>)
 8012fa4:	4622      	mov	r2, r4
 8012fa6:	f7f5 fd89 	bl	8008abc <ucdr_set_on_full_buffer_callback>
 8012faa:	2000      	movs	r0, #0
 8012fac:	bd70      	pop	{r4, r5, r6, pc}
 8012fae:	bf00      	nop
 8012fb0:	08012f49 	.word	0x08012f49

08012fb4 <uxr_init_input_reliable_stream>:
 8012fb4:	b500      	push	{lr}
 8012fb6:	e9c0 1200 	strd	r1, r2, [r0]
 8012fba:	f04f 0e00 	mov.w	lr, #0
 8012fbe:	9a01      	ldr	r2, [sp, #4]
 8012fc0:	8103      	strh	r3, [r0, #8]
 8012fc2:	6102      	str	r2, [r0, #16]
 8012fc4:	f880 e014 	strb.w	lr, [r0, #20]
 8012fc8:	b1d3      	cbz	r3, 8013000 <uxr_init_input_reliable_stream+0x4c>
 8012fca:	f8c1 e000 	str.w	lr, [r1]
 8012fce:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012fd2:	f1bc 0f01 	cmp.w	ip, #1
 8012fd6:	d913      	bls.n	8013000 <uxr_init_input_reliable_stream+0x4c>
 8012fd8:	2301      	movs	r3, #1
 8012fda:	fbb3 f1fc 	udiv	r1, r3, ip
 8012fde:	fb0c 3111 	mls	r1, ip, r1, r3
 8012fe2:	b289      	uxth	r1, r1
 8012fe4:	6842      	ldr	r2, [r0, #4]
 8012fe6:	fbb2 f2fc 	udiv	r2, r2, ip
 8012fea:	fb01 f202 	mul.w	r2, r1, r2
 8012fee:	6801      	ldr	r1, [r0, #0]
 8012ff0:	f841 e002 	str.w	lr, [r1, r2]
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	459c      	cmp	ip, r3
 8012ffe:	d8ec      	bhi.n	8012fda <uxr_init_input_reliable_stream+0x26>
 8013000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013004:	60c3      	str	r3, [r0, #12]
 8013006:	f85d fb04 	ldr.w	pc, [sp], #4
 801300a:	bf00      	nop

0801300c <uxr_reset_input_reliable_stream>:
 801300c:	8901      	ldrh	r1, [r0, #8]
 801300e:	b1e9      	cbz	r1, 801304c <uxr_reset_input_reliable_stream+0x40>
 8013010:	f04f 0c00 	mov.w	ip, #0
 8013014:	b500      	push	{lr}
 8013016:	4663      	mov	r3, ip
 8013018:	46e6      	mov	lr, ip
 801301a:	fbb3 f2f1 	udiv	r2, r3, r1
 801301e:	fb01 3312 	mls	r3, r1, r2, r3
 8013022:	b29b      	uxth	r3, r3
 8013024:	6842      	ldr	r2, [r0, #4]
 8013026:	fbb2 f2f1 	udiv	r2, r2, r1
 801302a:	fb02 f303 	mul.w	r3, r2, r3
 801302e:	6802      	ldr	r2, [r0, #0]
 8013030:	f842 e003 	str.w	lr, [r2, r3]
 8013034:	f10c 0c01 	add.w	ip, ip, #1
 8013038:	8901      	ldrh	r1, [r0, #8]
 801303a:	fa1f f38c 	uxth.w	r3, ip
 801303e:	4299      	cmp	r1, r3
 8013040:	d8eb      	bhi.n	801301a <uxr_reset_input_reliable_stream+0xe>
 8013042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013046:	60c3      	str	r3, [r0, #12]
 8013048:	f85d fb04 	ldr.w	pc, [sp], #4
 801304c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013050:	60c3      	str	r3, [r0, #12]
 8013052:	4770      	bx	lr

08013054 <uxr_receive_reliable_message>:
 8013054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013058:	4604      	mov	r4, r0
 801305a:	460d      	mov	r5, r1
 801305c:	8901      	ldrh	r1, [r0, #8]
 801305e:	8980      	ldrh	r0, [r0, #12]
 8013060:	4690      	mov	r8, r2
 8013062:	461f      	mov	r7, r3
 8013064:	f000 fdd2 	bl	8013c0c <uxr_seq_num_add>
 8013068:	4629      	mov	r1, r5
 801306a:	4606      	mov	r6, r0
 801306c:	89a0      	ldrh	r0, [r4, #12]
 801306e:	f000 fdd5 	bl	8013c1c <uxr_seq_num_cmp>
 8013072:	2800      	cmp	r0, #0
 8013074:	db0a      	blt.n	801308c <uxr_receive_reliable_message+0x38>
 8013076:	2600      	movs	r6, #0
 8013078:	89e0      	ldrh	r0, [r4, #14]
 801307a:	4629      	mov	r1, r5
 801307c:	f000 fdce 	bl	8013c1c <uxr_seq_num_cmp>
 8013080:	2800      	cmp	r0, #0
 8013082:	da00      	bge.n	8013086 <uxr_receive_reliable_message+0x32>
 8013084:	81e5      	strh	r5, [r4, #14]
 8013086:	4630      	mov	r0, r6
 8013088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801308c:	4630      	mov	r0, r6
 801308e:	4629      	mov	r1, r5
 8013090:	f000 fdc4 	bl	8013c1c <uxr_seq_num_cmp>
 8013094:	2800      	cmp	r0, #0
 8013096:	dbee      	blt.n	8013076 <uxr_receive_reliable_message+0x22>
 8013098:	6923      	ldr	r3, [r4, #16]
 801309a:	4640      	mov	r0, r8
 801309c:	4798      	blx	r3
 801309e:	2101      	movs	r1, #1
 80130a0:	4681      	mov	r9, r0
 80130a2:	89a0      	ldrh	r0, [r4, #12]
 80130a4:	f000 fdb2 	bl	8013c0c <uxr_seq_num_add>
 80130a8:	f1b9 0f00 	cmp.w	r9, #0
 80130ac:	d101      	bne.n	80130b2 <uxr_receive_reliable_message+0x5e>
 80130ae:	4285      	cmp	r5, r0
 80130b0:	d047      	beq.n	8013142 <uxr_receive_reliable_message+0xee>
 80130b2:	8922      	ldrh	r2, [r4, #8]
 80130b4:	fbb5 f0f2 	udiv	r0, r5, r2
 80130b8:	fb02 5010 	mls	r0, r2, r0, r5
 80130bc:	b280      	uxth	r0, r0
 80130be:	6863      	ldr	r3, [r4, #4]
 80130c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80130c4:	fb00 f303 	mul.w	r3, r0, r3
 80130c8:	6820      	ldr	r0, [r4, #0]
 80130ca:	3304      	adds	r3, #4
 80130cc:	4418      	add	r0, r3
 80130ce:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d1cf      	bne.n	8013076 <uxr_receive_reliable_message+0x22>
 80130d6:	4641      	mov	r1, r8
 80130d8:	463a      	mov	r2, r7
 80130da:	f002 fc52 	bl	8015982 <memcpy>
 80130de:	8921      	ldrh	r1, [r4, #8]
 80130e0:	fbb5 f2f1 	udiv	r2, r5, r1
 80130e4:	fb01 5212 	mls	r2, r1, r2, r5
 80130e8:	b292      	uxth	r2, r2
 80130ea:	6863      	ldr	r3, [r4, #4]
 80130ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80130f0:	fb02 f303 	mul.w	r3, r2, r3
 80130f4:	6822      	ldr	r2, [r4, #0]
 80130f6:	50d7      	str	r7, [r2, r3]
 80130f8:	9a08      	ldr	r2, [sp, #32]
 80130fa:	2301      	movs	r3, #1
 80130fc:	7013      	strb	r3, [r2, #0]
 80130fe:	f1b9 0f00 	cmp.w	r9, #0
 8013102:	d0b8      	beq.n	8013076 <uxr_receive_reliable_message+0x22>
 8013104:	89a6      	ldrh	r6, [r4, #12]
 8013106:	4630      	mov	r0, r6
 8013108:	2101      	movs	r1, #1
 801310a:	f000 fd7f 	bl	8013c0c <uxr_seq_num_add>
 801310e:	8922      	ldrh	r2, [r4, #8]
 8013110:	6863      	ldr	r3, [r4, #4]
 8013112:	fbb3 f3f2 	udiv	r3, r3, r2
 8013116:	4606      	mov	r6, r0
 8013118:	fbb0 f0f2 	udiv	r0, r0, r2
 801311c:	fb02 6010 	mls	r0, r2, r0, r6
 8013120:	b280      	uxth	r0, r0
 8013122:	fb00 f303 	mul.w	r3, r0, r3
 8013126:	6820      	ldr	r0, [r4, #0]
 8013128:	3304      	adds	r3, #4
 801312a:	4418      	add	r0, r3
 801312c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d0a0      	beq.n	8013076 <uxr_receive_reliable_message+0x22>
 8013134:	6923      	ldr	r3, [r4, #16]
 8013136:	4798      	blx	r3
 8013138:	2802      	cmp	r0, #2
 801313a:	d008      	beq.n	801314e <uxr_receive_reliable_message+0xfa>
 801313c:	2801      	cmp	r0, #1
 801313e:	d0e2      	beq.n	8013106 <uxr_receive_reliable_message+0xb2>
 8013140:	e799      	b.n	8013076 <uxr_receive_reliable_message+0x22>
 8013142:	9b08      	ldr	r3, [sp, #32]
 8013144:	81a5      	strh	r5, [r4, #12]
 8013146:	2601      	movs	r6, #1
 8013148:	f883 9000 	strb.w	r9, [r3]
 801314c:	e794      	b.n	8013078 <uxr_receive_reliable_message+0x24>
 801314e:	2601      	movs	r6, #1
 8013150:	e792      	b.n	8013078 <uxr_receive_reliable_message+0x24>
 8013152:	bf00      	nop

08013154 <uxr_next_input_reliable_buffer_available>:
 8013154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013158:	4604      	mov	r4, r0
 801315a:	460f      	mov	r7, r1
 801315c:	8980      	ldrh	r0, [r0, #12]
 801315e:	2101      	movs	r1, #1
 8013160:	4690      	mov	r8, r2
 8013162:	f000 fd53 	bl	8013c0c <uxr_seq_num_add>
 8013166:	8922      	ldrh	r2, [r4, #8]
 8013168:	fbb0 f6f2 	udiv	r6, r0, r2
 801316c:	fb02 0616 	mls	r6, r2, r6, r0
 8013170:	b2b6      	uxth	r6, r6
 8013172:	6863      	ldr	r3, [r4, #4]
 8013174:	fbb3 f3f2 	udiv	r3, r3, r2
 8013178:	fb06 f303 	mul.w	r3, r6, r3
 801317c:	6826      	ldr	r6, [r4, #0]
 801317e:	3304      	adds	r3, #4
 8013180:	441e      	add	r6, r3
 8013182:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8013186:	f1b9 0f00 	cmp.w	r9, #0
 801318a:	d023      	beq.n	80131d4 <uxr_next_input_reliable_buffer_available+0x80>
 801318c:	6923      	ldr	r3, [r4, #16]
 801318e:	4605      	mov	r5, r0
 8013190:	4630      	mov	r0, r6
 8013192:	4798      	blx	r3
 8013194:	4682      	mov	sl, r0
 8013196:	b300      	cbz	r0, 80131da <uxr_next_input_reliable_buffer_available+0x86>
 8013198:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801319c:	2101      	movs	r1, #1
 801319e:	4650      	mov	r0, sl
 80131a0:	f000 fd34 	bl	8013c0c <uxr_seq_num_add>
 80131a4:	8921      	ldrh	r1, [r4, #8]
 80131a6:	fbb0 f2f1 	udiv	r2, r0, r1
 80131aa:	4682      	mov	sl, r0
 80131ac:	fb01 0212 	mls	r2, r1, r2, r0
 80131b0:	e9d4 0300 	ldrd	r0, r3, [r4]
 80131b4:	b292      	uxth	r2, r2
 80131b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80131ba:	fb02 f303 	mul.w	r3, r2, r3
 80131be:	3304      	adds	r3, #4
 80131c0:	4418      	add	r0, r3
 80131c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80131c6:	b12b      	cbz	r3, 80131d4 <uxr_next_input_reliable_buffer_available+0x80>
 80131c8:	6923      	ldr	r3, [r4, #16]
 80131ca:	4798      	blx	r3
 80131cc:	2802      	cmp	r0, #2
 80131ce:	d01b      	beq.n	8013208 <uxr_next_input_reliable_buffer_available+0xb4>
 80131d0:	2801      	cmp	r0, #1
 80131d2:	d0e3      	beq.n	801319c <uxr_next_input_reliable_buffer_available+0x48>
 80131d4:	2000      	movs	r0, #0
 80131d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131da:	464a      	mov	r2, r9
 80131dc:	4631      	mov	r1, r6
 80131de:	4638      	mov	r0, r7
 80131e0:	f7f5 fc98 	bl	8008b14 <ucdr_init_buffer>
 80131e4:	8921      	ldrh	r1, [r4, #8]
 80131e6:	fbb5 f2f1 	udiv	r2, r5, r1
 80131ea:	fb01 5212 	mls	r2, r1, r2, r5
 80131ee:	b292      	uxth	r2, r2
 80131f0:	6863      	ldr	r3, [r4, #4]
 80131f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80131f6:	fb02 f303 	mul.w	r3, r2, r3
 80131fa:	6822      	ldr	r2, [r4, #0]
 80131fc:	f842 a003 	str.w	sl, [r2, r3]
 8013200:	2001      	movs	r0, #1
 8013202:	81a5      	strh	r5, [r4, #12]
 8013204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013208:	8920      	ldrh	r0, [r4, #8]
 801320a:	fbb5 f3f0 	udiv	r3, r5, r0
 801320e:	fb00 5513 	mls	r5, r0, r3, r5
 8013212:	b2ad      	uxth	r5, r5
 8013214:	6863      	ldr	r3, [r4, #4]
 8013216:	fbb3 f3f0 	udiv	r3, r3, r0
 801321a:	fb03 f505 	mul.w	r5, r3, r5
 801321e:	6823      	ldr	r3, [r4, #0]
 8013220:	2000      	movs	r0, #0
 8013222:	5158      	str	r0, [r3, r5]
 8013224:	eb06 0108 	add.w	r1, r6, r8
 8013228:	eba9 0208 	sub.w	r2, r9, r8
 801322c:	4638      	mov	r0, r7
 801322e:	f7f5 fc71 	bl	8008b14 <ucdr_init_buffer>
 8013232:	4638      	mov	r0, r7
 8013234:	4903      	ldr	r1, [pc, #12]	; (8013244 <uxr_next_input_reliable_buffer_available+0xf0>)
 8013236:	4622      	mov	r2, r4
 8013238:	f7f5 fc40 	bl	8008abc <ucdr_set_on_full_buffer_callback>
 801323c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8013240:	2001      	movs	r0, #1
 8013242:	e7c8      	b.n	80131d6 <uxr_next_input_reliable_buffer_available+0x82>
 8013244:	08012f49 	.word	0x08012f49

08013248 <uxr_process_heartbeat>:
 8013248:	b538      	push	{r3, r4, r5, lr}
 801324a:	4611      	mov	r1, r2
 801324c:	4604      	mov	r4, r0
 801324e:	89c0      	ldrh	r0, [r0, #14]
 8013250:	4615      	mov	r5, r2
 8013252:	f000 fce3 	bl	8013c1c <uxr_seq_num_cmp>
 8013256:	2800      	cmp	r0, #0
 8013258:	bfb8      	it	lt
 801325a:	81e5      	strhlt	r5, [r4, #14]
 801325c:	bd38      	pop	{r3, r4, r5, pc}
 801325e:	bf00      	nop

08013260 <uxr_compute_acknack>:
 8013260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013264:	8903      	ldrh	r3, [r0, #8]
 8013266:	8985      	ldrh	r5, [r0, #12]
 8013268:	4604      	mov	r4, r0
 801326a:	460e      	mov	r6, r1
 801326c:	b1d3      	cbz	r3, 80132a4 <uxr_compute_acknack+0x44>
 801326e:	4628      	mov	r0, r5
 8013270:	2701      	movs	r7, #1
 8013272:	e003      	b.n	801327c <uxr_compute_acknack+0x1c>
 8013274:	4567      	cmp	r7, ip
 8013276:	d215      	bcs.n	80132a4 <uxr_compute_acknack+0x44>
 8013278:	89a0      	ldrh	r0, [r4, #12]
 801327a:	3701      	adds	r7, #1
 801327c:	b2b9      	uxth	r1, r7
 801327e:	f000 fcc5 	bl	8013c0c <uxr_seq_num_add>
 8013282:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013286:	fbb0 f3fc 	udiv	r3, r0, ip
 801328a:	fb0c 0313 	mls	r3, ip, r3, r0
 801328e:	b29a      	uxth	r2, r3
 8013290:	e9d4 1300 	ldrd	r1, r3, [r4]
 8013294:	fbb3 f3fc 	udiv	r3, r3, ip
 8013298:	fb02 f303 	mul.w	r3, r2, r3
 801329c:	58cb      	ldr	r3, [r1, r3]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d1e8      	bne.n	8013274 <uxr_compute_acknack+0x14>
 80132a2:	4605      	mov	r5, r0
 80132a4:	8035      	strh	r5, [r6, #0]
 80132a6:	2101      	movs	r1, #1
 80132a8:	4628      	mov	r0, r5
 80132aa:	89e7      	ldrh	r7, [r4, #14]
 80132ac:	f000 fcb2 	bl	8013c14 <uxr_seq_num_sub>
 80132b0:	4601      	mov	r1, r0
 80132b2:	4638      	mov	r0, r7
 80132b4:	f000 fcae 	bl	8013c14 <uxr_seq_num_sub>
 80132b8:	4605      	mov	r5, r0
 80132ba:	b318      	cbz	r0, 8013304 <uxr_compute_acknack+0xa4>
 80132bc:	f04f 0900 	mov.w	r9, #0
 80132c0:	464f      	mov	r7, r9
 80132c2:	f04f 0801 	mov.w	r8, #1
 80132c6:	fa1f f189 	uxth.w	r1, r9
 80132ca:	8830      	ldrh	r0, [r6, #0]
 80132cc:	f000 fc9e 	bl	8013c0c <uxr_seq_num_add>
 80132d0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80132d4:	fbb0 f3fc 	udiv	r3, r0, ip
 80132d8:	e9d4 1200 	ldrd	r1, r2, [r4]
 80132dc:	fb03 001c 	mls	r0, r3, ip, r0
 80132e0:	b283      	uxth	r3, r0
 80132e2:	fbb2 f2fc 	udiv	r2, r2, ip
 80132e6:	fb02 f303 	mul.w	r3, r2, r3
 80132ea:	fa08 f209 	lsl.w	r2, r8, r9
 80132ee:	58cb      	ldr	r3, [r1, r3]
 80132f0:	f109 0901 	add.w	r9, r9, #1
 80132f4:	b90b      	cbnz	r3, 80132fa <uxr_compute_acknack+0x9a>
 80132f6:	4317      	orrs	r7, r2
 80132f8:	b2bf      	uxth	r7, r7
 80132fa:	454d      	cmp	r5, r9
 80132fc:	d1e3      	bne.n	80132c6 <uxr_compute_acknack+0x66>
 80132fe:	4638      	mov	r0, r7
 8013300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013304:	4607      	mov	r7, r0
 8013306:	4638      	mov	r0, r7
 8013308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801330c <uxr_init_output_best_effort_stream>:
 801330c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8013310:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8013314:	6001      	str	r1, [r0, #0]
 8013316:	7303      	strb	r3, [r0, #12]
 8013318:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801331c:	4770      	bx	lr
 801331e:	bf00      	nop

08013320 <uxr_reset_output_best_effort_stream>:
 8013320:	7b02      	ldrb	r2, [r0, #12]
 8013322:	6042      	str	r2, [r0, #4]
 8013324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013328:	81c3      	strh	r3, [r0, #14]
 801332a:	4770      	bx	lr

0801332c <uxr_prepare_best_effort_buffer_to_write>:
 801332c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801332e:	4604      	mov	r4, r0
 8013330:	b083      	sub	sp, #12
 8013332:	6840      	ldr	r0, [r0, #4]
 8013334:	460d      	mov	r5, r1
 8013336:	4616      	mov	r6, r2
 8013338:	f7f9 fb62 	bl	800ca00 <uxr_submessage_padding>
 801333c:	6863      	ldr	r3, [r4, #4]
 801333e:	4418      	add	r0, r3
 8013340:	68a3      	ldr	r3, [r4, #8]
 8013342:	1942      	adds	r2, r0, r5
 8013344:	4293      	cmp	r3, r2
 8013346:	bf2c      	ite	cs
 8013348:	2701      	movcs	r7, #1
 801334a:	2700      	movcc	r7, #0
 801334c:	d202      	bcs.n	8013354 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801334e:	4638      	mov	r0, r7
 8013350:	b003      	add	sp, #12
 8013352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013354:	9000      	str	r0, [sp, #0]
 8013356:	6821      	ldr	r1, [r4, #0]
 8013358:	4630      	mov	r0, r6
 801335a:	2300      	movs	r3, #0
 801335c:	f7f5 fbc8 	bl	8008af0 <ucdr_init_buffer_origin_offset>
 8013360:	6861      	ldr	r1, [r4, #4]
 8013362:	4638      	mov	r0, r7
 8013364:	4429      	add	r1, r5
 8013366:	6061      	str	r1, [r4, #4]
 8013368:	b003      	add	sp, #12
 801336a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801336c <uxr_prepare_best_effort_buffer_to_send>:
 801336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013370:	4604      	mov	r4, r0
 8013372:	461d      	mov	r5, r3
 8013374:	6840      	ldr	r0, [r0, #4]
 8013376:	7b23      	ldrb	r3, [r4, #12]
 8013378:	4298      	cmp	r0, r3
 801337a:	bf8c      	ite	hi
 801337c:	2601      	movhi	r6, #1
 801337e:	2600      	movls	r6, #0
 8013380:	d802      	bhi.n	8013388 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8013382:	4630      	mov	r0, r6
 8013384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013388:	4688      	mov	r8, r1
 801338a:	89e0      	ldrh	r0, [r4, #14]
 801338c:	2101      	movs	r1, #1
 801338e:	4617      	mov	r7, r2
 8013390:	f000 fc3c 	bl	8013c0c <uxr_seq_num_add>
 8013394:	6823      	ldr	r3, [r4, #0]
 8013396:	81e0      	strh	r0, [r4, #14]
 8013398:	8028      	strh	r0, [r5, #0]
 801339a:	f8c8 3000 	str.w	r3, [r8]
 801339e:	6863      	ldr	r3, [r4, #4]
 80133a0:	603b      	str	r3, [r7, #0]
 80133a2:	7b23      	ldrb	r3, [r4, #12]
 80133a4:	6063      	str	r3, [r4, #4]
 80133a6:	4630      	mov	r0, r6
 80133a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080133ac <on_full_output_buffer>:
 80133ac:	b538      	push	{r3, r4, r5, lr}
 80133ae:	6802      	ldr	r2, [r0, #0]
 80133b0:	460c      	mov	r4, r1
 80133b2:	6809      	ldr	r1, [r1, #0]
 80133b4:	8923      	ldrh	r3, [r4, #8]
 80133b6:	eba2 0c01 	sub.w	ip, r2, r1
 80133ba:	6862      	ldr	r2, [r4, #4]
 80133bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80133c0:	fbbc fcf2 	udiv	ip, ip, r2
 80133c4:	f10c 0c01 	add.w	ip, ip, #1
 80133c8:	fa1f fc8c 	uxth.w	ip, ip
 80133cc:	fbbc fef3 	udiv	lr, ip, r3
 80133d0:	fb03 c31e 	mls	r3, r3, lr, ip
 80133d4:	b29b      	uxth	r3, r3
 80133d6:	fb02 f303 	mul.w	r3, r2, r3
 80133da:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80133de:	58ca      	ldr	r2, [r1, r3]
 80133e0:	4463      	add	r3, ip
 80133e2:	eba2 020c 	sub.w	r2, r2, ip
 80133e6:	3308      	adds	r3, #8
 80133e8:	4605      	mov	r5, r0
 80133ea:	4419      	add	r1, r3
 80133ec:	3a04      	subs	r2, #4
 80133ee:	6903      	ldr	r3, [r0, #16]
 80133f0:	f7f5 fb88 	bl	8008b04 <ucdr_init_buffer_origin>
 80133f4:	4628      	mov	r0, r5
 80133f6:	4903      	ldr	r1, [pc, #12]	; (8013404 <on_full_output_buffer+0x58>)
 80133f8:	4622      	mov	r2, r4
 80133fa:	f7f5 fb5f 	bl	8008abc <ucdr_set_on_full_buffer_callback>
 80133fe:	2000      	movs	r0, #0
 8013400:	bd38      	pop	{r3, r4, r5, pc}
 8013402:	bf00      	nop
 8013404:	080133ad 	.word	0x080133ad

08013408 <uxr_init_output_reliable_stream>:
 8013408:	b410      	push	{r4}
 801340a:	f89d c004 	ldrb.w	ip, [sp, #4]
 801340e:	8103      	strh	r3, [r0, #8]
 8013410:	e9c0 1200 	strd	r1, r2, [r0]
 8013414:	f880 c00c 	strb.w	ip, [r0, #12]
 8013418:	b1d3      	cbz	r3, 8013450 <uxr_init_output_reliable_stream+0x48>
 801341a:	f8c1 c000 	str.w	ip, [r1]
 801341e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013422:	f1bc 0f01 	cmp.w	ip, #1
 8013426:	d913      	bls.n	8013450 <uxr_init_output_reliable_stream+0x48>
 8013428:	2301      	movs	r3, #1
 801342a:	fbb3 f1fc 	udiv	r1, r3, ip
 801342e:	fb0c 3111 	mls	r1, ip, r1, r3
 8013432:	b289      	uxth	r1, r1
 8013434:	6842      	ldr	r2, [r0, #4]
 8013436:	6804      	ldr	r4, [r0, #0]
 8013438:	fbb2 f2fc 	udiv	r2, r2, ip
 801343c:	fb01 f202 	mul.w	r2, r1, r2
 8013440:	7b01      	ldrb	r1, [r0, #12]
 8013442:	50a1      	str	r1, [r4, r2]
 8013444:	3301      	adds	r3, #1
 8013446:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801344a:	b29b      	uxth	r3, r3
 801344c:	459c      	cmp	ip, r3
 801344e:	d8ec      	bhi.n	801342a <uxr_init_output_reliable_stream+0x22>
 8013450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013454:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013458:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801345c:	4905      	ldr	r1, [pc, #20]	; (8013474 <uxr_init_output_reliable_stream+0x6c>)
 801345e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013462:	f8c0 100e 	str.w	r1, [r0, #14]
 8013466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801346a:	2300      	movs	r3, #0
 801346c:	8242      	strh	r2, [r0, #18]
 801346e:	8403      	strh	r3, [r0, #32]
 8013470:	4770      	bx	lr
 8013472:	bf00      	nop
 8013474:	ffff0000 	.word	0xffff0000

08013478 <uxr_reset_output_reliable_stream>:
 8013478:	8901      	ldrh	r1, [r0, #8]
 801347a:	b1b1      	cbz	r1, 80134aa <uxr_reset_output_reliable_stream+0x32>
 801347c:	f04f 0c00 	mov.w	ip, #0
 8013480:	4663      	mov	r3, ip
 8013482:	fbb3 f2f1 	udiv	r2, r3, r1
 8013486:	fb01 3312 	mls	r3, r1, r2, r3
 801348a:	b29b      	uxth	r3, r3
 801348c:	6842      	ldr	r2, [r0, #4]
 801348e:	fbb2 f2f1 	udiv	r2, r2, r1
 8013492:	6801      	ldr	r1, [r0, #0]
 8013494:	fb02 f303 	mul.w	r3, r2, r3
 8013498:	7b02      	ldrb	r2, [r0, #12]
 801349a:	50ca      	str	r2, [r1, r3]
 801349c:	f10c 0c01 	add.w	ip, ip, #1
 80134a0:	8901      	ldrh	r1, [r0, #8]
 80134a2:	fa1f f38c 	uxth.w	r3, ip
 80134a6:	4299      	cmp	r1, r3
 80134a8:	d8eb      	bhi.n	8013482 <uxr_reset_output_reliable_stream+0xa>
 80134aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80134ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80134b2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80134b6:	4904      	ldr	r1, [pc, #16]	; (80134c8 <uxr_reset_output_reliable_stream+0x50>)
 80134b8:	f8c0 100e 	str.w	r1, [r0, #14]
 80134bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134c0:	2300      	movs	r3, #0
 80134c2:	8242      	strh	r2, [r0, #18]
 80134c4:	8403      	strh	r3, [r0, #32]
 80134c6:	4770      	bx	lr
 80134c8:	ffff0000 	.word	0xffff0000

080134cc <uxr_prepare_reliable_buffer_to_write>:
 80134cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d0:	4604      	mov	r4, r0
 80134d2:	b091      	sub	sp, #68	; 0x44
 80134d4:	8900      	ldrh	r0, [r0, #8]
 80134d6:	89e6      	ldrh	r6, [r4, #14]
 80134d8:	6823      	ldr	r3, [r4, #0]
 80134da:	9204      	str	r2, [sp, #16]
 80134dc:	fbb6 f2f0 	udiv	r2, r6, r0
 80134e0:	fb00 6212 	mls	r2, r0, r2, r6
 80134e4:	b292      	uxth	r2, r2
 80134e6:	6865      	ldr	r5, [r4, #4]
 80134e8:	fbb5 f5f0 	udiv	r5, r5, r0
 80134ec:	fb05 3202 	mla	r2, r5, r2, r3
 80134f0:	3204      	adds	r2, #4
 80134f2:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80134f6:	f894 900c 	ldrb.w	r9, [r4, #12]
 80134fa:	9203      	str	r2, [sp, #12]
 80134fc:	468b      	mov	fp, r1
 80134fe:	1f2f      	subs	r7, r5, #4
 8013500:	2800      	cmp	r0, #0
 8013502:	f000 814c 	beq.w	801379e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8013506:	f04f 0c00 	mov.w	ip, #0
 801350a:	46e2      	mov	sl, ip
 801350c:	4661      	mov	r1, ip
 801350e:	fbb1 f2f0 	udiv	r2, r1, r0
 8013512:	fb00 1212 	mls	r2, r0, r2, r1
 8013516:	b292      	uxth	r2, r2
 8013518:	fb05 f202 	mul.w	r2, r5, r2
 801351c:	f10c 0c01 	add.w	ip, ip, #1
 8013520:	589a      	ldr	r2, [r3, r2]
 8013522:	454a      	cmp	r2, r9
 8013524:	bf08      	it	eq
 8013526:	f10a 0a01 	addeq.w	sl, sl, #1
 801352a:	fa1f f18c 	uxth.w	r1, ip
 801352e:	bf08      	it	eq
 8013530:	fa1f fa8a 	uxtheq.w	sl, sl
 8013534:	4281      	cmp	r1, r0
 8013536:	d3ea      	bcc.n	801350e <uxr_prepare_reliable_buffer_to_write+0x42>
 8013538:	4640      	mov	r0, r8
 801353a:	2104      	movs	r1, #4
 801353c:	f8cd a014 	str.w	sl, [sp, #20]
 8013540:	f7f5 faec 	bl	8008b1c <ucdr_alignment>
 8013544:	4480      	add	r8, r0
 8013546:	eb08 020b 	add.w	r2, r8, fp
 801354a:	42ba      	cmp	r2, r7
 801354c:	f240 80cd 	bls.w	80136ea <uxr_prepare_reliable_buffer_to_write+0x21e>
 8013550:	7b22      	ldrb	r2, [r4, #12]
 8013552:	445a      	add	r2, fp
 8013554:	42ba      	cmp	r2, r7
 8013556:	f240 80b5 	bls.w	80136c4 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801355a:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 801355e:	33fc      	adds	r3, #252	; 0xfc
 8013560:	b2ba      	uxth	r2, r7
 8013562:	4413      	add	r3, r2
 8013564:	b29b      	uxth	r3, r3
 8013566:	fb0a f903 	mul.w	r9, sl, r3
 801356a:	45d9      	cmp	r9, fp
 801356c:	9305      	str	r3, [sp, #20]
 801356e:	9306      	str	r3, [sp, #24]
 8013570:	f0c0 80b7 	bcc.w	80136e2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8013574:	f108 0304 	add.w	r3, r8, #4
 8013578:	42bb      	cmp	r3, r7
 801357a:	f080 80db 	bcs.w	8013734 <uxr_prepare_reliable_buffer_to_write+0x268>
 801357e:	f1a2 0904 	sub.w	r9, r2, #4
 8013582:	eba9 0908 	sub.w	r9, r9, r8
 8013586:	9b05      	ldr	r3, [sp, #20]
 8013588:	fa1f f989 	uxth.w	r9, r9
 801358c:	ebab 0b09 	sub.w	fp, fp, r9
 8013590:	fbbb f2f3 	udiv	r2, fp, r3
 8013594:	fb03 b312 	mls	r3, r3, r2, fp
 8013598:	2b00      	cmp	r3, #0
 801359a:	f000 80c8 	beq.w	801372e <uxr_prepare_reliable_buffer_to_write+0x262>
 801359e:	3201      	adds	r2, #1
 80135a0:	b292      	uxth	r2, r2
 80135a2:	9306      	str	r3, [sp, #24]
 80135a4:	4552      	cmp	r2, sl
 80135a6:	f200 809c 	bhi.w	80136e2 <uxr_prepare_reliable_buffer_to_write+0x216>
 80135aa:	f10d 0b20 	add.w	fp, sp, #32
 80135ae:	2a00      	cmp	r2, #0
 80135b0:	d042      	beq.n	8013638 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80135b2:	f8cd 801c 	str.w	r8, [sp, #28]
 80135b6:	f04f 0a00 	mov.w	sl, #0
 80135ba:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80135be:	9505      	str	r5, [sp, #20]
 80135c0:	f10d 0b20 	add.w	fp, sp, #32
 80135c4:	4615      	mov	r5, r2
 80135c6:	e000      	b.n	80135ca <uxr_prepare_reliable_buffer_to_write+0xfe>
 80135c8:	46c1      	mov	r9, r8
 80135ca:	8920      	ldrh	r0, [r4, #8]
 80135cc:	fbb6 f2f0 	udiv	r2, r6, r0
 80135d0:	fb00 6112 	mls	r1, r0, r2, r6
 80135d4:	b28a      	uxth	r2, r1
 80135d6:	6863      	ldr	r3, [r4, #4]
 80135d8:	fbb3 f1f0 	udiv	r1, r3, r0
 80135dc:	6823      	ldr	r3, [r4, #0]
 80135de:	fb02 f101 	mul.w	r1, r2, r1
 80135e2:	3104      	adds	r1, #4
 80135e4:	4419      	add	r1, r3
 80135e6:	4658      	mov	r0, fp
 80135e8:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80135ec:	9200      	str	r2, [sp, #0]
 80135ee:	2300      	movs	r3, #0
 80135f0:	463a      	mov	r2, r7
 80135f2:	f7f5 fa7d 	bl	8008af0 <ucdr_init_buffer_origin_offset>
 80135f6:	464a      	mov	r2, r9
 80135f8:	2300      	movs	r3, #0
 80135fa:	210d      	movs	r1, #13
 80135fc:	4658      	mov	r0, fp
 80135fe:	f7f9 f9bf 	bl	800c980 <uxr_buffer_submessage_header>
 8013602:	8921      	ldrh	r1, [r4, #8]
 8013604:	fbb6 f2f1 	udiv	r2, r6, r1
 8013608:	fb01 6212 	mls	r2, r1, r2, r6
 801360c:	b292      	uxth	r2, r2
 801360e:	6863      	ldr	r3, [r4, #4]
 8013610:	fbb3 f3f1 	udiv	r3, r3, r1
 8013614:	fb02 f303 	mul.w	r3, r2, r3
 8013618:	6822      	ldr	r2, [r4, #0]
 801361a:	4630      	mov	r0, r6
 801361c:	50d7      	str	r7, [r2, r3]
 801361e:	2101      	movs	r1, #1
 8013620:	f000 faf4 	bl	8013c0c <uxr_seq_num_add>
 8013624:	f10a 0a01 	add.w	sl, sl, #1
 8013628:	fa1f f38a 	uxth.w	r3, sl
 801362c:	429d      	cmp	r5, r3
 801362e:	4606      	mov	r6, r0
 8013630:	d8ca      	bhi.n	80135c8 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8013632:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8013636:	9d05      	ldr	r5, [sp, #20]
 8013638:	8920      	ldrh	r0, [r4, #8]
 801363a:	fbb6 f3f0 	udiv	r3, r6, r0
 801363e:	fb00 6313 	mls	r3, r0, r3, r6
 8013642:	b299      	uxth	r1, r3
 8013644:	6863      	ldr	r3, [r4, #4]
 8013646:	fbb3 f3f0 	udiv	r3, r3, r0
 801364a:	fb01 f303 	mul.w	r3, r1, r3
 801364e:	6821      	ldr	r1, [r4, #0]
 8013650:	3304      	adds	r3, #4
 8013652:	4419      	add	r1, r3
 8013654:	463a      	mov	r2, r7
 8013656:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801365a:	9000      	str	r0, [sp, #0]
 801365c:	2300      	movs	r3, #0
 801365e:	4658      	mov	r0, fp
 8013660:	f7f5 fa46 	bl	8008af0 <ucdr_init_buffer_origin_offset>
 8013664:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8013668:	4658      	mov	r0, fp
 801366a:	fa1f f289 	uxth.w	r2, r9
 801366e:	2302      	movs	r3, #2
 8013670:	210d      	movs	r1, #13
 8013672:	f7f9 f985 	bl	800c980 <uxr_buffer_submessage_header>
 8013676:	9b03      	ldr	r3, [sp, #12]
 8013678:	8927      	ldrh	r7, [r4, #8]
 801367a:	7b20      	ldrb	r0, [r4, #12]
 801367c:	f108 0104 	add.w	r1, r8, #4
 8013680:	440b      	add	r3, r1
 8013682:	4619      	mov	r1, r3
 8013684:	fbb6 f3f7 	udiv	r3, r6, r7
 8013688:	fb07 6313 	mls	r3, r7, r3, r6
 801368c:	f1a5 0208 	sub.w	r2, r5, #8
 8013690:	b29d      	uxth	r5, r3
 8013692:	3004      	adds	r0, #4
 8013694:	6863      	ldr	r3, [r4, #4]
 8013696:	fbb3 f3f7 	udiv	r3, r3, r7
 801369a:	fb05 f303 	mul.w	r3, r5, r3
 801369e:	6825      	ldr	r5, [r4, #0]
 80136a0:	4448      	add	r0, r9
 80136a2:	50e8      	str	r0, [r5, r3]
 80136a4:	9d04      	ldr	r5, [sp, #16]
 80136a6:	eba2 0208 	sub.w	r2, r2, r8
 80136aa:	4628      	mov	r0, r5
 80136ac:	f7f5 fa32 	bl	8008b14 <ucdr_init_buffer>
 80136b0:	4628      	mov	r0, r5
 80136b2:	493c      	ldr	r1, [pc, #240]	; (80137a4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80136b4:	4622      	mov	r2, r4
 80136b6:	f7f5 fa01 	bl	8008abc <ucdr_set_on_full_buffer_callback>
 80136ba:	2001      	movs	r0, #1
 80136bc:	81e6      	strh	r6, [r4, #14]
 80136be:	b011      	add	sp, #68	; 0x44
 80136c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136c4:	2101      	movs	r1, #1
 80136c6:	89e0      	ldrh	r0, [r4, #14]
 80136c8:	f000 faa0 	bl	8013c0c <uxr_seq_num_add>
 80136cc:	8921      	ldrh	r1, [r4, #8]
 80136ce:	4605      	mov	r5, r0
 80136d0:	8a60      	ldrh	r0, [r4, #18]
 80136d2:	f000 fa9b 	bl	8013c0c <uxr_seq_num_add>
 80136d6:	4601      	mov	r1, r0
 80136d8:	4628      	mov	r0, r5
 80136da:	f000 fa9f 	bl	8013c1c <uxr_seq_num_cmp>
 80136de:	2800      	cmp	r0, #0
 80136e0:	dd42      	ble.n	8013768 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80136e2:	2000      	movs	r0, #0
 80136e4:	b011      	add	sp, #68	; 0x44
 80136e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ea:	8921      	ldrh	r1, [r4, #8]
 80136ec:	8a60      	ldrh	r0, [r4, #18]
 80136ee:	9205      	str	r2, [sp, #20]
 80136f0:	f000 fa8c 	bl	8013c0c <uxr_seq_num_add>
 80136f4:	4601      	mov	r1, r0
 80136f6:	4630      	mov	r0, r6
 80136f8:	f000 fa90 	bl	8013c1c <uxr_seq_num_cmp>
 80136fc:	2800      	cmp	r0, #0
 80136fe:	9a05      	ldr	r2, [sp, #20]
 8013700:	dcef      	bgt.n	80136e2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8013702:	8927      	ldrh	r7, [r4, #8]
 8013704:	fbb6 f3f7 	udiv	r3, r6, r7
 8013708:	fb07 6313 	mls	r3, r7, r3, r6
 801370c:	b29d      	uxth	r5, r3
 801370e:	6863      	ldr	r3, [r4, #4]
 8013710:	6824      	ldr	r4, [r4, #0]
 8013712:	fbb3 f3f7 	udiv	r3, r3, r7
 8013716:	fb05 f303 	mul.w	r3, r5, r3
 801371a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801371e:	50e2      	str	r2, [r4, r3]
 8013720:	2300      	movs	r3, #0
 8013722:	f8cd 8000 	str.w	r8, [sp]
 8013726:	f7f5 f9e3 	bl	8008af0 <ucdr_init_buffer_origin_offset>
 801372a:	2001      	movs	r0, #1
 801372c:	e7da      	b.n	80136e4 <uxr_prepare_reliable_buffer_to_write+0x218>
 801372e:	b293      	uxth	r3, r2
 8013730:	461a      	mov	r2, r3
 8013732:	e737      	b.n	80135a4 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8013734:	4630      	mov	r0, r6
 8013736:	2101      	movs	r1, #1
 8013738:	9207      	str	r2, [sp, #28]
 801373a:	f000 fa67 	bl	8013c0c <uxr_seq_num_add>
 801373e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013742:	fbb0 f1fc 	udiv	r1, r0, ip
 8013746:	fb0c 0111 	mls	r1, ip, r1, r0
 801374a:	4606      	mov	r6, r0
 801374c:	b288      	uxth	r0, r1
 801374e:	6863      	ldr	r3, [r4, #4]
 8013750:	fbb3 f1fc 	udiv	r1, r3, ip
 8013754:	6823      	ldr	r3, [r4, #0]
 8013756:	9a07      	ldr	r2, [sp, #28]
 8013758:	fb00 f101 	mul.w	r1, r0, r1
 801375c:	3104      	adds	r1, #4
 801375e:	440b      	add	r3, r1
 8013760:	9303      	str	r3, [sp, #12]
 8013762:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8013766:	e70a      	b.n	801357e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8013768:	8921      	ldrh	r1, [r4, #8]
 801376a:	fbb5 f3f1 	udiv	r3, r5, r1
 801376e:	fb01 5313 	mls	r3, r1, r3, r5
 8013772:	b29a      	uxth	r2, r3
 8013774:	6863      	ldr	r3, [r4, #4]
 8013776:	fbb3 f3f1 	udiv	r3, r3, r1
 801377a:	6821      	ldr	r1, [r4, #0]
 801377c:	9804      	ldr	r0, [sp, #16]
 801377e:	fb02 f303 	mul.w	r3, r2, r3
 8013782:	3304      	adds	r3, #4
 8013784:	7b22      	ldrb	r2, [r4, #12]
 8013786:	4419      	add	r1, r3
 8013788:	445a      	add	r2, fp
 801378a:	f841 2c04 	str.w	r2, [r1, #-4]
 801378e:	7b23      	ldrb	r3, [r4, #12]
 8013790:	9300      	str	r3, [sp, #0]
 8013792:	2300      	movs	r3, #0
 8013794:	f7f5 f9ac 	bl	8008af0 <ucdr_init_buffer_origin_offset>
 8013798:	81e5      	strh	r5, [r4, #14]
 801379a:	2001      	movs	r0, #1
 801379c:	e7a2      	b.n	80136e4 <uxr_prepare_reliable_buffer_to_write+0x218>
 801379e:	4682      	mov	sl, r0
 80137a0:	e6ca      	b.n	8013538 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80137a2:	bf00      	nop
 80137a4:	080133ad 	.word	0x080133ad

080137a8 <uxr_prepare_next_reliable_buffer_to_send>:
 80137a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137aa:	4604      	mov	r4, r0
 80137ac:	460f      	mov	r7, r1
 80137ae:	8a00      	ldrh	r0, [r0, #16]
 80137b0:	2101      	movs	r1, #1
 80137b2:	4616      	mov	r6, r2
 80137b4:	461d      	mov	r5, r3
 80137b6:	f000 fa29 	bl	8013c0c <uxr_seq_num_add>
 80137ba:	8028      	strh	r0, [r5, #0]
 80137bc:	8922      	ldrh	r2, [r4, #8]
 80137be:	fbb0 f3f2 	udiv	r3, r0, r2
 80137c2:	fb02 0c13 	mls	ip, r2, r3, r0
 80137c6:	fa1f fc8c 	uxth.w	ip, ip
 80137ca:	6863      	ldr	r3, [r4, #4]
 80137cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80137d0:	fb0c fc03 	mul.w	ip, ip, r3
 80137d4:	6823      	ldr	r3, [r4, #0]
 80137d6:	89e1      	ldrh	r1, [r4, #14]
 80137d8:	f10c 0c04 	add.w	ip, ip, #4
 80137dc:	4463      	add	r3, ip
 80137de:	603b      	str	r3, [r7, #0]
 80137e0:	6823      	ldr	r3, [r4, #0]
 80137e2:	449c      	add	ip, r3
 80137e4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80137e8:	6033      	str	r3, [r6, #0]
 80137ea:	f000 fa17 	bl	8013c1c <uxr_seq_num_cmp>
 80137ee:	2800      	cmp	r0, #0
 80137f0:	dd01      	ble.n	80137f6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80137f2:	2000      	movs	r0, #0
 80137f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137f6:	7b23      	ldrb	r3, [r4, #12]
 80137f8:	6832      	ldr	r2, [r6, #0]
 80137fa:	429a      	cmp	r2, r3
 80137fc:	d9f9      	bls.n	80137f2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80137fe:	8a61      	ldrh	r1, [r4, #18]
 8013800:	8a20      	ldrh	r0, [r4, #16]
 8013802:	f000 fa07 	bl	8013c14 <uxr_seq_num_sub>
 8013806:	8923      	ldrh	r3, [r4, #8]
 8013808:	4283      	cmp	r3, r0
 801380a:	d0f2      	beq.n	80137f2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801380c:	8828      	ldrh	r0, [r5, #0]
 801380e:	89e3      	ldrh	r3, [r4, #14]
 8013810:	8220      	strh	r0, [r4, #16]
 8013812:	4298      	cmp	r0, r3
 8013814:	d001      	beq.n	801381a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8013816:	2001      	movs	r0, #1
 8013818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801381a:	2101      	movs	r1, #1
 801381c:	f000 f9f6 	bl	8013c0c <uxr_seq_num_add>
 8013820:	81e0      	strh	r0, [r4, #14]
 8013822:	2001      	movs	r0, #1
 8013824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013826:	bf00      	nop

08013828 <uxr_update_output_stream_heartbeat_timestamp>:
 8013828:	b570      	push	{r4, r5, r6, lr}
 801382a:	8a01      	ldrh	r1, [r0, #16]
 801382c:	4604      	mov	r4, r0
 801382e:	8a40      	ldrh	r0, [r0, #18]
 8013830:	4615      	mov	r5, r2
 8013832:	461e      	mov	r6, r3
 8013834:	f000 f9f2 	bl	8013c1c <uxr_seq_num_cmp>
 8013838:	2800      	cmp	r0, #0
 801383a:	db07      	blt.n	801384c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801383c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013840:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013844:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8013848:	2000      	movs	r0, #0
 801384a:	bd70      	pop	{r4, r5, r6, pc}
 801384c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8013850:	b940      	cbnz	r0, 8013864 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8013852:	2301      	movs	r3, #1
 8013854:	f884 3020 	strb.w	r3, [r4, #32]
 8013858:	3564      	adds	r5, #100	; 0x64
 801385a:	f146 0600 	adc.w	r6, r6, #0
 801385e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8013862:	bd70      	pop	{r4, r5, r6, pc}
 8013864:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8013868:	4295      	cmp	r5, r2
 801386a:	eb76 0303 	sbcs.w	r3, r6, r3
 801386e:	bfa5      	ittet	ge
 8013870:	3001      	addge	r0, #1
 8013872:	f884 0020 	strbge.w	r0, [r4, #32]
 8013876:	2000      	movlt	r0, #0
 8013878:	2001      	movge	r0, #1
 801387a:	e7ed      	b.n	8013858 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801387c <uxr_begin_output_nack_buffer_it>:
 801387c:	8a40      	ldrh	r0, [r0, #18]
 801387e:	4770      	bx	lr

08013880 <uxr_next_reliable_nack_buffer_to_send>:
 8013880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013884:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 8013888:	b082      	sub	sp, #8
 801388a:	f1b8 0f00 	cmp.w	r8, #0
 801388e:	d011      	beq.n	80138b4 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8013890:	4604      	mov	r4, r0
 8013892:	8818      	ldrh	r0, [r3, #0]
 8013894:	460e      	mov	r6, r1
 8013896:	4617      	mov	r7, r2
 8013898:	461d      	mov	r5, r3
 801389a:	2101      	movs	r1, #1
 801389c:	f000 f9b6 	bl	8013c0c <uxr_seq_num_add>
 80138a0:	8028      	strh	r0, [r5, #0]
 80138a2:	8a21      	ldrh	r1, [r4, #16]
 80138a4:	f000 f9ba 	bl	8013c1c <uxr_seq_num_cmp>
 80138a8:	2800      	cmp	r0, #0
 80138aa:	dd07      	ble.n	80138bc <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80138ac:	f04f 0800 	mov.w	r8, #0
 80138b0:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 80138b4:	4640      	mov	r0, r8
 80138b6:	b002      	add	sp, #8
 80138b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138bc:	8921      	ldrh	r1, [r4, #8]
 80138be:	8828      	ldrh	r0, [r5, #0]
 80138c0:	6823      	ldr	r3, [r4, #0]
 80138c2:	fbb0 f2f1 	udiv	r2, r0, r1
 80138c6:	fb01 0c12 	mls	ip, r1, r2, r0
 80138ca:	fa1f f28c 	uxth.w	r2, ip
 80138ce:	9301      	str	r3, [sp, #4]
 80138d0:	6863      	ldr	r3, [r4, #4]
 80138d2:	fbb3 fcf1 	udiv	ip, r3, r1
 80138d6:	9b01      	ldr	r3, [sp, #4]
 80138d8:	fb02 fc0c 	mul.w	ip, r2, ip
 80138dc:	f10c 0c04 	add.w	ip, ip, #4
 80138e0:	4463      	add	r3, ip
 80138e2:	6033      	str	r3, [r6, #0]
 80138e4:	6823      	ldr	r3, [r4, #0]
 80138e6:	4463      	add	r3, ip
 80138e8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80138ec:	603b      	str	r3, [r7, #0]
 80138ee:	7b22      	ldrb	r2, [r4, #12]
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d0d2      	beq.n	801389a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80138f4:	4640      	mov	r0, r8
 80138f6:	b002      	add	sp, #8
 80138f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080138fc <uxr_process_acknack>:
 80138fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138fe:	4604      	mov	r4, r0
 8013900:	460e      	mov	r6, r1
 8013902:	4610      	mov	r0, r2
 8013904:	2101      	movs	r1, #1
 8013906:	f000 f985 	bl	8013c14 <uxr_seq_num_sub>
 801390a:	8a61      	ldrh	r1, [r4, #18]
 801390c:	f000 f982 	bl	8013c14 <uxr_seq_num_sub>
 8013910:	b1c0      	cbz	r0, 8013944 <uxr_process_acknack+0x48>
 8013912:	4605      	mov	r5, r0
 8013914:	2700      	movs	r7, #0
 8013916:	2101      	movs	r1, #1
 8013918:	8a60      	ldrh	r0, [r4, #18]
 801391a:	f000 f977 	bl	8013c0c <uxr_seq_num_add>
 801391e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013922:	fbb0 f1fc 	udiv	r1, r0, ip
 8013926:	e9d4 2300 	ldrd	r2, r3, [r4]
 801392a:	fb0c 0111 	mls	r1, ip, r1, r0
 801392e:	b289      	uxth	r1, r1
 8013930:	3701      	adds	r7, #1
 8013932:	fbb3 f3fc 	udiv	r3, r3, ip
 8013936:	fb01 f303 	mul.w	r3, r1, r3
 801393a:	42bd      	cmp	r5, r7
 801393c:	7b21      	ldrb	r1, [r4, #12]
 801393e:	8260      	strh	r0, [r4, #18]
 8013940:	50d1      	str	r1, [r2, r3]
 8013942:	d1e8      	bne.n	8013916 <uxr_process_acknack+0x1a>
 8013944:	3e00      	subs	r6, #0
 8013946:	f04f 0300 	mov.w	r3, #0
 801394a:	bf18      	it	ne
 801394c:	2601      	movne	r6, #1
 801394e:	f884 3020 	strb.w	r3, [r4, #32]
 8013952:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8013956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013958 <uxr_is_output_up_to_date>:
 8013958:	8a01      	ldrh	r1, [r0, #16]
 801395a:	8a40      	ldrh	r0, [r0, #18]
 801395c:	b508      	push	{r3, lr}
 801395e:	f000 f95d 	bl	8013c1c <uxr_seq_num_cmp>
 8013962:	fab0 f080 	clz	r0, r0
 8013966:	0940      	lsrs	r0, r0, #5
 8013968:	bd08      	pop	{r3, pc}
 801396a:	bf00      	nop

0801396c <get_available_free_slots>:
 801396c:	8902      	ldrh	r2, [r0, #8]
 801396e:	b1da      	cbz	r2, 80139a8 <get_available_free_slots+0x3c>
 8013970:	b530      	push	{r4, r5, lr}
 8013972:	2100      	movs	r1, #0
 8013974:	6843      	ldr	r3, [r0, #4]
 8013976:	6805      	ldr	r5, [r0, #0]
 8013978:	7b04      	ldrb	r4, [r0, #12]
 801397a:	fbb3 fef2 	udiv	lr, r3, r2
 801397e:	4608      	mov	r0, r1
 8013980:	460b      	mov	r3, r1
 8013982:	fbb3 fcf2 	udiv	ip, r3, r2
 8013986:	fb02 331c 	mls	r3, r2, ip, r3
 801398a:	b29b      	uxth	r3, r3
 801398c:	fb0e f303 	mul.w	r3, lr, r3
 8013990:	3101      	adds	r1, #1
 8013992:	f855 c003 	ldr.w	ip, [r5, r3]
 8013996:	4564      	cmp	r4, ip
 8013998:	bf08      	it	eq
 801399a:	3001      	addeq	r0, #1
 801399c:	b28b      	uxth	r3, r1
 801399e:	bf08      	it	eq
 80139a0:	b280      	uxtheq	r0, r0
 80139a2:	4293      	cmp	r3, r2
 80139a4:	d3ed      	bcc.n	8013982 <get_available_free_slots+0x16>
 80139a6:	bd30      	pop	{r4, r5, pc}
 80139a8:	4610      	mov	r0, r2
 80139aa:	4770      	bx	lr

080139ac <uxr_buffer_request_data>:
 80139ac:	b530      	push	{r4, r5, lr}
 80139ae:	b095      	sub	sp, #84	; 0x54
 80139b0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80139b4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80139b6:	9303      	str	r3, [sp, #12]
 80139b8:	2200      	movs	r2, #0
 80139ba:	2d00      	cmp	r5, #0
 80139bc:	bf14      	ite	ne
 80139be:	2101      	movne	r1, #1
 80139c0:	4611      	moveq	r1, r2
 80139c2:	4604      	mov	r4, r0
 80139c4:	f88d 301c 	strb.w	r3, [sp, #28]
 80139c8:	f88d 201d 	strb.w	r2, [sp, #29]
 80139cc:	f88d 201e 	strb.w	r2, [sp, #30]
 80139d0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80139d4:	d021      	beq.n	8013a1a <uxr_buffer_request_data+0x6e>
 80139d6:	682a      	ldr	r2, [r5, #0]
 80139d8:	686b      	ldr	r3, [r5, #4]
 80139da:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
 80139de:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80139e2:	2210      	movs	r2, #16
 80139e4:	2308      	movs	r3, #8
 80139e6:	2100      	movs	r1, #0
 80139e8:	e9cd 3100 	strd	r3, r1, [sp]
 80139ec:	4620      	mov	r0, r4
 80139ee:	9905      	ldr	r1, [sp, #20]
 80139f0:	ab0c      	add	r3, sp, #48	; 0x30
 80139f2:	f7f8 fd27 	bl	800c444 <uxr_prepare_stream_to_write_submessage>
 80139f6:	b918      	cbnz	r0, 8013a00 <uxr_buffer_request_data+0x54>
 80139f8:	4604      	mov	r4, r0
 80139fa:	4620      	mov	r0, r4
 80139fc:	b015      	add	sp, #84	; 0x54
 80139fe:	bd30      	pop	{r4, r5, pc}
 8013a00:	9904      	ldr	r1, [sp, #16]
 8013a02:	aa06      	add	r2, sp, #24
 8013a04:	4620      	mov	r0, r4
 8013a06:	f7f8 fe53 	bl	800c6b0 <uxr_init_base_object_request>
 8013a0a:	a906      	add	r1, sp, #24
 8013a0c:	4604      	mov	r4, r0
 8013a0e:	a80c      	add	r0, sp, #48	; 0x30
 8013a10:	f7fa f94e 	bl	800dcb0 <uxr_serialize_READ_DATA_Payload>
 8013a14:	4620      	mov	r0, r4
 8013a16:	b015      	add	sp, #84	; 0x54
 8013a18:	bd30      	pop	{r4, r5, pc}
 8013a1a:	2208      	movs	r2, #8
 8013a1c:	e7e2      	b.n	80139e4 <uxr_buffer_request_data+0x38>
 8013a1e:	bf00      	nop

08013a20 <uxr_buffer_cancel_data>:
 8013a20:	b510      	push	{r4, lr}
 8013a22:	b094      	sub	sp, #80	; 0x50
 8013a24:	2300      	movs	r3, #0
 8013a26:	9202      	str	r2, [sp, #8]
 8013a28:	9205      	str	r2, [sp, #20]
 8013a2a:	9301      	str	r3, [sp, #4]
 8013a2c:	2201      	movs	r2, #1
 8013a2e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013a32:	f88d 301e 	strb.w	r3, [sp, #30]
 8013a36:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8013a3a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8013a3e:	2308      	movs	r3, #8
 8013a40:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8013a44:	9300      	str	r3, [sp, #0]
 8013a46:	2210      	movs	r2, #16
 8013a48:	ab0c      	add	r3, sp, #48	; 0x30
 8013a4a:	4604      	mov	r4, r0
 8013a4c:	9103      	str	r1, [sp, #12]
 8013a4e:	f7f8 fcf9 	bl	800c444 <uxr_prepare_stream_to_write_submessage>
 8013a52:	b918      	cbnz	r0, 8013a5c <uxr_buffer_cancel_data+0x3c>
 8013a54:	4604      	mov	r4, r0
 8013a56:	4620      	mov	r0, r4
 8013a58:	b014      	add	sp, #80	; 0x50
 8013a5a:	bd10      	pop	{r4, pc}
 8013a5c:	9905      	ldr	r1, [sp, #20]
 8013a5e:	aa06      	add	r2, sp, #24
 8013a60:	4620      	mov	r0, r4
 8013a62:	f7f8 fe25 	bl	800c6b0 <uxr_init_base_object_request>
 8013a66:	a906      	add	r1, sp, #24
 8013a68:	4604      	mov	r4, r0
 8013a6a:	a80c      	add	r0, sp, #48	; 0x30
 8013a6c:	f7fa f920 	bl	800dcb0 <uxr_serialize_READ_DATA_Payload>
 8013a70:	4620      	mov	r0, r4
 8013a72:	b014      	add	sp, #80	; 0x50
 8013a74:	bd10      	pop	{r4, pc}
 8013a76:	bf00      	nop

08013a78 <read_submessage_format>:
 8013a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a7c:	b095      	sub	sp, #84	; 0x54
 8013a7e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8013a82:	b113      	cbz	r3, 8013a8a <read_submessage_format+0x12>
 8013a84:	b015      	add	sp, #84	; 0x54
 8013a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a8a:	460c      	mov	r4, r1
 8013a8c:	4615      	mov	r5, r2
 8013a8e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8013a92:	4607      	mov	r7, r0
 8013a94:	981c      	ldr	r0, [sp, #112]	; 0x70
 8013a96:	9004      	str	r0, [sp, #16]
 8013a98:	981d      	ldr	r0, [sp, #116]	; 0x74
 8013a9a:	9005      	str	r0, [sp, #20]
 8013a9c:	1a52      	subs	r2, r2, r1
 8013a9e:	a80c      	add	r0, sp, #48	; 0x30
 8013aa0:	4699      	mov	r9, r3
 8013aa2:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8013aa6:	f7f5 f835 	bl	8008b14 <ucdr_init_buffer>
 8013aaa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013aae:	a80c      	add	r0, sp, #48	; 0x30
 8013ab0:	f7f5 f804 	bl	8008abc <ucdr_set_on_full_buffer_callback>
 8013ab4:	69e2      	ldr	r2, [r4, #28]
 8013ab6:	b19a      	cbz	r2, 8013ae0 <read_submessage_format+0x68>
 8013ab8:	f1b8 0f07 	cmp.w	r8, #7
 8013abc:	f882 9014 	strb.w	r9, [r2, #20]
 8013ac0:	d040      	beq.n	8013b44 <read_submessage_format+0xcc>
 8013ac2:	f1b8 0f08 	cmp.w	r8, #8
 8013ac6:	d02e      	beq.n	8013b26 <read_submessage_format+0xae>
 8013ac8:	f1b8 0f06 	cmp.w	r8, #6
 8013acc:	d011      	beq.n	8013af2 <read_submessage_format+0x7a>
 8013ace:	2301      	movs	r3, #1
 8013ad0:	7513      	strb	r3, [r2, #20]
 8013ad2:	4629      	mov	r1, r5
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	f7f5 f86d 	bl	8008bb4 <ucdr_advance_buffer>
 8013ada:	b015      	add	sp, #84	; 0x54
 8013adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ae0:	f1b8 0f07 	cmp.w	r8, #7
 8013ae4:	d02e      	beq.n	8013b44 <read_submessage_format+0xcc>
 8013ae6:	f1b8 0f08 	cmp.w	r8, #8
 8013aea:	d01c      	beq.n	8013b26 <read_submessage_format+0xae>
 8013aec:	f1b8 0f06 	cmp.w	r8, #6
 8013af0:	d1ef      	bne.n	8013ad2 <read_submessage_format+0x5a>
 8013af2:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 8013af6:	f1b8 0f00 	cmp.w	r8, #0
 8013afa:	d011      	beq.n	8013b20 <read_submessage_format+0xa8>
 8013afc:	ab0c      	add	r3, sp, #48	; 0x30
 8013afe:	e9cd 3500 	strd	r3, r5, [sp]
 8013b02:	2306      	movs	r3, #6
 8013b04:	f88d 3016 	strb.w	r3, [sp, #22]
 8013b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b0c:	9302      	str	r3, [sp, #8]
 8013b0e:	4632      	mov	r2, r6
 8013b10:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013b14:	4638      	mov	r0, r7
 8013b16:	47c0      	blx	r8
 8013b18:	2301      	movs	r3, #1
 8013b1a:	69e2      	ldr	r2, [r4, #28]
 8013b1c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8013b20:	2a00      	cmp	r2, #0
 8013b22:	d1d4      	bne.n	8013ace <read_submessage_format+0x56>
 8013b24:	e7d5      	b.n	8013ad2 <read_submessage_format+0x5a>
 8013b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d0f8      	beq.n	8013b20 <read_submessage_format+0xa8>
 8013b2e:	a906      	add	r1, sp, #24
 8013b30:	a80c      	add	r0, sp, #48	; 0x30
 8013b32:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8013b36:	f7fa f981 	bl	800de3c <uxr_deserialize_SampleIdentity>
 8013b3a:	b9a0      	cbnz	r0, 8013b66 <read_submessage_format+0xee>
 8013b3c:	69e2      	ldr	r2, [r4, #28]
 8013b3e:	2a00      	cmp	r2, #0
 8013b40:	d1c5      	bne.n	8013ace <read_submessage_format+0x56>
 8013b42:	e7c6      	b.n	8013ad2 <read_submessage_format+0x5a>
 8013b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013b48:	b13b      	cbz	r3, 8013b5a <read_submessage_format+0xe2>
 8013b4a:	a906      	add	r1, sp, #24
 8013b4c:	a80c      	add	r0, sp, #48	; 0x30
 8013b4e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8013b52:	f7f9 fe47 	bl	800d7e4 <uxr_deserialize_BaseObjectRequest>
 8013b56:	bb60      	cbnz	r0, 8013bb2 <read_submessage_format+0x13a>
 8013b58:	69e2      	ldr	r2, [r4, #28]
 8013b5a:	68a3      	ldr	r3, [r4, #8]
 8013b5c:	442b      	add	r3, r5
 8013b5e:	60a3      	str	r3, [r4, #8]
 8013b60:	2a00      	cmp	r2, #0
 8013b62:	d1b4      	bne.n	8013ace <read_submessage_format+0x56>
 8013b64:	e7b5      	b.n	8013ad2 <read_submessage_format+0x5a>
 8013b66:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8013b6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013b6c:	1a52      	subs	r2, r2, r1
 8013b6e:	eba8 0803 	sub.w	r8, r8, r3
 8013b72:	a80c      	add	r0, sp, #48	; 0x30
 8013b74:	f7f4 ffce 	bl	8008b14 <ucdr_init_buffer>
 8013b78:	44a8      	add	r8, r5
 8013b7a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013b7e:	a80c      	add	r0, sp, #48	; 0x30
 8013b80:	f7f4 ff9c 	bl	8008abc <ucdr_set_on_full_buffer_callback>
 8013b84:	fa1f f888 	uxth.w	r8, r8
 8013b88:	ab0c      	add	r3, sp, #48	; 0x30
 8013b8a:	9300      	str	r3, [sp, #0]
 8013b8c:	f8cd 8004 	str.w	r8, [sp, #4]
 8013b90:	2108      	movs	r1, #8
 8013b92:	f88d 1016 	strb.w	r1, [sp, #22]
 8013b96:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013b9a:	9102      	str	r1, [sp, #8]
 8013b9c:	ab06      	add	r3, sp, #24
 8013b9e:	4632      	mov	r2, r6
 8013ba0:	9905      	ldr	r1, [sp, #20]
 8013ba2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 8013ba6:	4638      	mov	r0, r7
 8013ba8:	47b0      	blx	r6
 8013baa:	2301      	movs	r3, #1
 8013bac:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8013bb0:	e7c4      	b.n	8013b3c <read_submessage_format+0xc4>
 8013bb2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8013bb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013bb8:	1a52      	subs	r2, r2, r1
 8013bba:	a80c      	add	r0, sp, #48	; 0x30
 8013bbc:	eba8 0803 	sub.w	r8, r8, r3
 8013bc0:	f7f4 ffa8 	bl	8008b14 <ucdr_init_buffer>
 8013bc4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013bc8:	a80c      	add	r0, sp, #48	; 0x30
 8013bca:	f7f4 ff77 	bl	8008abc <ucdr_set_on_full_buffer_callback>
 8013bce:	ab0c      	add	r3, sp, #48	; 0x30
 8013bd0:	9300      	str	r3, [sp, #0]
 8013bd2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013bd6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013bda:	44a8      	add	r8, r5
 8013bdc:	fa1f f888 	uxth.w	r8, r8
 8013be0:	f8cd 8004 	str.w	r8, [sp, #4]
 8013be4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013be8:	2107      	movs	r1, #7
 8013bea:	f88d 1016 	strb.w	r1, [sp, #22]
 8013bee:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8013bf2:	9102      	str	r1, [sp, #8]
 8013bf4:	4632      	mov	r2, r6
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8013bfc:	9905      	ldr	r1, [sp, #20]
 8013bfe:	4638      	mov	r0, r7
 8013c00:	47b0      	blx	r6
 8013c02:	2301      	movs	r3, #1
 8013c04:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8013c08:	e7a6      	b.n	8013b58 <read_submessage_format+0xe0>
 8013c0a:	bf00      	nop

08013c0c <uxr_seq_num_add>:
 8013c0c:	4408      	add	r0, r1
 8013c0e:	b280      	uxth	r0, r0
 8013c10:	4770      	bx	lr
 8013c12:	bf00      	nop

08013c14 <uxr_seq_num_sub>:
 8013c14:	1a40      	subs	r0, r0, r1
 8013c16:	b280      	uxth	r0, r0
 8013c18:	4770      	bx	lr
 8013c1a:	bf00      	nop

08013c1c <uxr_seq_num_cmp>:
 8013c1c:	4288      	cmp	r0, r1
 8013c1e:	d011      	beq.n	8013c44 <uxr_seq_num_cmp+0x28>
 8013c20:	d309      	bcc.n	8013c36 <uxr_seq_num_cmp+0x1a>
 8013c22:	4288      	cmp	r0, r1
 8013c24:	d910      	bls.n	8013c48 <uxr_seq_num_cmp+0x2c>
 8013c26:	1a40      	subs	r0, r0, r1
 8013c28:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013c2c:	bfd4      	ite	le
 8013c2e:	2001      	movle	r0, #1
 8013c30:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8013c34:	4770      	bx	lr
 8013c36:	1a0b      	subs	r3, r1, r0
 8013c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c3c:	daf1      	bge.n	8013c22 <uxr_seq_num_cmp+0x6>
 8013c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c42:	4770      	bx	lr
 8013c44:	2000      	movs	r0, #0
 8013c46:	4770      	bx	lr
 8013c48:	2001      	movs	r0, #1
 8013c4a:	4770      	bx	lr

08013c4c <uxr_init_framing_io>:
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	7041      	strb	r1, [r0, #1]
 8013c50:	7003      	strb	r3, [r0, #0]
 8013c52:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013c54:	4770      	bx	lr
 8013c56:	bf00      	nop

08013c58 <uxr_write_framed_msg>:
 8013c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c5c:	4617      	mov	r7, r2
 8013c5e:	7842      	ldrb	r2, [r0, #1]
 8013c60:	b083      	sub	sp, #12
 8013c62:	460e      	mov	r6, r1
 8013c64:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8013c68:	469a      	mov	sl, r3
 8013c6a:	2901      	cmp	r1, #1
 8013c6c:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8013c70:	4604      	mov	r4, r0
 8013c72:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8013c76:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8013c7a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8013c7e:	f240 8137 	bls.w	8013ef0 <uxr_write_framed_msg+0x298>
 8013c82:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8013c86:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8013c8a:	2901      	cmp	r1, #1
 8013c8c:	f04f 0202 	mov.w	r2, #2
 8013c90:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013c94:	f240 808f 	bls.w	8013db6 <uxr_write_framed_msg+0x15e>
 8013c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c9a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8013c9e:	b2dd      	uxtb	r5, r3
 8013ca0:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8013ca4:	2203      	movs	r2, #3
 8013ca6:	2901      	cmp	r1, #1
 8013ca8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013cac:	f240 809a 	bls.w	8013de4 <uxr_write_framed_msg+0x18c>
 8013cb0:	18a1      	adds	r1, r4, r2
 8013cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cb4:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8013cb8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013cbc:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8013cc0:	3201      	adds	r2, #1
 8013cc2:	2801      	cmp	r0, #1
 8013cc4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013cc8:	f240 80a0 	bls.w	8013e0c <uxr_write_framed_msg+0x1b4>
 8013ccc:	18a0      	adds	r0, r4, r2
 8013cce:	3201      	adds	r2, #1
 8013cd0:	b2d2      	uxtb	r2, r2
 8013cd2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8013cd6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	f000 80a9 	beq.w	8013e32 <uxr_write_framed_msg+0x1da>
 8013ce0:	f04f 0900 	mov.w	r9, #0
 8013ce4:	46c8      	mov	r8, r9
 8013ce6:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013cea:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8013cee:	2901      	cmp	r1, #1
 8013cf0:	f240 80c3 	bls.w	8013e7a <uxr_write_framed_msg+0x222>
 8013cf4:	2a29      	cmp	r2, #41	; 0x29
 8013cf6:	f200 809f 	bhi.w	8013e38 <uxr_write_framed_msg+0x1e0>
 8013cfa:	18a1      	adds	r1, r4, r2
 8013cfc:	3201      	adds	r2, #1
 8013cfe:	b2d2      	uxtb	r2, r2
 8013d00:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8013d04:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013d08:	ea89 0303 	eor.w	r3, r9, r3
 8013d0c:	498c      	ldr	r1, [pc, #560]	; (8013f40 <uxr_write_framed_msg+0x2e8>)
 8013d0e:	b2db      	uxtb	r3, r3
 8013d10:	f108 0801 	add.w	r8, r8, #1
 8013d14:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013d18:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8013d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d1e:	4543      	cmp	r3, r8
 8013d20:	d8e1      	bhi.n	8013ce6 <uxr_write_framed_msg+0x8e>
 8013d22:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013d26:	fa5f f889 	uxtb.w	r8, r9
 8013d2a:	9301      	str	r3, [sp, #4]
 8013d2c:	f04f 0900 	mov.w	r9, #0
 8013d30:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8013d34:	fa5f f18a 	uxtb.w	r1, sl
 8013d38:	2901      	cmp	r1, #1
 8013d3a:	d921      	bls.n	8013d80 <uxr_write_framed_msg+0x128>
 8013d3c:	2a29      	cmp	r2, #41	; 0x29
 8013d3e:	f240 80af 	bls.w	8013ea0 <uxr_write_framed_msg+0x248>
 8013d42:	2500      	movs	r5, #0
 8013d44:	e000      	b.n	8013d48 <uxr_write_framed_msg+0xf0>
 8013d46:	b160      	cbz	r0, 8013d62 <uxr_write_framed_msg+0x10a>
 8013d48:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013d4c:	1b52      	subs	r2, r2, r5
 8013d4e:	465b      	mov	r3, fp
 8013d50:	4421      	add	r1, r4
 8013d52:	4638      	mov	r0, r7
 8013d54:	47b0      	blx	r6
 8013d56:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013d5a:	4405      	add	r5, r0
 8013d5c:	4295      	cmp	r5, r2
 8013d5e:	d3f2      	bcc.n	8013d46 <uxr_write_framed_msg+0xee>
 8013d60:	d003      	beq.n	8013d6a <uxr_write_framed_msg+0x112>
 8013d62:	2000      	movs	r0, #0
 8013d64:	b003      	add	sp, #12
 8013d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d6a:	fa5f f18a 	uxtb.w	r1, sl
 8013d6e:	f04f 0300 	mov.w	r3, #0
 8013d72:	2901      	cmp	r1, #1
 8013d74:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013d78:	f04f 0200 	mov.w	r2, #0
 8013d7c:	f200 8090 	bhi.w	8013ea0 <uxr_write_framed_msg+0x248>
 8013d80:	1c51      	adds	r1, r2, #1
 8013d82:	b2c9      	uxtb	r1, r1
 8013d84:	2929      	cmp	r1, #41	; 0x29
 8013d86:	d8dc      	bhi.n	8013d42 <uxr_write_framed_msg+0xea>
 8013d88:	18a5      	adds	r5, r4, r2
 8013d8a:	4421      	add	r1, r4
 8013d8c:	3202      	adds	r2, #2
 8013d8e:	f088 0820 	eor.w	r8, r8, #32
 8013d92:	4648      	mov	r0, r9
 8013d94:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8013d98:	b2d2      	uxtb	r2, r2
 8013d9a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8013d9e:	f04f 0901 	mov.w	r9, #1
 8013da2:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8013da6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013daa:	2800      	cmp	r0, #0
 8013dac:	f040 8085 	bne.w	8013eba <uxr_write_framed_msg+0x262>
 8013db0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013db4:	e7bc      	b.n	8013d30 <uxr_write_framed_msg+0xd8>
 8013db6:	4611      	mov	r1, r2
 8013db8:	f04f 0c03 	mov.w	ip, #3
 8013dbc:	2204      	movs	r2, #4
 8013dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013dc0:	4421      	add	r1, r4
 8013dc2:	b2dd      	uxtb	r5, r3
 8013dc4:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8013dc8:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 8013dcc:	44a4      	add	ip, r4
 8013dce:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8013dd2:	f080 0020 	eor.w	r0, r0, #32
 8013dd6:	2901      	cmp	r1, #1
 8013dd8:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8013ddc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013de0:	f63f af66 	bhi.w	8013cb0 <uxr_write_framed_msg+0x58>
 8013de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013de6:	18a0      	adds	r0, r4, r2
 8013de8:	f085 0520 	eor.w	r5, r5, #32
 8013dec:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8013df0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013df4:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8013df8:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8013dfc:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8013e00:	3202      	adds	r2, #2
 8013e02:	2801      	cmp	r0, #1
 8013e04:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013e08:	f63f af60 	bhi.w	8013ccc <uxr_write_framed_msg+0x74>
 8013e0c:	1c50      	adds	r0, r2, #1
 8013e0e:	18a5      	adds	r5, r4, r2
 8013e10:	fa54 f080 	uxtab	r0, r4, r0
 8013e14:	3202      	adds	r2, #2
 8013e16:	f081 0120 	eor.w	r1, r1, #32
 8013e1a:	b2d2      	uxtb	r2, r2
 8013e1c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8013e20:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8013e24:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8013e28:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	f47f af57 	bne.w	8013ce0 <uxr_write_framed_msg+0x88>
 8013e32:	9301      	str	r3, [sp, #4]
 8013e34:	4698      	mov	r8, r3
 8013e36:	e779      	b.n	8013d2c <uxr_write_framed_msg+0xd4>
 8013e38:	2500      	movs	r5, #0
 8013e3a:	e001      	b.n	8013e40 <uxr_write_framed_msg+0x1e8>
 8013e3c:	2800      	cmp	r0, #0
 8013e3e:	d090      	beq.n	8013d62 <uxr_write_framed_msg+0x10a>
 8013e40:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013e44:	1b52      	subs	r2, r2, r5
 8013e46:	465b      	mov	r3, fp
 8013e48:	4421      	add	r1, r4
 8013e4a:	4638      	mov	r0, r7
 8013e4c:	47b0      	blx	r6
 8013e4e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013e52:	4405      	add	r5, r0
 8013e54:	4295      	cmp	r5, r2
 8013e56:	d3f1      	bcc.n	8013e3c <uxr_write_framed_msg+0x1e4>
 8013e58:	d183      	bne.n	8013d62 <uxr_write_framed_msg+0x10a>
 8013e5a:	f04f 0300 	mov.w	r3, #0
 8013e5e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e64:	4543      	cmp	r3, r8
 8013e66:	d964      	bls.n	8013f32 <uxr_write_framed_msg+0x2da>
 8013e68:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013e6c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8013e70:	2901      	cmp	r1, #1
 8013e72:	f04f 0200 	mov.w	r2, #0
 8013e76:	f63f af3d 	bhi.w	8013cf4 <uxr_write_framed_msg+0x9c>
 8013e7a:	1c51      	adds	r1, r2, #1
 8013e7c:	b2c9      	uxtb	r1, r1
 8013e7e:	2929      	cmp	r1, #41	; 0x29
 8013e80:	d8da      	bhi.n	8013e38 <uxr_write_framed_msg+0x1e0>
 8013e82:	18a0      	adds	r0, r4, r2
 8013e84:	4421      	add	r1, r4
 8013e86:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8013e8a:	3202      	adds	r2, #2
 8013e8c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8013e90:	b2d2      	uxtb	r2, r2
 8013e92:	f083 0020 	eor.w	r0, r3, #32
 8013e96:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8013e9a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013e9e:	e733      	b.n	8013d08 <uxr_write_framed_msg+0xb0>
 8013ea0:	18a1      	adds	r1, r4, r2
 8013ea2:	3201      	adds	r2, #1
 8013ea4:	4648      	mov	r0, r9
 8013ea6:	b2d2      	uxtb	r2, r2
 8013ea8:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8013eac:	f04f 0901 	mov.w	r9, #1
 8013eb0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013eb4:	2800      	cmp	r0, #0
 8013eb6:	f43f af7b 	beq.w	8013db0 <uxr_write_framed_msg+0x158>
 8013eba:	2500      	movs	r5, #0
 8013ebc:	e002      	b.n	8013ec4 <uxr_write_framed_msg+0x26c>
 8013ebe:	2800      	cmp	r0, #0
 8013ec0:	f43f af4f 	beq.w	8013d62 <uxr_write_framed_msg+0x10a>
 8013ec4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013ec8:	1b52      	subs	r2, r2, r5
 8013eca:	465b      	mov	r3, fp
 8013ecc:	4421      	add	r1, r4
 8013ece:	4638      	mov	r0, r7
 8013ed0:	47b0      	blx	r6
 8013ed2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013ed6:	4405      	add	r5, r0
 8013ed8:	4295      	cmp	r5, r2
 8013eda:	d3f0      	bcc.n	8013ebe <uxr_write_framed_msg+0x266>
 8013edc:	f47f af41 	bne.w	8013d62 <uxr_write_framed_msg+0x10a>
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013ee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ee8:	b298      	uxth	r0, r3
 8013eea:	b003      	add	sp, #12
 8013eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ef0:	217d      	movs	r1, #125	; 0x7d
 8013ef2:	f082 0220 	eor.w	r2, r2, #32
 8013ef6:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8013efa:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8013efe:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8013f02:	2901      	cmp	r1, #1
 8013f04:	f04f 0203 	mov.w	r2, #3
 8013f08:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013f0c:	d804      	bhi.n	8013f18 <uxr_write_framed_msg+0x2c0>
 8013f0e:	4611      	mov	r1, r2
 8013f10:	f04f 0c04 	mov.w	ip, #4
 8013f14:	2205      	movs	r2, #5
 8013f16:	e752      	b.n	8013dbe <uxr_write_framed_msg+0x166>
 8013f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f1a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8013f1e:	b2dd      	uxtb	r5, r3
 8013f20:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8013f24:	2204      	movs	r2, #4
 8013f26:	2901      	cmp	r1, #1
 8013f28:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013f2c:	f63f aec0 	bhi.w	8013cb0 <uxr_write_framed_msg+0x58>
 8013f30:	e758      	b.n	8013de4 <uxr_write_framed_msg+0x18c>
 8013f32:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013f36:	fa5f f889 	uxtb.w	r8, r9
 8013f3a:	9301      	str	r3, [sp, #4]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	e6f5      	b.n	8013d2c <uxr_write_framed_msg+0xd4>
 8013f40:	080173fc 	.word	0x080173fc

08013f44 <uxr_framing_read_transport>:
 8013f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f48:	4604      	mov	r4, r0
 8013f4a:	b083      	sub	sp, #12
 8013f4c:	461f      	mov	r7, r3
 8013f4e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8013f52:	4689      	mov	r9, r1
 8013f54:	4692      	mov	sl, r2
 8013f56:	f7f8 fd59 	bl	800ca0c <uxr_millis>
 8013f5a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013f5e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8013f62:	42b3      	cmp	r3, r6
 8013f64:	4680      	mov	r8, r0
 8013f66:	d061      	beq.n	801402c <uxr_framing_read_transport+0xe8>
 8013f68:	d81c      	bhi.n	8013fa4 <uxr_framing_read_transport+0x60>
 8013f6a:	1e75      	subs	r5, r6, #1
 8013f6c:	1aed      	subs	r5, r5, r3
 8013f6e:	b2ed      	uxtb	r5, r5
 8013f70:	2600      	movs	r6, #0
 8013f72:	455d      	cmp	r5, fp
 8013f74:	d81f      	bhi.n	8013fb6 <uxr_framing_read_transport+0x72>
 8013f76:	19ab      	adds	r3, r5, r6
 8013f78:	455b      	cmp	r3, fp
 8013f7a:	bf84      	itt	hi
 8013f7c:	ebab 0605 	subhi.w	r6, fp, r5
 8013f80:	b2f6      	uxtbhi	r6, r6
 8013f82:	b9ed      	cbnz	r5, 8013fc0 <uxr_framing_read_transport+0x7c>
 8013f84:	f04f 0b00 	mov.w	fp, #0
 8013f88:	f7f8 fd40 	bl	800ca0c <uxr_millis>
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	eba0 0808 	sub.w	r8, r0, r8
 8013f92:	eba3 0308 	sub.w	r3, r3, r8
 8013f96:	4658      	mov	r0, fp
 8013f98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013f9c:	603b      	str	r3, [r7, #0]
 8013f9e:	b003      	add	sp, #12
 8013fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fa4:	2e00      	cmp	r6, #0
 8013fa6:	d049      	beq.n	801403c <uxr_framing_read_transport+0xf8>
 8013fa8:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8013fac:	b2ed      	uxtb	r5, r5
 8013fae:	3e01      	subs	r6, #1
 8013fb0:	455d      	cmp	r5, fp
 8013fb2:	b2f6      	uxtb	r6, r6
 8013fb4:	d9df      	bls.n	8013f76 <uxr_framing_read_transport+0x32>
 8013fb6:	fa5f f58b 	uxtb.w	r5, fp
 8013fba:	2600      	movs	r6, #0
 8013fbc:	2d00      	cmp	r5, #0
 8013fbe:	d0e1      	beq.n	8013f84 <uxr_framing_read_transport+0x40>
 8013fc0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013fc4:	3102      	adds	r1, #2
 8013fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fc8:	9300      	str	r3, [sp, #0]
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	4421      	add	r1, r4
 8013fce:	462a      	mov	r2, r5
 8013fd0:	4650      	mov	r0, sl
 8013fd2:	47c8      	blx	r9
 8013fd4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013fd8:	4a1a      	ldr	r2, [pc, #104]	; (8014044 <uxr_framing_read_transport+0x100>)
 8013fda:	4403      	add	r3, r0
 8013fdc:	0859      	lsrs	r1, r3, #1
 8013fde:	fba2 2101 	umull	r2, r1, r2, r1
 8013fe2:	0889      	lsrs	r1, r1, #2
 8013fe4:	222a      	movs	r2, #42	; 0x2a
 8013fe6:	fb02 3111 	mls	r1, r2, r1, r3
 8013fea:	4683      	mov	fp, r0
 8013fec:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8013ff0:	2800      	cmp	r0, #0
 8013ff2:	d0c7      	beq.n	8013f84 <uxr_framing_read_transport+0x40>
 8013ff4:	42a8      	cmp	r0, r5
 8013ff6:	d1c7      	bne.n	8013f88 <uxr_framing_read_transport+0x44>
 8013ff8:	2e00      	cmp	r6, #0
 8013ffa:	d0c5      	beq.n	8013f88 <uxr_framing_read_transport+0x44>
 8013ffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ffe:	9300      	str	r3, [sp, #0]
 8014000:	3102      	adds	r1, #2
 8014002:	4632      	mov	r2, r6
 8014004:	4421      	add	r1, r4
 8014006:	2300      	movs	r3, #0
 8014008:	4650      	mov	r0, sl
 801400a:	47c8      	blx	r9
 801400c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014010:	4a0c      	ldr	r2, [pc, #48]	; (8014044 <uxr_framing_read_transport+0x100>)
 8014012:	180b      	adds	r3, r1, r0
 8014014:	0859      	lsrs	r1, r3, #1
 8014016:	fba2 1201 	umull	r1, r2, r2, r1
 801401a:	0892      	lsrs	r2, r2, #2
 801401c:	212a      	movs	r1, #42	; 0x2a
 801401e:	fb01 3312 	mls	r3, r1, r2, r3
 8014022:	eb00 0b05 	add.w	fp, r0, r5
 8014026:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801402a:	e7ad      	b.n	8013f88 <uxr_framing_read_transport+0x44>
 801402c:	2600      	movs	r6, #0
 801402e:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8014032:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8014034:	d9bf      	bls.n	8013fb6 <uxr_framing_read_transport+0x72>
 8014036:	2102      	movs	r1, #2
 8014038:	2529      	movs	r5, #41	; 0x29
 801403a:	e7c4      	b.n	8013fc6 <uxr_framing_read_transport+0x82>
 801403c:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8014040:	b2ed      	uxtb	r5, r5
 8014042:	e796      	b.n	8013f72 <uxr_framing_read_transport+0x2e>
 8014044:	30c30c31 	.word	0x30c30c31

08014048 <uxr_read_framed_msg>:
 8014048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801404c:	461e      	mov	r6, r3
 801404e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8014052:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8014056:	429d      	cmp	r5, r3
 8014058:	b083      	sub	sp, #12
 801405a:	4604      	mov	r4, r0
 801405c:	4688      	mov	r8, r1
 801405e:	4691      	mov	r9, r2
 8014060:	f000 8188 	beq.w	8014374 <uxr_read_framed_msg+0x32c>
 8014064:	7823      	ldrb	r3, [r4, #0]
 8014066:	4dc1      	ldr	r5, [pc, #772]	; (801436c <uxr_read_framed_msg+0x324>)
 8014068:	4fc1      	ldr	r7, [pc, #772]	; (8014370 <uxr_read_framed_msg+0x328>)
 801406a:	2b07      	cmp	r3, #7
 801406c:	d8fd      	bhi.n	801406a <uxr_read_framed_msg+0x22>
 801406e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014072:	0115      	.short	0x0115
 8014074:	00d600f6 	.word	0x00d600f6
 8014078:	009000b9 	.word	0x009000b9
 801407c:	0030004d 	.word	0x0030004d
 8014080:	0008      	.short	0x0008
 8014082:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014086:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801408a:	4299      	cmp	r1, r3
 801408c:	f000 814a 	beq.w	8014324 <uxr_read_framed_msg+0x2dc>
 8014090:	18e2      	adds	r2, r4, r3
 8014092:	7892      	ldrb	r2, [r2, #2]
 8014094:	2a7d      	cmp	r2, #125	; 0x7d
 8014096:	f000 8199 	beq.w	80143cc <uxr_read_framed_msg+0x384>
 801409a:	3301      	adds	r3, #1
 801409c:	0858      	lsrs	r0, r3, #1
 801409e:	fba5 1000 	umull	r1, r0, r5, r0
 80140a2:	0880      	lsrs	r0, r0, #2
 80140a4:	212a      	movs	r1, #42	; 0x2a
 80140a6:	fb01 3310 	mls	r3, r1, r0, r3
 80140aa:	2a7e      	cmp	r2, #126	; 0x7e
 80140ac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80140b0:	f000 8252 	beq.w	8014558 <uxr_read_framed_msg+0x510>
 80140b4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80140b6:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80140b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80140bc:	b29b      	uxth	r3, r3
 80140be:	2200      	movs	r2, #0
 80140c0:	4299      	cmp	r1, r3
 80140c2:	86a3      	strh	r3, [r4, #52]	; 0x34
 80140c4:	7022      	strb	r2, [r4, #0]
 80140c6:	f000 8179 	beq.w	80143bc <uxr_read_framed_msg+0x374>
 80140ca:	2000      	movs	r0, #0
 80140cc:	b003      	add	sp, #12
 80140ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140d2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80140d6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80140da:	4299      	cmp	r1, r3
 80140dc:	f000 8131 	beq.w	8014342 <uxr_read_framed_msg+0x2fa>
 80140e0:	18e2      	adds	r2, r4, r3
 80140e2:	7890      	ldrb	r0, [r2, #2]
 80140e4:	287d      	cmp	r0, #125	; 0x7d
 80140e6:	f000 8190 	beq.w	801440a <uxr_read_framed_msg+0x3c2>
 80140ea:	3301      	adds	r3, #1
 80140ec:	085a      	lsrs	r2, r3, #1
 80140ee:	fba5 1202 	umull	r1, r2, r5, r2
 80140f2:	0892      	lsrs	r2, r2, #2
 80140f4:	212a      	movs	r1, #42	; 0x2a
 80140f6:	fb01 3312 	mls	r3, r1, r2, r3
 80140fa:	287e      	cmp	r0, #126	; 0x7e
 80140fc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014100:	f000 821a 	beq.w	8014538 <uxr_read_framed_msg+0x4f0>
 8014104:	2307      	movs	r3, #7
 8014106:	86a0      	strh	r0, [r4, #52]	; 0x34
 8014108:	7023      	strb	r3, [r4, #0]
 801410a:	e7ae      	b.n	801406a <uxr_read_framed_msg+0x22>
 801410c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801410e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8014112:	459e      	cmp	lr, r3
 8014114:	d938      	bls.n	8014188 <uxr_read_framed_msg+0x140>
 8014116:	ee07 8a90 	vmov	s15, r8
 801411a:	212a      	movs	r1, #42	; 0x2a
 801411c:	e020      	b.n	8014160 <uxr_read_framed_msg+0x118>
 801411e:	f89b c002 	ldrb.w	ip, [fp, #2]
 8014122:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8014126:	f000 80d4 	beq.w	80142d2 <uxr_read_framed_msg+0x28a>
 801412a:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801412e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014132:	f000 8219 	beq.w	8014568 <uxr_read_framed_msg+0x520>
 8014136:	f806 c003 	strb.w	ip, [r6, r3]
 801413a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 801413e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8014140:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8014144:	ea8a 000c 	eor.w	r0, sl, ip
 8014148:	b2c0      	uxtb	r0, r0
 801414a:	3301      	adds	r3, #1
 801414c:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8014150:	b29b      	uxth	r3, r3
 8014152:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8014156:	4573      	cmp	r3, lr
 8014158:	8663      	strh	r3, [r4, #50]	; 0x32
 801415a:	86e2      	strh	r2, [r4, #54]	; 0x36
 801415c:	f080 8120 	bcs.w	80143a0 <uxr_read_framed_msg+0x358>
 8014160:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8014164:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8014168:	f100 0c01 	add.w	ip, r0, #1
 801416c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014170:	fba5 8202 	umull	r8, r2, r5, r2
 8014174:	0892      	lsrs	r2, r2, #2
 8014176:	4582      	cmp	sl, r0
 8014178:	eb04 0b00 	add.w	fp, r4, r0
 801417c:	fb01 c212 	mls	r2, r1, r2, ip
 8014180:	d1cd      	bne.n	801411e <uxr_read_framed_msg+0xd6>
 8014182:	ee17 8a90 	vmov	r8, s15
 8014186:	459e      	cmp	lr, r3
 8014188:	f040 8111 	bne.w	80143ae <uxr_read_framed_msg+0x366>
 801418c:	2306      	movs	r3, #6
 801418e:	7023      	strb	r3, [r4, #0]
 8014190:	e76b      	b.n	801406a <uxr_read_framed_msg+0x22>
 8014192:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014196:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801419a:	4298      	cmp	r0, r3
 801419c:	f000 80c2 	beq.w	8014324 <uxr_read_framed_msg+0x2dc>
 80141a0:	18e2      	adds	r2, r4, r3
 80141a2:	7891      	ldrb	r1, [r2, #2]
 80141a4:	297d      	cmp	r1, #125	; 0x7d
 80141a6:	f000 814c 	beq.w	8014442 <uxr_read_framed_msg+0x3fa>
 80141aa:	3301      	adds	r3, #1
 80141ac:	085a      	lsrs	r2, r3, #1
 80141ae:	fba5 0202 	umull	r0, r2, r5, r2
 80141b2:	0892      	lsrs	r2, r2, #2
 80141b4:	202a      	movs	r0, #42	; 0x2a
 80141b6:	fb00 3312 	mls	r3, r0, r2, r3
 80141ba:	297e      	cmp	r1, #126	; 0x7e
 80141bc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80141c0:	f000 81ca 	beq.w	8014558 <uxr_read_framed_msg+0x510>
 80141c4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80141c6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80141ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80141cc:	b29b      	uxth	r3, r3
 80141ce:	2000      	movs	r0, #0
 80141d0:	428b      	cmp	r3, r1
 80141d2:	8623      	strh	r3, [r4, #48]	; 0x30
 80141d4:	8660      	strh	r0, [r4, #50]	; 0x32
 80141d6:	86e0      	strh	r0, [r4, #54]	; 0x36
 80141d8:	f240 80df 	bls.w	801439a <uxr_read_framed_msg+0x352>
 80141dc:	7020      	strb	r0, [r4, #0]
 80141de:	b003      	add	sp, #12
 80141e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80141e8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80141ec:	4299      	cmp	r1, r3
 80141ee:	f000 80a8 	beq.w	8014342 <uxr_read_framed_msg+0x2fa>
 80141f2:	18e2      	adds	r2, r4, r3
 80141f4:	7890      	ldrb	r0, [r2, #2]
 80141f6:	287d      	cmp	r0, #125	; 0x7d
 80141f8:	f000 8164 	beq.w	80144c4 <uxr_read_framed_msg+0x47c>
 80141fc:	3301      	adds	r3, #1
 80141fe:	085a      	lsrs	r2, r3, #1
 8014200:	fba5 1202 	umull	r1, r2, r5, r2
 8014204:	0892      	lsrs	r2, r2, #2
 8014206:	212a      	movs	r1, #42	; 0x2a
 8014208:	fb01 3312 	mls	r3, r1, r2, r3
 801420c:	287e      	cmp	r0, #126	; 0x7e
 801420e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014212:	f000 8191 	beq.w	8014538 <uxr_read_framed_msg+0x4f0>
 8014216:	2304      	movs	r3, #4
 8014218:	8620      	strh	r0, [r4, #48]	; 0x30
 801421a:	7023      	strb	r3, [r4, #0]
 801421c:	e725      	b.n	801406a <uxr_read_framed_msg+0x22>
 801421e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014222:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014226:	4290      	cmp	r0, r2
 8014228:	f000 80b3 	beq.w	8014392 <uxr_read_framed_msg+0x34a>
 801422c:	18a3      	adds	r3, r4, r2
 801422e:	7899      	ldrb	r1, [r3, #2]
 8014230:	297d      	cmp	r1, #125	; 0x7d
 8014232:	f000 8164 	beq.w	80144fe <uxr_read_framed_msg+0x4b6>
 8014236:	3201      	adds	r2, #1
 8014238:	0850      	lsrs	r0, r2, #1
 801423a:	fba5 3000 	umull	r3, r0, r5, r0
 801423e:	0880      	lsrs	r0, r0, #2
 8014240:	232a      	movs	r3, #42	; 0x2a
 8014242:	fb03 2210 	mls	r2, r3, r0, r2
 8014246:	297e      	cmp	r1, #126	; 0x7e
 8014248:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801424c:	f000 8188 	beq.w	8014560 <uxr_read_framed_msg+0x518>
 8014250:	7863      	ldrb	r3, [r4, #1]
 8014252:	428b      	cmp	r3, r1
 8014254:	bf0c      	ite	eq
 8014256:	2303      	moveq	r3, #3
 8014258:	2300      	movne	r3, #0
 801425a:	7023      	strb	r3, [r4, #0]
 801425c:	e705      	b.n	801406a <uxr_read_framed_msg+0x22>
 801425e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014262:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014266:	2200      	movs	r2, #0
 8014268:	4299      	cmp	r1, r3
 801426a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801426e:	d06c      	beq.n	801434a <uxr_read_framed_msg+0x302>
 8014270:	18e2      	adds	r2, r4, r3
 8014272:	7890      	ldrb	r0, [r2, #2]
 8014274:	287d      	cmp	r0, #125	; 0x7d
 8014276:	f000 8101 	beq.w	801447c <uxr_read_framed_msg+0x434>
 801427a:	3301      	adds	r3, #1
 801427c:	085a      	lsrs	r2, r3, #1
 801427e:	fba5 1202 	umull	r1, r2, r5, r2
 8014282:	0892      	lsrs	r2, r2, #2
 8014284:	212a      	movs	r1, #42	; 0x2a
 8014286:	fb01 3312 	mls	r3, r1, r2, r3
 801428a:	287e      	cmp	r0, #126	; 0x7e
 801428c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8014290:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014294:	d059      	beq.n	801434a <uxr_read_framed_msg+0x302>
 8014296:	2302      	movs	r3, #2
 8014298:	7023      	strb	r3, [r4, #0]
 801429a:	e6e6      	b.n	801406a <uxr_read_framed_msg+0x22>
 801429c:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 80142a0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80142a4:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 80142a8:	1c51      	adds	r1, r2, #1
 80142aa:	084b      	lsrs	r3, r1, #1
 80142ac:	fba5 c303 	umull	ip, r3, r5, r3
 80142b0:	089b      	lsrs	r3, r3, #2
 80142b2:	fb0e 1313 	mls	r3, lr, r3, r1
 80142b6:	4592      	cmp	sl, r2
 80142b8:	eb04 0002 	add.w	r0, r4, r2
 80142bc:	b2da      	uxtb	r2, r3
 80142be:	f43f af04 	beq.w	80140ca <uxr_read_framed_msg+0x82>
 80142c2:	7883      	ldrb	r3, [r0, #2]
 80142c4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80142c8:	2b7e      	cmp	r3, #126	; 0x7e
 80142ca:	d1ed      	bne.n	80142a8 <uxr_read_framed_msg+0x260>
 80142cc:	2301      	movs	r3, #1
 80142ce:	7023      	strb	r3, [r4, #0]
 80142d0:	e6cb      	b.n	801406a <uxr_read_framed_msg+0x22>
 80142d2:	f100 0c01 	add.w	ip, r0, #1
 80142d6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80142da:	fba5 8202 	umull	r8, r2, r5, r2
 80142de:	0892      	lsrs	r2, r2, #2
 80142e0:	fb01 c212 	mls	r2, r1, r2, ip
 80142e4:	eb04 0c02 	add.w	ip, r4, r2
 80142e8:	b2d2      	uxtb	r2, r2
 80142ea:	4592      	cmp	sl, r2
 80142ec:	f100 0002 	add.w	r0, r0, #2
 80142f0:	f43f af47 	beq.w	8014182 <uxr_read_framed_msg+0x13a>
 80142f4:	0842      	lsrs	r2, r0, #1
 80142f6:	f89c a002 	ldrb.w	sl, [ip, #2]
 80142fa:	fba5 8202 	umull	r8, r2, r5, r2
 80142fe:	0892      	lsrs	r2, r2, #2
 8014300:	fb01 0012 	mls	r0, r1, r2, r0
 8014304:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8014308:	f08a 0c20 	eor.w	ip, sl, #32
 801430c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8014310:	f47f af11 	bne.w	8014136 <uxr_read_framed_msg+0xee>
 8014314:	459e      	cmp	lr, r3
 8014316:	ee17 8a90 	vmov	r8, s15
 801431a:	f43f af37 	beq.w	801418c <uxr_read_framed_msg+0x144>
 801431e:	2301      	movs	r3, #1
 8014320:	7023      	strb	r3, [r4, #0]
 8014322:	e6a2      	b.n	801406a <uxr_read_framed_msg+0x22>
 8014324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014326:	9300      	str	r3, [sp, #0]
 8014328:	2301      	movs	r3, #1
 801432a:	9301      	str	r3, [sp, #4]
 801432c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801432e:	464a      	mov	r2, r9
 8014330:	4641      	mov	r1, r8
 8014332:	4620      	mov	r0, r4
 8014334:	f7ff fe06 	bl	8013f44 <uxr_framing_read_transport>
 8014338:	2800      	cmp	r0, #0
 801433a:	f43f aec6 	beq.w	80140ca <uxr_read_framed_msg+0x82>
 801433e:	7823      	ldrb	r3, [r4, #0]
 8014340:	e693      	b.n	801406a <uxr_read_framed_msg+0x22>
 8014342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014344:	9300      	str	r3, [sp, #0]
 8014346:	2302      	movs	r3, #2
 8014348:	e7ef      	b.n	801432a <uxr_read_framed_msg+0x2e2>
 801434a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801434c:	9300      	str	r3, [sp, #0]
 801434e:	2304      	movs	r3, #4
 8014350:	9301      	str	r3, [sp, #4]
 8014352:	464a      	mov	r2, r9
 8014354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014356:	4641      	mov	r1, r8
 8014358:	4620      	mov	r0, r4
 801435a:	f7ff fdf3 	bl	8013f44 <uxr_framing_read_transport>
 801435e:	2800      	cmp	r0, #0
 8014360:	d1ed      	bne.n	801433e <uxr_read_framed_msg+0x2f6>
 8014362:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8014366:	2b7e      	cmp	r3, #126	; 0x7e
 8014368:	d0e9      	beq.n	801433e <uxr_read_framed_msg+0x2f6>
 801436a:	e6ae      	b.n	80140ca <uxr_read_framed_msg+0x82>
 801436c:	30c30c31 	.word	0x30c30c31
 8014370:	080173fc 	.word	0x080173fc
 8014374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014376:	9300      	str	r3, [sp, #0]
 8014378:	2305      	movs	r3, #5
 801437a:	9301      	str	r3, [sp, #4]
 801437c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801437e:	f7ff fde1 	bl	8013f44 <uxr_framing_read_transport>
 8014382:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014386:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801438a:	429a      	cmp	r2, r3
 801438c:	f43f ae9d 	beq.w	80140ca <uxr_read_framed_msg+0x82>
 8014390:	e668      	b.n	8014064 <uxr_read_framed_msg+0x1c>
 8014392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014394:	9300      	str	r3, [sp, #0]
 8014396:	2303      	movs	r3, #3
 8014398:	e7c7      	b.n	801432a <uxr_read_framed_msg+0x2e2>
 801439a:	2305      	movs	r3, #5
 801439c:	7023      	strb	r3, [r4, #0]
 801439e:	e664      	b.n	801406a <uxr_read_framed_msg+0x22>
 80143a0:	ee17 8a90 	vmov	r8, s15
 80143a4:	f43f aef2 	beq.w	801418c <uxr_read_framed_msg+0x144>
 80143a8:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80143ac:	d08e      	beq.n	80142cc <uxr_read_framed_msg+0x284>
 80143ae:	ebae 0303 	sub.w	r3, lr, r3
 80143b2:	3302      	adds	r3, #2
 80143b4:	9301      	str	r3, [sp, #4]
 80143b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143b8:	9300      	str	r3, [sp, #0]
 80143ba:	e7b7      	b.n	801432c <uxr_read_framed_msg+0x2e4>
 80143bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80143be:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80143c2:	7013      	strb	r3, [r2, #0]
 80143c4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80143c6:	b003      	add	sp, #12
 80143c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143cc:	f103 0c01 	add.w	ip, r3, #1
 80143d0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80143d4:	fba5 0202 	umull	r0, r2, r5, r2
 80143d8:	0892      	lsrs	r2, r2, #2
 80143da:	202a      	movs	r0, #42	; 0x2a
 80143dc:	fb00 c212 	mls	r2, r0, r2, ip
 80143e0:	fa5f fc82 	uxtb.w	ip, r2
 80143e4:	4561      	cmp	r1, ip
 80143e6:	d09d      	beq.n	8014324 <uxr_read_framed_msg+0x2dc>
 80143e8:	3302      	adds	r3, #2
 80143ea:	4422      	add	r2, r4
 80143ec:	0859      	lsrs	r1, r3, #1
 80143ee:	7892      	ldrb	r2, [r2, #2]
 80143f0:	fba5 c101 	umull	ip, r1, r5, r1
 80143f4:	0889      	lsrs	r1, r1, #2
 80143f6:	fb00 3311 	mls	r3, r0, r1, r3
 80143fa:	2a7e      	cmp	r2, #126	; 0x7e
 80143fc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014400:	f000 80aa 	beq.w	8014558 <uxr_read_framed_msg+0x510>
 8014404:	f082 0220 	eor.w	r2, r2, #32
 8014408:	e654      	b.n	80140b4 <uxr_read_framed_msg+0x6c>
 801440a:	1c58      	adds	r0, r3, #1
 801440c:	0842      	lsrs	r2, r0, #1
 801440e:	fba5 c202 	umull	ip, r2, r5, r2
 8014412:	0892      	lsrs	r2, r2, #2
 8014414:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8014418:	fb0c 0212 	mls	r2, ip, r2, r0
 801441c:	b2d0      	uxtb	r0, r2
 801441e:	4281      	cmp	r1, r0
 8014420:	d08f      	beq.n	8014342 <uxr_read_framed_msg+0x2fa>
 8014422:	4422      	add	r2, r4
 8014424:	3302      	adds	r3, #2
 8014426:	7890      	ldrb	r0, [r2, #2]
 8014428:	085a      	lsrs	r2, r3, #1
 801442a:	fba5 1202 	umull	r1, r2, r5, r2
 801442e:	0892      	lsrs	r2, r2, #2
 8014430:	fb0c 3312 	mls	r3, ip, r2, r3
 8014434:	287e      	cmp	r0, #126	; 0x7e
 8014436:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801443a:	d07d      	beq.n	8014538 <uxr_read_framed_msg+0x4f0>
 801443c:	f080 0020 	eor.w	r0, r0, #32
 8014440:	e660      	b.n	8014104 <uxr_read_framed_msg+0xbc>
 8014442:	1c59      	adds	r1, r3, #1
 8014444:	084a      	lsrs	r2, r1, #1
 8014446:	fba5 c202 	umull	ip, r2, r5, r2
 801444a:	0892      	lsrs	r2, r2, #2
 801444c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8014450:	fb0c 1212 	mls	r2, ip, r2, r1
 8014454:	b2d1      	uxtb	r1, r2
 8014456:	4288      	cmp	r0, r1
 8014458:	f43f af64 	beq.w	8014324 <uxr_read_framed_msg+0x2dc>
 801445c:	4422      	add	r2, r4
 801445e:	3302      	adds	r3, #2
 8014460:	7891      	ldrb	r1, [r2, #2]
 8014462:	085a      	lsrs	r2, r3, #1
 8014464:	fba5 0202 	umull	r0, r2, r5, r2
 8014468:	0892      	lsrs	r2, r2, #2
 801446a:	fb0c 3312 	mls	r3, ip, r2, r3
 801446e:	297e      	cmp	r1, #126	; 0x7e
 8014470:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014474:	d070      	beq.n	8014558 <uxr_read_framed_msg+0x510>
 8014476:	f081 0120 	eor.w	r1, r1, #32
 801447a:	e6a3      	b.n	80141c4 <uxr_read_framed_msg+0x17c>
 801447c:	f103 0c01 	add.w	ip, r3, #1
 8014480:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014484:	fba5 0202 	umull	r0, r2, r5, r2
 8014488:	0892      	lsrs	r2, r2, #2
 801448a:	202a      	movs	r0, #42	; 0x2a
 801448c:	fb00 c212 	mls	r2, r0, r2, ip
 8014490:	fa5f fc82 	uxtb.w	ip, r2
 8014494:	4561      	cmp	r1, ip
 8014496:	f43f af58 	beq.w	801434a <uxr_read_framed_msg+0x302>
 801449a:	4422      	add	r2, r4
 801449c:	3302      	adds	r3, #2
 801449e:	7891      	ldrb	r1, [r2, #2]
 80144a0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80144a4:	085a      	lsrs	r2, r3, #1
 80144a6:	fba5 c202 	umull	ip, r2, r5, r2
 80144aa:	0892      	lsrs	r2, r2, #2
 80144ac:	fb00 3312 	mls	r3, r0, r2, r3
 80144b0:	297e      	cmp	r1, #126	; 0x7e
 80144b2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80144b6:	f43f af48 	beq.w	801434a <uxr_read_framed_msg+0x302>
 80144ba:	f081 0120 	eor.w	r1, r1, #32
 80144be:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80144c2:	e6e8      	b.n	8014296 <uxr_read_framed_msg+0x24e>
 80144c4:	1c58      	adds	r0, r3, #1
 80144c6:	0842      	lsrs	r2, r0, #1
 80144c8:	fba5 c202 	umull	ip, r2, r5, r2
 80144cc:	0892      	lsrs	r2, r2, #2
 80144ce:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80144d2:	fb0c 0212 	mls	r2, ip, r2, r0
 80144d6:	b2d0      	uxtb	r0, r2
 80144d8:	4281      	cmp	r1, r0
 80144da:	f43f af32 	beq.w	8014342 <uxr_read_framed_msg+0x2fa>
 80144de:	4422      	add	r2, r4
 80144e0:	3302      	adds	r3, #2
 80144e2:	7890      	ldrb	r0, [r2, #2]
 80144e4:	085a      	lsrs	r2, r3, #1
 80144e6:	fba5 1202 	umull	r1, r2, r5, r2
 80144ea:	0892      	lsrs	r2, r2, #2
 80144ec:	fb0c 3312 	mls	r3, ip, r2, r3
 80144f0:	287e      	cmp	r0, #126	; 0x7e
 80144f2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80144f6:	d01f      	beq.n	8014538 <uxr_read_framed_msg+0x4f0>
 80144f8:	f080 0020 	eor.w	r0, r0, #32
 80144fc:	e68b      	b.n	8014216 <uxr_read_framed_msg+0x1ce>
 80144fe:	1c51      	adds	r1, r2, #1
 8014500:	084b      	lsrs	r3, r1, #1
 8014502:	fba5 c303 	umull	ip, r3, r5, r3
 8014506:	089b      	lsrs	r3, r3, #2
 8014508:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801450c:	fb0c 1313 	mls	r3, ip, r3, r1
 8014510:	b2d9      	uxtb	r1, r3
 8014512:	4288      	cmp	r0, r1
 8014514:	f43f af3d 	beq.w	8014392 <uxr_read_framed_msg+0x34a>
 8014518:	3202      	adds	r2, #2
 801451a:	4423      	add	r3, r4
 801451c:	0850      	lsrs	r0, r2, #1
 801451e:	789b      	ldrb	r3, [r3, #2]
 8014520:	fba5 1000 	umull	r1, r0, r5, r0
 8014524:	0880      	lsrs	r0, r0, #2
 8014526:	fb0c 2210 	mls	r2, ip, r0, r2
 801452a:	2b7e      	cmp	r3, #126	; 0x7e
 801452c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014530:	d016      	beq.n	8014560 <uxr_read_framed_msg+0x518>
 8014532:	f083 0120 	eor.w	r1, r3, #32
 8014536:	e68b      	b.n	8014250 <uxr_read_framed_msg+0x208>
 8014538:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801453a:	9300      	str	r3, [sp, #0]
 801453c:	2302      	movs	r3, #2
 801453e:	9301      	str	r3, [sp, #4]
 8014540:	464a      	mov	r2, r9
 8014542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014544:	4641      	mov	r1, r8
 8014546:	4620      	mov	r0, r4
 8014548:	f7ff fcfc 	bl	8013f44 <uxr_framing_read_transport>
 801454c:	2800      	cmp	r0, #0
 801454e:	f47f aef6 	bne.w	801433e <uxr_read_framed_msg+0x2f6>
 8014552:	2301      	movs	r3, #1
 8014554:	7023      	strb	r3, [r4, #0]
 8014556:	e588      	b.n	801406a <uxr_read_framed_msg+0x22>
 8014558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801455a:	9300      	str	r3, [sp, #0]
 801455c:	2301      	movs	r3, #1
 801455e:	e7ee      	b.n	801453e <uxr_read_framed_msg+0x4f6>
 8014560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	2303      	movs	r3, #3
 8014566:	e7ea      	b.n	801453e <uxr_read_framed_msg+0x4f6>
 8014568:	ee17 8a90 	vmov	r8, s15
 801456c:	e6ae      	b.n	80142cc <uxr_read_framed_msg+0x284>
 801456e:	bf00      	nop

08014570 <rcl_get_automatic_discovery_range>:
 8014570:	b530      	push	{r4, r5, lr}
 8014572:	b083      	sub	sp, #12
 8014574:	2300      	movs	r3, #0
 8014576:	9301      	str	r3, [sp, #4]
 8014578:	b1c0      	cbz	r0, 80145ac <rcl_get_automatic_discovery_range+0x3c>
 801457a:	4604      	mov	r4, r0
 801457c:	a901      	add	r1, sp, #4
 801457e:	4818      	ldr	r0, [pc, #96]	; (80145e0 <rcl_get_automatic_discovery_range+0x70>)
 8014580:	f7fc fc1e 	bl	8010dc0 <rcutils_get_env>
 8014584:	b110      	cbz	r0, 801458c <rcl_get_automatic_discovery_range+0x1c>
 8014586:	2001      	movs	r0, #1
 8014588:	b003      	add	sp, #12
 801458a:	bd30      	pop	{r4, r5, pc}
 801458c:	9d01      	ldr	r5, [sp, #4]
 801458e:	782b      	ldrb	r3, [r5, #0]
 8014590:	b13b      	cbz	r3, 80145a2 <rcl_get_automatic_discovery_range+0x32>
 8014592:	4914      	ldr	r1, [pc, #80]	; (80145e4 <rcl_get_automatic_discovery_range+0x74>)
 8014594:	4628      	mov	r0, r5
 8014596:	f7eb fe23 	bl	80001e0 <strcmp>
 801459a:	b950      	cbnz	r0, 80145b2 <rcl_get_automatic_discovery_range+0x42>
 801459c:	2301      	movs	r3, #1
 801459e:	7023      	strb	r3, [r4, #0]
 80145a0:	e7f2      	b.n	8014588 <rcl_get_automatic_discovery_range+0x18>
 80145a2:	2303      	movs	r3, #3
 80145a4:	2000      	movs	r0, #0
 80145a6:	7023      	strb	r3, [r4, #0]
 80145a8:	b003      	add	sp, #12
 80145aa:	bd30      	pop	{r4, r5, pc}
 80145ac:	200b      	movs	r0, #11
 80145ae:	b003      	add	sp, #12
 80145b0:	bd30      	pop	{r4, r5, pc}
 80145b2:	490d      	ldr	r1, [pc, #52]	; (80145e8 <rcl_get_automatic_discovery_range+0x78>)
 80145b4:	4628      	mov	r0, r5
 80145b6:	f7eb fe13 	bl	80001e0 <strcmp>
 80145ba:	b168      	cbz	r0, 80145d8 <rcl_get_automatic_discovery_range+0x68>
 80145bc:	490b      	ldr	r1, [pc, #44]	; (80145ec <rcl_get_automatic_discovery_range+0x7c>)
 80145be:	4628      	mov	r0, r5
 80145c0:	f7eb fe0e 	bl	80001e0 <strcmp>
 80145c4:	2800      	cmp	r0, #0
 80145c6:	d0ec      	beq.n	80145a2 <rcl_get_automatic_discovery_range+0x32>
 80145c8:	4909      	ldr	r1, [pc, #36]	; (80145f0 <rcl_get_automatic_discovery_range+0x80>)
 80145ca:	4628      	mov	r0, r5
 80145cc:	f7eb fe08 	bl	80001e0 <strcmp>
 80145d0:	b910      	cbnz	r0, 80145d8 <rcl_get_automatic_discovery_range+0x68>
 80145d2:	2304      	movs	r3, #4
 80145d4:	7023      	strb	r3, [r4, #0]
 80145d6:	e7d7      	b.n	8014588 <rcl_get_automatic_discovery_range+0x18>
 80145d8:	2302      	movs	r3, #2
 80145da:	7023      	strb	r3, [r4, #0]
 80145dc:	2000      	movs	r0, #0
 80145de:	e7d3      	b.n	8014588 <rcl_get_automatic_discovery_range+0x18>
 80145e0:	080175fc 	.word	0x080175fc
 80145e4:	0801761c 	.word	0x0801761c
 80145e8:	08017620 	.word	0x08017620
 80145ec:	0801762c 	.word	0x0801762c
 80145f0:	08017634 	.word	0x08017634

080145f4 <rcl_automatic_discovery_range_to_string>:
 80145f4:	2804      	cmp	r0, #4
 80145f6:	bf9a      	itte	ls
 80145f8:	4b02      	ldrls	r3, [pc, #8]	; (8014604 <rcl_automatic_discovery_range_to_string+0x10>)
 80145fa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80145fe:	2000      	movhi	r0, #0
 8014600:	4770      	bx	lr
 8014602:	bf00      	nop
 8014604:	08017724 	.word	0x08017724

08014608 <rcl_get_discovery_static_peers>:
 8014608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801460c:	b08e      	sub	sp, #56	; 0x38
 801460e:	2300      	movs	r3, #0
 8014610:	9306      	str	r3, [sp, #24]
 8014612:	2800      	cmp	r0, #0
 8014614:	d04b      	beq.n	80146ae <rcl_get_discovery_static_peers+0xa6>
 8014616:	460d      	mov	r5, r1
 8014618:	2900      	cmp	r1, #0
 801461a:	d048      	beq.n	80146ae <rcl_get_discovery_static_peers+0xa6>
 801461c:	4604      	mov	r4, r0
 801461e:	a906      	add	r1, sp, #24
 8014620:	482b      	ldr	r0, [pc, #172]	; (80146d0 <rcl_get_discovery_static_peers+0xc8>)
 8014622:	f7fc fbcd 	bl	8010dc0 <rcutils_get_env>
 8014626:	b118      	cbz	r0, 8014630 <rcl_get_discovery_static_peers+0x28>
 8014628:	2001      	movs	r0, #1
 801462a:	b00e      	add	sp, #56	; 0x38
 801462c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014630:	9b06      	ldr	r3, [sp, #24]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d0f8      	beq.n	8014628 <rcl_get_discovery_static_peers+0x20>
 8014636:	af07      	add	r7, sp, #28
 8014638:	4638      	mov	r0, r7
 801463a:	f000 fb73 	bl	8014d24 <rcutils_get_zero_initialized_string_array>
 801463e:	f105 0308 	add.w	r3, r5, #8
 8014642:	9703      	str	r7, [sp, #12]
 8014644:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014648:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801464c:	9806      	ldr	r0, [sp, #24]
 801464e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014652:	213b      	movs	r1, #59	; 0x3b
 8014654:	f000 faa8 	bl	8014ba8 <rcutils_split>
 8014658:	2800      	cmp	r0, #0
 801465a:	d1e5      	bne.n	8014628 <rcl_get_discovery_static_peers+0x20>
 801465c:	462a      	mov	r2, r5
 801465e:	9907      	ldr	r1, [sp, #28]
 8014660:	4620      	mov	r0, r4
 8014662:	f000 fbad 	bl	8014dc0 <rmw_discovery_options_init>
 8014666:	4605      	mov	r5, r0
 8014668:	bb78      	cbnz	r0, 80146ca <rcl_get_discovery_static_peers+0xc2>
 801466a:	9e07      	ldr	r6, [sp, #28]
 801466c:	b336      	cbz	r6, 80146bc <rcl_get_discovery_static_peers+0xb4>
 801466e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014672:	4680      	mov	r8, r0
 8014674:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8014678:	9105      	str	r1, [sp, #20]
 801467a:	4608      	mov	r0, r1
 801467c:	f7eb fe10 	bl	80002a0 <strlen>
 8014680:	28ff      	cmp	r0, #255	; 0xff
 8014682:	9905      	ldr	r1, [sp, #20]
 8014684:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8014688:	d815      	bhi.n	80146b6 <rcl_get_discovery_static_peers+0xae>
 801468a:	6860      	ldr	r0, [r4, #4]
 801468c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014690:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8014694:	f001 f8c1 	bl	801581a <strncpy>
 8014698:	6863      	ldr	r3, [r4, #4]
 801469a:	9e07      	ldr	r6, [sp, #28]
 801469c:	3501      	adds	r5, #1
 801469e:	444b      	add	r3, r9
 80146a0:	42b5      	cmp	r5, r6
 80146a2:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 80146a6:	d209      	bcs.n	80146bc <rcl_get_discovery_static_peers+0xb4>
 80146a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80146ac:	e7e2      	b.n	8014674 <rcl_get_discovery_static_peers+0x6c>
 80146ae:	200b      	movs	r0, #11
 80146b0:	b00e      	add	sp, #56	; 0x38
 80146b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146b6:	3501      	adds	r5, #1
 80146b8:	42b5      	cmp	r5, r6
 80146ba:	d3db      	bcc.n	8014674 <rcl_get_discovery_static_peers+0x6c>
 80146bc:	4638      	mov	r0, r7
 80146be:	f000 fb4f 	bl	8014d60 <rcutils_string_array_fini>
 80146c2:	3800      	subs	r0, #0
 80146c4:	bf18      	it	ne
 80146c6:	2001      	movne	r0, #1
 80146c8:	e7af      	b.n	801462a <rcl_get_discovery_static_peers+0x22>
 80146ca:	f7f9 fcab 	bl	800e024 <rcl_convert_rmw_ret_to_rcl_ret>
 80146ce:	e7ac      	b.n	801462a <rcl_get_discovery_static_peers+0x22>
 80146d0:	08017644 	.word	0x08017644

080146d4 <rcl_get_default_domain_id>:
 80146d4:	b530      	push	{r4, r5, lr}
 80146d6:	b083      	sub	sp, #12
 80146d8:	2300      	movs	r3, #0
 80146da:	9300      	str	r3, [sp, #0]
 80146dc:	b1d0      	cbz	r0, 8014714 <rcl_get_default_domain_id+0x40>
 80146de:	4604      	mov	r4, r0
 80146e0:	4669      	mov	r1, sp
 80146e2:	4815      	ldr	r0, [pc, #84]	; (8014738 <rcl_get_default_domain_id+0x64>)
 80146e4:	f7fc fb6c 	bl	8010dc0 <rcutils_get_env>
 80146e8:	4602      	mov	r2, r0
 80146ea:	b110      	cbz	r0, 80146f2 <rcl_get_default_domain_id+0x1e>
 80146ec:	2001      	movs	r0, #1
 80146ee:	b003      	add	sp, #12
 80146f0:	bd30      	pop	{r4, r5, pc}
 80146f2:	9b00      	ldr	r3, [sp, #0]
 80146f4:	b18b      	cbz	r3, 801471a <rcl_get_default_domain_id+0x46>
 80146f6:	7818      	ldrb	r0, [r3, #0]
 80146f8:	2800      	cmp	r0, #0
 80146fa:	d0f8      	beq.n	80146ee <rcl_get_default_domain_id+0x1a>
 80146fc:	a901      	add	r1, sp, #4
 80146fe:	4618      	mov	r0, r3
 8014700:	9201      	str	r2, [sp, #4]
 8014702:	f000 feab 	bl	801545c <strtoul>
 8014706:	4605      	mov	r5, r0
 8014708:	b150      	cbz	r0, 8014720 <rcl_get_default_domain_id+0x4c>
 801470a:	1c43      	adds	r3, r0, #1
 801470c:	d00d      	beq.n	801472a <rcl_get_default_domain_id+0x56>
 801470e:	6025      	str	r5, [r4, #0]
 8014710:	2000      	movs	r0, #0
 8014712:	e7ec      	b.n	80146ee <rcl_get_default_domain_id+0x1a>
 8014714:	200b      	movs	r0, #11
 8014716:	b003      	add	sp, #12
 8014718:	bd30      	pop	{r4, r5, pc}
 801471a:	4618      	mov	r0, r3
 801471c:	b003      	add	sp, #12
 801471e:	bd30      	pop	{r4, r5, pc}
 8014720:	9b01      	ldr	r3, [sp, #4]
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d0f2      	beq.n	801470e <rcl_get_default_domain_id+0x3a>
 8014728:	e7e0      	b.n	80146ec <rcl_get_default_domain_id+0x18>
 801472a:	f001 f8f5 	bl	8015918 <__errno>
 801472e:	6803      	ldr	r3, [r0, #0]
 8014730:	2b22      	cmp	r3, #34	; 0x22
 8014732:	d1ec      	bne.n	801470e <rcl_get_default_domain_id+0x3a>
 8014734:	e7da      	b.n	80146ec <rcl_get_default_domain_id+0x18>
 8014736:	bf00      	nop
 8014738:	08017738 	.word	0x08017738

0801473c <rcl_expand_topic_name>:
 801473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014740:	b08b      	sub	sp, #44	; 0x2c
 8014742:	9306      	str	r3, [sp, #24]
 8014744:	2800      	cmp	r0, #0
 8014746:	f000 80ad 	beq.w	80148a4 <rcl_expand_topic_name+0x168>
 801474a:	460e      	mov	r6, r1
 801474c:	2900      	cmp	r1, #0
 801474e:	f000 80a9 	beq.w	80148a4 <rcl_expand_topic_name+0x168>
 8014752:	4617      	mov	r7, r2
 8014754:	2a00      	cmp	r2, #0
 8014756:	f000 80a5 	beq.w	80148a4 <rcl_expand_topic_name+0x168>
 801475a:	2b00      	cmp	r3, #0
 801475c:	f000 80a2 	beq.w	80148a4 <rcl_expand_topic_name+0x168>
 8014760:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014762:	2b00      	cmp	r3, #0
 8014764:	f000 809e 	beq.w	80148a4 <rcl_expand_topic_name+0x168>
 8014768:	2200      	movs	r2, #0
 801476a:	a909      	add	r1, sp, #36	; 0x24
 801476c:	4680      	mov	r8, r0
 801476e:	f000 f949 	bl	8014a04 <rcl_validate_topic_name>
 8014772:	4604      	mov	r4, r0
 8014774:	2800      	cmp	r0, #0
 8014776:	f040 8096 	bne.w	80148a6 <rcl_expand_topic_name+0x16a>
 801477a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801477c:	2b00      	cmp	r3, #0
 801477e:	f040 809a 	bne.w	80148b6 <rcl_expand_topic_name+0x17a>
 8014782:	4602      	mov	r2, r0
 8014784:	a909      	add	r1, sp, #36	; 0x24
 8014786:	4630      	mov	r0, r6
 8014788:	f7fc ff5e 	bl	8011648 <rmw_validate_node_name>
 801478c:	2800      	cmp	r0, #0
 801478e:	f040 808e 	bne.w	80148ae <rcl_expand_topic_name+0x172>
 8014792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014794:	2a00      	cmp	r2, #0
 8014796:	f040 8093 	bne.w	80148c0 <rcl_expand_topic_name+0x184>
 801479a:	a909      	add	r1, sp, #36	; 0x24
 801479c:	4638      	mov	r0, r7
 801479e:	f7fc ff35 	bl	801160c <rmw_validate_namespace>
 80147a2:	2800      	cmp	r0, #0
 80147a4:	f040 8083 	bne.w	80148ae <rcl_expand_topic_name+0x172>
 80147a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80147aa:	2c00      	cmp	r4, #0
 80147ac:	f040 80ed 	bne.w	801498a <rcl_expand_topic_name+0x24e>
 80147b0:	217b      	movs	r1, #123	; 0x7b
 80147b2:	4640      	mov	r0, r8
 80147b4:	f001 f812 	bl	80157dc <strchr>
 80147b8:	f898 3000 	ldrb.w	r3, [r8]
 80147bc:	2b2f      	cmp	r3, #47	; 0x2f
 80147be:	4605      	mov	r5, r0
 80147c0:	f000 809e 	beq.w	8014900 <rcl_expand_topic_name+0x1c4>
 80147c4:	2b7e      	cmp	r3, #126	; 0x7e
 80147c6:	f040 80a2 	bne.w	801490e <rcl_expand_topic_name+0x1d2>
 80147ca:	4638      	mov	r0, r7
 80147cc:	f7eb fd68 	bl	80002a0 <strlen>
 80147d0:	4a82      	ldr	r2, [pc, #520]	; (80149dc <rcl_expand_topic_name+0x2a0>)
 80147d2:	4b83      	ldr	r3, [pc, #524]	; (80149e0 <rcl_expand_topic_name+0x2a4>)
 80147d4:	2801      	cmp	r0, #1
 80147d6:	bf18      	it	ne
 80147d8:	4613      	movne	r3, r2
 80147da:	9302      	str	r3, [sp, #8]
 80147dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80147de:	9300      	str	r3, [sp, #0]
 80147e0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80147e4:	f108 0301 	add.w	r3, r8, #1
 80147e8:	9305      	str	r3, [sp, #20]
 80147ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80147ee:	9301      	str	r3, [sp, #4]
 80147f0:	ab14      	add	r3, sp, #80	; 0x50
 80147f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80147f4:	f7fc fb0c 	bl	8010e10 <rcutils_format_string_limit>
 80147f8:	4682      	mov	sl, r0
 80147fa:	2800      	cmp	r0, #0
 80147fc:	f000 80c7 	beq.w	801498e <rcl_expand_topic_name+0x252>
 8014800:	2d00      	cmp	r5, #0
 8014802:	f000 80a2 	beq.w	801494a <rcl_expand_topic_name+0x20e>
 8014806:	217b      	movs	r1, #123	; 0x7b
 8014808:	f000 ffe8 	bl	80157dc <strchr>
 801480c:	46d1      	mov	r9, sl
 801480e:	4605      	mov	r5, r0
 8014810:	9407      	str	r4, [sp, #28]
 8014812:	46d3      	mov	fp, sl
 8014814:	464c      	mov	r4, r9
 8014816:	2d00      	cmp	r5, #0
 8014818:	f000 80be 	beq.w	8014998 <rcl_expand_topic_name+0x25c>
 801481c:	217d      	movs	r1, #125	; 0x7d
 801481e:	4620      	mov	r0, r4
 8014820:	f000 ffdc 	bl	80157dc <strchr>
 8014824:	eba0 0905 	sub.w	r9, r0, r5
 8014828:	f109 0a01 	add.w	sl, r9, #1
 801482c:	486d      	ldr	r0, [pc, #436]	; (80149e4 <rcl_expand_topic_name+0x2a8>)
 801482e:	4652      	mov	r2, sl
 8014830:	4629      	mov	r1, r5
 8014832:	f000 ffe0 	bl	80157f6 <strncmp>
 8014836:	2800      	cmp	r0, #0
 8014838:	d067      	beq.n	801490a <rcl_expand_topic_name+0x1ce>
 801483a:	486b      	ldr	r0, [pc, #428]	; (80149e8 <rcl_expand_topic_name+0x2ac>)
 801483c:	4652      	mov	r2, sl
 801483e:	4629      	mov	r1, r5
 8014840:	f000 ffd9 	bl	80157f6 <strncmp>
 8014844:	b130      	cbz	r0, 8014854 <rcl_expand_topic_name+0x118>
 8014846:	4869      	ldr	r0, [pc, #420]	; (80149ec <rcl_expand_topic_name+0x2b0>)
 8014848:	4652      	mov	r2, sl
 801484a:	4629      	mov	r1, r5
 801484c:	f000 ffd3 	bl	80157f6 <strncmp>
 8014850:	2800      	cmp	r0, #0
 8014852:	d137      	bne.n	80148c4 <rcl_expand_topic_name+0x188>
 8014854:	46b9      	mov	r9, r7
 8014856:	ab16      	add	r3, sp, #88	; 0x58
 8014858:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801485c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014860:	ab14      	add	r3, sp, #80	; 0x50
 8014862:	4628      	mov	r0, r5
 8014864:	cb0c      	ldmia	r3, {r2, r3}
 8014866:	4651      	mov	r1, sl
 8014868:	f7fc fc12 	bl	8011090 <rcutils_strndup>
 801486c:	4605      	mov	r5, r0
 801486e:	2800      	cmp	r0, #0
 8014870:	f000 809c 	beq.w	80149ac <rcl_expand_topic_name+0x270>
 8014874:	464a      	mov	r2, r9
 8014876:	4620      	mov	r0, r4
 8014878:	ab14      	add	r3, sp, #80	; 0x50
 801487a:	4629      	mov	r1, r5
 801487c:	f7fc fb02 	bl	8010e84 <rcutils_repl_str>
 8014880:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014882:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014884:	4604      	mov	r4, r0
 8014886:	4628      	mov	r0, r5
 8014888:	4798      	blx	r3
 801488a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801488c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801488e:	4658      	mov	r0, fp
 8014890:	4798      	blx	r3
 8014892:	2c00      	cmp	r4, #0
 8014894:	d07b      	beq.n	801498e <rcl_expand_topic_name+0x252>
 8014896:	217b      	movs	r1, #123	; 0x7b
 8014898:	4620      	mov	r0, r4
 801489a:	f000 ff9f 	bl	80157dc <strchr>
 801489e:	46a3      	mov	fp, r4
 80148a0:	4605      	mov	r5, r0
 80148a2:	e7b8      	b.n	8014816 <rcl_expand_topic_name+0xda>
 80148a4:	240b      	movs	r4, #11
 80148a6:	4620      	mov	r0, r4
 80148a8:	b00b      	add	sp, #44	; 0x2c
 80148aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ae:	f7f9 fbb9 	bl	800e024 <rcl_convert_rmw_ret_to_rcl_ret>
 80148b2:	4604      	mov	r4, r0
 80148b4:	e7f7      	b.n	80148a6 <rcl_expand_topic_name+0x16a>
 80148b6:	2467      	movs	r4, #103	; 0x67
 80148b8:	4620      	mov	r0, r4
 80148ba:	b00b      	add	sp, #44	; 0x2c
 80148bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148c0:	24c9      	movs	r4, #201	; 0xc9
 80148c2:	e7f0      	b.n	80148a6 <rcl_expand_topic_name+0x16a>
 80148c4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80148c8:	9806      	ldr	r0, [sp, #24]
 80148ca:	1c69      	adds	r1, r5, #1
 80148cc:	f7fc fcdc 	bl	8011288 <rcutils_string_map_getn>
 80148d0:	4681      	mov	r9, r0
 80148d2:	2800      	cmp	r0, #0
 80148d4:	d1bf      	bne.n	8014856 <rcl_expand_topic_name+0x11a>
 80148d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80148d8:	aa16      	add	r2, sp, #88	; 0x58
 80148da:	6018      	str	r0, [r3, #0]
 80148dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80148de:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80148e2:	ab14      	add	r3, sp, #80	; 0x50
 80148e4:	cb0c      	ldmia	r3, {r2, r3}
 80148e6:	4651      	mov	r1, sl
 80148e8:	4628      	mov	r0, r5
 80148ea:	f7fc fbd1 	bl	8011090 <rcutils_strndup>
 80148ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80148f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148f2:	4798      	blx	r3
 80148f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80148f8:	4658      	mov	r0, fp
 80148fa:	2469      	movs	r4, #105	; 0x69
 80148fc:	4798      	blx	r3
 80148fe:	e7d2      	b.n	80148a6 <rcl_expand_topic_name+0x16a>
 8014900:	2800      	cmp	r0, #0
 8014902:	d05b      	beq.n	80149bc <rcl_expand_topic_name+0x280>
 8014904:	46c1      	mov	r9, r8
 8014906:	46a2      	mov	sl, r4
 8014908:	e782      	b.n	8014810 <rcl_expand_topic_name+0xd4>
 801490a:	46b1      	mov	r9, r6
 801490c:	e7a3      	b.n	8014856 <rcl_expand_topic_name+0x11a>
 801490e:	2800      	cmp	r0, #0
 8014910:	d1f8      	bne.n	8014904 <rcl_expand_topic_name+0x1c8>
 8014912:	4638      	mov	r0, r7
 8014914:	f7eb fcc4 	bl	80002a0 <strlen>
 8014918:	4a35      	ldr	r2, [pc, #212]	; (80149f0 <rcl_expand_topic_name+0x2b4>)
 801491a:	4b36      	ldr	r3, [pc, #216]	; (80149f4 <rcl_expand_topic_name+0x2b8>)
 801491c:	f8cd 8010 	str.w	r8, [sp, #16]
 8014920:	2801      	cmp	r0, #1
 8014922:	bf18      	it	ne
 8014924:	4613      	movne	r3, r2
 8014926:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801492a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801492e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014930:	9703      	str	r7, [sp, #12]
 8014932:	9200      	str	r2, [sp, #0]
 8014934:	ab14      	add	r3, sp, #80	; 0x50
 8014936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014938:	f7fc fa6a 	bl	8010e10 <rcutils_format_string_limit>
 801493c:	4682      	mov	sl, r0
 801493e:	4653      	mov	r3, sl
 8014940:	b32b      	cbz	r3, 801498e <rcl_expand_topic_name+0x252>
 8014942:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014944:	f8c3 a000 	str.w	sl, [r3]
 8014948:	e7ad      	b.n	80148a6 <rcl_expand_topic_name+0x16a>
 801494a:	f89a 3000 	ldrb.w	r3, [sl]
 801494e:	2b2f      	cmp	r3, #47	; 0x2f
 8014950:	d0f7      	beq.n	8014942 <rcl_expand_topic_name+0x206>
 8014952:	4638      	mov	r0, r7
 8014954:	f7eb fca4 	bl	80002a0 <strlen>
 8014958:	4a25      	ldr	r2, [pc, #148]	; (80149f0 <rcl_expand_topic_name+0x2b4>)
 801495a:	4b26      	ldr	r3, [pc, #152]	; (80149f4 <rcl_expand_topic_name+0x2b8>)
 801495c:	f8cd a010 	str.w	sl, [sp, #16]
 8014960:	2801      	cmp	r0, #1
 8014962:	bf18      	it	ne
 8014964:	4613      	movne	r3, r2
 8014966:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801496a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801496e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014970:	9703      	str	r7, [sp, #12]
 8014972:	9200      	str	r2, [sp, #0]
 8014974:	ab14      	add	r3, sp, #80	; 0x50
 8014976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014978:	f7fc fa4a 	bl	8010e10 <rcutils_format_string_limit>
 801497c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801497e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014980:	4605      	mov	r5, r0
 8014982:	4650      	mov	r0, sl
 8014984:	4798      	blx	r3
 8014986:	46aa      	mov	sl, r5
 8014988:	e7d9      	b.n	801493e <rcl_expand_topic_name+0x202>
 801498a:	24ca      	movs	r4, #202	; 0xca
 801498c:	e78b      	b.n	80148a6 <rcl_expand_topic_name+0x16a>
 801498e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014990:	2300      	movs	r3, #0
 8014992:	6013      	str	r3, [r2, #0]
 8014994:	240a      	movs	r4, #10
 8014996:	e786      	b.n	80148a6 <rcl_expand_topic_name+0x16a>
 8014998:	465b      	mov	r3, fp
 801499a:	9c07      	ldr	r4, [sp, #28]
 801499c:	46da      	mov	sl, fp
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d1d3      	bne.n	801494a <rcl_expand_topic_name+0x20e>
 80149a2:	f898 3000 	ldrb.w	r3, [r8]
 80149a6:	2b2f      	cmp	r3, #47	; 0x2f
 80149a8:	d0cb      	beq.n	8014942 <rcl_expand_topic_name+0x206>
 80149aa:	e7b2      	b.n	8014912 <rcl_expand_topic_name+0x1d6>
 80149ac:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 80149b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80149b2:	6015      	str	r5, [r2, #0]
 80149b4:	4658      	mov	r0, fp
 80149b6:	4798      	blx	r3
 80149b8:	240a      	movs	r4, #10
 80149ba:	e774      	b.n	80148a6 <rcl_expand_topic_name+0x16a>
 80149bc:	ab17      	add	r3, sp, #92	; 0x5c
 80149be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80149c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80149c6:	ab14      	add	r3, sp, #80	; 0x50
 80149c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80149ca:	4640      	mov	r0, r8
 80149cc:	f7fc fb3a 	bl	8011044 <rcutils_strdup>
 80149d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80149d2:	2800      	cmp	r0, #0
 80149d4:	6018      	str	r0, [r3, #0]
 80149d6:	bf08      	it	eq
 80149d8:	240a      	moveq	r4, #10
 80149da:	e764      	b.n	80148a6 <rcl_expand_topic_name+0x16a>
 80149dc:	08017748 	.word	0x08017748
 80149e0:	08016bbc 	.word	0x08016bbc
 80149e4:	08017750 	.word	0x08017750
 80149e8:	08017758 	.word	0x08017758
 80149ec:	08017760 	.word	0x08017760
 80149f0:	08016df4 	.word	0x08016df4
 80149f4:	08016bcc 	.word	0x08016bcc

080149f8 <rcl_get_default_topic_name_substitutions>:
 80149f8:	2800      	cmp	r0, #0
 80149fa:	bf0c      	ite	eq
 80149fc:	200b      	moveq	r0, #11
 80149fe:	2000      	movne	r0, #0
 8014a00:	4770      	bx	lr
 8014a02:	bf00      	nop

08014a04 <rcl_validate_topic_name>:
 8014a04:	2800      	cmp	r0, #0
 8014a06:	d07a      	beq.n	8014afe <rcl_validate_topic_name+0xfa>
 8014a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a0c:	460e      	mov	r6, r1
 8014a0e:	2900      	cmp	r1, #0
 8014a10:	d07c      	beq.n	8014b0c <rcl_validate_topic_name+0x108>
 8014a12:	4617      	mov	r7, r2
 8014a14:	4605      	mov	r5, r0
 8014a16:	f7eb fc43 	bl	80002a0 <strlen>
 8014a1a:	b1b0      	cbz	r0, 8014a4a <rcl_validate_topic_name+0x46>
 8014a1c:	f895 9000 	ldrb.w	r9, [r5]
 8014a20:	f8df c180 	ldr.w	ip, [pc, #384]	; 8014ba4 <rcl_validate_topic_name+0x1a0>
 8014a24:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8014a28:	f013 0304 	ands.w	r3, r3, #4
 8014a2c:	d169      	bne.n	8014b02 <rcl_validate_topic_name+0xfe>
 8014a2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8014a32:	f815 2008 	ldrb.w	r2, [r5, r8]
 8014a36:	2a2f      	cmp	r2, #47	; 0x2f
 8014a38:	d10e      	bne.n	8014a58 <rcl_validate_topic_name+0x54>
 8014a3a:	2202      	movs	r2, #2
 8014a3c:	6032      	str	r2, [r6, #0]
 8014a3e:	b36f      	cbz	r7, 8014a9c <rcl_validate_topic_name+0x98>
 8014a40:	f8c7 8000 	str.w	r8, [r7]
 8014a44:	4618      	mov	r0, r3
 8014a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	6033      	str	r3, [r6, #0]
 8014a4e:	b32f      	cbz	r7, 8014a9c <rcl_validate_topic_name+0x98>
 8014a50:	2000      	movs	r0, #0
 8014a52:	6038      	str	r0, [r7, #0]
 8014a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a58:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8014a5c:	461c      	mov	r4, r3
 8014a5e:	4619      	mov	r1, r3
 8014a60:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014a64:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014a68:	f1be 0f09 	cmp.w	lr, #9
 8014a6c:	d919      	bls.n	8014aa2 <rcl_validate_topic_name+0x9e>
 8014a6e:	f022 0e20 	bic.w	lr, r2, #32
 8014a72:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8014a76:	f1be 0f19 	cmp.w	lr, #25
 8014a7a:	d912      	bls.n	8014aa2 <rcl_validate_topic_name+0x9e>
 8014a7c:	2a5f      	cmp	r2, #95	; 0x5f
 8014a7e:	d019      	beq.n	8014ab4 <rcl_validate_topic_name+0xb0>
 8014a80:	2a2f      	cmp	r2, #47	; 0x2f
 8014a82:	d051      	beq.n	8014b28 <rcl_validate_topic_name+0x124>
 8014a84:	2a7e      	cmp	r2, #126	; 0x7e
 8014a86:	d048      	beq.n	8014b1a <rcl_validate_topic_name+0x116>
 8014a88:	2a7b      	cmp	r2, #123	; 0x7b
 8014a8a:	d054      	beq.n	8014b36 <rcl_validate_topic_name+0x132>
 8014a8c:	2a7d      	cmp	r2, #125	; 0x7d
 8014a8e:	d161      	bne.n	8014b54 <rcl_validate_topic_name+0x150>
 8014a90:	2c00      	cmp	r4, #0
 8014a92:	d155      	bne.n	8014b40 <rcl_validate_topic_name+0x13c>
 8014a94:	2305      	movs	r3, #5
 8014a96:	6033      	str	r3, [r6, #0]
 8014a98:	b107      	cbz	r7, 8014a9c <rcl_validate_topic_name+0x98>
 8014a9a:	6039      	str	r1, [r7, #0]
 8014a9c:	2000      	movs	r0, #0
 8014a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014aa2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014aa6:	0752      	lsls	r2, r2, #29
 8014aa8:	d504      	bpl.n	8014ab4 <rcl_validate_topic_name+0xb0>
 8014aaa:	b11c      	cbz	r4, 8014ab4 <rcl_validate_topic_name+0xb0>
 8014aac:	b111      	cbz	r1, 8014ab4 <rcl_validate_topic_name+0xb0>
 8014aae:	1e4a      	subs	r2, r1, #1
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	d02d      	beq.n	8014b10 <rcl_validate_topic_name+0x10c>
 8014ab4:	3101      	adds	r1, #1
 8014ab6:	4288      	cmp	r0, r1
 8014ab8:	d1d2      	bne.n	8014a60 <rcl_validate_topic_name+0x5c>
 8014aba:	2c00      	cmp	r4, #0
 8014abc:	d145      	bne.n	8014b4a <rcl_validate_topic_name+0x146>
 8014abe:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8014ac2:	d04f      	beq.n	8014b64 <rcl_validate_topic_name+0x160>
 8014ac4:	4620      	mov	r0, r4
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	e006      	b.n	8014ad8 <rcl_validate_topic_name+0xd4>
 8014aca:	428b      	cmp	r3, r1
 8014acc:	f105 0501 	add.w	r5, r5, #1
 8014ad0:	f103 0201 	add.w	r2, r3, #1
 8014ad4:	d236      	bcs.n	8014b44 <rcl_validate_topic_name+0x140>
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	4580      	cmp	r8, r0
 8014ada:	f100 0001 	add.w	r0, r0, #1
 8014ade:	d0f4      	beq.n	8014aca <rcl_validate_topic_name+0xc6>
 8014ae0:	782a      	ldrb	r2, [r5, #0]
 8014ae2:	2a2f      	cmp	r2, #47	; 0x2f
 8014ae4:	d1f1      	bne.n	8014aca <rcl_validate_topic_name+0xc6>
 8014ae6:	786a      	ldrb	r2, [r5, #1]
 8014ae8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014aec:	0754      	lsls	r4, r2, #29
 8014aee:	d5ec      	bpl.n	8014aca <rcl_validate_topic_name+0xc6>
 8014af0:	2204      	movs	r2, #4
 8014af2:	6032      	str	r2, [r6, #0]
 8014af4:	2f00      	cmp	r7, #0
 8014af6:	d0d1      	beq.n	8014a9c <rcl_validate_topic_name+0x98>
 8014af8:	603b      	str	r3, [r7, #0]
 8014afa:	2000      	movs	r0, #0
 8014afc:	e7aa      	b.n	8014a54 <rcl_validate_topic_name+0x50>
 8014afe:	200b      	movs	r0, #11
 8014b00:	4770      	bx	lr
 8014b02:	2304      	movs	r3, #4
 8014b04:	6033      	str	r3, [r6, #0]
 8014b06:	2f00      	cmp	r7, #0
 8014b08:	d1a2      	bne.n	8014a50 <rcl_validate_topic_name+0x4c>
 8014b0a:	e7c7      	b.n	8014a9c <rcl_validate_topic_name+0x98>
 8014b0c:	200b      	movs	r0, #11
 8014b0e:	e7a1      	b.n	8014a54 <rcl_validate_topic_name+0x50>
 8014b10:	2309      	movs	r3, #9
 8014b12:	6033      	str	r3, [r6, #0]
 8014b14:	2f00      	cmp	r7, #0
 8014b16:	d1c0      	bne.n	8014a9a <rcl_validate_topic_name+0x96>
 8014b18:	e7c0      	b.n	8014a9c <rcl_validate_topic_name+0x98>
 8014b1a:	2900      	cmp	r1, #0
 8014b1c:	d0ca      	beq.n	8014ab4 <rcl_validate_topic_name+0xb0>
 8014b1e:	2306      	movs	r3, #6
 8014b20:	6033      	str	r3, [r6, #0]
 8014b22:	2f00      	cmp	r7, #0
 8014b24:	d1b9      	bne.n	8014a9a <rcl_validate_topic_name+0x96>
 8014b26:	e7b9      	b.n	8014a9c <rcl_validate_topic_name+0x98>
 8014b28:	2c00      	cmp	r4, #0
 8014b2a:	d0c3      	beq.n	8014ab4 <rcl_validate_topic_name+0xb0>
 8014b2c:	2308      	movs	r3, #8
 8014b2e:	6033      	str	r3, [r6, #0]
 8014b30:	2f00      	cmp	r7, #0
 8014b32:	d1b2      	bne.n	8014a9a <rcl_validate_topic_name+0x96>
 8014b34:	e7b2      	b.n	8014a9c <rcl_validate_topic_name+0x98>
 8014b36:	2c00      	cmp	r4, #0
 8014b38:	d1f8      	bne.n	8014b2c <rcl_validate_topic_name+0x128>
 8014b3a:	460b      	mov	r3, r1
 8014b3c:	2401      	movs	r4, #1
 8014b3e:	e7b9      	b.n	8014ab4 <rcl_validate_topic_name+0xb0>
 8014b40:	2400      	movs	r4, #0
 8014b42:	e7b7      	b.n	8014ab4 <rcl_validate_topic_name+0xb0>
 8014b44:	2000      	movs	r0, #0
 8014b46:	6030      	str	r0, [r6, #0]
 8014b48:	e784      	b.n	8014a54 <rcl_validate_topic_name+0x50>
 8014b4a:	2205      	movs	r2, #5
 8014b4c:	6032      	str	r2, [r6, #0]
 8014b4e:	2f00      	cmp	r7, #0
 8014b50:	d1d2      	bne.n	8014af8 <rcl_validate_topic_name+0xf4>
 8014b52:	e7a3      	b.n	8014a9c <rcl_validate_topic_name+0x98>
 8014b54:	2c00      	cmp	r4, #0
 8014b56:	bf14      	ite	ne
 8014b58:	2308      	movne	r3, #8
 8014b5a:	2303      	moveq	r3, #3
 8014b5c:	6033      	str	r3, [r6, #0]
 8014b5e:	2f00      	cmp	r7, #0
 8014b60:	d19b      	bne.n	8014a9a <rcl_validate_topic_name+0x96>
 8014b62:	e79b      	b.n	8014a9c <rcl_validate_topic_name+0x98>
 8014b64:	2301      	movs	r3, #1
 8014b66:	e00a      	b.n	8014b7e <rcl_validate_topic_name+0x17a>
 8014b68:	2c01      	cmp	r4, #1
 8014b6a:	d013      	beq.n	8014b94 <rcl_validate_topic_name+0x190>
 8014b6c:	4299      	cmp	r1, r3
 8014b6e:	f104 0401 	add.w	r4, r4, #1
 8014b72:	f105 0501 	add.w	r5, r5, #1
 8014b76:	f103 0201 	add.w	r2, r3, #1
 8014b7a:	d9e3      	bls.n	8014b44 <rcl_validate_topic_name+0x140>
 8014b7c:	4613      	mov	r3, r2
 8014b7e:	45a0      	cmp	r8, r4
 8014b80:	d0f4      	beq.n	8014b6c <rcl_validate_topic_name+0x168>
 8014b82:	782a      	ldrb	r2, [r5, #0]
 8014b84:	2a2f      	cmp	r2, #47	; 0x2f
 8014b86:	d1ef      	bne.n	8014b68 <rcl_validate_topic_name+0x164>
 8014b88:	786a      	ldrb	r2, [r5, #1]
 8014b8a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014b8e:	0752      	lsls	r2, r2, #29
 8014b90:	d5ec      	bpl.n	8014b6c <rcl_validate_topic_name+0x168>
 8014b92:	e7ad      	b.n	8014af0 <rcl_validate_topic_name+0xec>
 8014b94:	2307      	movs	r3, #7
 8014b96:	6033      	str	r3, [r6, #0]
 8014b98:	2f00      	cmp	r7, #0
 8014b9a:	f43f af7f 	beq.w	8014a9c <rcl_validate_topic_name+0x98>
 8014b9e:	603c      	str	r4, [r7, #0]
 8014ba0:	2000      	movs	r0, #0
 8014ba2:	e757      	b.n	8014a54 <rcl_validate_topic_name+0x50>
 8014ba4:	080177dc 	.word	0x080177dc

08014ba8 <rcutils_split>:
 8014ba8:	b082      	sub	sp, #8
 8014baa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bae:	b08d      	sub	sp, #52	; 0x34
 8014bb0:	ac16      	add	r4, sp, #88	; 0x58
 8014bb2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8014bb4:	e884 000c 	stmia.w	r4, {r2, r3}
 8014bb8:	2f00      	cmp	r7, #0
 8014bba:	f000 80a8 	beq.w	8014d0e <rcutils_split+0x166>
 8014bbe:	4605      	mov	r5, r0
 8014bc0:	2800      	cmp	r0, #0
 8014bc2:	d07e      	beq.n	8014cc2 <rcutils_split+0x11a>
 8014bc4:	7803      	ldrb	r3, [r0, #0]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d07b      	beq.n	8014cc2 <rcutils_split+0x11a>
 8014bca:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 8014bce:	460e      	mov	r6, r1
 8014bd0:	9203      	str	r2, [sp, #12]
 8014bd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bd6:	f107 0408 	add.w	r4, r7, #8
 8014bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014bdc:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 8014be0:	f8c4 b000 	str.w	fp, [r4]
 8014be4:	4628      	mov	r0, r5
 8014be6:	f7eb fb5b 	bl	80002a0 <strlen>
 8014bea:	782c      	ldrb	r4, [r5, #0]
 8014bec:	182b      	adds	r3, r5, r0
 8014bee:	1ba4      	subs	r4, r4, r6
 8014bf0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014bf4:	fab4 f484 	clz	r4, r4
 8014bf8:	42b3      	cmp	r3, r6
 8014bfa:	bf14      	ite	ne
 8014bfc:	4680      	movne	r8, r0
 8014bfe:	f1a0 0801 	subeq.w	r8, r0, #1
 8014c02:	0964      	lsrs	r4, r4, #5
 8014c04:	2001      	movs	r0, #1
 8014c06:	4544      	cmp	r4, r8
 8014c08:	6038      	str	r0, [r7, #0]
 8014c0a:	d26b      	bcs.n	8014ce4 <rcutils_split+0x13c>
 8014c0c:	192b      	adds	r3, r5, r4
 8014c0e:	eb05 0108 	add.w	r1, r5, r8
 8014c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c16:	42b2      	cmp	r2, r6
 8014c18:	bf04      	itt	eq
 8014c1a:	3001      	addeq	r0, #1
 8014c1c:	6038      	streq	r0, [r7, #0]
 8014c1e:	4299      	cmp	r1, r3
 8014c20:	d1f7      	bne.n	8014c12 <rcutils_split+0x6a>
 8014c22:	9b03      	ldr	r3, [sp, #12]
 8014c24:	0080      	lsls	r0, r0, #2
 8014c26:	4659      	mov	r1, fp
 8014c28:	4798      	blx	r3
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	6078      	str	r0, [r7, #4]
 8014c2e:	2800      	cmp	r0, #0
 8014c30:	d05f      	beq.n	8014cf2 <rcutils_split+0x14a>
 8014c32:	f04f 0a00 	mov.w	sl, #0
 8014c36:	46a1      	mov	r9, r4
 8014c38:	e002      	b.n	8014c40 <rcutils_split+0x98>
 8014c3a:	3401      	adds	r4, #1
 8014c3c:	45a0      	cmp	r8, r4
 8014c3e:	d922      	bls.n	8014c86 <rcutils_split+0xde>
 8014c40:	5d2a      	ldrb	r2, [r5, r4]
 8014c42:	42b2      	cmp	r2, r6
 8014c44:	d1f9      	bne.n	8014c3a <rcutils_split+0x92>
 8014c46:	45a1      	cmp	r9, r4
 8014c48:	eba4 0209 	sub.w	r2, r4, r9
 8014c4c:	d032      	beq.n	8014cb4 <rcutils_split+0x10c>
 8014c4e:	9302      	str	r3, [sp, #8]
 8014c50:	4659      	mov	r1, fp
 8014c52:	9b03      	ldr	r3, [sp, #12]
 8014c54:	9201      	str	r2, [sp, #4]
 8014c56:	1c90      	adds	r0, r2, #2
 8014c58:	4798      	blx	r3
 8014c5a:	9b02      	ldr	r3, [sp, #8]
 8014c5c:	9a01      	ldr	r2, [sp, #4]
 8014c5e:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8014c62:	1c51      	adds	r1, r2, #1
 8014c64:	687a      	ldr	r2, [r7, #4]
 8014c66:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 8014c6a:	eb05 0309 	add.w	r3, r5, r9
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	d04f      	beq.n	8014d12 <rcutils_split+0x16a>
 8014c72:	4a2b      	ldr	r2, [pc, #172]	; (8014d20 <rcutils_split+0x178>)
 8014c74:	f000 fcd0 	bl	8015618 <sniprintf>
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	f10a 0a01 	add.w	sl, sl, #1
 8014c7e:	3401      	adds	r4, #1
 8014c80:	45a0      	cmp	r8, r4
 8014c82:	46a1      	mov	r9, r4
 8014c84:	d8dc      	bhi.n	8014c40 <rcutils_split+0x98>
 8014c86:	45a1      	cmp	r9, r4
 8014c88:	d039      	beq.n	8014cfe <rcutils_split+0x156>
 8014c8a:	eba4 0409 	sub.w	r4, r4, r9
 8014c8e:	9301      	str	r3, [sp, #4]
 8014c90:	4659      	mov	r1, fp
 8014c92:	9b03      	ldr	r3, [sp, #12]
 8014c94:	1ca0      	adds	r0, r4, #2
 8014c96:	4798      	blx	r3
 8014c98:	9b01      	ldr	r3, [sp, #4]
 8014c9a:	6879      	ldr	r1, [r7, #4]
 8014c9c:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8014ca0:	4a1f      	ldr	r2, [pc, #124]	; (8014d20 <rcutils_split+0x178>)
 8014ca2:	f851 002a 	ldr.w	r0, [r1, sl, lsl #2]
 8014ca6:	eb05 0309 	add.w	r3, r5, r9
 8014caa:	1c61      	adds	r1, r4, #1
 8014cac:	f000 fcb4 	bl	8015618 <sniprintf>
 8014cb0:	2400      	movs	r4, #0
 8014cb2:	e011      	b.n	8014cd8 <rcutils_split+0x130>
 8014cb4:	683a      	ldr	r2, [r7, #0]
 8014cb6:	3a01      	subs	r2, #1
 8014cb8:	2100      	movs	r1, #0
 8014cba:	603a      	str	r2, [r7, #0]
 8014cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8014cc0:	e7dd      	b.n	8014c7e <rcutils_split+0xd6>
 8014cc2:	a804      	add	r0, sp, #16
 8014cc4:	ac04      	add	r4, sp, #16
 8014cc6:	f000 f82d 	bl	8014d24 <rcutils_get_zero_initialized_string_array>
 8014cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ccc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014cce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8014cd2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8014cd6:	2400      	movs	r4, #0
 8014cd8:	4620      	mov	r0, r4
 8014cda:	b00d      	add	sp, #52	; 0x34
 8014cdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ce0:	b002      	add	sp, #8
 8014ce2:	4770      	bx	lr
 8014ce4:	9b03      	ldr	r3, [sp, #12]
 8014ce6:	4659      	mov	r1, fp
 8014ce8:	2004      	movs	r0, #4
 8014cea:	4798      	blx	r3
 8014cec:	4603      	mov	r3, r0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	b928      	cbnz	r0, 8014cfe <rcutils_split+0x156>
 8014cf2:	4638      	mov	r0, r7
 8014cf4:	f000 f834 	bl	8014d60 <rcutils_string_array_fini>
 8014cf8:	b970      	cbnz	r0, 8014d18 <rcutils_split+0x170>
 8014cfa:	2402      	movs	r4, #2
 8014cfc:	e7ec      	b.n	8014cd8 <rcutils_split+0x130>
 8014cfe:	683a      	ldr	r2, [r7, #0]
 8014d00:	3a01      	subs	r2, #1
 8014d02:	2100      	movs	r1, #0
 8014d04:	603a      	str	r2, [r7, #0]
 8014d06:	460c      	mov	r4, r1
 8014d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8014d0c:	e7e4      	b.n	8014cd8 <rcutils_split+0x130>
 8014d0e:	240b      	movs	r4, #11
 8014d10:	e7e2      	b.n	8014cd8 <rcutils_split+0x130>
 8014d12:	f8c7 a000 	str.w	sl, [r7]
 8014d16:	e7ec      	b.n	8014cf2 <rcutils_split+0x14a>
 8014d18:	f7f5 fb66 	bl	800a3e8 <rcutils_reset_error>
 8014d1c:	2402      	movs	r4, #2
 8014d1e:	e7db      	b.n	8014cd8 <rcutils_split+0x130>
 8014d20:	08016bc0 	.word	0x08016bc0

08014d24 <rcutils_get_zero_initialized_string_array>:
 8014d24:	b570      	push	{r4, r5, r6, lr}
 8014d26:	b086      	sub	sp, #24
 8014d28:	4606      	mov	r6, r0
 8014d2a:	4668      	mov	r0, sp
 8014d2c:	f7f5 fa5a 	bl	800a1e4 <rcutils_get_zero_initialized_allocator>
 8014d30:	4b0a      	ldr	r3, [pc, #40]	; (8014d5c <rcutils_get_zero_initialized_string_array+0x38>)
 8014d32:	46ee      	mov	lr, sp
 8014d34:	f103 0508 	add.w	r5, r3, #8
 8014d38:	469c      	mov	ip, r3
 8014d3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d40:	f8de 3000 	ldr.w	r3, [lr]
 8014d44:	602b      	str	r3, [r5, #0]
 8014d46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d4a:	4634      	mov	r4, r6
 8014d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d4e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8014d52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014d56:	4630      	mov	r0, r6
 8014d58:	b006      	add	sp, #24
 8014d5a:	bd70      	pop	{r4, r5, r6, pc}
 8014d5c:	200112a4 	.word	0x200112a4

08014d60 <rcutils_string_array_fini>:
 8014d60:	b320      	cbz	r0, 8014dac <rcutils_string_array_fini+0x4c>
 8014d62:	b570      	push	{r4, r5, r6, lr}
 8014d64:	4604      	mov	r4, r0
 8014d66:	6840      	ldr	r0, [r0, #4]
 8014d68:	b1d8      	cbz	r0, 8014da2 <rcutils_string_array_fini+0x42>
 8014d6a:	f104 0008 	add.w	r0, r4, #8
 8014d6e:	f7f5 fa73 	bl	800a258 <rcutils_allocator_is_valid>
 8014d72:	b1b8      	cbz	r0, 8014da4 <rcutils_string_array_fini+0x44>
 8014d74:	6823      	ldr	r3, [r4, #0]
 8014d76:	b1bb      	cbz	r3, 8014da8 <rcutils_string_array_fini+0x48>
 8014d78:	2500      	movs	r5, #0
 8014d7a:	6860      	ldr	r0, [r4, #4]
 8014d7c:	462e      	mov	r6, r5
 8014d7e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8014d82:	68e3      	ldr	r3, [r4, #12]
 8014d84:	69a1      	ldr	r1, [r4, #24]
 8014d86:	4798      	blx	r3
 8014d88:	e9d4 3000 	ldrd	r3, r0, [r4]
 8014d8c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8014d90:	3501      	adds	r5, #1
 8014d92:	429d      	cmp	r5, r3
 8014d94:	d3f3      	bcc.n	8014d7e <rcutils_string_array_fini+0x1e>
 8014d96:	68e3      	ldr	r3, [r4, #12]
 8014d98:	69a1      	ldr	r1, [r4, #24]
 8014d9a:	4798      	blx	r3
 8014d9c:	2000      	movs	r0, #0
 8014d9e:	e9c4 0000 	strd	r0, r0, [r4]
 8014da2:	bd70      	pop	{r4, r5, r6, pc}
 8014da4:	200b      	movs	r0, #11
 8014da6:	bd70      	pop	{r4, r5, r6, pc}
 8014da8:	6860      	ldr	r0, [r4, #4]
 8014daa:	e7f4      	b.n	8014d96 <rcutils_string_array_fini+0x36>
 8014dac:	200b      	movs	r0, #11
 8014dae:	4770      	bx	lr

08014db0 <rmw_get_zero_initialized_discovery_options>:
 8014db0:	b510      	push	{r4, lr}
 8014db2:	2220      	movs	r2, #32
 8014db4:	4604      	mov	r4, r0
 8014db6:	2100      	movs	r1, #0
 8014db8:	f000 fd08 	bl	80157cc <memset>
 8014dbc:	4620      	mov	r0, r4
 8014dbe:	bd10      	pop	{r4, pc}

08014dc0 <rmw_discovery_options_init>:
 8014dc0:	b338      	cbz	r0, 8014e12 <rmw_discovery_options_init+0x52>
 8014dc2:	b570      	push	{r4, r5, r6, lr}
 8014dc4:	4604      	mov	r4, r0
 8014dc6:	4610      	mov	r0, r2
 8014dc8:	460e      	mov	r6, r1
 8014dca:	4615      	mov	r5, r2
 8014dcc:	f7f5 fa44 	bl	800a258 <rcutils_allocator_is_valid>
 8014dd0:	b1d8      	cbz	r0, 8014e0a <rmw_discovery_options_init+0x4a>
 8014dd2:	68a3      	ldr	r3, [r4, #8]
 8014dd4:	b9cb      	cbnz	r3, 8014e0a <rmw_discovery_options_init+0x4a>
 8014dd6:	6863      	ldr	r3, [r4, #4]
 8014dd8:	b9bb      	cbnz	r3, 8014e0a <rmw_discovery_options_init+0x4a>
 8014dda:	7823      	ldrb	r3, [r4, #0]
 8014ddc:	b90b      	cbnz	r3, 8014de2 <rmw_discovery_options_init+0x22>
 8014dde:	2302      	movs	r3, #2
 8014de0:	7023      	strb	r3, [r4, #0]
 8014de2:	b1a6      	cbz	r6, 8014e0e <rmw_discovery_options_init+0x4e>
 8014de4:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8014de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014dec:	4630      	mov	r0, r6
 8014dee:	4798      	blx	r3
 8014df0:	6060      	str	r0, [r4, #4]
 8014df2:	b180      	cbz	r0, 8014e16 <rmw_discovery_options_init+0x56>
 8014df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014df6:	f104 0c0c 	add.w	ip, r4, #12
 8014dfa:	60a6      	str	r6, [r4, #8]
 8014dfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e00:	682b      	ldr	r3, [r5, #0]
 8014e02:	f8cc 3000 	str.w	r3, [ip]
 8014e06:	2000      	movs	r0, #0
 8014e08:	bd70      	pop	{r4, r5, r6, pc}
 8014e0a:	200b      	movs	r0, #11
 8014e0c:	bd70      	pop	{r4, r5, r6, pc}
 8014e0e:	4630      	mov	r0, r6
 8014e10:	bd70      	pop	{r4, r5, r6, pc}
 8014e12:	200b      	movs	r0, #11
 8014e14:	4770      	bx	lr
 8014e16:	200a      	movs	r0, #10
 8014e18:	bd70      	pop	{r4, r5, r6, pc}
 8014e1a:	bf00      	nop

08014e1c <on_status>:
 8014e1c:	b082      	sub	sp, #8
 8014e1e:	b002      	add	sp, #8
 8014e20:	4770      	bx	lr
 8014e22:	bf00      	nop

08014e24 <on_topic>:
 8014e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e28:	4a22      	ldr	r2, [pc, #136]	; (8014eb4 <on_topic+0x90>)
 8014e2a:	b094      	sub	sp, #80	; 0x50
 8014e2c:	6812      	ldr	r2, [r2, #0]
 8014e2e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8014e30:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8014e34:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8014e38:	b3c2      	cbz	r2, 8014eac <on_topic+0x88>
 8014e3a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8014e3e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8014e42:	e001      	b.n	8014e48 <on_topic+0x24>
 8014e44:	6852      	ldr	r2, [r2, #4]
 8014e46:	b38a      	cbz	r2, 8014eac <on_topic+0x88>
 8014e48:	6894      	ldr	r4, [r2, #8]
 8014e4a:	8aa3      	ldrh	r3, [r4, #20]
 8014e4c:	428b      	cmp	r3, r1
 8014e4e:	d1f9      	bne.n	8014e44 <on_topic+0x20>
 8014e50:	7da3      	ldrb	r3, [r4, #22]
 8014e52:	4283      	cmp	r3, r0
 8014e54:	d1f6      	bne.n	8014e44 <on_topic+0x20>
 8014e56:	2248      	movs	r2, #72	; 0x48
 8014e58:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014e5c:	4668      	mov	r0, sp
 8014e5e:	f000 fd90 	bl	8015982 <memcpy>
 8014e62:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8014e66:	cb0c      	ldmia	r3, {r2, r3}
 8014e68:	4620      	mov	r0, r4
 8014e6a:	f7f5 fecd 	bl	800ac08 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014e6e:	4607      	mov	r7, r0
 8014e70:	b1e0      	cbz	r0, 8014eac <on_topic+0x88>
 8014e72:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8014e76:	4632      	mov	r2, r6
 8014e78:	4628      	mov	r0, r5
 8014e7a:	f108 0110 	add.w	r1, r8, #16
 8014e7e:	f7fd feb7 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 8014e82:	b930      	cbnz	r0, 8014e92 <on_topic+0x6e>
 8014e84:	480c      	ldr	r0, [pc, #48]	; (8014eb8 <on_topic+0x94>)
 8014e86:	4639      	mov	r1, r7
 8014e88:	b014      	add	sp, #80	; 0x50
 8014e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e8e:	f7fc bc49 	b.w	8011724 <put_memory>
 8014e92:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8014e96:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 8014e9a:	f7fd fda1 	bl	80129e0 <rmw_uros_epoch_nanos>
 8014e9e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8014ea2:	2305      	movs	r3, #5
 8014ea4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014ea8:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8014eac:	b014      	add	sp, #80	; 0x50
 8014eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eb2:	bf00      	nop
 8014eb4:	20011064 	.word	0x20011064
 8014eb8:	20011054 	.word	0x20011054

08014ebc <on_request>:
 8014ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ec0:	4823      	ldr	r0, [pc, #140]	; (8014f50 <on_request+0x94>)
 8014ec2:	b094      	sub	sp, #80	; 0x50
 8014ec4:	6800      	ldr	r0, [r0, #0]
 8014ec6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8014ec8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8014ecc:	9113      	str	r1, [sp, #76]	; 0x4c
 8014ece:	2800      	cmp	r0, #0
 8014ed0:	d03b      	beq.n	8014f4a <on_request+0x8e>
 8014ed2:	461d      	mov	r5, r3
 8014ed4:	e001      	b.n	8014eda <on_request+0x1e>
 8014ed6:	6840      	ldr	r0, [r0, #4]
 8014ed8:	b3b8      	cbz	r0, 8014f4a <on_request+0x8e>
 8014eda:	6884      	ldr	r4, [r0, #8]
 8014edc:	8b21      	ldrh	r1, [r4, #24]
 8014ede:	4291      	cmp	r1, r2
 8014ee0:	d1f9      	bne.n	8014ed6 <on_request+0x1a>
 8014ee2:	2248      	movs	r2, #72	; 0x48
 8014ee4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8014ee8:	4668      	mov	r0, sp
 8014eea:	f000 fd4a 	bl	8015982 <memcpy>
 8014eee:	f104 0320 	add.w	r3, r4, #32
 8014ef2:	cb0c      	ldmia	r3, {r2, r3}
 8014ef4:	4620      	mov	r0, r4
 8014ef6:	f7f5 fe87 	bl	800ac08 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014efa:	4680      	mov	r8, r0
 8014efc:	b328      	cbz	r0, 8014f4a <on_request+0x8e>
 8014efe:	4638      	mov	r0, r7
 8014f00:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014f04:	4632      	mov	r2, r6
 8014f06:	f107 0110 	add.w	r1, r7, #16
 8014f0a:	f7fd fe71 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 8014f0e:	b930      	cbnz	r0, 8014f1e <on_request+0x62>
 8014f10:	4810      	ldr	r0, [pc, #64]	; (8014f54 <on_request+0x98>)
 8014f12:	4641      	mov	r1, r8
 8014f14:	b014      	add	sp, #80	; 0x50
 8014f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f1a:	f7fc bc03 	b.w	8011724 <put_memory>
 8014f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f20:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8014f24:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8014f28:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8014f2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014f34:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014f38:	f7fd fd52 	bl	80129e0 <rmw_uros_epoch_nanos>
 8014f3c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8014f40:	2303      	movs	r3, #3
 8014f42:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014f46:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8014f4a:	b014      	add	sp, #80	; 0x50
 8014f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f50:	20011034 	.word	0x20011034
 8014f54:	20011054 	.word	0x20011054

08014f58 <on_reply>:
 8014f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f5c:	4821      	ldr	r0, [pc, #132]	; (8014fe4 <on_reply+0x8c>)
 8014f5e:	b094      	sub	sp, #80	; 0x50
 8014f60:	6800      	ldr	r0, [r0, #0]
 8014f62:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8014f64:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8014f68:	9113      	str	r1, [sp, #76]	; 0x4c
 8014f6a:	b3b8      	cbz	r0, 8014fdc <on_reply+0x84>
 8014f6c:	461d      	mov	r5, r3
 8014f6e:	e001      	b.n	8014f74 <on_reply+0x1c>
 8014f70:	6840      	ldr	r0, [r0, #4]
 8014f72:	b398      	cbz	r0, 8014fdc <on_reply+0x84>
 8014f74:	6884      	ldr	r4, [r0, #8]
 8014f76:	8b21      	ldrh	r1, [r4, #24]
 8014f78:	4291      	cmp	r1, r2
 8014f7a:	d1f9      	bne.n	8014f70 <on_reply+0x18>
 8014f7c:	2248      	movs	r2, #72	; 0x48
 8014f7e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8014f82:	4668      	mov	r0, sp
 8014f84:	f000 fcfd 	bl	8015982 <memcpy>
 8014f88:	f104 0320 	add.w	r3, r4, #32
 8014f8c:	cb0c      	ldmia	r3, {r2, r3}
 8014f8e:	4620      	mov	r0, r4
 8014f90:	f7f5 fe3a 	bl	800ac08 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014f94:	4680      	mov	r8, r0
 8014f96:	b308      	cbz	r0, 8014fdc <on_reply+0x84>
 8014f98:	4638      	mov	r0, r7
 8014f9a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014f9e:	4632      	mov	r2, r6
 8014fa0:	f107 0110 	add.w	r1, r7, #16
 8014fa4:	f7fd fe24 	bl	8012bf0 <ucdr_deserialize_array_uint8_t>
 8014fa8:	b930      	cbnz	r0, 8014fb8 <on_reply+0x60>
 8014faa:	480f      	ldr	r0, [pc, #60]	; (8014fe8 <on_reply+0x90>)
 8014fac:	4641      	mov	r1, r8
 8014fae:	b014      	add	sp, #80	; 0x50
 8014fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fb4:	f7fc bbb6 	b.w	8011724 <put_memory>
 8014fb8:	2200      	movs	r2, #0
 8014fba:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 8014fbe:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8014fc2:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8014fc6:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 8014fca:	f7fd fd09 	bl	80129e0 <rmw_uros_epoch_nanos>
 8014fce:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8014fd2:	2304      	movs	r3, #4
 8014fd4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014fd8:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8014fdc:	b014      	add	sp, #80	; 0x50
 8014fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fe2:	bf00      	nop
 8014fe4:	2000c748 	.word	0x2000c748
 8014fe8:	20011054 	.word	0x20011054

08014fec <calloc>:
 8014fec:	4b02      	ldr	r3, [pc, #8]	; (8014ff8 <calloc+0xc>)
 8014fee:	460a      	mov	r2, r1
 8014ff0:	4601      	mov	r1, r0
 8014ff2:	6818      	ldr	r0, [r3, #0]
 8014ff4:	f000 b802 	b.w	8014ffc <_calloc_r>
 8014ff8:	2000085c 	.word	0x2000085c

08014ffc <_calloc_r>:
 8014ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ffe:	fba1 2402 	umull	r2, r4, r1, r2
 8015002:	b94c      	cbnz	r4, 8015018 <_calloc_r+0x1c>
 8015004:	4611      	mov	r1, r2
 8015006:	9201      	str	r2, [sp, #4]
 8015008:	f000 f886 	bl	8015118 <_malloc_r>
 801500c:	9a01      	ldr	r2, [sp, #4]
 801500e:	4605      	mov	r5, r0
 8015010:	b930      	cbnz	r0, 8015020 <_calloc_r+0x24>
 8015012:	4628      	mov	r0, r5
 8015014:	b003      	add	sp, #12
 8015016:	bd30      	pop	{r4, r5, pc}
 8015018:	220c      	movs	r2, #12
 801501a:	6002      	str	r2, [r0, #0]
 801501c:	2500      	movs	r5, #0
 801501e:	e7f8      	b.n	8015012 <_calloc_r+0x16>
 8015020:	4621      	mov	r1, r4
 8015022:	f000 fbd3 	bl	80157cc <memset>
 8015026:	e7f4      	b.n	8015012 <_calloc_r+0x16>

08015028 <getenv>:
 8015028:	b507      	push	{r0, r1, r2, lr}
 801502a:	4b04      	ldr	r3, [pc, #16]	; (801503c <getenv+0x14>)
 801502c:	4601      	mov	r1, r0
 801502e:	aa01      	add	r2, sp, #4
 8015030:	6818      	ldr	r0, [r3, #0]
 8015032:	f000 f805 	bl	8015040 <_findenv_r>
 8015036:	b003      	add	sp, #12
 8015038:	f85d fb04 	ldr.w	pc, [sp], #4
 801503c:	2000085c 	.word	0x2000085c

08015040 <_findenv_r>:
 8015040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015044:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80150b4 <_findenv_r+0x74>
 8015048:	4607      	mov	r7, r0
 801504a:	4689      	mov	r9, r1
 801504c:	4616      	mov	r6, r2
 801504e:	f000 fcc5 	bl	80159dc <__env_lock>
 8015052:	f8da 4000 	ldr.w	r4, [sl]
 8015056:	b134      	cbz	r4, 8015066 <_findenv_r+0x26>
 8015058:	464b      	mov	r3, r9
 801505a:	4698      	mov	r8, r3
 801505c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015060:	b13a      	cbz	r2, 8015072 <_findenv_r+0x32>
 8015062:	2a3d      	cmp	r2, #61	; 0x3d
 8015064:	d1f9      	bne.n	801505a <_findenv_r+0x1a>
 8015066:	4638      	mov	r0, r7
 8015068:	f000 fcbe 	bl	80159e8 <__env_unlock>
 801506c:	2000      	movs	r0, #0
 801506e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015072:	eba8 0809 	sub.w	r8, r8, r9
 8015076:	46a3      	mov	fp, r4
 8015078:	f854 0b04 	ldr.w	r0, [r4], #4
 801507c:	2800      	cmp	r0, #0
 801507e:	d0f2      	beq.n	8015066 <_findenv_r+0x26>
 8015080:	4642      	mov	r2, r8
 8015082:	4649      	mov	r1, r9
 8015084:	f000 fbb7 	bl	80157f6 <strncmp>
 8015088:	2800      	cmp	r0, #0
 801508a:	d1f4      	bne.n	8015076 <_findenv_r+0x36>
 801508c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015090:	eb03 0508 	add.w	r5, r3, r8
 8015094:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015098:	2b3d      	cmp	r3, #61	; 0x3d
 801509a:	d1ec      	bne.n	8015076 <_findenv_r+0x36>
 801509c:	f8da 3000 	ldr.w	r3, [sl]
 80150a0:	ebab 0303 	sub.w	r3, fp, r3
 80150a4:	109b      	asrs	r3, r3, #2
 80150a6:	4638      	mov	r0, r7
 80150a8:	6033      	str	r3, [r6, #0]
 80150aa:	f000 fc9d 	bl	80159e8 <__env_unlock>
 80150ae:	1c68      	adds	r0, r5, #1
 80150b0:	e7dd      	b.n	801506e <_findenv_r+0x2e>
 80150b2:	bf00      	nop
 80150b4:	20000000 	.word	0x20000000

080150b8 <malloc>:
 80150b8:	4b02      	ldr	r3, [pc, #8]	; (80150c4 <malloc+0xc>)
 80150ba:	4601      	mov	r1, r0
 80150bc:	6818      	ldr	r0, [r3, #0]
 80150be:	f000 b82b 	b.w	8015118 <_malloc_r>
 80150c2:	bf00      	nop
 80150c4:	2000085c 	.word	0x2000085c

080150c8 <free>:
 80150c8:	4b02      	ldr	r3, [pc, #8]	; (80150d4 <free+0xc>)
 80150ca:	4601      	mov	r1, r0
 80150cc:	6818      	ldr	r0, [r3, #0]
 80150ce:	f000 bc91 	b.w	80159f4 <_free_r>
 80150d2:	bf00      	nop
 80150d4:	2000085c 	.word	0x2000085c

080150d8 <sbrk_aligned>:
 80150d8:	b570      	push	{r4, r5, r6, lr}
 80150da:	4e0e      	ldr	r6, [pc, #56]	; (8015114 <sbrk_aligned+0x3c>)
 80150dc:	460c      	mov	r4, r1
 80150de:	6831      	ldr	r1, [r6, #0]
 80150e0:	4605      	mov	r5, r0
 80150e2:	b911      	cbnz	r1, 80150ea <sbrk_aligned+0x12>
 80150e4:	f000 fbf6 	bl	80158d4 <_sbrk_r>
 80150e8:	6030      	str	r0, [r6, #0]
 80150ea:	4621      	mov	r1, r4
 80150ec:	4628      	mov	r0, r5
 80150ee:	f000 fbf1 	bl	80158d4 <_sbrk_r>
 80150f2:	1c43      	adds	r3, r0, #1
 80150f4:	d00a      	beq.n	801510c <sbrk_aligned+0x34>
 80150f6:	1cc4      	adds	r4, r0, #3
 80150f8:	f024 0403 	bic.w	r4, r4, #3
 80150fc:	42a0      	cmp	r0, r4
 80150fe:	d007      	beq.n	8015110 <sbrk_aligned+0x38>
 8015100:	1a21      	subs	r1, r4, r0
 8015102:	4628      	mov	r0, r5
 8015104:	f000 fbe6 	bl	80158d4 <_sbrk_r>
 8015108:	3001      	adds	r0, #1
 801510a:	d101      	bne.n	8015110 <sbrk_aligned+0x38>
 801510c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015110:	4620      	mov	r0, r4
 8015112:	bd70      	pop	{r4, r5, r6, pc}
 8015114:	200112c4 	.word	0x200112c4

08015118 <_malloc_r>:
 8015118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801511c:	1ccd      	adds	r5, r1, #3
 801511e:	f025 0503 	bic.w	r5, r5, #3
 8015122:	3508      	adds	r5, #8
 8015124:	2d0c      	cmp	r5, #12
 8015126:	bf38      	it	cc
 8015128:	250c      	movcc	r5, #12
 801512a:	2d00      	cmp	r5, #0
 801512c:	4607      	mov	r7, r0
 801512e:	db01      	blt.n	8015134 <_malloc_r+0x1c>
 8015130:	42a9      	cmp	r1, r5
 8015132:	d905      	bls.n	8015140 <_malloc_r+0x28>
 8015134:	230c      	movs	r3, #12
 8015136:	603b      	str	r3, [r7, #0]
 8015138:	2600      	movs	r6, #0
 801513a:	4630      	mov	r0, r6
 801513c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015140:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015214 <_malloc_r+0xfc>
 8015144:	f000 f868 	bl	8015218 <__malloc_lock>
 8015148:	f8d8 3000 	ldr.w	r3, [r8]
 801514c:	461c      	mov	r4, r3
 801514e:	bb5c      	cbnz	r4, 80151a8 <_malloc_r+0x90>
 8015150:	4629      	mov	r1, r5
 8015152:	4638      	mov	r0, r7
 8015154:	f7ff ffc0 	bl	80150d8 <sbrk_aligned>
 8015158:	1c43      	adds	r3, r0, #1
 801515a:	4604      	mov	r4, r0
 801515c:	d155      	bne.n	801520a <_malloc_r+0xf2>
 801515e:	f8d8 4000 	ldr.w	r4, [r8]
 8015162:	4626      	mov	r6, r4
 8015164:	2e00      	cmp	r6, #0
 8015166:	d145      	bne.n	80151f4 <_malloc_r+0xdc>
 8015168:	2c00      	cmp	r4, #0
 801516a:	d048      	beq.n	80151fe <_malloc_r+0xe6>
 801516c:	6823      	ldr	r3, [r4, #0]
 801516e:	4631      	mov	r1, r6
 8015170:	4638      	mov	r0, r7
 8015172:	eb04 0903 	add.w	r9, r4, r3
 8015176:	f000 fbad 	bl	80158d4 <_sbrk_r>
 801517a:	4581      	cmp	r9, r0
 801517c:	d13f      	bne.n	80151fe <_malloc_r+0xe6>
 801517e:	6821      	ldr	r1, [r4, #0]
 8015180:	1a6d      	subs	r5, r5, r1
 8015182:	4629      	mov	r1, r5
 8015184:	4638      	mov	r0, r7
 8015186:	f7ff ffa7 	bl	80150d8 <sbrk_aligned>
 801518a:	3001      	adds	r0, #1
 801518c:	d037      	beq.n	80151fe <_malloc_r+0xe6>
 801518e:	6823      	ldr	r3, [r4, #0]
 8015190:	442b      	add	r3, r5
 8015192:	6023      	str	r3, [r4, #0]
 8015194:	f8d8 3000 	ldr.w	r3, [r8]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d038      	beq.n	801520e <_malloc_r+0xf6>
 801519c:	685a      	ldr	r2, [r3, #4]
 801519e:	42a2      	cmp	r2, r4
 80151a0:	d12b      	bne.n	80151fa <_malloc_r+0xe2>
 80151a2:	2200      	movs	r2, #0
 80151a4:	605a      	str	r2, [r3, #4]
 80151a6:	e00f      	b.n	80151c8 <_malloc_r+0xb0>
 80151a8:	6822      	ldr	r2, [r4, #0]
 80151aa:	1b52      	subs	r2, r2, r5
 80151ac:	d41f      	bmi.n	80151ee <_malloc_r+0xd6>
 80151ae:	2a0b      	cmp	r2, #11
 80151b0:	d917      	bls.n	80151e2 <_malloc_r+0xca>
 80151b2:	1961      	adds	r1, r4, r5
 80151b4:	42a3      	cmp	r3, r4
 80151b6:	6025      	str	r5, [r4, #0]
 80151b8:	bf18      	it	ne
 80151ba:	6059      	strne	r1, [r3, #4]
 80151bc:	6863      	ldr	r3, [r4, #4]
 80151be:	bf08      	it	eq
 80151c0:	f8c8 1000 	streq.w	r1, [r8]
 80151c4:	5162      	str	r2, [r4, r5]
 80151c6:	604b      	str	r3, [r1, #4]
 80151c8:	4638      	mov	r0, r7
 80151ca:	f104 060b 	add.w	r6, r4, #11
 80151ce:	f000 f829 	bl	8015224 <__malloc_unlock>
 80151d2:	f026 0607 	bic.w	r6, r6, #7
 80151d6:	1d23      	adds	r3, r4, #4
 80151d8:	1af2      	subs	r2, r6, r3
 80151da:	d0ae      	beq.n	801513a <_malloc_r+0x22>
 80151dc:	1b9b      	subs	r3, r3, r6
 80151de:	50a3      	str	r3, [r4, r2]
 80151e0:	e7ab      	b.n	801513a <_malloc_r+0x22>
 80151e2:	42a3      	cmp	r3, r4
 80151e4:	6862      	ldr	r2, [r4, #4]
 80151e6:	d1dd      	bne.n	80151a4 <_malloc_r+0x8c>
 80151e8:	f8c8 2000 	str.w	r2, [r8]
 80151ec:	e7ec      	b.n	80151c8 <_malloc_r+0xb0>
 80151ee:	4623      	mov	r3, r4
 80151f0:	6864      	ldr	r4, [r4, #4]
 80151f2:	e7ac      	b.n	801514e <_malloc_r+0x36>
 80151f4:	4634      	mov	r4, r6
 80151f6:	6876      	ldr	r6, [r6, #4]
 80151f8:	e7b4      	b.n	8015164 <_malloc_r+0x4c>
 80151fa:	4613      	mov	r3, r2
 80151fc:	e7cc      	b.n	8015198 <_malloc_r+0x80>
 80151fe:	230c      	movs	r3, #12
 8015200:	603b      	str	r3, [r7, #0]
 8015202:	4638      	mov	r0, r7
 8015204:	f000 f80e 	bl	8015224 <__malloc_unlock>
 8015208:	e797      	b.n	801513a <_malloc_r+0x22>
 801520a:	6025      	str	r5, [r4, #0]
 801520c:	e7dc      	b.n	80151c8 <_malloc_r+0xb0>
 801520e:	605b      	str	r3, [r3, #4]
 8015210:	deff      	udf	#255	; 0xff
 8015212:	bf00      	nop
 8015214:	200112c0 	.word	0x200112c0

08015218 <__malloc_lock>:
 8015218:	4801      	ldr	r0, [pc, #4]	; (8015220 <__malloc_lock+0x8>)
 801521a:	f000 bba8 	b.w	801596e <__retarget_lock_acquire_recursive>
 801521e:	bf00      	nop
 8015220:	20011409 	.word	0x20011409

08015224 <__malloc_unlock>:
 8015224:	4801      	ldr	r0, [pc, #4]	; (801522c <__malloc_unlock+0x8>)
 8015226:	f000 bba3 	b.w	8015970 <__retarget_lock_release_recursive>
 801522a:	bf00      	nop
 801522c:	20011409 	.word	0x20011409

08015230 <srand>:
 8015230:	b538      	push	{r3, r4, r5, lr}
 8015232:	4b10      	ldr	r3, [pc, #64]	; (8015274 <srand+0x44>)
 8015234:	681d      	ldr	r5, [r3, #0]
 8015236:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015238:	4604      	mov	r4, r0
 801523a:	b9b3      	cbnz	r3, 801526a <srand+0x3a>
 801523c:	2018      	movs	r0, #24
 801523e:	f7ff ff3b 	bl	80150b8 <malloc>
 8015242:	4602      	mov	r2, r0
 8015244:	6328      	str	r0, [r5, #48]	; 0x30
 8015246:	b920      	cbnz	r0, 8015252 <srand+0x22>
 8015248:	4b0b      	ldr	r3, [pc, #44]	; (8015278 <srand+0x48>)
 801524a:	480c      	ldr	r0, [pc, #48]	; (801527c <srand+0x4c>)
 801524c:	2146      	movs	r1, #70	; 0x46
 801524e:	f000 fba7 	bl	80159a0 <__assert_func>
 8015252:	490b      	ldr	r1, [pc, #44]	; (8015280 <srand+0x50>)
 8015254:	4b0b      	ldr	r3, [pc, #44]	; (8015284 <srand+0x54>)
 8015256:	e9c0 1300 	strd	r1, r3, [r0]
 801525a:	4b0b      	ldr	r3, [pc, #44]	; (8015288 <srand+0x58>)
 801525c:	6083      	str	r3, [r0, #8]
 801525e:	230b      	movs	r3, #11
 8015260:	8183      	strh	r3, [r0, #12]
 8015262:	2100      	movs	r1, #0
 8015264:	2001      	movs	r0, #1
 8015266:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801526a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801526c:	2200      	movs	r2, #0
 801526e:	611c      	str	r4, [r3, #16]
 8015270:	615a      	str	r2, [r3, #20]
 8015272:	bd38      	pop	{r3, r4, r5, pc}
 8015274:	2000085c 	.word	0x2000085c
 8015278:	0801776c 	.word	0x0801776c
 801527c:	08017783 	.word	0x08017783
 8015280:	abcd330e 	.word	0xabcd330e
 8015284:	e66d1234 	.word	0xe66d1234
 8015288:	0005deec 	.word	0x0005deec

0801528c <rand>:
 801528c:	4b16      	ldr	r3, [pc, #88]	; (80152e8 <rand+0x5c>)
 801528e:	b510      	push	{r4, lr}
 8015290:	681c      	ldr	r4, [r3, #0]
 8015292:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015294:	b9b3      	cbnz	r3, 80152c4 <rand+0x38>
 8015296:	2018      	movs	r0, #24
 8015298:	f7ff ff0e 	bl	80150b8 <malloc>
 801529c:	4602      	mov	r2, r0
 801529e:	6320      	str	r0, [r4, #48]	; 0x30
 80152a0:	b920      	cbnz	r0, 80152ac <rand+0x20>
 80152a2:	4b12      	ldr	r3, [pc, #72]	; (80152ec <rand+0x60>)
 80152a4:	4812      	ldr	r0, [pc, #72]	; (80152f0 <rand+0x64>)
 80152a6:	2152      	movs	r1, #82	; 0x52
 80152a8:	f000 fb7a 	bl	80159a0 <__assert_func>
 80152ac:	4911      	ldr	r1, [pc, #68]	; (80152f4 <rand+0x68>)
 80152ae:	4b12      	ldr	r3, [pc, #72]	; (80152f8 <rand+0x6c>)
 80152b0:	e9c0 1300 	strd	r1, r3, [r0]
 80152b4:	4b11      	ldr	r3, [pc, #68]	; (80152fc <rand+0x70>)
 80152b6:	6083      	str	r3, [r0, #8]
 80152b8:	230b      	movs	r3, #11
 80152ba:	8183      	strh	r3, [r0, #12]
 80152bc:	2100      	movs	r1, #0
 80152be:	2001      	movs	r0, #1
 80152c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80152c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80152c6:	480e      	ldr	r0, [pc, #56]	; (8015300 <rand+0x74>)
 80152c8:	690b      	ldr	r3, [r1, #16]
 80152ca:	694c      	ldr	r4, [r1, #20]
 80152cc:	4a0d      	ldr	r2, [pc, #52]	; (8015304 <rand+0x78>)
 80152ce:	4358      	muls	r0, r3
 80152d0:	fb02 0004 	mla	r0, r2, r4, r0
 80152d4:	fba3 3202 	umull	r3, r2, r3, r2
 80152d8:	3301      	adds	r3, #1
 80152da:	eb40 0002 	adc.w	r0, r0, r2
 80152de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80152e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80152e6:	bd10      	pop	{r4, pc}
 80152e8:	2000085c 	.word	0x2000085c
 80152ec:	0801776c 	.word	0x0801776c
 80152f0:	08017783 	.word	0x08017783
 80152f4:	abcd330e 	.word	0xabcd330e
 80152f8:	e66d1234 	.word	0xe66d1234
 80152fc:	0005deec 	.word	0x0005deec
 8015300:	5851f42d 	.word	0x5851f42d
 8015304:	4c957f2d 	.word	0x4c957f2d

08015308 <realloc>:
 8015308:	4b02      	ldr	r3, [pc, #8]	; (8015314 <realloc+0xc>)
 801530a:	460a      	mov	r2, r1
 801530c:	4601      	mov	r1, r0
 801530e:	6818      	ldr	r0, [r3, #0]
 8015310:	f000 b802 	b.w	8015318 <_realloc_r>
 8015314:	2000085c 	.word	0x2000085c

08015318 <_realloc_r>:
 8015318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801531c:	4680      	mov	r8, r0
 801531e:	4614      	mov	r4, r2
 8015320:	460e      	mov	r6, r1
 8015322:	b921      	cbnz	r1, 801532e <_realloc_r+0x16>
 8015324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015328:	4611      	mov	r1, r2
 801532a:	f7ff bef5 	b.w	8015118 <_malloc_r>
 801532e:	b92a      	cbnz	r2, 801533c <_realloc_r+0x24>
 8015330:	f000 fb60 	bl	80159f4 <_free_r>
 8015334:	4625      	mov	r5, r4
 8015336:	4628      	mov	r0, r5
 8015338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801533c:	f000 fba6 	bl	8015a8c <_malloc_usable_size_r>
 8015340:	4284      	cmp	r4, r0
 8015342:	4607      	mov	r7, r0
 8015344:	d802      	bhi.n	801534c <_realloc_r+0x34>
 8015346:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801534a:	d812      	bhi.n	8015372 <_realloc_r+0x5a>
 801534c:	4621      	mov	r1, r4
 801534e:	4640      	mov	r0, r8
 8015350:	f7ff fee2 	bl	8015118 <_malloc_r>
 8015354:	4605      	mov	r5, r0
 8015356:	2800      	cmp	r0, #0
 8015358:	d0ed      	beq.n	8015336 <_realloc_r+0x1e>
 801535a:	42bc      	cmp	r4, r7
 801535c:	4622      	mov	r2, r4
 801535e:	4631      	mov	r1, r6
 8015360:	bf28      	it	cs
 8015362:	463a      	movcs	r2, r7
 8015364:	f000 fb0d 	bl	8015982 <memcpy>
 8015368:	4631      	mov	r1, r6
 801536a:	4640      	mov	r0, r8
 801536c:	f000 fb42 	bl	80159f4 <_free_r>
 8015370:	e7e1      	b.n	8015336 <_realloc_r+0x1e>
 8015372:	4635      	mov	r5, r6
 8015374:	e7df      	b.n	8015336 <_realloc_r+0x1e>
	...

08015378 <_strtoul_l.constprop.0>:
 8015378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801537c:	4f36      	ldr	r7, [pc, #216]	; (8015458 <_strtoul_l.constprop.0+0xe0>)
 801537e:	4686      	mov	lr, r0
 8015380:	460d      	mov	r5, r1
 8015382:	4628      	mov	r0, r5
 8015384:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015388:	5d3e      	ldrb	r6, [r7, r4]
 801538a:	f016 0608 	ands.w	r6, r6, #8
 801538e:	d1f8      	bne.n	8015382 <_strtoul_l.constprop.0+0xa>
 8015390:	2c2d      	cmp	r4, #45	; 0x2d
 8015392:	d130      	bne.n	80153f6 <_strtoul_l.constprop.0+0x7e>
 8015394:	782c      	ldrb	r4, [r5, #0]
 8015396:	2601      	movs	r6, #1
 8015398:	1c85      	adds	r5, r0, #2
 801539a:	2b00      	cmp	r3, #0
 801539c:	d057      	beq.n	801544e <_strtoul_l.constprop.0+0xd6>
 801539e:	2b10      	cmp	r3, #16
 80153a0:	d109      	bne.n	80153b6 <_strtoul_l.constprop.0+0x3e>
 80153a2:	2c30      	cmp	r4, #48	; 0x30
 80153a4:	d107      	bne.n	80153b6 <_strtoul_l.constprop.0+0x3e>
 80153a6:	7828      	ldrb	r0, [r5, #0]
 80153a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80153ac:	2858      	cmp	r0, #88	; 0x58
 80153ae:	d149      	bne.n	8015444 <_strtoul_l.constprop.0+0xcc>
 80153b0:	786c      	ldrb	r4, [r5, #1]
 80153b2:	2310      	movs	r3, #16
 80153b4:	3502      	adds	r5, #2
 80153b6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80153ba:	2700      	movs	r7, #0
 80153bc:	fbb8 f8f3 	udiv	r8, r8, r3
 80153c0:	fb03 f908 	mul.w	r9, r3, r8
 80153c4:	ea6f 0909 	mvn.w	r9, r9
 80153c8:	4638      	mov	r0, r7
 80153ca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80153ce:	f1bc 0f09 	cmp.w	ip, #9
 80153d2:	d815      	bhi.n	8015400 <_strtoul_l.constprop.0+0x88>
 80153d4:	4664      	mov	r4, ip
 80153d6:	42a3      	cmp	r3, r4
 80153d8:	dd23      	ble.n	8015422 <_strtoul_l.constprop.0+0xaa>
 80153da:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80153de:	d007      	beq.n	80153f0 <_strtoul_l.constprop.0+0x78>
 80153e0:	4580      	cmp	r8, r0
 80153e2:	d31b      	bcc.n	801541c <_strtoul_l.constprop.0+0xa4>
 80153e4:	d101      	bne.n	80153ea <_strtoul_l.constprop.0+0x72>
 80153e6:	45a1      	cmp	r9, r4
 80153e8:	db18      	blt.n	801541c <_strtoul_l.constprop.0+0xa4>
 80153ea:	fb00 4003 	mla	r0, r0, r3, r4
 80153ee:	2701      	movs	r7, #1
 80153f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80153f4:	e7e9      	b.n	80153ca <_strtoul_l.constprop.0+0x52>
 80153f6:	2c2b      	cmp	r4, #43	; 0x2b
 80153f8:	bf04      	itt	eq
 80153fa:	782c      	ldrbeq	r4, [r5, #0]
 80153fc:	1c85      	addeq	r5, r0, #2
 80153fe:	e7cc      	b.n	801539a <_strtoul_l.constprop.0+0x22>
 8015400:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015404:	f1bc 0f19 	cmp.w	ip, #25
 8015408:	d801      	bhi.n	801540e <_strtoul_l.constprop.0+0x96>
 801540a:	3c37      	subs	r4, #55	; 0x37
 801540c:	e7e3      	b.n	80153d6 <_strtoul_l.constprop.0+0x5e>
 801540e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015412:	f1bc 0f19 	cmp.w	ip, #25
 8015416:	d804      	bhi.n	8015422 <_strtoul_l.constprop.0+0xaa>
 8015418:	3c57      	subs	r4, #87	; 0x57
 801541a:	e7dc      	b.n	80153d6 <_strtoul_l.constprop.0+0x5e>
 801541c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015420:	e7e6      	b.n	80153f0 <_strtoul_l.constprop.0+0x78>
 8015422:	1c7b      	adds	r3, r7, #1
 8015424:	d106      	bne.n	8015434 <_strtoul_l.constprop.0+0xbc>
 8015426:	2322      	movs	r3, #34	; 0x22
 8015428:	f8ce 3000 	str.w	r3, [lr]
 801542c:	4638      	mov	r0, r7
 801542e:	b932      	cbnz	r2, 801543e <_strtoul_l.constprop.0+0xc6>
 8015430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015434:	b106      	cbz	r6, 8015438 <_strtoul_l.constprop.0+0xc0>
 8015436:	4240      	negs	r0, r0
 8015438:	2a00      	cmp	r2, #0
 801543a:	d0f9      	beq.n	8015430 <_strtoul_l.constprop.0+0xb8>
 801543c:	b107      	cbz	r7, 8015440 <_strtoul_l.constprop.0+0xc8>
 801543e:	1e69      	subs	r1, r5, #1
 8015440:	6011      	str	r1, [r2, #0]
 8015442:	e7f5      	b.n	8015430 <_strtoul_l.constprop.0+0xb8>
 8015444:	2430      	movs	r4, #48	; 0x30
 8015446:	2b00      	cmp	r3, #0
 8015448:	d1b5      	bne.n	80153b6 <_strtoul_l.constprop.0+0x3e>
 801544a:	2308      	movs	r3, #8
 801544c:	e7b3      	b.n	80153b6 <_strtoul_l.constprop.0+0x3e>
 801544e:	2c30      	cmp	r4, #48	; 0x30
 8015450:	d0a9      	beq.n	80153a6 <_strtoul_l.constprop.0+0x2e>
 8015452:	230a      	movs	r3, #10
 8015454:	e7af      	b.n	80153b6 <_strtoul_l.constprop.0+0x3e>
 8015456:	bf00      	nop
 8015458:	080177dc 	.word	0x080177dc

0801545c <strtoul>:
 801545c:	4613      	mov	r3, r2
 801545e:	460a      	mov	r2, r1
 8015460:	4601      	mov	r1, r0
 8015462:	4802      	ldr	r0, [pc, #8]	; (801546c <strtoul+0x10>)
 8015464:	6800      	ldr	r0, [r0, #0]
 8015466:	f7ff bf87 	b.w	8015378 <_strtoul_l.constprop.0>
 801546a:	bf00      	nop
 801546c:	2000085c 	.word	0x2000085c

08015470 <std>:
 8015470:	2300      	movs	r3, #0
 8015472:	b510      	push	{r4, lr}
 8015474:	4604      	mov	r4, r0
 8015476:	e9c0 3300 	strd	r3, r3, [r0]
 801547a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801547e:	6083      	str	r3, [r0, #8]
 8015480:	8181      	strh	r1, [r0, #12]
 8015482:	6643      	str	r3, [r0, #100]	; 0x64
 8015484:	81c2      	strh	r2, [r0, #14]
 8015486:	6183      	str	r3, [r0, #24]
 8015488:	4619      	mov	r1, r3
 801548a:	2208      	movs	r2, #8
 801548c:	305c      	adds	r0, #92	; 0x5c
 801548e:	f000 f99d 	bl	80157cc <memset>
 8015492:	4b0d      	ldr	r3, [pc, #52]	; (80154c8 <std+0x58>)
 8015494:	6263      	str	r3, [r4, #36]	; 0x24
 8015496:	4b0d      	ldr	r3, [pc, #52]	; (80154cc <std+0x5c>)
 8015498:	62a3      	str	r3, [r4, #40]	; 0x28
 801549a:	4b0d      	ldr	r3, [pc, #52]	; (80154d0 <std+0x60>)
 801549c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801549e:	4b0d      	ldr	r3, [pc, #52]	; (80154d4 <std+0x64>)
 80154a0:	6323      	str	r3, [r4, #48]	; 0x30
 80154a2:	4b0d      	ldr	r3, [pc, #52]	; (80154d8 <std+0x68>)
 80154a4:	6224      	str	r4, [r4, #32]
 80154a6:	429c      	cmp	r4, r3
 80154a8:	d006      	beq.n	80154b8 <std+0x48>
 80154aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80154ae:	4294      	cmp	r4, r2
 80154b0:	d002      	beq.n	80154b8 <std+0x48>
 80154b2:	33d0      	adds	r3, #208	; 0xd0
 80154b4:	429c      	cmp	r4, r3
 80154b6:	d105      	bne.n	80154c4 <std+0x54>
 80154b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80154bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154c0:	f000 ba54 	b.w	801596c <__retarget_lock_init_recursive>
 80154c4:	bd10      	pop	{r4, pc}
 80154c6:	bf00      	nop
 80154c8:	08015681 	.word	0x08015681
 80154cc:	080156a3 	.word	0x080156a3
 80154d0:	080156db 	.word	0x080156db
 80154d4:	080156ff 	.word	0x080156ff
 80154d8:	200112c8 	.word	0x200112c8

080154dc <stdio_exit_handler>:
 80154dc:	4a02      	ldr	r2, [pc, #8]	; (80154e8 <stdio_exit_handler+0xc>)
 80154de:	4903      	ldr	r1, [pc, #12]	; (80154ec <stdio_exit_handler+0x10>)
 80154e0:	4803      	ldr	r0, [pc, #12]	; (80154f0 <stdio_exit_handler+0x14>)
 80154e2:	f000 b869 	b.w	80155b8 <_fwalk_sglue>
 80154e6:	bf00      	nop
 80154e8:	20000804 	.word	0x20000804
 80154ec:	08016401 	.word	0x08016401
 80154f0:	20000810 	.word	0x20000810

080154f4 <cleanup_stdio>:
 80154f4:	6841      	ldr	r1, [r0, #4]
 80154f6:	4b0c      	ldr	r3, [pc, #48]	; (8015528 <cleanup_stdio+0x34>)
 80154f8:	4299      	cmp	r1, r3
 80154fa:	b510      	push	{r4, lr}
 80154fc:	4604      	mov	r4, r0
 80154fe:	d001      	beq.n	8015504 <cleanup_stdio+0x10>
 8015500:	f000 ff7e 	bl	8016400 <_fflush_r>
 8015504:	68a1      	ldr	r1, [r4, #8]
 8015506:	4b09      	ldr	r3, [pc, #36]	; (801552c <cleanup_stdio+0x38>)
 8015508:	4299      	cmp	r1, r3
 801550a:	d002      	beq.n	8015512 <cleanup_stdio+0x1e>
 801550c:	4620      	mov	r0, r4
 801550e:	f000 ff77 	bl	8016400 <_fflush_r>
 8015512:	68e1      	ldr	r1, [r4, #12]
 8015514:	4b06      	ldr	r3, [pc, #24]	; (8015530 <cleanup_stdio+0x3c>)
 8015516:	4299      	cmp	r1, r3
 8015518:	d004      	beq.n	8015524 <cleanup_stdio+0x30>
 801551a:	4620      	mov	r0, r4
 801551c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015520:	f000 bf6e 	b.w	8016400 <_fflush_r>
 8015524:	bd10      	pop	{r4, pc}
 8015526:	bf00      	nop
 8015528:	200112c8 	.word	0x200112c8
 801552c:	20011330 	.word	0x20011330
 8015530:	20011398 	.word	0x20011398

08015534 <global_stdio_init.part.0>:
 8015534:	b510      	push	{r4, lr}
 8015536:	4b0b      	ldr	r3, [pc, #44]	; (8015564 <global_stdio_init.part.0+0x30>)
 8015538:	4c0b      	ldr	r4, [pc, #44]	; (8015568 <global_stdio_init.part.0+0x34>)
 801553a:	4a0c      	ldr	r2, [pc, #48]	; (801556c <global_stdio_init.part.0+0x38>)
 801553c:	601a      	str	r2, [r3, #0]
 801553e:	4620      	mov	r0, r4
 8015540:	2200      	movs	r2, #0
 8015542:	2104      	movs	r1, #4
 8015544:	f7ff ff94 	bl	8015470 <std>
 8015548:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801554c:	2201      	movs	r2, #1
 801554e:	2109      	movs	r1, #9
 8015550:	f7ff ff8e 	bl	8015470 <std>
 8015554:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015558:	2202      	movs	r2, #2
 801555a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801555e:	2112      	movs	r1, #18
 8015560:	f7ff bf86 	b.w	8015470 <std>
 8015564:	20011400 	.word	0x20011400
 8015568:	200112c8 	.word	0x200112c8
 801556c:	080154dd 	.word	0x080154dd

08015570 <__sfp_lock_acquire>:
 8015570:	4801      	ldr	r0, [pc, #4]	; (8015578 <__sfp_lock_acquire+0x8>)
 8015572:	f000 b9fc 	b.w	801596e <__retarget_lock_acquire_recursive>
 8015576:	bf00      	nop
 8015578:	2001140a 	.word	0x2001140a

0801557c <__sfp_lock_release>:
 801557c:	4801      	ldr	r0, [pc, #4]	; (8015584 <__sfp_lock_release+0x8>)
 801557e:	f000 b9f7 	b.w	8015970 <__retarget_lock_release_recursive>
 8015582:	bf00      	nop
 8015584:	2001140a 	.word	0x2001140a

08015588 <__sinit>:
 8015588:	b510      	push	{r4, lr}
 801558a:	4604      	mov	r4, r0
 801558c:	f7ff fff0 	bl	8015570 <__sfp_lock_acquire>
 8015590:	6a23      	ldr	r3, [r4, #32]
 8015592:	b11b      	cbz	r3, 801559c <__sinit+0x14>
 8015594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015598:	f7ff bff0 	b.w	801557c <__sfp_lock_release>
 801559c:	4b04      	ldr	r3, [pc, #16]	; (80155b0 <__sinit+0x28>)
 801559e:	6223      	str	r3, [r4, #32]
 80155a0:	4b04      	ldr	r3, [pc, #16]	; (80155b4 <__sinit+0x2c>)
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d1f5      	bne.n	8015594 <__sinit+0xc>
 80155a8:	f7ff ffc4 	bl	8015534 <global_stdio_init.part.0>
 80155ac:	e7f2      	b.n	8015594 <__sinit+0xc>
 80155ae:	bf00      	nop
 80155b0:	080154f5 	.word	0x080154f5
 80155b4:	20011400 	.word	0x20011400

080155b8 <_fwalk_sglue>:
 80155b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155bc:	4607      	mov	r7, r0
 80155be:	4688      	mov	r8, r1
 80155c0:	4614      	mov	r4, r2
 80155c2:	2600      	movs	r6, #0
 80155c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80155c8:	f1b9 0901 	subs.w	r9, r9, #1
 80155cc:	d505      	bpl.n	80155da <_fwalk_sglue+0x22>
 80155ce:	6824      	ldr	r4, [r4, #0]
 80155d0:	2c00      	cmp	r4, #0
 80155d2:	d1f7      	bne.n	80155c4 <_fwalk_sglue+0xc>
 80155d4:	4630      	mov	r0, r6
 80155d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155da:	89ab      	ldrh	r3, [r5, #12]
 80155dc:	2b01      	cmp	r3, #1
 80155de:	d907      	bls.n	80155f0 <_fwalk_sglue+0x38>
 80155e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80155e4:	3301      	adds	r3, #1
 80155e6:	d003      	beq.n	80155f0 <_fwalk_sglue+0x38>
 80155e8:	4629      	mov	r1, r5
 80155ea:	4638      	mov	r0, r7
 80155ec:	47c0      	blx	r8
 80155ee:	4306      	orrs	r6, r0
 80155f0:	3568      	adds	r5, #104	; 0x68
 80155f2:	e7e9      	b.n	80155c8 <_fwalk_sglue+0x10>

080155f4 <iprintf>:
 80155f4:	b40f      	push	{r0, r1, r2, r3}
 80155f6:	b507      	push	{r0, r1, r2, lr}
 80155f8:	4906      	ldr	r1, [pc, #24]	; (8015614 <iprintf+0x20>)
 80155fa:	ab04      	add	r3, sp, #16
 80155fc:	6808      	ldr	r0, [r1, #0]
 80155fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015602:	6881      	ldr	r1, [r0, #8]
 8015604:	9301      	str	r3, [sp, #4]
 8015606:	f000 fbcb 	bl	8015da0 <_vfiprintf_r>
 801560a:	b003      	add	sp, #12
 801560c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015610:	b004      	add	sp, #16
 8015612:	4770      	bx	lr
 8015614:	2000085c 	.word	0x2000085c

08015618 <sniprintf>:
 8015618:	b40c      	push	{r2, r3}
 801561a:	b530      	push	{r4, r5, lr}
 801561c:	4b17      	ldr	r3, [pc, #92]	; (801567c <sniprintf+0x64>)
 801561e:	1e0c      	subs	r4, r1, #0
 8015620:	681d      	ldr	r5, [r3, #0]
 8015622:	b09d      	sub	sp, #116	; 0x74
 8015624:	da08      	bge.n	8015638 <sniprintf+0x20>
 8015626:	238b      	movs	r3, #139	; 0x8b
 8015628:	602b      	str	r3, [r5, #0]
 801562a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801562e:	b01d      	add	sp, #116	; 0x74
 8015630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015634:	b002      	add	sp, #8
 8015636:	4770      	bx	lr
 8015638:	f44f 7302 	mov.w	r3, #520	; 0x208
 801563c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015640:	bf14      	ite	ne
 8015642:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8015646:	4623      	moveq	r3, r4
 8015648:	9304      	str	r3, [sp, #16]
 801564a:	9307      	str	r3, [sp, #28]
 801564c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015650:	9002      	str	r0, [sp, #8]
 8015652:	9006      	str	r0, [sp, #24]
 8015654:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015658:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801565a:	ab21      	add	r3, sp, #132	; 0x84
 801565c:	a902      	add	r1, sp, #8
 801565e:	4628      	mov	r0, r5
 8015660:	9301      	str	r3, [sp, #4]
 8015662:	f000 fa75 	bl	8015b50 <_svfiprintf_r>
 8015666:	1c43      	adds	r3, r0, #1
 8015668:	bfbc      	itt	lt
 801566a:	238b      	movlt	r3, #139	; 0x8b
 801566c:	602b      	strlt	r3, [r5, #0]
 801566e:	2c00      	cmp	r4, #0
 8015670:	d0dd      	beq.n	801562e <sniprintf+0x16>
 8015672:	9b02      	ldr	r3, [sp, #8]
 8015674:	2200      	movs	r2, #0
 8015676:	701a      	strb	r2, [r3, #0]
 8015678:	e7d9      	b.n	801562e <sniprintf+0x16>
 801567a:	bf00      	nop
 801567c:	2000085c 	.word	0x2000085c

08015680 <__sread>:
 8015680:	b510      	push	{r4, lr}
 8015682:	460c      	mov	r4, r1
 8015684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015688:	f000 f912 	bl	80158b0 <_read_r>
 801568c:	2800      	cmp	r0, #0
 801568e:	bfab      	itete	ge
 8015690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015692:	89a3      	ldrhlt	r3, [r4, #12]
 8015694:	181b      	addge	r3, r3, r0
 8015696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801569a:	bfac      	ite	ge
 801569c:	6563      	strge	r3, [r4, #84]	; 0x54
 801569e:	81a3      	strhlt	r3, [r4, #12]
 80156a0:	bd10      	pop	{r4, pc}

080156a2 <__swrite>:
 80156a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156a6:	461f      	mov	r7, r3
 80156a8:	898b      	ldrh	r3, [r1, #12]
 80156aa:	05db      	lsls	r3, r3, #23
 80156ac:	4605      	mov	r5, r0
 80156ae:	460c      	mov	r4, r1
 80156b0:	4616      	mov	r6, r2
 80156b2:	d505      	bpl.n	80156c0 <__swrite+0x1e>
 80156b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156b8:	2302      	movs	r3, #2
 80156ba:	2200      	movs	r2, #0
 80156bc:	f000 f8e6 	bl	801588c <_lseek_r>
 80156c0:	89a3      	ldrh	r3, [r4, #12]
 80156c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80156c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80156ca:	81a3      	strh	r3, [r4, #12]
 80156cc:	4632      	mov	r2, r6
 80156ce:	463b      	mov	r3, r7
 80156d0:	4628      	mov	r0, r5
 80156d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80156d6:	f000 b90d 	b.w	80158f4 <_write_r>

080156da <__sseek>:
 80156da:	b510      	push	{r4, lr}
 80156dc:	460c      	mov	r4, r1
 80156de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156e2:	f000 f8d3 	bl	801588c <_lseek_r>
 80156e6:	1c43      	adds	r3, r0, #1
 80156e8:	89a3      	ldrh	r3, [r4, #12]
 80156ea:	bf15      	itete	ne
 80156ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80156ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80156f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80156f6:	81a3      	strheq	r3, [r4, #12]
 80156f8:	bf18      	it	ne
 80156fa:	81a3      	strhne	r3, [r4, #12]
 80156fc:	bd10      	pop	{r4, pc}

080156fe <__sclose>:
 80156fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015702:	f000 b8b3 	b.w	801586c <_close_r>

08015706 <_vsniprintf_r>:
 8015706:	b530      	push	{r4, r5, lr}
 8015708:	4614      	mov	r4, r2
 801570a:	2c00      	cmp	r4, #0
 801570c:	b09b      	sub	sp, #108	; 0x6c
 801570e:	4605      	mov	r5, r0
 8015710:	461a      	mov	r2, r3
 8015712:	da05      	bge.n	8015720 <_vsniprintf_r+0x1a>
 8015714:	238b      	movs	r3, #139	; 0x8b
 8015716:	6003      	str	r3, [r0, #0]
 8015718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801571c:	b01b      	add	sp, #108	; 0x6c
 801571e:	bd30      	pop	{r4, r5, pc}
 8015720:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015724:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015728:	bf14      	ite	ne
 801572a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801572e:	4623      	moveq	r3, r4
 8015730:	9302      	str	r3, [sp, #8]
 8015732:	9305      	str	r3, [sp, #20]
 8015734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015738:	9100      	str	r1, [sp, #0]
 801573a:	9104      	str	r1, [sp, #16]
 801573c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015740:	4669      	mov	r1, sp
 8015742:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015744:	f000 fa04 	bl	8015b50 <_svfiprintf_r>
 8015748:	1c43      	adds	r3, r0, #1
 801574a:	bfbc      	itt	lt
 801574c:	238b      	movlt	r3, #139	; 0x8b
 801574e:	602b      	strlt	r3, [r5, #0]
 8015750:	2c00      	cmp	r4, #0
 8015752:	d0e3      	beq.n	801571c <_vsniprintf_r+0x16>
 8015754:	9b00      	ldr	r3, [sp, #0]
 8015756:	2200      	movs	r2, #0
 8015758:	701a      	strb	r2, [r3, #0]
 801575a:	e7df      	b.n	801571c <_vsniprintf_r+0x16>

0801575c <vsniprintf>:
 801575c:	b507      	push	{r0, r1, r2, lr}
 801575e:	9300      	str	r3, [sp, #0]
 8015760:	4613      	mov	r3, r2
 8015762:	460a      	mov	r2, r1
 8015764:	4601      	mov	r1, r0
 8015766:	4803      	ldr	r0, [pc, #12]	; (8015774 <vsniprintf+0x18>)
 8015768:	6800      	ldr	r0, [r0, #0]
 801576a:	f7ff ffcc 	bl	8015706 <_vsniprintf_r>
 801576e:	b003      	add	sp, #12
 8015770:	f85d fb04 	ldr.w	pc, [sp], #4
 8015774:	2000085c 	.word	0x2000085c

08015778 <memcmp>:
 8015778:	b510      	push	{r4, lr}
 801577a:	3901      	subs	r1, #1
 801577c:	4402      	add	r2, r0
 801577e:	4290      	cmp	r0, r2
 8015780:	d101      	bne.n	8015786 <memcmp+0xe>
 8015782:	2000      	movs	r0, #0
 8015784:	e005      	b.n	8015792 <memcmp+0x1a>
 8015786:	7803      	ldrb	r3, [r0, #0]
 8015788:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801578c:	42a3      	cmp	r3, r4
 801578e:	d001      	beq.n	8015794 <memcmp+0x1c>
 8015790:	1b18      	subs	r0, r3, r4
 8015792:	bd10      	pop	{r4, pc}
 8015794:	3001      	adds	r0, #1
 8015796:	e7f2      	b.n	801577e <memcmp+0x6>

08015798 <memmove>:
 8015798:	4288      	cmp	r0, r1
 801579a:	b510      	push	{r4, lr}
 801579c:	eb01 0402 	add.w	r4, r1, r2
 80157a0:	d902      	bls.n	80157a8 <memmove+0x10>
 80157a2:	4284      	cmp	r4, r0
 80157a4:	4623      	mov	r3, r4
 80157a6:	d807      	bhi.n	80157b8 <memmove+0x20>
 80157a8:	1e43      	subs	r3, r0, #1
 80157aa:	42a1      	cmp	r1, r4
 80157ac:	d008      	beq.n	80157c0 <memmove+0x28>
 80157ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80157b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80157b6:	e7f8      	b.n	80157aa <memmove+0x12>
 80157b8:	4402      	add	r2, r0
 80157ba:	4601      	mov	r1, r0
 80157bc:	428a      	cmp	r2, r1
 80157be:	d100      	bne.n	80157c2 <memmove+0x2a>
 80157c0:	bd10      	pop	{r4, pc}
 80157c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80157c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80157ca:	e7f7      	b.n	80157bc <memmove+0x24>

080157cc <memset>:
 80157cc:	4402      	add	r2, r0
 80157ce:	4603      	mov	r3, r0
 80157d0:	4293      	cmp	r3, r2
 80157d2:	d100      	bne.n	80157d6 <memset+0xa>
 80157d4:	4770      	bx	lr
 80157d6:	f803 1b01 	strb.w	r1, [r3], #1
 80157da:	e7f9      	b.n	80157d0 <memset+0x4>

080157dc <strchr>:
 80157dc:	b2c9      	uxtb	r1, r1
 80157de:	4603      	mov	r3, r0
 80157e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80157e4:	b11a      	cbz	r2, 80157ee <strchr+0x12>
 80157e6:	428a      	cmp	r2, r1
 80157e8:	d1f9      	bne.n	80157de <strchr+0x2>
 80157ea:	4618      	mov	r0, r3
 80157ec:	4770      	bx	lr
 80157ee:	2900      	cmp	r1, #0
 80157f0:	bf18      	it	ne
 80157f2:	2300      	movne	r3, #0
 80157f4:	e7f9      	b.n	80157ea <strchr+0xe>

080157f6 <strncmp>:
 80157f6:	b510      	push	{r4, lr}
 80157f8:	b16a      	cbz	r2, 8015816 <strncmp+0x20>
 80157fa:	3901      	subs	r1, #1
 80157fc:	1884      	adds	r4, r0, r2
 80157fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015802:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015806:	429a      	cmp	r2, r3
 8015808:	d103      	bne.n	8015812 <strncmp+0x1c>
 801580a:	42a0      	cmp	r0, r4
 801580c:	d001      	beq.n	8015812 <strncmp+0x1c>
 801580e:	2a00      	cmp	r2, #0
 8015810:	d1f5      	bne.n	80157fe <strncmp+0x8>
 8015812:	1ad0      	subs	r0, r2, r3
 8015814:	bd10      	pop	{r4, pc}
 8015816:	4610      	mov	r0, r2
 8015818:	e7fc      	b.n	8015814 <strncmp+0x1e>

0801581a <strncpy>:
 801581a:	b510      	push	{r4, lr}
 801581c:	3901      	subs	r1, #1
 801581e:	4603      	mov	r3, r0
 8015820:	b132      	cbz	r2, 8015830 <strncpy+0x16>
 8015822:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015826:	f803 4b01 	strb.w	r4, [r3], #1
 801582a:	3a01      	subs	r2, #1
 801582c:	2c00      	cmp	r4, #0
 801582e:	d1f7      	bne.n	8015820 <strncpy+0x6>
 8015830:	441a      	add	r2, r3
 8015832:	2100      	movs	r1, #0
 8015834:	4293      	cmp	r3, r2
 8015836:	d100      	bne.n	801583a <strncpy+0x20>
 8015838:	bd10      	pop	{r4, pc}
 801583a:	f803 1b01 	strb.w	r1, [r3], #1
 801583e:	e7f9      	b.n	8015834 <strncpy+0x1a>

08015840 <strstr>:
 8015840:	780a      	ldrb	r2, [r1, #0]
 8015842:	b570      	push	{r4, r5, r6, lr}
 8015844:	b96a      	cbnz	r2, 8015862 <strstr+0x22>
 8015846:	bd70      	pop	{r4, r5, r6, pc}
 8015848:	429a      	cmp	r2, r3
 801584a:	d109      	bne.n	8015860 <strstr+0x20>
 801584c:	460c      	mov	r4, r1
 801584e:	4605      	mov	r5, r0
 8015850:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015854:	2b00      	cmp	r3, #0
 8015856:	d0f6      	beq.n	8015846 <strstr+0x6>
 8015858:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801585c:	429e      	cmp	r6, r3
 801585e:	d0f7      	beq.n	8015850 <strstr+0x10>
 8015860:	3001      	adds	r0, #1
 8015862:	7803      	ldrb	r3, [r0, #0]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d1ef      	bne.n	8015848 <strstr+0x8>
 8015868:	4618      	mov	r0, r3
 801586a:	e7ec      	b.n	8015846 <strstr+0x6>

0801586c <_close_r>:
 801586c:	b538      	push	{r3, r4, r5, lr}
 801586e:	4d06      	ldr	r5, [pc, #24]	; (8015888 <_close_r+0x1c>)
 8015870:	2300      	movs	r3, #0
 8015872:	4604      	mov	r4, r0
 8015874:	4608      	mov	r0, r1
 8015876:	602b      	str	r3, [r5, #0]
 8015878:	f7eb ff39 	bl	80016ee <_close>
 801587c:	1c43      	adds	r3, r0, #1
 801587e:	d102      	bne.n	8015886 <_close_r+0x1a>
 8015880:	682b      	ldr	r3, [r5, #0]
 8015882:	b103      	cbz	r3, 8015886 <_close_r+0x1a>
 8015884:	6023      	str	r3, [r4, #0]
 8015886:	bd38      	pop	{r3, r4, r5, pc}
 8015888:	20011404 	.word	0x20011404

0801588c <_lseek_r>:
 801588c:	b538      	push	{r3, r4, r5, lr}
 801588e:	4d07      	ldr	r5, [pc, #28]	; (80158ac <_lseek_r+0x20>)
 8015890:	4604      	mov	r4, r0
 8015892:	4608      	mov	r0, r1
 8015894:	4611      	mov	r1, r2
 8015896:	2200      	movs	r2, #0
 8015898:	602a      	str	r2, [r5, #0]
 801589a:	461a      	mov	r2, r3
 801589c:	f7eb ff4e 	bl	800173c <_lseek>
 80158a0:	1c43      	adds	r3, r0, #1
 80158a2:	d102      	bne.n	80158aa <_lseek_r+0x1e>
 80158a4:	682b      	ldr	r3, [r5, #0]
 80158a6:	b103      	cbz	r3, 80158aa <_lseek_r+0x1e>
 80158a8:	6023      	str	r3, [r4, #0]
 80158aa:	bd38      	pop	{r3, r4, r5, pc}
 80158ac:	20011404 	.word	0x20011404

080158b0 <_read_r>:
 80158b0:	b538      	push	{r3, r4, r5, lr}
 80158b2:	4d07      	ldr	r5, [pc, #28]	; (80158d0 <_read_r+0x20>)
 80158b4:	4604      	mov	r4, r0
 80158b6:	4608      	mov	r0, r1
 80158b8:	4611      	mov	r1, r2
 80158ba:	2200      	movs	r2, #0
 80158bc:	602a      	str	r2, [r5, #0]
 80158be:	461a      	mov	r2, r3
 80158c0:	f7eb fedc 	bl	800167c <_read>
 80158c4:	1c43      	adds	r3, r0, #1
 80158c6:	d102      	bne.n	80158ce <_read_r+0x1e>
 80158c8:	682b      	ldr	r3, [r5, #0]
 80158ca:	b103      	cbz	r3, 80158ce <_read_r+0x1e>
 80158cc:	6023      	str	r3, [r4, #0]
 80158ce:	bd38      	pop	{r3, r4, r5, pc}
 80158d0:	20011404 	.word	0x20011404

080158d4 <_sbrk_r>:
 80158d4:	b538      	push	{r3, r4, r5, lr}
 80158d6:	4d06      	ldr	r5, [pc, #24]	; (80158f0 <_sbrk_r+0x1c>)
 80158d8:	2300      	movs	r3, #0
 80158da:	4604      	mov	r4, r0
 80158dc:	4608      	mov	r0, r1
 80158de:	602b      	str	r3, [r5, #0]
 80158e0:	f7eb ff3a 	bl	8001758 <_sbrk>
 80158e4:	1c43      	adds	r3, r0, #1
 80158e6:	d102      	bne.n	80158ee <_sbrk_r+0x1a>
 80158e8:	682b      	ldr	r3, [r5, #0]
 80158ea:	b103      	cbz	r3, 80158ee <_sbrk_r+0x1a>
 80158ec:	6023      	str	r3, [r4, #0]
 80158ee:	bd38      	pop	{r3, r4, r5, pc}
 80158f0:	20011404 	.word	0x20011404

080158f4 <_write_r>:
 80158f4:	b538      	push	{r3, r4, r5, lr}
 80158f6:	4d07      	ldr	r5, [pc, #28]	; (8015914 <_write_r+0x20>)
 80158f8:	4604      	mov	r4, r0
 80158fa:	4608      	mov	r0, r1
 80158fc:	4611      	mov	r1, r2
 80158fe:	2200      	movs	r2, #0
 8015900:	602a      	str	r2, [r5, #0]
 8015902:	461a      	mov	r2, r3
 8015904:	f7eb fed7 	bl	80016b6 <_write>
 8015908:	1c43      	adds	r3, r0, #1
 801590a:	d102      	bne.n	8015912 <_write_r+0x1e>
 801590c:	682b      	ldr	r3, [r5, #0]
 801590e:	b103      	cbz	r3, 8015912 <_write_r+0x1e>
 8015910:	6023      	str	r3, [r4, #0]
 8015912:	bd38      	pop	{r3, r4, r5, pc}
 8015914:	20011404 	.word	0x20011404

08015918 <__errno>:
 8015918:	4b01      	ldr	r3, [pc, #4]	; (8015920 <__errno+0x8>)
 801591a:	6818      	ldr	r0, [r3, #0]
 801591c:	4770      	bx	lr
 801591e:	bf00      	nop
 8015920:	2000085c 	.word	0x2000085c

08015924 <__libc_init_array>:
 8015924:	b570      	push	{r4, r5, r6, lr}
 8015926:	4d0d      	ldr	r5, [pc, #52]	; (801595c <__libc_init_array+0x38>)
 8015928:	4c0d      	ldr	r4, [pc, #52]	; (8015960 <__libc_init_array+0x3c>)
 801592a:	1b64      	subs	r4, r4, r5
 801592c:	10a4      	asrs	r4, r4, #2
 801592e:	2600      	movs	r6, #0
 8015930:	42a6      	cmp	r6, r4
 8015932:	d109      	bne.n	8015948 <__libc_init_array+0x24>
 8015934:	4d0b      	ldr	r5, [pc, #44]	; (8015964 <__libc_init_array+0x40>)
 8015936:	4c0c      	ldr	r4, [pc, #48]	; (8015968 <__libc_init_array+0x44>)
 8015938:	f000 ff02 	bl	8016740 <_init>
 801593c:	1b64      	subs	r4, r4, r5
 801593e:	10a4      	asrs	r4, r4, #2
 8015940:	2600      	movs	r6, #0
 8015942:	42a6      	cmp	r6, r4
 8015944:	d105      	bne.n	8015952 <__libc_init_array+0x2e>
 8015946:	bd70      	pop	{r4, r5, r6, pc}
 8015948:	f855 3b04 	ldr.w	r3, [r5], #4
 801594c:	4798      	blx	r3
 801594e:	3601      	adds	r6, #1
 8015950:	e7ee      	b.n	8015930 <__libc_init_array+0xc>
 8015952:	f855 3b04 	ldr.w	r3, [r5], #4
 8015956:	4798      	blx	r3
 8015958:	3601      	adds	r6, #1
 801595a:	e7f2      	b.n	8015942 <__libc_init_array+0x1e>
 801595c:	08017954 	.word	0x08017954
 8015960:	08017954 	.word	0x08017954
 8015964:	08017954 	.word	0x08017954
 8015968:	08017960 	.word	0x08017960

0801596c <__retarget_lock_init_recursive>:
 801596c:	4770      	bx	lr

0801596e <__retarget_lock_acquire_recursive>:
 801596e:	4770      	bx	lr

08015970 <__retarget_lock_release_recursive>:
 8015970:	4770      	bx	lr

08015972 <strcpy>:
 8015972:	4603      	mov	r3, r0
 8015974:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015978:	f803 2b01 	strb.w	r2, [r3], #1
 801597c:	2a00      	cmp	r2, #0
 801597e:	d1f9      	bne.n	8015974 <strcpy+0x2>
 8015980:	4770      	bx	lr

08015982 <memcpy>:
 8015982:	440a      	add	r2, r1
 8015984:	4291      	cmp	r1, r2
 8015986:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801598a:	d100      	bne.n	801598e <memcpy+0xc>
 801598c:	4770      	bx	lr
 801598e:	b510      	push	{r4, lr}
 8015990:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015994:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015998:	4291      	cmp	r1, r2
 801599a:	d1f9      	bne.n	8015990 <memcpy+0xe>
 801599c:	bd10      	pop	{r4, pc}
	...

080159a0 <__assert_func>:
 80159a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80159a2:	4614      	mov	r4, r2
 80159a4:	461a      	mov	r2, r3
 80159a6:	4b09      	ldr	r3, [pc, #36]	; (80159cc <__assert_func+0x2c>)
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	4605      	mov	r5, r0
 80159ac:	68d8      	ldr	r0, [r3, #12]
 80159ae:	b14c      	cbz	r4, 80159c4 <__assert_func+0x24>
 80159b0:	4b07      	ldr	r3, [pc, #28]	; (80159d0 <__assert_func+0x30>)
 80159b2:	9100      	str	r1, [sp, #0]
 80159b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80159b8:	4906      	ldr	r1, [pc, #24]	; (80159d4 <__assert_func+0x34>)
 80159ba:	462b      	mov	r3, r5
 80159bc:	f000 fd48 	bl	8016450 <fiprintf>
 80159c0:	f000 fdee 	bl	80165a0 <abort>
 80159c4:	4b04      	ldr	r3, [pc, #16]	; (80159d8 <__assert_func+0x38>)
 80159c6:	461c      	mov	r4, r3
 80159c8:	e7f3      	b.n	80159b2 <__assert_func+0x12>
 80159ca:	bf00      	nop
 80159cc:	2000085c 	.word	0x2000085c
 80159d0:	080178dc 	.word	0x080178dc
 80159d4:	080178e9 	.word	0x080178e9
 80159d8:	08017917 	.word	0x08017917

080159dc <__env_lock>:
 80159dc:	4801      	ldr	r0, [pc, #4]	; (80159e4 <__env_lock+0x8>)
 80159de:	f7ff bfc6 	b.w	801596e <__retarget_lock_acquire_recursive>
 80159e2:	bf00      	nop
 80159e4:	20011408 	.word	0x20011408

080159e8 <__env_unlock>:
 80159e8:	4801      	ldr	r0, [pc, #4]	; (80159f0 <__env_unlock+0x8>)
 80159ea:	f7ff bfc1 	b.w	8015970 <__retarget_lock_release_recursive>
 80159ee:	bf00      	nop
 80159f0:	20011408 	.word	0x20011408

080159f4 <_free_r>:
 80159f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80159f6:	2900      	cmp	r1, #0
 80159f8:	d044      	beq.n	8015a84 <_free_r+0x90>
 80159fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159fe:	9001      	str	r0, [sp, #4]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	f1a1 0404 	sub.w	r4, r1, #4
 8015a06:	bfb8      	it	lt
 8015a08:	18e4      	addlt	r4, r4, r3
 8015a0a:	f7ff fc05 	bl	8015218 <__malloc_lock>
 8015a0e:	4a1e      	ldr	r2, [pc, #120]	; (8015a88 <_free_r+0x94>)
 8015a10:	9801      	ldr	r0, [sp, #4]
 8015a12:	6813      	ldr	r3, [r2, #0]
 8015a14:	b933      	cbnz	r3, 8015a24 <_free_r+0x30>
 8015a16:	6063      	str	r3, [r4, #4]
 8015a18:	6014      	str	r4, [r2, #0]
 8015a1a:	b003      	add	sp, #12
 8015a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a20:	f7ff bc00 	b.w	8015224 <__malloc_unlock>
 8015a24:	42a3      	cmp	r3, r4
 8015a26:	d908      	bls.n	8015a3a <_free_r+0x46>
 8015a28:	6825      	ldr	r5, [r4, #0]
 8015a2a:	1961      	adds	r1, r4, r5
 8015a2c:	428b      	cmp	r3, r1
 8015a2e:	bf01      	itttt	eq
 8015a30:	6819      	ldreq	r1, [r3, #0]
 8015a32:	685b      	ldreq	r3, [r3, #4]
 8015a34:	1949      	addeq	r1, r1, r5
 8015a36:	6021      	streq	r1, [r4, #0]
 8015a38:	e7ed      	b.n	8015a16 <_free_r+0x22>
 8015a3a:	461a      	mov	r2, r3
 8015a3c:	685b      	ldr	r3, [r3, #4]
 8015a3e:	b10b      	cbz	r3, 8015a44 <_free_r+0x50>
 8015a40:	42a3      	cmp	r3, r4
 8015a42:	d9fa      	bls.n	8015a3a <_free_r+0x46>
 8015a44:	6811      	ldr	r1, [r2, #0]
 8015a46:	1855      	adds	r5, r2, r1
 8015a48:	42a5      	cmp	r5, r4
 8015a4a:	d10b      	bne.n	8015a64 <_free_r+0x70>
 8015a4c:	6824      	ldr	r4, [r4, #0]
 8015a4e:	4421      	add	r1, r4
 8015a50:	1854      	adds	r4, r2, r1
 8015a52:	42a3      	cmp	r3, r4
 8015a54:	6011      	str	r1, [r2, #0]
 8015a56:	d1e0      	bne.n	8015a1a <_free_r+0x26>
 8015a58:	681c      	ldr	r4, [r3, #0]
 8015a5a:	685b      	ldr	r3, [r3, #4]
 8015a5c:	6053      	str	r3, [r2, #4]
 8015a5e:	440c      	add	r4, r1
 8015a60:	6014      	str	r4, [r2, #0]
 8015a62:	e7da      	b.n	8015a1a <_free_r+0x26>
 8015a64:	d902      	bls.n	8015a6c <_free_r+0x78>
 8015a66:	230c      	movs	r3, #12
 8015a68:	6003      	str	r3, [r0, #0]
 8015a6a:	e7d6      	b.n	8015a1a <_free_r+0x26>
 8015a6c:	6825      	ldr	r5, [r4, #0]
 8015a6e:	1961      	adds	r1, r4, r5
 8015a70:	428b      	cmp	r3, r1
 8015a72:	bf04      	itt	eq
 8015a74:	6819      	ldreq	r1, [r3, #0]
 8015a76:	685b      	ldreq	r3, [r3, #4]
 8015a78:	6063      	str	r3, [r4, #4]
 8015a7a:	bf04      	itt	eq
 8015a7c:	1949      	addeq	r1, r1, r5
 8015a7e:	6021      	streq	r1, [r4, #0]
 8015a80:	6054      	str	r4, [r2, #4]
 8015a82:	e7ca      	b.n	8015a1a <_free_r+0x26>
 8015a84:	b003      	add	sp, #12
 8015a86:	bd30      	pop	{r4, r5, pc}
 8015a88:	200112c0 	.word	0x200112c0

08015a8c <_malloc_usable_size_r>:
 8015a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a90:	1f18      	subs	r0, r3, #4
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	bfbc      	itt	lt
 8015a96:	580b      	ldrlt	r3, [r1, r0]
 8015a98:	18c0      	addlt	r0, r0, r3
 8015a9a:	4770      	bx	lr

08015a9c <__ssputs_r>:
 8015a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015aa0:	688e      	ldr	r6, [r1, #8]
 8015aa2:	461f      	mov	r7, r3
 8015aa4:	42be      	cmp	r6, r7
 8015aa6:	680b      	ldr	r3, [r1, #0]
 8015aa8:	4682      	mov	sl, r0
 8015aaa:	460c      	mov	r4, r1
 8015aac:	4690      	mov	r8, r2
 8015aae:	d82c      	bhi.n	8015b0a <__ssputs_r+0x6e>
 8015ab0:	898a      	ldrh	r2, [r1, #12]
 8015ab2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015ab6:	d026      	beq.n	8015b06 <__ssputs_r+0x6a>
 8015ab8:	6965      	ldr	r5, [r4, #20]
 8015aba:	6909      	ldr	r1, [r1, #16]
 8015abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ac0:	eba3 0901 	sub.w	r9, r3, r1
 8015ac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015ac8:	1c7b      	adds	r3, r7, #1
 8015aca:	444b      	add	r3, r9
 8015acc:	106d      	asrs	r5, r5, #1
 8015ace:	429d      	cmp	r5, r3
 8015ad0:	bf38      	it	cc
 8015ad2:	461d      	movcc	r5, r3
 8015ad4:	0553      	lsls	r3, r2, #21
 8015ad6:	d527      	bpl.n	8015b28 <__ssputs_r+0x8c>
 8015ad8:	4629      	mov	r1, r5
 8015ada:	f7ff fb1d 	bl	8015118 <_malloc_r>
 8015ade:	4606      	mov	r6, r0
 8015ae0:	b360      	cbz	r0, 8015b3c <__ssputs_r+0xa0>
 8015ae2:	6921      	ldr	r1, [r4, #16]
 8015ae4:	464a      	mov	r2, r9
 8015ae6:	f7ff ff4c 	bl	8015982 <memcpy>
 8015aea:	89a3      	ldrh	r3, [r4, #12]
 8015aec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015af4:	81a3      	strh	r3, [r4, #12]
 8015af6:	6126      	str	r6, [r4, #16]
 8015af8:	6165      	str	r5, [r4, #20]
 8015afa:	444e      	add	r6, r9
 8015afc:	eba5 0509 	sub.w	r5, r5, r9
 8015b00:	6026      	str	r6, [r4, #0]
 8015b02:	60a5      	str	r5, [r4, #8]
 8015b04:	463e      	mov	r6, r7
 8015b06:	42be      	cmp	r6, r7
 8015b08:	d900      	bls.n	8015b0c <__ssputs_r+0x70>
 8015b0a:	463e      	mov	r6, r7
 8015b0c:	6820      	ldr	r0, [r4, #0]
 8015b0e:	4632      	mov	r2, r6
 8015b10:	4641      	mov	r1, r8
 8015b12:	f7ff fe41 	bl	8015798 <memmove>
 8015b16:	68a3      	ldr	r3, [r4, #8]
 8015b18:	1b9b      	subs	r3, r3, r6
 8015b1a:	60a3      	str	r3, [r4, #8]
 8015b1c:	6823      	ldr	r3, [r4, #0]
 8015b1e:	4433      	add	r3, r6
 8015b20:	6023      	str	r3, [r4, #0]
 8015b22:	2000      	movs	r0, #0
 8015b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b28:	462a      	mov	r2, r5
 8015b2a:	f7ff fbf5 	bl	8015318 <_realloc_r>
 8015b2e:	4606      	mov	r6, r0
 8015b30:	2800      	cmp	r0, #0
 8015b32:	d1e0      	bne.n	8015af6 <__ssputs_r+0x5a>
 8015b34:	6921      	ldr	r1, [r4, #16]
 8015b36:	4650      	mov	r0, sl
 8015b38:	f7ff ff5c 	bl	80159f4 <_free_r>
 8015b3c:	230c      	movs	r3, #12
 8015b3e:	f8ca 3000 	str.w	r3, [sl]
 8015b42:	89a3      	ldrh	r3, [r4, #12]
 8015b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b48:	81a3      	strh	r3, [r4, #12]
 8015b4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b4e:	e7e9      	b.n	8015b24 <__ssputs_r+0x88>

08015b50 <_svfiprintf_r>:
 8015b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b54:	4698      	mov	r8, r3
 8015b56:	898b      	ldrh	r3, [r1, #12]
 8015b58:	061b      	lsls	r3, r3, #24
 8015b5a:	b09d      	sub	sp, #116	; 0x74
 8015b5c:	4607      	mov	r7, r0
 8015b5e:	460d      	mov	r5, r1
 8015b60:	4614      	mov	r4, r2
 8015b62:	d50e      	bpl.n	8015b82 <_svfiprintf_r+0x32>
 8015b64:	690b      	ldr	r3, [r1, #16]
 8015b66:	b963      	cbnz	r3, 8015b82 <_svfiprintf_r+0x32>
 8015b68:	2140      	movs	r1, #64	; 0x40
 8015b6a:	f7ff fad5 	bl	8015118 <_malloc_r>
 8015b6e:	6028      	str	r0, [r5, #0]
 8015b70:	6128      	str	r0, [r5, #16]
 8015b72:	b920      	cbnz	r0, 8015b7e <_svfiprintf_r+0x2e>
 8015b74:	230c      	movs	r3, #12
 8015b76:	603b      	str	r3, [r7, #0]
 8015b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b7c:	e0d0      	b.n	8015d20 <_svfiprintf_r+0x1d0>
 8015b7e:	2340      	movs	r3, #64	; 0x40
 8015b80:	616b      	str	r3, [r5, #20]
 8015b82:	2300      	movs	r3, #0
 8015b84:	9309      	str	r3, [sp, #36]	; 0x24
 8015b86:	2320      	movs	r3, #32
 8015b88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b90:	2330      	movs	r3, #48	; 0x30
 8015b92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015d38 <_svfiprintf_r+0x1e8>
 8015b96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015b9a:	f04f 0901 	mov.w	r9, #1
 8015b9e:	4623      	mov	r3, r4
 8015ba0:	469a      	mov	sl, r3
 8015ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ba6:	b10a      	cbz	r2, 8015bac <_svfiprintf_r+0x5c>
 8015ba8:	2a25      	cmp	r2, #37	; 0x25
 8015baa:	d1f9      	bne.n	8015ba0 <_svfiprintf_r+0x50>
 8015bac:	ebba 0b04 	subs.w	fp, sl, r4
 8015bb0:	d00b      	beq.n	8015bca <_svfiprintf_r+0x7a>
 8015bb2:	465b      	mov	r3, fp
 8015bb4:	4622      	mov	r2, r4
 8015bb6:	4629      	mov	r1, r5
 8015bb8:	4638      	mov	r0, r7
 8015bba:	f7ff ff6f 	bl	8015a9c <__ssputs_r>
 8015bbe:	3001      	adds	r0, #1
 8015bc0:	f000 80a9 	beq.w	8015d16 <_svfiprintf_r+0x1c6>
 8015bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015bc6:	445a      	add	r2, fp
 8015bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8015bca:	f89a 3000 	ldrb.w	r3, [sl]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	f000 80a1 	beq.w	8015d16 <_svfiprintf_r+0x1c6>
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015bde:	f10a 0a01 	add.w	sl, sl, #1
 8015be2:	9304      	str	r3, [sp, #16]
 8015be4:	9307      	str	r3, [sp, #28]
 8015be6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015bea:	931a      	str	r3, [sp, #104]	; 0x68
 8015bec:	4654      	mov	r4, sl
 8015bee:	2205      	movs	r2, #5
 8015bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bf4:	4850      	ldr	r0, [pc, #320]	; (8015d38 <_svfiprintf_r+0x1e8>)
 8015bf6:	f7ea fb03 	bl	8000200 <memchr>
 8015bfa:	9a04      	ldr	r2, [sp, #16]
 8015bfc:	b9d8      	cbnz	r0, 8015c36 <_svfiprintf_r+0xe6>
 8015bfe:	06d0      	lsls	r0, r2, #27
 8015c00:	bf44      	itt	mi
 8015c02:	2320      	movmi	r3, #32
 8015c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c08:	0711      	lsls	r1, r2, #28
 8015c0a:	bf44      	itt	mi
 8015c0c:	232b      	movmi	r3, #43	; 0x2b
 8015c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c12:	f89a 3000 	ldrb.w	r3, [sl]
 8015c16:	2b2a      	cmp	r3, #42	; 0x2a
 8015c18:	d015      	beq.n	8015c46 <_svfiprintf_r+0xf6>
 8015c1a:	9a07      	ldr	r2, [sp, #28]
 8015c1c:	4654      	mov	r4, sl
 8015c1e:	2000      	movs	r0, #0
 8015c20:	f04f 0c0a 	mov.w	ip, #10
 8015c24:	4621      	mov	r1, r4
 8015c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c2a:	3b30      	subs	r3, #48	; 0x30
 8015c2c:	2b09      	cmp	r3, #9
 8015c2e:	d94d      	bls.n	8015ccc <_svfiprintf_r+0x17c>
 8015c30:	b1b0      	cbz	r0, 8015c60 <_svfiprintf_r+0x110>
 8015c32:	9207      	str	r2, [sp, #28]
 8015c34:	e014      	b.n	8015c60 <_svfiprintf_r+0x110>
 8015c36:	eba0 0308 	sub.w	r3, r0, r8
 8015c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8015c3e:	4313      	orrs	r3, r2
 8015c40:	9304      	str	r3, [sp, #16]
 8015c42:	46a2      	mov	sl, r4
 8015c44:	e7d2      	b.n	8015bec <_svfiprintf_r+0x9c>
 8015c46:	9b03      	ldr	r3, [sp, #12]
 8015c48:	1d19      	adds	r1, r3, #4
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	9103      	str	r1, [sp, #12]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	bfbb      	ittet	lt
 8015c52:	425b      	neglt	r3, r3
 8015c54:	f042 0202 	orrlt.w	r2, r2, #2
 8015c58:	9307      	strge	r3, [sp, #28]
 8015c5a:	9307      	strlt	r3, [sp, #28]
 8015c5c:	bfb8      	it	lt
 8015c5e:	9204      	strlt	r2, [sp, #16]
 8015c60:	7823      	ldrb	r3, [r4, #0]
 8015c62:	2b2e      	cmp	r3, #46	; 0x2e
 8015c64:	d10c      	bne.n	8015c80 <_svfiprintf_r+0x130>
 8015c66:	7863      	ldrb	r3, [r4, #1]
 8015c68:	2b2a      	cmp	r3, #42	; 0x2a
 8015c6a:	d134      	bne.n	8015cd6 <_svfiprintf_r+0x186>
 8015c6c:	9b03      	ldr	r3, [sp, #12]
 8015c6e:	1d1a      	adds	r2, r3, #4
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	9203      	str	r2, [sp, #12]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	bfb8      	it	lt
 8015c78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015c7c:	3402      	adds	r4, #2
 8015c7e:	9305      	str	r3, [sp, #20]
 8015c80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015d48 <_svfiprintf_r+0x1f8>
 8015c84:	7821      	ldrb	r1, [r4, #0]
 8015c86:	2203      	movs	r2, #3
 8015c88:	4650      	mov	r0, sl
 8015c8a:	f7ea fab9 	bl	8000200 <memchr>
 8015c8e:	b138      	cbz	r0, 8015ca0 <_svfiprintf_r+0x150>
 8015c90:	9b04      	ldr	r3, [sp, #16]
 8015c92:	eba0 000a 	sub.w	r0, r0, sl
 8015c96:	2240      	movs	r2, #64	; 0x40
 8015c98:	4082      	lsls	r2, r0
 8015c9a:	4313      	orrs	r3, r2
 8015c9c:	3401      	adds	r4, #1
 8015c9e:	9304      	str	r3, [sp, #16]
 8015ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ca4:	4825      	ldr	r0, [pc, #148]	; (8015d3c <_svfiprintf_r+0x1ec>)
 8015ca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015caa:	2206      	movs	r2, #6
 8015cac:	f7ea faa8 	bl	8000200 <memchr>
 8015cb0:	2800      	cmp	r0, #0
 8015cb2:	d038      	beq.n	8015d26 <_svfiprintf_r+0x1d6>
 8015cb4:	4b22      	ldr	r3, [pc, #136]	; (8015d40 <_svfiprintf_r+0x1f0>)
 8015cb6:	bb1b      	cbnz	r3, 8015d00 <_svfiprintf_r+0x1b0>
 8015cb8:	9b03      	ldr	r3, [sp, #12]
 8015cba:	3307      	adds	r3, #7
 8015cbc:	f023 0307 	bic.w	r3, r3, #7
 8015cc0:	3308      	adds	r3, #8
 8015cc2:	9303      	str	r3, [sp, #12]
 8015cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cc6:	4433      	add	r3, r6
 8015cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8015cca:	e768      	b.n	8015b9e <_svfiprintf_r+0x4e>
 8015ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8015cd0:	460c      	mov	r4, r1
 8015cd2:	2001      	movs	r0, #1
 8015cd4:	e7a6      	b.n	8015c24 <_svfiprintf_r+0xd4>
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	3401      	adds	r4, #1
 8015cda:	9305      	str	r3, [sp, #20]
 8015cdc:	4619      	mov	r1, r3
 8015cde:	f04f 0c0a 	mov.w	ip, #10
 8015ce2:	4620      	mov	r0, r4
 8015ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ce8:	3a30      	subs	r2, #48	; 0x30
 8015cea:	2a09      	cmp	r2, #9
 8015cec:	d903      	bls.n	8015cf6 <_svfiprintf_r+0x1a6>
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d0c6      	beq.n	8015c80 <_svfiprintf_r+0x130>
 8015cf2:	9105      	str	r1, [sp, #20]
 8015cf4:	e7c4      	b.n	8015c80 <_svfiprintf_r+0x130>
 8015cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	2301      	movs	r3, #1
 8015cfe:	e7f0      	b.n	8015ce2 <_svfiprintf_r+0x192>
 8015d00:	ab03      	add	r3, sp, #12
 8015d02:	9300      	str	r3, [sp, #0]
 8015d04:	462a      	mov	r2, r5
 8015d06:	4b0f      	ldr	r3, [pc, #60]	; (8015d44 <_svfiprintf_r+0x1f4>)
 8015d08:	a904      	add	r1, sp, #16
 8015d0a:	4638      	mov	r0, r7
 8015d0c:	f3af 8000 	nop.w
 8015d10:	1c42      	adds	r2, r0, #1
 8015d12:	4606      	mov	r6, r0
 8015d14:	d1d6      	bne.n	8015cc4 <_svfiprintf_r+0x174>
 8015d16:	89ab      	ldrh	r3, [r5, #12]
 8015d18:	065b      	lsls	r3, r3, #25
 8015d1a:	f53f af2d 	bmi.w	8015b78 <_svfiprintf_r+0x28>
 8015d1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d20:	b01d      	add	sp, #116	; 0x74
 8015d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d26:	ab03      	add	r3, sp, #12
 8015d28:	9300      	str	r3, [sp, #0]
 8015d2a:	462a      	mov	r2, r5
 8015d2c:	4b05      	ldr	r3, [pc, #20]	; (8015d44 <_svfiprintf_r+0x1f4>)
 8015d2e:	a904      	add	r1, sp, #16
 8015d30:	4638      	mov	r0, r7
 8015d32:	f000 f9bd 	bl	80160b0 <_printf_i>
 8015d36:	e7eb      	b.n	8015d10 <_svfiprintf_r+0x1c0>
 8015d38:	08017918 	.word	0x08017918
 8015d3c:	08017922 	.word	0x08017922
 8015d40:	00000000 	.word	0x00000000
 8015d44:	08015a9d 	.word	0x08015a9d
 8015d48:	0801791e 	.word	0x0801791e

08015d4c <__sfputc_r>:
 8015d4c:	6893      	ldr	r3, [r2, #8]
 8015d4e:	3b01      	subs	r3, #1
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	b410      	push	{r4}
 8015d54:	6093      	str	r3, [r2, #8]
 8015d56:	da08      	bge.n	8015d6a <__sfputc_r+0x1e>
 8015d58:	6994      	ldr	r4, [r2, #24]
 8015d5a:	42a3      	cmp	r3, r4
 8015d5c:	db01      	blt.n	8015d62 <__sfputc_r+0x16>
 8015d5e:	290a      	cmp	r1, #10
 8015d60:	d103      	bne.n	8015d6a <__sfputc_r+0x1e>
 8015d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d66:	f000 bb85 	b.w	8016474 <__swbuf_r>
 8015d6a:	6813      	ldr	r3, [r2, #0]
 8015d6c:	1c58      	adds	r0, r3, #1
 8015d6e:	6010      	str	r0, [r2, #0]
 8015d70:	7019      	strb	r1, [r3, #0]
 8015d72:	4608      	mov	r0, r1
 8015d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d78:	4770      	bx	lr

08015d7a <__sfputs_r>:
 8015d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d7c:	4606      	mov	r6, r0
 8015d7e:	460f      	mov	r7, r1
 8015d80:	4614      	mov	r4, r2
 8015d82:	18d5      	adds	r5, r2, r3
 8015d84:	42ac      	cmp	r4, r5
 8015d86:	d101      	bne.n	8015d8c <__sfputs_r+0x12>
 8015d88:	2000      	movs	r0, #0
 8015d8a:	e007      	b.n	8015d9c <__sfputs_r+0x22>
 8015d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d90:	463a      	mov	r2, r7
 8015d92:	4630      	mov	r0, r6
 8015d94:	f7ff ffda 	bl	8015d4c <__sfputc_r>
 8015d98:	1c43      	adds	r3, r0, #1
 8015d9a:	d1f3      	bne.n	8015d84 <__sfputs_r+0xa>
 8015d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015da0 <_vfiprintf_r>:
 8015da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015da4:	460d      	mov	r5, r1
 8015da6:	b09d      	sub	sp, #116	; 0x74
 8015da8:	4614      	mov	r4, r2
 8015daa:	4698      	mov	r8, r3
 8015dac:	4606      	mov	r6, r0
 8015dae:	b118      	cbz	r0, 8015db8 <_vfiprintf_r+0x18>
 8015db0:	6a03      	ldr	r3, [r0, #32]
 8015db2:	b90b      	cbnz	r3, 8015db8 <_vfiprintf_r+0x18>
 8015db4:	f7ff fbe8 	bl	8015588 <__sinit>
 8015db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015dba:	07d9      	lsls	r1, r3, #31
 8015dbc:	d405      	bmi.n	8015dca <_vfiprintf_r+0x2a>
 8015dbe:	89ab      	ldrh	r3, [r5, #12]
 8015dc0:	059a      	lsls	r2, r3, #22
 8015dc2:	d402      	bmi.n	8015dca <_vfiprintf_r+0x2a>
 8015dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015dc6:	f7ff fdd2 	bl	801596e <__retarget_lock_acquire_recursive>
 8015dca:	89ab      	ldrh	r3, [r5, #12]
 8015dcc:	071b      	lsls	r3, r3, #28
 8015dce:	d501      	bpl.n	8015dd4 <_vfiprintf_r+0x34>
 8015dd0:	692b      	ldr	r3, [r5, #16]
 8015dd2:	b99b      	cbnz	r3, 8015dfc <_vfiprintf_r+0x5c>
 8015dd4:	4629      	mov	r1, r5
 8015dd6:	4630      	mov	r0, r6
 8015dd8:	f000 fb8a 	bl	80164f0 <__swsetup_r>
 8015ddc:	b170      	cbz	r0, 8015dfc <_vfiprintf_r+0x5c>
 8015dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015de0:	07dc      	lsls	r4, r3, #31
 8015de2:	d504      	bpl.n	8015dee <_vfiprintf_r+0x4e>
 8015de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015de8:	b01d      	add	sp, #116	; 0x74
 8015dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dee:	89ab      	ldrh	r3, [r5, #12]
 8015df0:	0598      	lsls	r0, r3, #22
 8015df2:	d4f7      	bmi.n	8015de4 <_vfiprintf_r+0x44>
 8015df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015df6:	f7ff fdbb 	bl	8015970 <__retarget_lock_release_recursive>
 8015dfa:	e7f3      	b.n	8015de4 <_vfiprintf_r+0x44>
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8015e00:	2320      	movs	r3, #32
 8015e02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e0a:	2330      	movs	r3, #48	; 0x30
 8015e0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015fc0 <_vfiprintf_r+0x220>
 8015e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015e14:	f04f 0901 	mov.w	r9, #1
 8015e18:	4623      	mov	r3, r4
 8015e1a:	469a      	mov	sl, r3
 8015e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e20:	b10a      	cbz	r2, 8015e26 <_vfiprintf_r+0x86>
 8015e22:	2a25      	cmp	r2, #37	; 0x25
 8015e24:	d1f9      	bne.n	8015e1a <_vfiprintf_r+0x7a>
 8015e26:	ebba 0b04 	subs.w	fp, sl, r4
 8015e2a:	d00b      	beq.n	8015e44 <_vfiprintf_r+0xa4>
 8015e2c:	465b      	mov	r3, fp
 8015e2e:	4622      	mov	r2, r4
 8015e30:	4629      	mov	r1, r5
 8015e32:	4630      	mov	r0, r6
 8015e34:	f7ff ffa1 	bl	8015d7a <__sfputs_r>
 8015e38:	3001      	adds	r0, #1
 8015e3a:	f000 80a9 	beq.w	8015f90 <_vfiprintf_r+0x1f0>
 8015e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e40:	445a      	add	r2, fp
 8015e42:	9209      	str	r2, [sp, #36]	; 0x24
 8015e44:	f89a 3000 	ldrb.w	r3, [sl]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	f000 80a1 	beq.w	8015f90 <_vfiprintf_r+0x1f0>
 8015e4e:	2300      	movs	r3, #0
 8015e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e58:	f10a 0a01 	add.w	sl, sl, #1
 8015e5c:	9304      	str	r3, [sp, #16]
 8015e5e:	9307      	str	r3, [sp, #28]
 8015e60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015e64:	931a      	str	r3, [sp, #104]	; 0x68
 8015e66:	4654      	mov	r4, sl
 8015e68:	2205      	movs	r2, #5
 8015e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e6e:	4854      	ldr	r0, [pc, #336]	; (8015fc0 <_vfiprintf_r+0x220>)
 8015e70:	f7ea f9c6 	bl	8000200 <memchr>
 8015e74:	9a04      	ldr	r2, [sp, #16]
 8015e76:	b9d8      	cbnz	r0, 8015eb0 <_vfiprintf_r+0x110>
 8015e78:	06d1      	lsls	r1, r2, #27
 8015e7a:	bf44      	itt	mi
 8015e7c:	2320      	movmi	r3, #32
 8015e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e82:	0713      	lsls	r3, r2, #28
 8015e84:	bf44      	itt	mi
 8015e86:	232b      	movmi	r3, #43	; 0x2b
 8015e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8015e90:	2b2a      	cmp	r3, #42	; 0x2a
 8015e92:	d015      	beq.n	8015ec0 <_vfiprintf_r+0x120>
 8015e94:	9a07      	ldr	r2, [sp, #28]
 8015e96:	4654      	mov	r4, sl
 8015e98:	2000      	movs	r0, #0
 8015e9a:	f04f 0c0a 	mov.w	ip, #10
 8015e9e:	4621      	mov	r1, r4
 8015ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ea4:	3b30      	subs	r3, #48	; 0x30
 8015ea6:	2b09      	cmp	r3, #9
 8015ea8:	d94d      	bls.n	8015f46 <_vfiprintf_r+0x1a6>
 8015eaa:	b1b0      	cbz	r0, 8015eda <_vfiprintf_r+0x13a>
 8015eac:	9207      	str	r2, [sp, #28]
 8015eae:	e014      	b.n	8015eda <_vfiprintf_r+0x13a>
 8015eb0:	eba0 0308 	sub.w	r3, r0, r8
 8015eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8015eb8:	4313      	orrs	r3, r2
 8015eba:	9304      	str	r3, [sp, #16]
 8015ebc:	46a2      	mov	sl, r4
 8015ebe:	e7d2      	b.n	8015e66 <_vfiprintf_r+0xc6>
 8015ec0:	9b03      	ldr	r3, [sp, #12]
 8015ec2:	1d19      	adds	r1, r3, #4
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	9103      	str	r1, [sp, #12]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	bfbb      	ittet	lt
 8015ecc:	425b      	neglt	r3, r3
 8015ece:	f042 0202 	orrlt.w	r2, r2, #2
 8015ed2:	9307      	strge	r3, [sp, #28]
 8015ed4:	9307      	strlt	r3, [sp, #28]
 8015ed6:	bfb8      	it	lt
 8015ed8:	9204      	strlt	r2, [sp, #16]
 8015eda:	7823      	ldrb	r3, [r4, #0]
 8015edc:	2b2e      	cmp	r3, #46	; 0x2e
 8015ede:	d10c      	bne.n	8015efa <_vfiprintf_r+0x15a>
 8015ee0:	7863      	ldrb	r3, [r4, #1]
 8015ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8015ee4:	d134      	bne.n	8015f50 <_vfiprintf_r+0x1b0>
 8015ee6:	9b03      	ldr	r3, [sp, #12]
 8015ee8:	1d1a      	adds	r2, r3, #4
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	9203      	str	r2, [sp, #12]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	bfb8      	it	lt
 8015ef2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015ef6:	3402      	adds	r4, #2
 8015ef8:	9305      	str	r3, [sp, #20]
 8015efa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015fd0 <_vfiprintf_r+0x230>
 8015efe:	7821      	ldrb	r1, [r4, #0]
 8015f00:	2203      	movs	r2, #3
 8015f02:	4650      	mov	r0, sl
 8015f04:	f7ea f97c 	bl	8000200 <memchr>
 8015f08:	b138      	cbz	r0, 8015f1a <_vfiprintf_r+0x17a>
 8015f0a:	9b04      	ldr	r3, [sp, #16]
 8015f0c:	eba0 000a 	sub.w	r0, r0, sl
 8015f10:	2240      	movs	r2, #64	; 0x40
 8015f12:	4082      	lsls	r2, r0
 8015f14:	4313      	orrs	r3, r2
 8015f16:	3401      	adds	r4, #1
 8015f18:	9304      	str	r3, [sp, #16]
 8015f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f1e:	4829      	ldr	r0, [pc, #164]	; (8015fc4 <_vfiprintf_r+0x224>)
 8015f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015f24:	2206      	movs	r2, #6
 8015f26:	f7ea f96b 	bl	8000200 <memchr>
 8015f2a:	2800      	cmp	r0, #0
 8015f2c:	d03f      	beq.n	8015fae <_vfiprintf_r+0x20e>
 8015f2e:	4b26      	ldr	r3, [pc, #152]	; (8015fc8 <_vfiprintf_r+0x228>)
 8015f30:	bb1b      	cbnz	r3, 8015f7a <_vfiprintf_r+0x1da>
 8015f32:	9b03      	ldr	r3, [sp, #12]
 8015f34:	3307      	adds	r3, #7
 8015f36:	f023 0307 	bic.w	r3, r3, #7
 8015f3a:	3308      	adds	r3, #8
 8015f3c:	9303      	str	r3, [sp, #12]
 8015f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f40:	443b      	add	r3, r7
 8015f42:	9309      	str	r3, [sp, #36]	; 0x24
 8015f44:	e768      	b.n	8015e18 <_vfiprintf_r+0x78>
 8015f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f4a:	460c      	mov	r4, r1
 8015f4c:	2001      	movs	r0, #1
 8015f4e:	e7a6      	b.n	8015e9e <_vfiprintf_r+0xfe>
 8015f50:	2300      	movs	r3, #0
 8015f52:	3401      	adds	r4, #1
 8015f54:	9305      	str	r3, [sp, #20]
 8015f56:	4619      	mov	r1, r3
 8015f58:	f04f 0c0a 	mov.w	ip, #10
 8015f5c:	4620      	mov	r0, r4
 8015f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f62:	3a30      	subs	r2, #48	; 0x30
 8015f64:	2a09      	cmp	r2, #9
 8015f66:	d903      	bls.n	8015f70 <_vfiprintf_r+0x1d0>
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d0c6      	beq.n	8015efa <_vfiprintf_r+0x15a>
 8015f6c:	9105      	str	r1, [sp, #20]
 8015f6e:	e7c4      	b.n	8015efa <_vfiprintf_r+0x15a>
 8015f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f74:	4604      	mov	r4, r0
 8015f76:	2301      	movs	r3, #1
 8015f78:	e7f0      	b.n	8015f5c <_vfiprintf_r+0x1bc>
 8015f7a:	ab03      	add	r3, sp, #12
 8015f7c:	9300      	str	r3, [sp, #0]
 8015f7e:	462a      	mov	r2, r5
 8015f80:	4b12      	ldr	r3, [pc, #72]	; (8015fcc <_vfiprintf_r+0x22c>)
 8015f82:	a904      	add	r1, sp, #16
 8015f84:	4630      	mov	r0, r6
 8015f86:	f3af 8000 	nop.w
 8015f8a:	4607      	mov	r7, r0
 8015f8c:	1c78      	adds	r0, r7, #1
 8015f8e:	d1d6      	bne.n	8015f3e <_vfiprintf_r+0x19e>
 8015f90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015f92:	07d9      	lsls	r1, r3, #31
 8015f94:	d405      	bmi.n	8015fa2 <_vfiprintf_r+0x202>
 8015f96:	89ab      	ldrh	r3, [r5, #12]
 8015f98:	059a      	lsls	r2, r3, #22
 8015f9a:	d402      	bmi.n	8015fa2 <_vfiprintf_r+0x202>
 8015f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015f9e:	f7ff fce7 	bl	8015970 <__retarget_lock_release_recursive>
 8015fa2:	89ab      	ldrh	r3, [r5, #12]
 8015fa4:	065b      	lsls	r3, r3, #25
 8015fa6:	f53f af1d 	bmi.w	8015de4 <_vfiprintf_r+0x44>
 8015faa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015fac:	e71c      	b.n	8015de8 <_vfiprintf_r+0x48>
 8015fae:	ab03      	add	r3, sp, #12
 8015fb0:	9300      	str	r3, [sp, #0]
 8015fb2:	462a      	mov	r2, r5
 8015fb4:	4b05      	ldr	r3, [pc, #20]	; (8015fcc <_vfiprintf_r+0x22c>)
 8015fb6:	a904      	add	r1, sp, #16
 8015fb8:	4630      	mov	r0, r6
 8015fba:	f000 f879 	bl	80160b0 <_printf_i>
 8015fbe:	e7e4      	b.n	8015f8a <_vfiprintf_r+0x1ea>
 8015fc0:	08017918 	.word	0x08017918
 8015fc4:	08017922 	.word	0x08017922
 8015fc8:	00000000 	.word	0x00000000
 8015fcc:	08015d7b 	.word	0x08015d7b
 8015fd0:	0801791e 	.word	0x0801791e

08015fd4 <_printf_common>:
 8015fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fd8:	4616      	mov	r6, r2
 8015fda:	4699      	mov	r9, r3
 8015fdc:	688a      	ldr	r2, [r1, #8]
 8015fde:	690b      	ldr	r3, [r1, #16]
 8015fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015fe4:	4293      	cmp	r3, r2
 8015fe6:	bfb8      	it	lt
 8015fe8:	4613      	movlt	r3, r2
 8015fea:	6033      	str	r3, [r6, #0]
 8015fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015ff0:	4607      	mov	r7, r0
 8015ff2:	460c      	mov	r4, r1
 8015ff4:	b10a      	cbz	r2, 8015ffa <_printf_common+0x26>
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	6033      	str	r3, [r6, #0]
 8015ffa:	6823      	ldr	r3, [r4, #0]
 8015ffc:	0699      	lsls	r1, r3, #26
 8015ffe:	bf42      	ittt	mi
 8016000:	6833      	ldrmi	r3, [r6, #0]
 8016002:	3302      	addmi	r3, #2
 8016004:	6033      	strmi	r3, [r6, #0]
 8016006:	6825      	ldr	r5, [r4, #0]
 8016008:	f015 0506 	ands.w	r5, r5, #6
 801600c:	d106      	bne.n	801601c <_printf_common+0x48>
 801600e:	f104 0a19 	add.w	sl, r4, #25
 8016012:	68e3      	ldr	r3, [r4, #12]
 8016014:	6832      	ldr	r2, [r6, #0]
 8016016:	1a9b      	subs	r3, r3, r2
 8016018:	42ab      	cmp	r3, r5
 801601a:	dc26      	bgt.n	801606a <_printf_common+0x96>
 801601c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016020:	1e13      	subs	r3, r2, #0
 8016022:	6822      	ldr	r2, [r4, #0]
 8016024:	bf18      	it	ne
 8016026:	2301      	movne	r3, #1
 8016028:	0692      	lsls	r2, r2, #26
 801602a:	d42b      	bmi.n	8016084 <_printf_common+0xb0>
 801602c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016030:	4649      	mov	r1, r9
 8016032:	4638      	mov	r0, r7
 8016034:	47c0      	blx	r8
 8016036:	3001      	adds	r0, #1
 8016038:	d01e      	beq.n	8016078 <_printf_common+0xa4>
 801603a:	6823      	ldr	r3, [r4, #0]
 801603c:	6922      	ldr	r2, [r4, #16]
 801603e:	f003 0306 	and.w	r3, r3, #6
 8016042:	2b04      	cmp	r3, #4
 8016044:	bf02      	ittt	eq
 8016046:	68e5      	ldreq	r5, [r4, #12]
 8016048:	6833      	ldreq	r3, [r6, #0]
 801604a:	1aed      	subeq	r5, r5, r3
 801604c:	68a3      	ldr	r3, [r4, #8]
 801604e:	bf0c      	ite	eq
 8016050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016054:	2500      	movne	r5, #0
 8016056:	4293      	cmp	r3, r2
 8016058:	bfc4      	itt	gt
 801605a:	1a9b      	subgt	r3, r3, r2
 801605c:	18ed      	addgt	r5, r5, r3
 801605e:	2600      	movs	r6, #0
 8016060:	341a      	adds	r4, #26
 8016062:	42b5      	cmp	r5, r6
 8016064:	d11a      	bne.n	801609c <_printf_common+0xc8>
 8016066:	2000      	movs	r0, #0
 8016068:	e008      	b.n	801607c <_printf_common+0xa8>
 801606a:	2301      	movs	r3, #1
 801606c:	4652      	mov	r2, sl
 801606e:	4649      	mov	r1, r9
 8016070:	4638      	mov	r0, r7
 8016072:	47c0      	blx	r8
 8016074:	3001      	adds	r0, #1
 8016076:	d103      	bne.n	8016080 <_printf_common+0xac>
 8016078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801607c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016080:	3501      	adds	r5, #1
 8016082:	e7c6      	b.n	8016012 <_printf_common+0x3e>
 8016084:	18e1      	adds	r1, r4, r3
 8016086:	1c5a      	adds	r2, r3, #1
 8016088:	2030      	movs	r0, #48	; 0x30
 801608a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801608e:	4422      	add	r2, r4
 8016090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016098:	3302      	adds	r3, #2
 801609a:	e7c7      	b.n	801602c <_printf_common+0x58>
 801609c:	2301      	movs	r3, #1
 801609e:	4622      	mov	r2, r4
 80160a0:	4649      	mov	r1, r9
 80160a2:	4638      	mov	r0, r7
 80160a4:	47c0      	blx	r8
 80160a6:	3001      	adds	r0, #1
 80160a8:	d0e6      	beq.n	8016078 <_printf_common+0xa4>
 80160aa:	3601      	adds	r6, #1
 80160ac:	e7d9      	b.n	8016062 <_printf_common+0x8e>
	...

080160b0 <_printf_i>:
 80160b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80160b4:	7e0f      	ldrb	r7, [r1, #24]
 80160b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80160b8:	2f78      	cmp	r7, #120	; 0x78
 80160ba:	4691      	mov	r9, r2
 80160bc:	4680      	mov	r8, r0
 80160be:	460c      	mov	r4, r1
 80160c0:	469a      	mov	sl, r3
 80160c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80160c6:	d807      	bhi.n	80160d8 <_printf_i+0x28>
 80160c8:	2f62      	cmp	r7, #98	; 0x62
 80160ca:	d80a      	bhi.n	80160e2 <_printf_i+0x32>
 80160cc:	2f00      	cmp	r7, #0
 80160ce:	f000 80d4 	beq.w	801627a <_printf_i+0x1ca>
 80160d2:	2f58      	cmp	r7, #88	; 0x58
 80160d4:	f000 80c0 	beq.w	8016258 <_printf_i+0x1a8>
 80160d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80160dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80160e0:	e03a      	b.n	8016158 <_printf_i+0xa8>
 80160e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80160e6:	2b15      	cmp	r3, #21
 80160e8:	d8f6      	bhi.n	80160d8 <_printf_i+0x28>
 80160ea:	a101      	add	r1, pc, #4	; (adr r1, 80160f0 <_printf_i+0x40>)
 80160ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80160f0:	08016149 	.word	0x08016149
 80160f4:	0801615d 	.word	0x0801615d
 80160f8:	080160d9 	.word	0x080160d9
 80160fc:	080160d9 	.word	0x080160d9
 8016100:	080160d9 	.word	0x080160d9
 8016104:	080160d9 	.word	0x080160d9
 8016108:	0801615d 	.word	0x0801615d
 801610c:	080160d9 	.word	0x080160d9
 8016110:	080160d9 	.word	0x080160d9
 8016114:	080160d9 	.word	0x080160d9
 8016118:	080160d9 	.word	0x080160d9
 801611c:	08016261 	.word	0x08016261
 8016120:	08016189 	.word	0x08016189
 8016124:	0801621b 	.word	0x0801621b
 8016128:	080160d9 	.word	0x080160d9
 801612c:	080160d9 	.word	0x080160d9
 8016130:	08016283 	.word	0x08016283
 8016134:	080160d9 	.word	0x080160d9
 8016138:	08016189 	.word	0x08016189
 801613c:	080160d9 	.word	0x080160d9
 8016140:	080160d9 	.word	0x080160d9
 8016144:	08016223 	.word	0x08016223
 8016148:	682b      	ldr	r3, [r5, #0]
 801614a:	1d1a      	adds	r2, r3, #4
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	602a      	str	r2, [r5, #0]
 8016150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016158:	2301      	movs	r3, #1
 801615a:	e09f      	b.n	801629c <_printf_i+0x1ec>
 801615c:	6820      	ldr	r0, [r4, #0]
 801615e:	682b      	ldr	r3, [r5, #0]
 8016160:	0607      	lsls	r7, r0, #24
 8016162:	f103 0104 	add.w	r1, r3, #4
 8016166:	6029      	str	r1, [r5, #0]
 8016168:	d501      	bpl.n	801616e <_printf_i+0xbe>
 801616a:	681e      	ldr	r6, [r3, #0]
 801616c:	e003      	b.n	8016176 <_printf_i+0xc6>
 801616e:	0646      	lsls	r6, r0, #25
 8016170:	d5fb      	bpl.n	801616a <_printf_i+0xba>
 8016172:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016176:	2e00      	cmp	r6, #0
 8016178:	da03      	bge.n	8016182 <_printf_i+0xd2>
 801617a:	232d      	movs	r3, #45	; 0x2d
 801617c:	4276      	negs	r6, r6
 801617e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016182:	485a      	ldr	r0, [pc, #360]	; (80162ec <_printf_i+0x23c>)
 8016184:	230a      	movs	r3, #10
 8016186:	e012      	b.n	80161ae <_printf_i+0xfe>
 8016188:	682b      	ldr	r3, [r5, #0]
 801618a:	6820      	ldr	r0, [r4, #0]
 801618c:	1d19      	adds	r1, r3, #4
 801618e:	6029      	str	r1, [r5, #0]
 8016190:	0605      	lsls	r5, r0, #24
 8016192:	d501      	bpl.n	8016198 <_printf_i+0xe8>
 8016194:	681e      	ldr	r6, [r3, #0]
 8016196:	e002      	b.n	801619e <_printf_i+0xee>
 8016198:	0641      	lsls	r1, r0, #25
 801619a:	d5fb      	bpl.n	8016194 <_printf_i+0xe4>
 801619c:	881e      	ldrh	r6, [r3, #0]
 801619e:	4853      	ldr	r0, [pc, #332]	; (80162ec <_printf_i+0x23c>)
 80161a0:	2f6f      	cmp	r7, #111	; 0x6f
 80161a2:	bf0c      	ite	eq
 80161a4:	2308      	moveq	r3, #8
 80161a6:	230a      	movne	r3, #10
 80161a8:	2100      	movs	r1, #0
 80161aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80161ae:	6865      	ldr	r5, [r4, #4]
 80161b0:	60a5      	str	r5, [r4, #8]
 80161b2:	2d00      	cmp	r5, #0
 80161b4:	bfa2      	ittt	ge
 80161b6:	6821      	ldrge	r1, [r4, #0]
 80161b8:	f021 0104 	bicge.w	r1, r1, #4
 80161bc:	6021      	strge	r1, [r4, #0]
 80161be:	b90e      	cbnz	r6, 80161c4 <_printf_i+0x114>
 80161c0:	2d00      	cmp	r5, #0
 80161c2:	d04b      	beq.n	801625c <_printf_i+0x1ac>
 80161c4:	4615      	mov	r5, r2
 80161c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80161ca:	fb03 6711 	mls	r7, r3, r1, r6
 80161ce:	5dc7      	ldrb	r7, [r0, r7]
 80161d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80161d4:	4637      	mov	r7, r6
 80161d6:	42bb      	cmp	r3, r7
 80161d8:	460e      	mov	r6, r1
 80161da:	d9f4      	bls.n	80161c6 <_printf_i+0x116>
 80161dc:	2b08      	cmp	r3, #8
 80161de:	d10b      	bne.n	80161f8 <_printf_i+0x148>
 80161e0:	6823      	ldr	r3, [r4, #0]
 80161e2:	07de      	lsls	r6, r3, #31
 80161e4:	d508      	bpl.n	80161f8 <_printf_i+0x148>
 80161e6:	6923      	ldr	r3, [r4, #16]
 80161e8:	6861      	ldr	r1, [r4, #4]
 80161ea:	4299      	cmp	r1, r3
 80161ec:	bfde      	ittt	le
 80161ee:	2330      	movle	r3, #48	; 0x30
 80161f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80161f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80161f8:	1b52      	subs	r2, r2, r5
 80161fa:	6122      	str	r2, [r4, #16]
 80161fc:	f8cd a000 	str.w	sl, [sp]
 8016200:	464b      	mov	r3, r9
 8016202:	aa03      	add	r2, sp, #12
 8016204:	4621      	mov	r1, r4
 8016206:	4640      	mov	r0, r8
 8016208:	f7ff fee4 	bl	8015fd4 <_printf_common>
 801620c:	3001      	adds	r0, #1
 801620e:	d14a      	bne.n	80162a6 <_printf_i+0x1f6>
 8016210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016214:	b004      	add	sp, #16
 8016216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801621a:	6823      	ldr	r3, [r4, #0]
 801621c:	f043 0320 	orr.w	r3, r3, #32
 8016220:	6023      	str	r3, [r4, #0]
 8016222:	4833      	ldr	r0, [pc, #204]	; (80162f0 <_printf_i+0x240>)
 8016224:	2778      	movs	r7, #120	; 0x78
 8016226:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801622a:	6823      	ldr	r3, [r4, #0]
 801622c:	6829      	ldr	r1, [r5, #0]
 801622e:	061f      	lsls	r7, r3, #24
 8016230:	f851 6b04 	ldr.w	r6, [r1], #4
 8016234:	d402      	bmi.n	801623c <_printf_i+0x18c>
 8016236:	065f      	lsls	r7, r3, #25
 8016238:	bf48      	it	mi
 801623a:	b2b6      	uxthmi	r6, r6
 801623c:	07df      	lsls	r7, r3, #31
 801623e:	bf48      	it	mi
 8016240:	f043 0320 	orrmi.w	r3, r3, #32
 8016244:	6029      	str	r1, [r5, #0]
 8016246:	bf48      	it	mi
 8016248:	6023      	strmi	r3, [r4, #0]
 801624a:	b91e      	cbnz	r6, 8016254 <_printf_i+0x1a4>
 801624c:	6823      	ldr	r3, [r4, #0]
 801624e:	f023 0320 	bic.w	r3, r3, #32
 8016252:	6023      	str	r3, [r4, #0]
 8016254:	2310      	movs	r3, #16
 8016256:	e7a7      	b.n	80161a8 <_printf_i+0xf8>
 8016258:	4824      	ldr	r0, [pc, #144]	; (80162ec <_printf_i+0x23c>)
 801625a:	e7e4      	b.n	8016226 <_printf_i+0x176>
 801625c:	4615      	mov	r5, r2
 801625e:	e7bd      	b.n	80161dc <_printf_i+0x12c>
 8016260:	682b      	ldr	r3, [r5, #0]
 8016262:	6826      	ldr	r6, [r4, #0]
 8016264:	6961      	ldr	r1, [r4, #20]
 8016266:	1d18      	adds	r0, r3, #4
 8016268:	6028      	str	r0, [r5, #0]
 801626a:	0635      	lsls	r5, r6, #24
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	d501      	bpl.n	8016274 <_printf_i+0x1c4>
 8016270:	6019      	str	r1, [r3, #0]
 8016272:	e002      	b.n	801627a <_printf_i+0x1ca>
 8016274:	0670      	lsls	r0, r6, #25
 8016276:	d5fb      	bpl.n	8016270 <_printf_i+0x1c0>
 8016278:	8019      	strh	r1, [r3, #0]
 801627a:	2300      	movs	r3, #0
 801627c:	6123      	str	r3, [r4, #16]
 801627e:	4615      	mov	r5, r2
 8016280:	e7bc      	b.n	80161fc <_printf_i+0x14c>
 8016282:	682b      	ldr	r3, [r5, #0]
 8016284:	1d1a      	adds	r2, r3, #4
 8016286:	602a      	str	r2, [r5, #0]
 8016288:	681d      	ldr	r5, [r3, #0]
 801628a:	6862      	ldr	r2, [r4, #4]
 801628c:	2100      	movs	r1, #0
 801628e:	4628      	mov	r0, r5
 8016290:	f7e9 ffb6 	bl	8000200 <memchr>
 8016294:	b108      	cbz	r0, 801629a <_printf_i+0x1ea>
 8016296:	1b40      	subs	r0, r0, r5
 8016298:	6060      	str	r0, [r4, #4]
 801629a:	6863      	ldr	r3, [r4, #4]
 801629c:	6123      	str	r3, [r4, #16]
 801629e:	2300      	movs	r3, #0
 80162a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162a4:	e7aa      	b.n	80161fc <_printf_i+0x14c>
 80162a6:	6923      	ldr	r3, [r4, #16]
 80162a8:	462a      	mov	r2, r5
 80162aa:	4649      	mov	r1, r9
 80162ac:	4640      	mov	r0, r8
 80162ae:	47d0      	blx	sl
 80162b0:	3001      	adds	r0, #1
 80162b2:	d0ad      	beq.n	8016210 <_printf_i+0x160>
 80162b4:	6823      	ldr	r3, [r4, #0]
 80162b6:	079b      	lsls	r3, r3, #30
 80162b8:	d413      	bmi.n	80162e2 <_printf_i+0x232>
 80162ba:	68e0      	ldr	r0, [r4, #12]
 80162bc:	9b03      	ldr	r3, [sp, #12]
 80162be:	4298      	cmp	r0, r3
 80162c0:	bfb8      	it	lt
 80162c2:	4618      	movlt	r0, r3
 80162c4:	e7a6      	b.n	8016214 <_printf_i+0x164>
 80162c6:	2301      	movs	r3, #1
 80162c8:	4632      	mov	r2, r6
 80162ca:	4649      	mov	r1, r9
 80162cc:	4640      	mov	r0, r8
 80162ce:	47d0      	blx	sl
 80162d0:	3001      	adds	r0, #1
 80162d2:	d09d      	beq.n	8016210 <_printf_i+0x160>
 80162d4:	3501      	adds	r5, #1
 80162d6:	68e3      	ldr	r3, [r4, #12]
 80162d8:	9903      	ldr	r1, [sp, #12]
 80162da:	1a5b      	subs	r3, r3, r1
 80162dc:	42ab      	cmp	r3, r5
 80162de:	dcf2      	bgt.n	80162c6 <_printf_i+0x216>
 80162e0:	e7eb      	b.n	80162ba <_printf_i+0x20a>
 80162e2:	2500      	movs	r5, #0
 80162e4:	f104 0619 	add.w	r6, r4, #25
 80162e8:	e7f5      	b.n	80162d6 <_printf_i+0x226>
 80162ea:	bf00      	nop
 80162ec:	08017929 	.word	0x08017929
 80162f0:	0801793a 	.word	0x0801793a

080162f4 <__sflush_r>:
 80162f4:	898a      	ldrh	r2, [r1, #12]
 80162f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162fa:	4605      	mov	r5, r0
 80162fc:	0710      	lsls	r0, r2, #28
 80162fe:	460c      	mov	r4, r1
 8016300:	d458      	bmi.n	80163b4 <__sflush_r+0xc0>
 8016302:	684b      	ldr	r3, [r1, #4]
 8016304:	2b00      	cmp	r3, #0
 8016306:	dc05      	bgt.n	8016314 <__sflush_r+0x20>
 8016308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801630a:	2b00      	cmp	r3, #0
 801630c:	dc02      	bgt.n	8016314 <__sflush_r+0x20>
 801630e:	2000      	movs	r0, #0
 8016310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016316:	2e00      	cmp	r6, #0
 8016318:	d0f9      	beq.n	801630e <__sflush_r+0x1a>
 801631a:	2300      	movs	r3, #0
 801631c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016320:	682f      	ldr	r7, [r5, #0]
 8016322:	6a21      	ldr	r1, [r4, #32]
 8016324:	602b      	str	r3, [r5, #0]
 8016326:	d032      	beq.n	801638e <__sflush_r+0x9a>
 8016328:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801632a:	89a3      	ldrh	r3, [r4, #12]
 801632c:	075a      	lsls	r2, r3, #29
 801632e:	d505      	bpl.n	801633c <__sflush_r+0x48>
 8016330:	6863      	ldr	r3, [r4, #4]
 8016332:	1ac0      	subs	r0, r0, r3
 8016334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016336:	b10b      	cbz	r3, 801633c <__sflush_r+0x48>
 8016338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801633a:	1ac0      	subs	r0, r0, r3
 801633c:	2300      	movs	r3, #0
 801633e:	4602      	mov	r2, r0
 8016340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016342:	6a21      	ldr	r1, [r4, #32]
 8016344:	4628      	mov	r0, r5
 8016346:	47b0      	blx	r6
 8016348:	1c43      	adds	r3, r0, #1
 801634a:	89a3      	ldrh	r3, [r4, #12]
 801634c:	d106      	bne.n	801635c <__sflush_r+0x68>
 801634e:	6829      	ldr	r1, [r5, #0]
 8016350:	291d      	cmp	r1, #29
 8016352:	d82b      	bhi.n	80163ac <__sflush_r+0xb8>
 8016354:	4a29      	ldr	r2, [pc, #164]	; (80163fc <__sflush_r+0x108>)
 8016356:	410a      	asrs	r2, r1
 8016358:	07d6      	lsls	r6, r2, #31
 801635a:	d427      	bmi.n	80163ac <__sflush_r+0xb8>
 801635c:	2200      	movs	r2, #0
 801635e:	6062      	str	r2, [r4, #4]
 8016360:	04d9      	lsls	r1, r3, #19
 8016362:	6922      	ldr	r2, [r4, #16]
 8016364:	6022      	str	r2, [r4, #0]
 8016366:	d504      	bpl.n	8016372 <__sflush_r+0x7e>
 8016368:	1c42      	adds	r2, r0, #1
 801636a:	d101      	bne.n	8016370 <__sflush_r+0x7c>
 801636c:	682b      	ldr	r3, [r5, #0]
 801636e:	b903      	cbnz	r3, 8016372 <__sflush_r+0x7e>
 8016370:	6560      	str	r0, [r4, #84]	; 0x54
 8016372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016374:	602f      	str	r7, [r5, #0]
 8016376:	2900      	cmp	r1, #0
 8016378:	d0c9      	beq.n	801630e <__sflush_r+0x1a>
 801637a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801637e:	4299      	cmp	r1, r3
 8016380:	d002      	beq.n	8016388 <__sflush_r+0x94>
 8016382:	4628      	mov	r0, r5
 8016384:	f7ff fb36 	bl	80159f4 <_free_r>
 8016388:	2000      	movs	r0, #0
 801638a:	6360      	str	r0, [r4, #52]	; 0x34
 801638c:	e7c0      	b.n	8016310 <__sflush_r+0x1c>
 801638e:	2301      	movs	r3, #1
 8016390:	4628      	mov	r0, r5
 8016392:	47b0      	blx	r6
 8016394:	1c41      	adds	r1, r0, #1
 8016396:	d1c8      	bne.n	801632a <__sflush_r+0x36>
 8016398:	682b      	ldr	r3, [r5, #0]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d0c5      	beq.n	801632a <__sflush_r+0x36>
 801639e:	2b1d      	cmp	r3, #29
 80163a0:	d001      	beq.n	80163a6 <__sflush_r+0xb2>
 80163a2:	2b16      	cmp	r3, #22
 80163a4:	d101      	bne.n	80163aa <__sflush_r+0xb6>
 80163a6:	602f      	str	r7, [r5, #0]
 80163a8:	e7b1      	b.n	801630e <__sflush_r+0x1a>
 80163aa:	89a3      	ldrh	r3, [r4, #12]
 80163ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163b0:	81a3      	strh	r3, [r4, #12]
 80163b2:	e7ad      	b.n	8016310 <__sflush_r+0x1c>
 80163b4:	690f      	ldr	r7, [r1, #16]
 80163b6:	2f00      	cmp	r7, #0
 80163b8:	d0a9      	beq.n	801630e <__sflush_r+0x1a>
 80163ba:	0793      	lsls	r3, r2, #30
 80163bc:	680e      	ldr	r6, [r1, #0]
 80163be:	bf08      	it	eq
 80163c0:	694b      	ldreq	r3, [r1, #20]
 80163c2:	600f      	str	r7, [r1, #0]
 80163c4:	bf18      	it	ne
 80163c6:	2300      	movne	r3, #0
 80163c8:	eba6 0807 	sub.w	r8, r6, r7
 80163cc:	608b      	str	r3, [r1, #8]
 80163ce:	f1b8 0f00 	cmp.w	r8, #0
 80163d2:	dd9c      	ble.n	801630e <__sflush_r+0x1a>
 80163d4:	6a21      	ldr	r1, [r4, #32]
 80163d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80163d8:	4643      	mov	r3, r8
 80163da:	463a      	mov	r2, r7
 80163dc:	4628      	mov	r0, r5
 80163de:	47b0      	blx	r6
 80163e0:	2800      	cmp	r0, #0
 80163e2:	dc06      	bgt.n	80163f2 <__sflush_r+0xfe>
 80163e4:	89a3      	ldrh	r3, [r4, #12]
 80163e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163ea:	81a3      	strh	r3, [r4, #12]
 80163ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80163f0:	e78e      	b.n	8016310 <__sflush_r+0x1c>
 80163f2:	4407      	add	r7, r0
 80163f4:	eba8 0800 	sub.w	r8, r8, r0
 80163f8:	e7e9      	b.n	80163ce <__sflush_r+0xda>
 80163fa:	bf00      	nop
 80163fc:	dfbffffe 	.word	0xdfbffffe

08016400 <_fflush_r>:
 8016400:	b538      	push	{r3, r4, r5, lr}
 8016402:	690b      	ldr	r3, [r1, #16]
 8016404:	4605      	mov	r5, r0
 8016406:	460c      	mov	r4, r1
 8016408:	b913      	cbnz	r3, 8016410 <_fflush_r+0x10>
 801640a:	2500      	movs	r5, #0
 801640c:	4628      	mov	r0, r5
 801640e:	bd38      	pop	{r3, r4, r5, pc}
 8016410:	b118      	cbz	r0, 801641a <_fflush_r+0x1a>
 8016412:	6a03      	ldr	r3, [r0, #32]
 8016414:	b90b      	cbnz	r3, 801641a <_fflush_r+0x1a>
 8016416:	f7ff f8b7 	bl	8015588 <__sinit>
 801641a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d0f3      	beq.n	801640a <_fflush_r+0xa>
 8016422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016424:	07d0      	lsls	r0, r2, #31
 8016426:	d404      	bmi.n	8016432 <_fflush_r+0x32>
 8016428:	0599      	lsls	r1, r3, #22
 801642a:	d402      	bmi.n	8016432 <_fflush_r+0x32>
 801642c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801642e:	f7ff fa9e 	bl	801596e <__retarget_lock_acquire_recursive>
 8016432:	4628      	mov	r0, r5
 8016434:	4621      	mov	r1, r4
 8016436:	f7ff ff5d 	bl	80162f4 <__sflush_r>
 801643a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801643c:	07da      	lsls	r2, r3, #31
 801643e:	4605      	mov	r5, r0
 8016440:	d4e4      	bmi.n	801640c <_fflush_r+0xc>
 8016442:	89a3      	ldrh	r3, [r4, #12]
 8016444:	059b      	lsls	r3, r3, #22
 8016446:	d4e1      	bmi.n	801640c <_fflush_r+0xc>
 8016448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801644a:	f7ff fa91 	bl	8015970 <__retarget_lock_release_recursive>
 801644e:	e7dd      	b.n	801640c <_fflush_r+0xc>

08016450 <fiprintf>:
 8016450:	b40e      	push	{r1, r2, r3}
 8016452:	b503      	push	{r0, r1, lr}
 8016454:	4601      	mov	r1, r0
 8016456:	ab03      	add	r3, sp, #12
 8016458:	4805      	ldr	r0, [pc, #20]	; (8016470 <fiprintf+0x20>)
 801645a:	f853 2b04 	ldr.w	r2, [r3], #4
 801645e:	6800      	ldr	r0, [r0, #0]
 8016460:	9301      	str	r3, [sp, #4]
 8016462:	f7ff fc9d 	bl	8015da0 <_vfiprintf_r>
 8016466:	b002      	add	sp, #8
 8016468:	f85d eb04 	ldr.w	lr, [sp], #4
 801646c:	b003      	add	sp, #12
 801646e:	4770      	bx	lr
 8016470:	2000085c 	.word	0x2000085c

08016474 <__swbuf_r>:
 8016474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016476:	460e      	mov	r6, r1
 8016478:	4614      	mov	r4, r2
 801647a:	4605      	mov	r5, r0
 801647c:	b118      	cbz	r0, 8016486 <__swbuf_r+0x12>
 801647e:	6a03      	ldr	r3, [r0, #32]
 8016480:	b90b      	cbnz	r3, 8016486 <__swbuf_r+0x12>
 8016482:	f7ff f881 	bl	8015588 <__sinit>
 8016486:	69a3      	ldr	r3, [r4, #24]
 8016488:	60a3      	str	r3, [r4, #8]
 801648a:	89a3      	ldrh	r3, [r4, #12]
 801648c:	071a      	lsls	r2, r3, #28
 801648e:	d525      	bpl.n	80164dc <__swbuf_r+0x68>
 8016490:	6923      	ldr	r3, [r4, #16]
 8016492:	b31b      	cbz	r3, 80164dc <__swbuf_r+0x68>
 8016494:	6823      	ldr	r3, [r4, #0]
 8016496:	6922      	ldr	r2, [r4, #16]
 8016498:	1a98      	subs	r0, r3, r2
 801649a:	6963      	ldr	r3, [r4, #20]
 801649c:	b2f6      	uxtb	r6, r6
 801649e:	4283      	cmp	r3, r0
 80164a0:	4637      	mov	r7, r6
 80164a2:	dc04      	bgt.n	80164ae <__swbuf_r+0x3a>
 80164a4:	4621      	mov	r1, r4
 80164a6:	4628      	mov	r0, r5
 80164a8:	f7ff ffaa 	bl	8016400 <_fflush_r>
 80164ac:	b9e0      	cbnz	r0, 80164e8 <__swbuf_r+0x74>
 80164ae:	68a3      	ldr	r3, [r4, #8]
 80164b0:	3b01      	subs	r3, #1
 80164b2:	60a3      	str	r3, [r4, #8]
 80164b4:	6823      	ldr	r3, [r4, #0]
 80164b6:	1c5a      	adds	r2, r3, #1
 80164b8:	6022      	str	r2, [r4, #0]
 80164ba:	701e      	strb	r6, [r3, #0]
 80164bc:	6962      	ldr	r2, [r4, #20]
 80164be:	1c43      	adds	r3, r0, #1
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d004      	beq.n	80164ce <__swbuf_r+0x5a>
 80164c4:	89a3      	ldrh	r3, [r4, #12]
 80164c6:	07db      	lsls	r3, r3, #31
 80164c8:	d506      	bpl.n	80164d8 <__swbuf_r+0x64>
 80164ca:	2e0a      	cmp	r6, #10
 80164cc:	d104      	bne.n	80164d8 <__swbuf_r+0x64>
 80164ce:	4621      	mov	r1, r4
 80164d0:	4628      	mov	r0, r5
 80164d2:	f7ff ff95 	bl	8016400 <_fflush_r>
 80164d6:	b938      	cbnz	r0, 80164e8 <__swbuf_r+0x74>
 80164d8:	4638      	mov	r0, r7
 80164da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164dc:	4621      	mov	r1, r4
 80164de:	4628      	mov	r0, r5
 80164e0:	f000 f806 	bl	80164f0 <__swsetup_r>
 80164e4:	2800      	cmp	r0, #0
 80164e6:	d0d5      	beq.n	8016494 <__swbuf_r+0x20>
 80164e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80164ec:	e7f4      	b.n	80164d8 <__swbuf_r+0x64>
	...

080164f0 <__swsetup_r>:
 80164f0:	b538      	push	{r3, r4, r5, lr}
 80164f2:	4b2a      	ldr	r3, [pc, #168]	; (801659c <__swsetup_r+0xac>)
 80164f4:	4605      	mov	r5, r0
 80164f6:	6818      	ldr	r0, [r3, #0]
 80164f8:	460c      	mov	r4, r1
 80164fa:	b118      	cbz	r0, 8016504 <__swsetup_r+0x14>
 80164fc:	6a03      	ldr	r3, [r0, #32]
 80164fe:	b90b      	cbnz	r3, 8016504 <__swsetup_r+0x14>
 8016500:	f7ff f842 	bl	8015588 <__sinit>
 8016504:	89a3      	ldrh	r3, [r4, #12]
 8016506:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801650a:	0718      	lsls	r0, r3, #28
 801650c:	d422      	bmi.n	8016554 <__swsetup_r+0x64>
 801650e:	06d9      	lsls	r1, r3, #27
 8016510:	d407      	bmi.n	8016522 <__swsetup_r+0x32>
 8016512:	2309      	movs	r3, #9
 8016514:	602b      	str	r3, [r5, #0]
 8016516:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801651a:	81a3      	strh	r3, [r4, #12]
 801651c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016520:	e034      	b.n	801658c <__swsetup_r+0x9c>
 8016522:	0758      	lsls	r0, r3, #29
 8016524:	d512      	bpl.n	801654c <__swsetup_r+0x5c>
 8016526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016528:	b141      	cbz	r1, 801653c <__swsetup_r+0x4c>
 801652a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801652e:	4299      	cmp	r1, r3
 8016530:	d002      	beq.n	8016538 <__swsetup_r+0x48>
 8016532:	4628      	mov	r0, r5
 8016534:	f7ff fa5e 	bl	80159f4 <_free_r>
 8016538:	2300      	movs	r3, #0
 801653a:	6363      	str	r3, [r4, #52]	; 0x34
 801653c:	89a3      	ldrh	r3, [r4, #12]
 801653e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016542:	81a3      	strh	r3, [r4, #12]
 8016544:	2300      	movs	r3, #0
 8016546:	6063      	str	r3, [r4, #4]
 8016548:	6923      	ldr	r3, [r4, #16]
 801654a:	6023      	str	r3, [r4, #0]
 801654c:	89a3      	ldrh	r3, [r4, #12]
 801654e:	f043 0308 	orr.w	r3, r3, #8
 8016552:	81a3      	strh	r3, [r4, #12]
 8016554:	6923      	ldr	r3, [r4, #16]
 8016556:	b94b      	cbnz	r3, 801656c <__swsetup_r+0x7c>
 8016558:	89a3      	ldrh	r3, [r4, #12]
 801655a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801655e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016562:	d003      	beq.n	801656c <__swsetup_r+0x7c>
 8016564:	4621      	mov	r1, r4
 8016566:	4628      	mov	r0, r5
 8016568:	f000 f847 	bl	80165fa <__smakebuf_r>
 801656c:	89a0      	ldrh	r0, [r4, #12]
 801656e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016572:	f010 0301 	ands.w	r3, r0, #1
 8016576:	d00a      	beq.n	801658e <__swsetup_r+0x9e>
 8016578:	2300      	movs	r3, #0
 801657a:	60a3      	str	r3, [r4, #8]
 801657c:	6963      	ldr	r3, [r4, #20]
 801657e:	425b      	negs	r3, r3
 8016580:	61a3      	str	r3, [r4, #24]
 8016582:	6923      	ldr	r3, [r4, #16]
 8016584:	b943      	cbnz	r3, 8016598 <__swsetup_r+0xa8>
 8016586:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801658a:	d1c4      	bne.n	8016516 <__swsetup_r+0x26>
 801658c:	bd38      	pop	{r3, r4, r5, pc}
 801658e:	0781      	lsls	r1, r0, #30
 8016590:	bf58      	it	pl
 8016592:	6963      	ldrpl	r3, [r4, #20]
 8016594:	60a3      	str	r3, [r4, #8]
 8016596:	e7f4      	b.n	8016582 <__swsetup_r+0x92>
 8016598:	2000      	movs	r0, #0
 801659a:	e7f7      	b.n	801658c <__swsetup_r+0x9c>
 801659c:	2000085c 	.word	0x2000085c

080165a0 <abort>:
 80165a0:	b508      	push	{r3, lr}
 80165a2:	2006      	movs	r0, #6
 80165a4:	f000 f88e 	bl	80166c4 <raise>
 80165a8:	2001      	movs	r0, #1
 80165aa:	f7eb f85d 	bl	8001668 <_exit>

080165ae <__swhatbuf_r>:
 80165ae:	b570      	push	{r4, r5, r6, lr}
 80165b0:	460c      	mov	r4, r1
 80165b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165b6:	2900      	cmp	r1, #0
 80165b8:	b096      	sub	sp, #88	; 0x58
 80165ba:	4615      	mov	r5, r2
 80165bc:	461e      	mov	r6, r3
 80165be:	da0d      	bge.n	80165dc <__swhatbuf_r+0x2e>
 80165c0:	89a3      	ldrh	r3, [r4, #12]
 80165c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80165c6:	f04f 0100 	mov.w	r1, #0
 80165ca:	bf0c      	ite	eq
 80165cc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80165d0:	2340      	movne	r3, #64	; 0x40
 80165d2:	2000      	movs	r0, #0
 80165d4:	6031      	str	r1, [r6, #0]
 80165d6:	602b      	str	r3, [r5, #0]
 80165d8:	b016      	add	sp, #88	; 0x58
 80165da:	bd70      	pop	{r4, r5, r6, pc}
 80165dc:	466a      	mov	r2, sp
 80165de:	f000 f879 	bl	80166d4 <_fstat_r>
 80165e2:	2800      	cmp	r0, #0
 80165e4:	dbec      	blt.n	80165c0 <__swhatbuf_r+0x12>
 80165e6:	9901      	ldr	r1, [sp, #4]
 80165e8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80165ec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80165f0:	4259      	negs	r1, r3
 80165f2:	4159      	adcs	r1, r3
 80165f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80165f8:	e7eb      	b.n	80165d2 <__swhatbuf_r+0x24>

080165fa <__smakebuf_r>:
 80165fa:	898b      	ldrh	r3, [r1, #12]
 80165fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80165fe:	079d      	lsls	r5, r3, #30
 8016600:	4606      	mov	r6, r0
 8016602:	460c      	mov	r4, r1
 8016604:	d507      	bpl.n	8016616 <__smakebuf_r+0x1c>
 8016606:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801660a:	6023      	str	r3, [r4, #0]
 801660c:	6123      	str	r3, [r4, #16]
 801660e:	2301      	movs	r3, #1
 8016610:	6163      	str	r3, [r4, #20]
 8016612:	b002      	add	sp, #8
 8016614:	bd70      	pop	{r4, r5, r6, pc}
 8016616:	ab01      	add	r3, sp, #4
 8016618:	466a      	mov	r2, sp
 801661a:	f7ff ffc8 	bl	80165ae <__swhatbuf_r>
 801661e:	9900      	ldr	r1, [sp, #0]
 8016620:	4605      	mov	r5, r0
 8016622:	4630      	mov	r0, r6
 8016624:	f7fe fd78 	bl	8015118 <_malloc_r>
 8016628:	b948      	cbnz	r0, 801663e <__smakebuf_r+0x44>
 801662a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801662e:	059a      	lsls	r2, r3, #22
 8016630:	d4ef      	bmi.n	8016612 <__smakebuf_r+0x18>
 8016632:	f023 0303 	bic.w	r3, r3, #3
 8016636:	f043 0302 	orr.w	r3, r3, #2
 801663a:	81a3      	strh	r3, [r4, #12]
 801663c:	e7e3      	b.n	8016606 <__smakebuf_r+0xc>
 801663e:	89a3      	ldrh	r3, [r4, #12]
 8016640:	6020      	str	r0, [r4, #0]
 8016642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016646:	81a3      	strh	r3, [r4, #12]
 8016648:	9b00      	ldr	r3, [sp, #0]
 801664a:	6163      	str	r3, [r4, #20]
 801664c:	9b01      	ldr	r3, [sp, #4]
 801664e:	6120      	str	r0, [r4, #16]
 8016650:	b15b      	cbz	r3, 801666a <__smakebuf_r+0x70>
 8016652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016656:	4630      	mov	r0, r6
 8016658:	f000 f84e 	bl	80166f8 <_isatty_r>
 801665c:	b128      	cbz	r0, 801666a <__smakebuf_r+0x70>
 801665e:	89a3      	ldrh	r3, [r4, #12]
 8016660:	f023 0303 	bic.w	r3, r3, #3
 8016664:	f043 0301 	orr.w	r3, r3, #1
 8016668:	81a3      	strh	r3, [r4, #12]
 801666a:	89a3      	ldrh	r3, [r4, #12]
 801666c:	431d      	orrs	r5, r3
 801666e:	81a5      	strh	r5, [r4, #12]
 8016670:	e7cf      	b.n	8016612 <__smakebuf_r+0x18>

08016672 <_raise_r>:
 8016672:	291f      	cmp	r1, #31
 8016674:	b538      	push	{r3, r4, r5, lr}
 8016676:	4604      	mov	r4, r0
 8016678:	460d      	mov	r5, r1
 801667a:	d904      	bls.n	8016686 <_raise_r+0x14>
 801667c:	2316      	movs	r3, #22
 801667e:	6003      	str	r3, [r0, #0]
 8016680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016684:	bd38      	pop	{r3, r4, r5, pc}
 8016686:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016688:	b112      	cbz	r2, 8016690 <_raise_r+0x1e>
 801668a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801668e:	b94b      	cbnz	r3, 80166a4 <_raise_r+0x32>
 8016690:	4620      	mov	r0, r4
 8016692:	f000 f853 	bl	801673c <_getpid_r>
 8016696:	462a      	mov	r2, r5
 8016698:	4601      	mov	r1, r0
 801669a:	4620      	mov	r0, r4
 801669c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166a0:	f000 b83a 	b.w	8016718 <_kill_r>
 80166a4:	2b01      	cmp	r3, #1
 80166a6:	d00a      	beq.n	80166be <_raise_r+0x4c>
 80166a8:	1c59      	adds	r1, r3, #1
 80166aa:	d103      	bne.n	80166b4 <_raise_r+0x42>
 80166ac:	2316      	movs	r3, #22
 80166ae:	6003      	str	r3, [r0, #0]
 80166b0:	2001      	movs	r0, #1
 80166b2:	e7e7      	b.n	8016684 <_raise_r+0x12>
 80166b4:	2400      	movs	r4, #0
 80166b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80166ba:	4628      	mov	r0, r5
 80166bc:	4798      	blx	r3
 80166be:	2000      	movs	r0, #0
 80166c0:	e7e0      	b.n	8016684 <_raise_r+0x12>
	...

080166c4 <raise>:
 80166c4:	4b02      	ldr	r3, [pc, #8]	; (80166d0 <raise+0xc>)
 80166c6:	4601      	mov	r1, r0
 80166c8:	6818      	ldr	r0, [r3, #0]
 80166ca:	f7ff bfd2 	b.w	8016672 <_raise_r>
 80166ce:	bf00      	nop
 80166d0:	2000085c 	.word	0x2000085c

080166d4 <_fstat_r>:
 80166d4:	b538      	push	{r3, r4, r5, lr}
 80166d6:	4d07      	ldr	r5, [pc, #28]	; (80166f4 <_fstat_r+0x20>)
 80166d8:	2300      	movs	r3, #0
 80166da:	4604      	mov	r4, r0
 80166dc:	4608      	mov	r0, r1
 80166de:	4611      	mov	r1, r2
 80166e0:	602b      	str	r3, [r5, #0]
 80166e2:	f7eb f810 	bl	8001706 <_fstat>
 80166e6:	1c43      	adds	r3, r0, #1
 80166e8:	d102      	bne.n	80166f0 <_fstat_r+0x1c>
 80166ea:	682b      	ldr	r3, [r5, #0]
 80166ec:	b103      	cbz	r3, 80166f0 <_fstat_r+0x1c>
 80166ee:	6023      	str	r3, [r4, #0]
 80166f0:	bd38      	pop	{r3, r4, r5, pc}
 80166f2:	bf00      	nop
 80166f4:	20011404 	.word	0x20011404

080166f8 <_isatty_r>:
 80166f8:	b538      	push	{r3, r4, r5, lr}
 80166fa:	4d06      	ldr	r5, [pc, #24]	; (8016714 <_isatty_r+0x1c>)
 80166fc:	2300      	movs	r3, #0
 80166fe:	4604      	mov	r4, r0
 8016700:	4608      	mov	r0, r1
 8016702:	602b      	str	r3, [r5, #0]
 8016704:	f7eb f80f 	bl	8001726 <_isatty>
 8016708:	1c43      	adds	r3, r0, #1
 801670a:	d102      	bne.n	8016712 <_isatty_r+0x1a>
 801670c:	682b      	ldr	r3, [r5, #0]
 801670e:	b103      	cbz	r3, 8016712 <_isatty_r+0x1a>
 8016710:	6023      	str	r3, [r4, #0]
 8016712:	bd38      	pop	{r3, r4, r5, pc}
 8016714:	20011404 	.word	0x20011404

08016718 <_kill_r>:
 8016718:	b538      	push	{r3, r4, r5, lr}
 801671a:	4d07      	ldr	r5, [pc, #28]	; (8016738 <_kill_r+0x20>)
 801671c:	2300      	movs	r3, #0
 801671e:	4604      	mov	r4, r0
 8016720:	4608      	mov	r0, r1
 8016722:	4611      	mov	r1, r2
 8016724:	602b      	str	r3, [r5, #0]
 8016726:	f7ea ff8f 	bl	8001648 <_kill>
 801672a:	1c43      	adds	r3, r0, #1
 801672c:	d102      	bne.n	8016734 <_kill_r+0x1c>
 801672e:	682b      	ldr	r3, [r5, #0]
 8016730:	b103      	cbz	r3, 8016734 <_kill_r+0x1c>
 8016732:	6023      	str	r3, [r4, #0]
 8016734:	bd38      	pop	{r3, r4, r5, pc}
 8016736:	bf00      	nop
 8016738:	20011404 	.word	0x20011404

0801673c <_getpid_r>:
 801673c:	f7ea bf7c 	b.w	8001638 <_getpid>

08016740 <_init>:
 8016740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016742:	bf00      	nop
 8016744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016746:	bc08      	pop	{r3}
 8016748:	469e      	mov	lr, r3
 801674a:	4770      	bx	lr

0801674c <_fini>:
 801674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801674e:	bf00      	nop
 8016750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016752:	bc08      	pop	{r3}
 8016754:	469e      	mov	lr, r3
 8016756:	4770      	bx	lr
